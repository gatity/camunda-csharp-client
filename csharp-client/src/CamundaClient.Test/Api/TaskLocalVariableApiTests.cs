/*
 * Camunda BPM REST API
 *
 * OpenApi Spec for Camunda BPM REST API.
 *
 * The version of the OpenAPI document: 7.14.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using CamundaClient.Client;
using CamundaClient.Api;
// uncomment below to import models
//using CamundaClient.Model;

namespace CamundaClient.Test.Api
{
    /// <summary>
    ///  Class for testing TaskLocalVariableApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class TaskLocalVariableApiTests : IDisposable
    {
        private TaskLocalVariableApi instance;

        public TaskLocalVariableApiTests()
        {
            instance = new TaskLocalVariableApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of TaskLocalVariableApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' TaskLocalVariableApi
            //Assert.IsType<TaskLocalVariableApi>(instance);
        }

        /// <summary>
        /// Test DeleteTaskLocalVariable
        /// </summary>
        [Fact]
        public void DeleteTaskLocalVariableTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string varName = null;
            //instance.DeleteTaskLocalVariable(id, varName);
        }

        /// <summary>
        /// Test GetTaskLocalVariable
        /// </summary>
        [Fact]
        public void GetTaskLocalVariableTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string varName = null;
            //bool? deserializeValue = null;
            //var response = instance.GetTaskLocalVariable(id, varName, deserializeValue);
            //Assert.IsType<VariableValueDto>(response);
        }

        /// <summary>
        /// Test GetTaskLocalVariableBinary
        /// </summary>
        [Fact]
        public void GetTaskLocalVariableBinaryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string varName = null;
            //var response = instance.GetTaskLocalVariableBinary(id, varName);
            //Assert.IsType<System.IO.Stream>(response);
        }

        /// <summary>
        /// Test GetTaskLocalVariables
        /// </summary>
        [Fact]
        public void GetTaskLocalVariablesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //bool? deserializeValues = null;
            //var response = instance.GetTaskLocalVariables(id, deserializeValues);
            //Assert.IsType<Dictionary<string, VariableValueDto>>(response);
        }

        /// <summary>
        /// Test ModifyTaskLocalVariables
        /// </summary>
        [Fact]
        public void ModifyTaskLocalVariablesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //PatchVariablesDto patchVariablesDto = null;
            //instance.ModifyTaskLocalVariables(id, patchVariablesDto);
        }

        /// <summary>
        /// Test PutTaskLocalVariable
        /// </summary>
        [Fact]
        public void PutTaskLocalVariableTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string varName = null;
            //VariableValueDto variableValueDto = null;
            //instance.PutTaskLocalVariable(id, varName, variableValueDto);
        }

        /// <summary>
        /// Test SetBinaryTaskLocalVariable
        /// </summary>
        [Fact]
        public void SetBinaryTaskLocalVariableTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string varName = null;
            //System.IO.Stream data = null;
            //string valueType = null;
            //instance.SetBinaryTaskLocalVariable(id, varName, data, valueType);
        }
    }
}
