/*
 * Camunda BPM REST API
 *
 * OpenApi Spec for Camunda BPM REST API.
 *
 * The version of the OpenAPI document: 7.14.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using CamundaClient.Client;
using CamundaClient.Api;
// uncomment below to import models
//using CamundaClient.Model;

namespace CamundaClient.Test.Api
{
    /// <summary>
    ///  Class for testing HistoricActivityInstanceApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class HistoricActivityInstanceApiTests : IDisposable
    {
        private HistoricActivityInstanceApi instance;

        public HistoricActivityInstanceApiTests()
        {
            instance = new HistoricActivityInstanceApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of HistoricActivityInstanceApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' HistoricActivityInstanceApi
            //Assert.IsType<HistoricActivityInstanceApi>(instance);
        }

        /// <summary>
        /// Test GetHistoricActivityInstance
        /// </summary>
        [Fact]
        public void GetHistoricActivityInstanceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetHistoricActivityInstance(id);
            //Assert.IsType<HistoricActivityInstanceDto>(response);
        }

        /// <summary>
        /// Test GetHistoricActivityInstances
        /// </summary>
        [Fact]
        public void GetHistoricActivityInstancesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string sortBy = null;
            //string sortOrder = null;
            //int? firstResult = null;
            //int? maxResults = null;
            //string activityInstanceId = null;
            //string processInstanceId = null;
            //string processDefinitionId = null;
            //string executionId = null;
            //string activityId = null;
            //string activityName = null;
            //string activityType = null;
            //string taskAssignee = null;
            //bool? finished = null;
            //bool? unfinished = null;
            //bool? canceled = null;
            //bool? completeScope = null;
            //DateTime? startedBefore = null;
            //DateTime? startedAfter = null;
            //DateTime? finishedBefore = null;
            //DateTime? finishedAfter = null;
            //string tenantIdIn = null;
            //bool? withoutTenantId = null;
            //var response = instance.GetHistoricActivityInstances(sortBy, sortOrder, firstResult, maxResults, activityInstanceId, processInstanceId, processDefinitionId, executionId, activityId, activityName, activityType, taskAssignee, finished, unfinished, canceled, completeScope, startedBefore, startedAfter, finishedBefore, finishedAfter, tenantIdIn, withoutTenantId);
            //Assert.IsType<List<HistoricActivityInstanceDto>>(response);
        }

        /// <summary>
        /// Test GetHistoricActivityInstancesCount
        /// </summary>
        [Fact]
        public void GetHistoricActivityInstancesCountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string activityInstanceId = null;
            //string processInstanceId = null;
            //string processDefinitionId = null;
            //string executionId = null;
            //string activityId = null;
            //string activityName = null;
            //string activityType = null;
            //string taskAssignee = null;
            //bool? finished = null;
            //bool? unfinished = null;
            //bool? canceled = null;
            //bool? completeScope = null;
            //DateTime? startedBefore = null;
            //DateTime? startedAfter = null;
            //DateTime? finishedBefore = null;
            //DateTime? finishedAfter = null;
            //string tenantIdIn = null;
            //bool? withoutTenantId = null;
            //var response = instance.GetHistoricActivityInstancesCount(activityInstanceId, processInstanceId, processDefinitionId, executionId, activityId, activityName, activityType, taskAssignee, finished, unfinished, canceled, completeScope, startedBefore, startedAfter, finishedBefore, finishedAfter, tenantIdIn, withoutTenantId);
            //Assert.IsType<CountResultDto>(response);
        }

        /// <summary>
        /// Test QueryHistoricActivityInstances
        /// </summary>
        [Fact]
        public void QueryHistoricActivityInstancesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? firstResult = null;
            //int? maxResults = null;
            //HistoricActivityInstanceQueryDto historicActivityInstanceQueryDto = null;
            //var response = instance.QueryHistoricActivityInstances(firstResult, maxResults, historicActivityInstanceQueryDto);
            //Assert.IsType<List<HistoricActivityInstanceDto>>(response);
        }

        /// <summary>
        /// Test QueryHistoricActivityInstancesCount
        /// </summary>
        [Fact]
        public void QueryHistoricActivityInstancesCountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //HistoricActivityInstanceQueryDto historicActivityInstanceQueryDto = null;
            //var response = instance.QueryHistoricActivityInstancesCount(historicActivityInstanceQueryDto);
            //Assert.IsType<CountResultDto>(response);
        }
    }
}
