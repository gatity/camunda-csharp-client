/*
 * Camunda BPM REST API
 *
 * OpenApi Spec for Camunda BPM REST API.
 *
 * The version of the OpenAPI document: 7.14.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using CamundaClient.Client;
using CamundaClient.Api;
// uncomment below to import models
//using CamundaClient.Model;

namespace CamundaClient.Test.Api
{
    /// <summary>
    ///  Class for testing EventSubscriptionApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class EventSubscriptionApiTests : IDisposable
    {
        private EventSubscriptionApi instance;

        public EventSubscriptionApiTests()
        {
            instance = new EventSubscriptionApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of EventSubscriptionApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' EventSubscriptionApi
            //Assert.IsType<EventSubscriptionApi>(instance);
        }

        /// <summary>
        /// Test GetEventSubscriptions
        /// </summary>
        [Fact]
        public void GetEventSubscriptionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string eventSubscriptionId = null;
            //string eventName = null;
            //string eventType = null;
            //string executionId = null;
            //string processInstanceId = null;
            //string activityId = null;
            //string tenantIdIn = null;
            //bool? withoutTenantId = null;
            //bool? includeEventSubscriptionsWithoutTenantId = null;
            //string sortBy = null;
            //string sortOrder = null;
            //int? firstResult = null;
            //int? maxResults = null;
            //var response = instance.GetEventSubscriptions(eventSubscriptionId, eventName, eventType, executionId, processInstanceId, activityId, tenantIdIn, withoutTenantId, includeEventSubscriptionsWithoutTenantId, sortBy, sortOrder, firstResult, maxResults);
            //Assert.IsType<List<EventSubscriptionDto>>(response);
        }

        /// <summary>
        /// Test GetEventSubscriptionsCount
        /// </summary>
        [Fact]
        public void GetEventSubscriptionsCountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string eventSubscriptionId = null;
            //string eventName = null;
            //string eventType = null;
            //string executionId = null;
            //string processInstanceId = null;
            //string activityId = null;
            //string tenantIdIn = null;
            //bool? withoutTenantId = null;
            //bool? includeEventSubscriptionsWithoutTenantId = null;
            //var response = instance.GetEventSubscriptionsCount(eventSubscriptionId, eventName, eventType, executionId, processInstanceId, activityId, tenantIdIn, withoutTenantId, includeEventSubscriptionsWithoutTenantId);
            //Assert.IsType<CountResultDto>(response);
        }
    }
}
