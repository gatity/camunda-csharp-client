/*
 * Camunda BPM REST API
 *
 * OpenApi Spec for Camunda BPM REST API.
 *
 * The version of the OpenAPI document: 7.14.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using CamundaClient.Client;
using CamundaClient.Api;
// uncomment below to import models
//using CamundaClient.Model;

namespace CamundaClient.Test.Api
{
    /// <summary>
    ///  Class for testing DeploymentApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class DeploymentApiTests : IDisposable
    {
        private DeploymentApi instance;

        public DeploymentApiTests()
        {
            instance = new DeploymentApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of DeploymentApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' DeploymentApi
            //Assert.IsType<DeploymentApi>(instance);
        }

        /// <summary>
        /// Test CreateDeployment
        /// </summary>
        [Fact]
        public void CreateDeploymentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tenantId = null;
            //string deploymentSource = null;
            //bool? deployChangedOnly = null;
            //bool? enableDuplicateFiltering = null;
            //string deploymentName = null;
            //System.IO.Stream data = null;
            //var response = instance.CreateDeployment(tenantId, deploymentSource, deployChangedOnly, enableDuplicateFiltering, deploymentName, data);
            //Assert.IsType<DeploymentWithDefinitionsDto>(response);
        }

        /// <summary>
        /// Test DeleteDeployment
        /// </summary>
        [Fact]
        public void DeleteDeploymentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //bool? cascade = null;
            //bool? skipCustomListeners = null;
            //bool? skipIoMappings = null;
            //instance.DeleteDeployment(id, cascade, skipCustomListeners, skipIoMappings);
        }

        /// <summary>
        /// Test GetDeployment
        /// </summary>
        [Fact]
        public void GetDeploymentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetDeployment(id);
            //Assert.IsType<List<DeploymentDto>>(response);
        }

        /// <summary>
        /// Test GetDeploymentResource
        /// </summary>
        [Fact]
        public void GetDeploymentResourceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string resourceId = null;
            //var response = instance.GetDeploymentResource(id, resourceId);
            //Assert.IsType<DeploymentResourceDto>(response);
        }

        /// <summary>
        /// Test GetDeploymentResourceData
        /// </summary>
        [Fact]
        public void GetDeploymentResourceDataTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string resourceId = null;
            //var response = instance.GetDeploymentResourceData(id, resourceId);
            //Assert.IsType<System.IO.Stream>(response);
        }

        /// <summary>
        /// Test GetDeploymentResources
        /// </summary>
        [Fact]
        public void GetDeploymentResourcesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetDeploymentResources(id);
            //Assert.IsType<List<DeploymentResourceDto>>(response);
        }

        /// <summary>
        /// Test GetDeployments
        /// </summary>
        [Fact]
        public void GetDeploymentsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string name = null;
            //string nameLike = null;
            //string source = null;
            //bool? withoutSource = null;
            //string tenantIdIn = null;
            //bool? withoutTenantId = null;
            //bool? includeDeploymentsWithoutTenantId = null;
            //DateTime? after = null;
            //DateTime? before = null;
            //string sortBy = null;
            //string sortOrder = null;
            //int? firstResult = null;
            //int? maxResults = null;
            //var response = instance.GetDeployments(id, name, nameLike, source, withoutSource, tenantIdIn, withoutTenantId, includeDeploymentsWithoutTenantId, after, before, sortBy, sortOrder, firstResult, maxResults);
            //Assert.IsType<List<DeploymentDto>>(response);
        }

        /// <summary>
        /// Test GetDeploymentsCount
        /// </summary>
        [Fact]
        public void GetDeploymentsCountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string name = null;
            //string nameLike = null;
            //string source = null;
            //bool? withoutSource = null;
            //string tenantIdIn = null;
            //bool? withoutTenantId = null;
            //bool? includeDeploymentsWithoutTenantId = null;
            //DateTime? after = null;
            //DateTime? before = null;
            //var response = instance.GetDeploymentsCount(id, name, nameLike, source, withoutSource, tenantIdIn, withoutTenantId, includeDeploymentsWithoutTenantId, after, before);
            //Assert.IsType<CountResultDto>(response);
        }

        /// <summary>
        /// Test Redeploy
        /// </summary>
        [Fact]
        public void RedeployTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //RedeploymentDto redeploymentDto = null;
            //var response = instance.Redeploy(id, redeploymentDto);
            //Assert.IsType<DeploymentWithDefinitionsDto>(response);
        }
    }
}
