/*
 * Camunda BPM REST API
 *
 * OpenApi Spec for Camunda BPM REST API.
 *
 * The version of the OpenAPI document: 7.14.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using CamundaClient.Client;
using CamundaClient.Api;
// uncomment below to import models
//using CamundaClient.Model;

namespace CamundaClient.Test.Api
{
    /// <summary>
    ///  Class for testing ProcessInstanceApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class ProcessInstanceApiTests : IDisposable
    {
        private ProcessInstanceApi instance;

        public ProcessInstanceApiTests()
        {
            instance = new ProcessInstanceApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of ProcessInstanceApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' ProcessInstanceApi
            //Assert.IsType<ProcessInstanceApi>(instance);
        }

        /// <summary>
        /// Test DeleteAsyncHistoricQueryBased
        /// </summary>
        [Fact]
        public void DeleteAsyncHistoricQueryBasedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DeleteProcessInstancesDto deleteProcessInstancesDto = null;
            //var response = instance.DeleteAsyncHistoricQueryBased(deleteProcessInstancesDto);
            //Assert.IsType<BatchDto>(response);
        }

        /// <summary>
        /// Test DeleteProcessInstance
        /// </summary>
        [Fact]
        public void DeleteProcessInstanceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //bool? skipCustomListeners = null;
            //bool? skipIoMappings = null;
            //bool? skipSubprocesses = null;
            //bool? failIfNotExists = null;
            //instance.DeleteProcessInstance(id, skipCustomListeners, skipIoMappings, skipSubprocesses, failIfNotExists);
        }

        /// <summary>
        /// Test DeleteProcessInstanceVariable
        /// </summary>
        [Fact]
        public void DeleteProcessInstanceVariableTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string varName = null;
            //instance.DeleteProcessInstanceVariable(id, varName);
        }

        /// <summary>
        /// Test DeleteProcessInstancesAsyncOperation
        /// </summary>
        [Fact]
        public void DeleteProcessInstancesAsyncOperationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DeleteProcessInstancesDto deleteProcessInstancesDto = null;
            //var response = instance.DeleteProcessInstancesAsyncOperation(deleteProcessInstancesDto);
            //Assert.IsType<BatchDto>(response);
        }

        /// <summary>
        /// Test GetActivityInstanceTree
        /// </summary>
        [Fact]
        public void GetActivityInstanceTreeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetActivityInstanceTree(id);
            //Assert.IsType<ActivityInstanceDto>(response);
        }

        /// <summary>
        /// Test GetProcessInstance
        /// </summary>
        [Fact]
        public void GetProcessInstanceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetProcessInstance(id);
            //Assert.IsType<ProcessInstanceDto>(response);
        }

        /// <summary>
        /// Test GetProcessInstanceVariable
        /// </summary>
        [Fact]
        public void GetProcessInstanceVariableTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string varName = null;
            //bool? deserializeValue = null;
            //var response = instance.GetProcessInstanceVariable(id, varName, deserializeValue);
            //Assert.IsType<VariableValueDto>(response);
        }

        /// <summary>
        /// Test GetProcessInstanceVariableBinary
        /// </summary>
        [Fact]
        public void GetProcessInstanceVariableBinaryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string varName = null;
            //var response = instance.GetProcessInstanceVariableBinary(id, varName);
            //Assert.IsType<System.IO.Stream>(response);
        }

        /// <summary>
        /// Test GetProcessInstanceVariables
        /// </summary>
        [Fact]
        public void GetProcessInstanceVariablesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //bool? deserializeValue = null;
            //var response = instance.GetProcessInstanceVariables(id, deserializeValue);
            //Assert.IsType<Dictionary<string, VariableValueDto>>(response);
        }

        /// <summary>
        /// Test GetProcessInstances
        /// </summary>
        [Fact]
        public void GetProcessInstancesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string sortBy = null;
            //string sortOrder = null;
            //int? firstResult = null;
            //int? maxResults = null;
            //string processInstanceIds = null;
            //string businessKey = null;
            //string businessKeyLike = null;
            //string caseInstanceId = null;
            //string processDefinitionId = null;
            //string processDefinitionKey = null;
            //string processDefinitionKeyIn = null;
            //string processDefinitionKeyNotIn = null;
            //string deploymentId = null;
            //string superProcessInstance = null;
            //string subProcessInstance = null;
            //string superCaseInstance = null;
            //string subCaseInstance = null;
            //bool? active = null;
            //bool? suspended = null;
            //bool? withIncident = null;
            //string incidentId = null;
            //string incidentType = null;
            //string incidentMessage = null;
            //string incidentMessageLike = null;
            //string tenantIdIn = null;
            //bool? withoutTenantId = null;
            //bool? processDefinitionWithoutTenantId = null;
            //string activityIdIn = null;
            //bool? rootProcessInstances = null;
            //bool? leafProcessInstances = null;
            //string variables = null;
            //bool? variableNamesIgnoreCase = null;
            //bool? variableValuesIgnoreCase = null;
            //var response = instance.GetProcessInstances(sortBy, sortOrder, firstResult, maxResults, processInstanceIds, businessKey, businessKeyLike, caseInstanceId, processDefinitionId, processDefinitionKey, processDefinitionKeyIn, processDefinitionKeyNotIn, deploymentId, superProcessInstance, subProcessInstance, superCaseInstance, subCaseInstance, active, suspended, withIncident, incidentId, incidentType, incidentMessage, incidentMessageLike, tenantIdIn, withoutTenantId, processDefinitionWithoutTenantId, activityIdIn, rootProcessInstances, leafProcessInstances, variables, variableNamesIgnoreCase, variableValuesIgnoreCase);
            //Assert.IsType<List<ProcessInstanceDto>>(response);
        }

        /// <summary>
        /// Test GetProcessInstancesCount
        /// </summary>
        [Fact]
        public void GetProcessInstancesCountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string processInstanceIds = null;
            //string businessKey = null;
            //string businessKeyLike = null;
            //string caseInstanceId = null;
            //string processDefinitionId = null;
            //string processDefinitionKey = null;
            //string processDefinitionKeyIn = null;
            //string processDefinitionKeyNotIn = null;
            //string deploymentId = null;
            //string superProcessInstance = null;
            //string subProcessInstance = null;
            //string superCaseInstance = null;
            //string subCaseInstance = null;
            //bool? active = null;
            //bool? suspended = null;
            //bool? withIncident = null;
            //string incidentId = null;
            //string incidentType = null;
            //string incidentMessage = null;
            //string incidentMessageLike = null;
            //string tenantIdIn = null;
            //bool? withoutTenantId = null;
            //bool? processDefinitionWithoutTenantId = null;
            //string activityIdIn = null;
            //bool? rootProcessInstances = null;
            //bool? leafProcessInstances = null;
            //string variables = null;
            //bool? variableNamesIgnoreCase = null;
            //bool? variableValuesIgnoreCase = null;
            //var response = instance.GetProcessInstancesCount(processInstanceIds, businessKey, businessKeyLike, caseInstanceId, processDefinitionId, processDefinitionKey, processDefinitionKeyIn, processDefinitionKeyNotIn, deploymentId, superProcessInstance, subProcessInstance, superCaseInstance, subCaseInstance, active, suspended, withIncident, incidentId, incidentType, incidentMessage, incidentMessageLike, tenantIdIn, withoutTenantId, processDefinitionWithoutTenantId, activityIdIn, rootProcessInstances, leafProcessInstances, variables, variableNamesIgnoreCase, variableValuesIgnoreCase);
            //Assert.IsType<CountResultDto>(response);
        }

        /// <summary>
        /// Test ModifyProcessInstance
        /// </summary>
        [Fact]
        public void ModifyProcessInstanceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //ProcessInstanceModificationDto processInstanceModificationDto = null;
            //instance.ModifyProcessInstance(id, processInstanceModificationDto);
        }

        /// <summary>
        /// Test ModifyProcessInstanceAsyncOperation
        /// </summary>
        [Fact]
        public void ModifyProcessInstanceAsyncOperationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //ProcessInstanceModificationDto processInstanceModificationDto = null;
            //var response = instance.ModifyProcessInstanceAsyncOperation(id, processInstanceModificationDto);
            //Assert.IsType<BatchDto>(response);
        }

        /// <summary>
        /// Test ModifyProcessInstanceVariables
        /// </summary>
        [Fact]
        public void ModifyProcessInstanceVariablesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //PatchVariablesDto patchVariablesDto = null;
            //instance.ModifyProcessInstanceVariables(id, patchVariablesDto);
        }

        /// <summary>
        /// Test QueryProcessInstances
        /// </summary>
        [Fact]
        public void QueryProcessInstancesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? firstResult = null;
            //int? maxResults = null;
            //ProcessInstanceQueryDto processInstanceQueryDto = null;
            //var response = instance.QueryProcessInstances(firstResult, maxResults, processInstanceQueryDto);
            //Assert.IsType<List<ProcessInstanceDto>>(response);
        }

        /// <summary>
        /// Test QueryProcessInstancesCount
        /// </summary>
        [Fact]
        public void QueryProcessInstancesCountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ProcessInstanceQueryDto processInstanceQueryDto = null;
            //var response = instance.QueryProcessInstancesCount(processInstanceQueryDto);
            //Assert.IsType<CountResultDto>(response);
        }

        /// <summary>
        /// Test SetProcessInstanceVariable
        /// </summary>
        [Fact]
        public void SetProcessInstanceVariableTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string varName = null;
            //VariableValueDto variableValueDto = null;
            //instance.SetProcessInstanceVariable(id, varName, variableValueDto);
        }

        /// <summary>
        /// Test SetProcessInstanceVariableBinary
        /// </summary>
        [Fact]
        public void SetProcessInstanceVariableBinaryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string varName = null;
            //System.IO.Stream data = null;
            //string valueType = null;
            //instance.SetProcessInstanceVariableBinary(id, varName, data, valueType);
        }

        /// <summary>
        /// Test SetRetriesByProcess
        /// </summary>
        [Fact]
        public void SetRetriesByProcessTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SetJobRetriesByProcessDto setJobRetriesByProcessDto = null;
            //var response = instance.SetRetriesByProcess(setJobRetriesByProcessDto);
            //Assert.IsType<BatchDto>(response);
        }

        /// <summary>
        /// Test SetRetriesByProcessHistoricQueryBased
        /// </summary>
        [Fact]
        public void SetRetriesByProcessHistoricQueryBasedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SetJobRetriesByProcessDto setJobRetriesByProcessDto = null;
            //var response = instance.SetRetriesByProcessHistoricQueryBased(setJobRetriesByProcessDto);
            //Assert.IsType<BatchDto>(response);
        }

        /// <summary>
        /// Test SetVariablesAsyncOperation
        /// </summary>
        [Fact]
        public void SetVariablesAsyncOperationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SetVariablesAsyncDto setVariablesAsyncDto = null;
            //var response = instance.SetVariablesAsyncOperation(setVariablesAsyncDto);
            //Assert.IsType<BatchDto>(response);
        }

        /// <summary>
        /// Test UpdateSuspensionState
        /// </summary>
        [Fact]
        public void UpdateSuspensionStateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ProcessInstanceSuspensionStateDto processInstanceSuspensionStateDto = null;
            //instance.UpdateSuspensionState(processInstanceSuspensionStateDto);
        }

        /// <summary>
        /// Test UpdateSuspensionStateAsyncOperation
        /// </summary>
        [Fact]
        public void UpdateSuspensionStateAsyncOperationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ProcessInstanceSuspensionStateAsyncDto processInstanceSuspensionStateAsyncDto = null;
            //var response = instance.UpdateSuspensionStateAsyncOperation(processInstanceSuspensionStateAsyncDto);
            //Assert.IsType<BatchDto>(response);
        }

        /// <summary>
        /// Test UpdateSuspensionStateById
        /// </summary>
        [Fact]
        public void UpdateSuspensionStateByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //SuspensionStateDto suspensionStateDto = null;
            //instance.UpdateSuspensionStateById(id, suspensionStateDto);
        }
    }
}
