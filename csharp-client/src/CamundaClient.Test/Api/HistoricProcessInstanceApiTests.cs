/*
 * Camunda BPM REST API
 *
 * OpenApi Spec for Camunda BPM REST API.
 *
 * The version of the OpenAPI document: 7.14.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using CamundaClient.Client;
using CamundaClient.Api;
// uncomment below to import models
//using CamundaClient.Model;

namespace CamundaClient.Test.Api
{
    /// <summary>
    ///  Class for testing HistoricProcessInstanceApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class HistoricProcessInstanceApiTests : IDisposable
    {
        private HistoricProcessInstanceApi instance;

        public HistoricProcessInstanceApiTests()
        {
            instance = new HistoricProcessInstanceApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of HistoricProcessInstanceApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' HistoricProcessInstanceApi
            //Assert.IsType<HistoricProcessInstanceApi>(instance);
        }

        /// <summary>
        /// Test DeleteHistoricProcessInstance
        /// </summary>
        [Fact]
        public void DeleteHistoricProcessInstanceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //bool? failIfNotExists = null;
            //instance.DeleteHistoricProcessInstance(id, failIfNotExists);
        }

        /// <summary>
        /// Test DeleteHistoricProcessInstancesAsync
        /// </summary>
        [Fact]
        public void DeleteHistoricProcessInstancesAsyncTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DeleteHistoricProcessInstancesDto deleteHistoricProcessInstancesDto = null;
            //var response = instance.DeleteHistoricProcessInstancesAsync(deleteHistoricProcessInstancesDto);
            //Assert.IsType<BatchDto>(response);
        }

        /// <summary>
        /// Test DeleteHistoricVariableInstancesOfHistoricProcessInstance
        /// </summary>
        [Fact]
        public void DeleteHistoricVariableInstancesOfHistoricProcessInstanceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.DeleteHistoricVariableInstancesOfHistoricProcessInstance(id);
        }

        /// <summary>
        /// Test GetHistoricProcessInstance
        /// </summary>
        [Fact]
        public void GetHistoricProcessInstanceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetHistoricProcessInstance(id);
            //Assert.IsType<HistoricProcessInstanceDto>(response);
        }

        /// <summary>
        /// Test GetHistoricProcessInstanceDurationReport
        /// </summary>
        [Fact]
        public void GetHistoricProcessInstanceDurationReportTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string reportType = null;
            //string periodUnit = null;
            //string processDefinitionIdIn = null;
            //string processDefinitionKeyIn = null;
            //DateTime? startedBefore = null;
            //DateTime? startedAfter = null;
            //var response = instance.GetHistoricProcessInstanceDurationReport(reportType, periodUnit, processDefinitionIdIn, processDefinitionKeyIn, startedBefore, startedAfter);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test GetHistoricProcessInstances
        /// </summary>
        [Fact]
        public void GetHistoricProcessInstancesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string sortBy = null;
            //string sortOrder = null;
            //int? firstResult = null;
            //int? maxResults = null;
            //string processInstanceId = null;
            //string processInstanceIds = null;
            //string processDefinitionId = null;
            //string processDefinitionKey = null;
            //string processDefinitionKeyIn = null;
            //string processDefinitionName = null;
            //string processDefinitionNameLike = null;
            //string processDefinitionKeyNotIn = null;
            //string processInstanceBusinessKey = null;
            //string processInstanceBusinessKeyLike = null;
            //bool? rootProcessInstances = null;
            //bool? finished = null;
            //bool? unfinished = null;
            //bool? withIncidents = null;
            //bool? withRootIncidents = null;
            //string incidentType = null;
            //string incidentStatus = null;
            //string incidentMessage = null;
            //string incidentMessageLike = null;
            //DateTime? startedBefore = null;
            //DateTime? startedAfter = null;
            //DateTime? finishedBefore = null;
            //DateTime? finishedAfter = null;
            //DateTime? executedActivityAfter = null;
            //DateTime? executedActivityBefore = null;
            //DateTime? executedJobAfter = null;
            //DateTime? executedJobBefore = null;
            //string startedBy = null;
            //string superProcessInstanceId = null;
            //string subProcessInstanceId = null;
            //string superCaseInstanceId = null;
            //string subCaseInstanceId = null;
            //string caseInstanceId = null;
            //string tenantIdIn = null;
            //bool? withoutTenantId = null;
            //string executedActivityIdIn = null;
            //string activeActivityIdIn = null;
            //bool? active = null;
            //bool? suspended = null;
            //bool? completed = null;
            //bool? externallyTerminated = null;
            //bool? internallyTerminated = null;
            //string variables = null;
            //bool? variableNamesIgnoreCase = null;
            //bool? variableValuesIgnoreCase = null;
            //var response = instance.GetHistoricProcessInstances(sortBy, sortOrder, firstResult, maxResults, processInstanceId, processInstanceIds, processDefinitionId, processDefinitionKey, processDefinitionKeyIn, processDefinitionName, processDefinitionNameLike, processDefinitionKeyNotIn, processInstanceBusinessKey, processInstanceBusinessKeyLike, rootProcessInstances, finished, unfinished, withIncidents, withRootIncidents, incidentType, incidentStatus, incidentMessage, incidentMessageLike, startedBefore, startedAfter, finishedBefore, finishedAfter, executedActivityAfter, executedActivityBefore, executedJobAfter, executedJobBefore, startedBy, superProcessInstanceId, subProcessInstanceId, superCaseInstanceId, subCaseInstanceId, caseInstanceId, tenantIdIn, withoutTenantId, executedActivityIdIn, activeActivityIdIn, active, suspended, completed, externallyTerminated, internallyTerminated, variables, variableNamesIgnoreCase, variableValuesIgnoreCase);
            //Assert.IsType<List<HistoricProcessInstanceDto>>(response);
        }

        /// <summary>
        /// Test GetHistoricProcessInstancesCount
        /// </summary>
        [Fact]
        public void GetHistoricProcessInstancesCountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string processInstanceId = null;
            //string processInstanceIds = null;
            //string processDefinitionId = null;
            //string processDefinitionKey = null;
            //string processDefinitionKeyIn = null;
            //string processDefinitionName = null;
            //string processDefinitionNameLike = null;
            //string processDefinitionKeyNotIn = null;
            //string processInstanceBusinessKey = null;
            //string processInstanceBusinessKeyLike = null;
            //bool? rootProcessInstances = null;
            //bool? finished = null;
            //bool? unfinished = null;
            //bool? withIncidents = null;
            //bool? withRootIncidents = null;
            //string incidentType = null;
            //string incidentStatus = null;
            //string incidentMessage = null;
            //string incidentMessageLike = null;
            //DateTime? startedBefore = null;
            //DateTime? startedAfter = null;
            //DateTime? finishedBefore = null;
            //DateTime? finishedAfter = null;
            //DateTime? executedActivityAfter = null;
            //DateTime? executedActivityBefore = null;
            //DateTime? executedJobAfter = null;
            //DateTime? executedJobBefore = null;
            //string startedBy = null;
            //string superProcessInstanceId = null;
            //string subProcessInstanceId = null;
            //string superCaseInstanceId = null;
            //string subCaseInstanceId = null;
            //string caseInstanceId = null;
            //string tenantIdIn = null;
            //bool? withoutTenantId = null;
            //string executedActivityIdIn = null;
            //string activeActivityIdIn = null;
            //bool? active = null;
            //bool? suspended = null;
            //bool? completed = null;
            //bool? externallyTerminated = null;
            //bool? internallyTerminated = null;
            //string variables = null;
            //bool? variableNamesIgnoreCase = null;
            //bool? variableValuesIgnoreCase = null;
            //var response = instance.GetHistoricProcessInstancesCount(processInstanceId, processInstanceIds, processDefinitionId, processDefinitionKey, processDefinitionKeyIn, processDefinitionName, processDefinitionNameLike, processDefinitionKeyNotIn, processInstanceBusinessKey, processInstanceBusinessKeyLike, rootProcessInstances, finished, unfinished, withIncidents, withRootIncidents, incidentType, incidentStatus, incidentMessage, incidentMessageLike, startedBefore, startedAfter, finishedBefore, finishedAfter, executedActivityAfter, executedActivityBefore, executedJobAfter, executedJobBefore, startedBy, superProcessInstanceId, subProcessInstanceId, superCaseInstanceId, subCaseInstanceId, caseInstanceId, tenantIdIn, withoutTenantId, executedActivityIdIn, activeActivityIdIn, active, suspended, completed, externallyTerminated, internallyTerminated, variables, variableNamesIgnoreCase, variableValuesIgnoreCase);
            //Assert.IsType<CountResultDto>(response);
        }

        /// <summary>
        /// Test QueryHistoricProcessInstances
        /// </summary>
        [Fact]
        public void QueryHistoricProcessInstancesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? firstResult = null;
            //int? maxResults = null;
            //HistoricProcessInstanceQueryDto historicProcessInstanceQueryDto = null;
            //var response = instance.QueryHistoricProcessInstances(firstResult, maxResults, historicProcessInstanceQueryDto);
            //Assert.IsType<List<HistoricProcessInstanceDto>>(response);
        }

        /// <summary>
        /// Test QueryHistoricProcessInstancesCount
        /// </summary>
        [Fact]
        public void QueryHistoricProcessInstancesCountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //HistoricProcessInstanceQueryDto historicProcessInstanceQueryDto = null;
            //var response = instance.QueryHistoricProcessInstancesCount(historicProcessInstanceQueryDto);
            //Assert.IsType<CountResultDto>(response);
        }

        /// <summary>
        /// Test SetRemovalTimeAsync
        /// </summary>
        [Fact]
        public void SetRemovalTimeAsyncTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SetRemovalTimeToHistoricProcessInstancesDto setRemovalTimeToHistoricProcessInstancesDto = null;
            //var response = instance.SetRemovalTimeAsync(setRemovalTimeToHistoricProcessInstancesDto);
            //Assert.IsType<BatchDto>(response);
        }
    }
}
