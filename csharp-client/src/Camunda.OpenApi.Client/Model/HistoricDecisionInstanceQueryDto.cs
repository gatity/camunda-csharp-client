/*
 * Camunda Platform REST API
 *
 * OpenApi Spec for Camunda Platform REST API.
 *
 * The version of the OpenAPI document: 7.17.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Camunda.OpenApi.Client.Client.FileParameter;
using OpenAPIDateConverter = Camunda.OpenApi.Client.Client.OpenAPIDateConverter;

namespace Camunda.OpenApi.Client.Model
{
    /// <summary>
    /// A historic decision instance query which defines a list of historic decision instances
    /// </summary>
    [DataContract(Name = "HistoricDecisionInstanceQueryDto")]
    public partial class HistoricDecisionInstanceQueryDto : IEquatable<HistoricDecisionInstanceQueryDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="HistoricDecisionInstanceQueryDto" /> class.
        /// </summary>
        /// <param name="decisionInstanceId">Filter by decision instance id..</param>
        /// <param name="decisionInstanceIdIn">Filter by decision instance ids. Must be a comma-separated list of decision instance ids..</param>
        /// <param name="decisionDefinitionId">Filter by the decision definition the instances belongs to..</param>
        /// <param name="decisionDefinitionIdIn">Filter by the decision definitions the instances belongs to. Must be a comma-separated list of decision definition ids..</param>
        /// <param name="decisionDefinitionKey">Filter by the key of the decision definition the instances belongs to..</param>
        /// <param name="decisionDefinitionKeyIn">Filter by the keys of the decision definition the instances belongs to. Must be a comma- separated list of decision definition keys..</param>
        /// <param name="decisionDefinitionName">Filter by the name of the decision definition the instances belongs to..</param>
        /// <param name="decisionDefinitionNameLike">Filter by the name of the decision definition the instances belongs to, that the parameter is a substring of..</param>
        /// <param name="processDefinitionId">Filter by the process definition the instances belongs to..</param>
        /// <param name="processDefinitionKey">Filter by the key of the process definition the instances belongs to..</param>
        /// <param name="processInstanceId">Filter by the process instance the instances belongs to..</param>
        /// <param name="caseDefinitionId">Filter by the case definition the instances belongs to..</param>
        /// <param name="caseDefinitionKey">Filter by the key of the case definition the instances belongs to..</param>
        /// <param name="caseInstanceId">Filter by the case instance the instances belongs to..</param>
        /// <param name="activityIdIn">Filter by the activity ids the instances belongs to. Must be a comma-separated list of acitvity ids..</param>
        /// <param name="activityInstanceIdIn">Filter by the activity instance ids the instances belongs to. Must be a comma-separated list of acitvity instance ids..</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. A historic decision instance must have one of the given tenant ids..</param>
        /// <param name="withoutTenantId">Only include historic decision instances that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior..</param>
        /// <param name="evaluatedBefore">Restrict to instances that were evaluated before the given date. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM- dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;..</param>
        /// <param name="evaluatedAfter">Restrict to instances that were evaluated after the given date. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM- dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;..</param>
        /// <param name="userId">Restrict to instances that were evaluated by the given user..</param>
        /// <param name="rootDecisionInstanceId">Restrict to instances that have a given root decision instance id. This also includes the decision instance with the given id..</param>
        /// <param name="rootDecisionInstancesOnly">Restrict to instances those are the root decision instance of an evaluation. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior..</param>
        /// <param name="decisionRequirementsDefinitionId">Filter by the decision requirements definition the instances belongs to..</param>
        /// <param name="decisionRequirementsDefinitionKey">Filter by the key of the decision requirements definition the instances belongs to..</param>
        /// <param name="includeInputs">Include input values in the result. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior..</param>
        /// <param name="includeOutputs">Include output values in the result. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior..</param>
        /// <param name="disableBinaryFetching">Disables fetching of byte array input and output values. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior..</param>
        /// <param name="disableCustomObjectDeserialization">Disables deserialization of input and output values that are custom objects. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior..</param>
        public HistoricDecisionInstanceQueryDto(string decisionInstanceId = default(string), List<string> decisionInstanceIdIn = default(List<string>), string decisionDefinitionId = default(string), List<string> decisionDefinitionIdIn = default(List<string>), string decisionDefinitionKey = default(string), List<string> decisionDefinitionKeyIn = default(List<string>), string decisionDefinitionName = default(string), string decisionDefinitionNameLike = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string processInstanceId = default(string), string caseDefinitionId = default(string), string caseDefinitionKey = default(string), string caseInstanceId = default(string), List<string> activityIdIn = default(List<string>), List<string> activityInstanceIdIn = default(List<string>), List<string> tenantIdIn = default(List<string>), bool? withoutTenantId = default(bool?), DateTime? evaluatedBefore = default(DateTime?), DateTime? evaluatedAfter = default(DateTime?), string userId = default(string), string rootDecisionInstanceId = default(string), bool? rootDecisionInstancesOnly = default(bool?), string decisionRequirementsDefinitionId = default(string), string decisionRequirementsDefinitionKey = default(string), bool? includeInputs = default(bool?), bool? includeOutputs = default(bool?), bool? disableBinaryFetching = default(bool?), bool? disableCustomObjectDeserialization = default(bool?))
        {
            this.DecisionInstanceId = decisionInstanceId;
            this.DecisionInstanceIdIn = decisionInstanceIdIn;
            this.DecisionDefinitionId = decisionDefinitionId;
            this.DecisionDefinitionIdIn = decisionDefinitionIdIn;
            this.DecisionDefinitionKey = decisionDefinitionKey;
            this.DecisionDefinitionKeyIn = decisionDefinitionKeyIn;
            this.DecisionDefinitionName = decisionDefinitionName;
            this.DecisionDefinitionNameLike = decisionDefinitionNameLike;
            this.ProcessDefinitionId = processDefinitionId;
            this.ProcessDefinitionKey = processDefinitionKey;
            this.ProcessInstanceId = processInstanceId;
            this.CaseDefinitionId = caseDefinitionId;
            this.CaseDefinitionKey = caseDefinitionKey;
            this.CaseInstanceId = caseInstanceId;
            this.ActivityIdIn = activityIdIn;
            this.ActivityInstanceIdIn = activityInstanceIdIn;
            this.TenantIdIn = tenantIdIn;
            this.WithoutTenantId = withoutTenantId;
            this.EvaluatedBefore = evaluatedBefore;
            this.EvaluatedAfter = evaluatedAfter;
            this.UserId = userId;
            this.RootDecisionInstanceId = rootDecisionInstanceId;
            this.RootDecisionInstancesOnly = rootDecisionInstancesOnly;
            this.DecisionRequirementsDefinitionId = decisionRequirementsDefinitionId;
            this.DecisionRequirementsDefinitionKey = decisionRequirementsDefinitionKey;
            this.IncludeInputs = includeInputs;
            this.IncludeOutputs = includeOutputs;
            this.DisableBinaryFetching = disableBinaryFetching;
            this.DisableCustomObjectDeserialization = disableCustomObjectDeserialization;
        }

        /// <summary>
        /// Filter by decision instance id.
        /// </summary>
        /// <value>Filter by decision instance id.</value>
        [DataMember(Name = "decisionInstanceId", EmitDefaultValue = true)]
        public string DecisionInstanceId { get; set; }

        /// <summary>
        /// Filter by decision instance ids. Must be a comma-separated list of decision instance ids.
        /// </summary>
        /// <value>Filter by decision instance ids. Must be a comma-separated list of decision instance ids.</value>
        [DataMember(Name = "decisionInstanceIdIn", EmitDefaultValue = true)]
        public List<string> DecisionInstanceIdIn { get; set; }

        /// <summary>
        /// Filter by the decision definition the instances belongs to.
        /// </summary>
        /// <value>Filter by the decision definition the instances belongs to.</value>
        [DataMember(Name = "decisionDefinitionId", EmitDefaultValue = true)]
        public string DecisionDefinitionId { get; set; }

        /// <summary>
        /// Filter by the decision definitions the instances belongs to. Must be a comma-separated list of decision definition ids.
        /// </summary>
        /// <value>Filter by the decision definitions the instances belongs to. Must be a comma-separated list of decision definition ids.</value>
        [DataMember(Name = "decisionDefinitionIdIn", EmitDefaultValue = true)]
        public List<string> DecisionDefinitionIdIn { get; set; }

        /// <summary>
        /// Filter by the key of the decision definition the instances belongs to.
        /// </summary>
        /// <value>Filter by the key of the decision definition the instances belongs to.</value>
        [DataMember(Name = "decisionDefinitionKey", EmitDefaultValue = true)]
        public string DecisionDefinitionKey { get; set; }

        /// <summary>
        /// Filter by the keys of the decision definition the instances belongs to. Must be a comma- separated list of decision definition keys.
        /// </summary>
        /// <value>Filter by the keys of the decision definition the instances belongs to. Must be a comma- separated list of decision definition keys.</value>
        [DataMember(Name = "decisionDefinitionKeyIn", EmitDefaultValue = true)]
        public List<string> DecisionDefinitionKeyIn { get; set; }

        /// <summary>
        /// Filter by the name of the decision definition the instances belongs to.
        /// </summary>
        /// <value>Filter by the name of the decision definition the instances belongs to.</value>
        [DataMember(Name = "decisionDefinitionName", EmitDefaultValue = true)]
        public string DecisionDefinitionName { get; set; }

        /// <summary>
        /// Filter by the name of the decision definition the instances belongs to, that the parameter is a substring of.
        /// </summary>
        /// <value>Filter by the name of the decision definition the instances belongs to, that the parameter is a substring of.</value>
        [DataMember(Name = "decisionDefinitionNameLike", EmitDefaultValue = true)]
        public string DecisionDefinitionNameLike { get; set; }

        /// <summary>
        /// Filter by the process definition the instances belongs to.
        /// </summary>
        /// <value>Filter by the process definition the instances belongs to.</value>
        [DataMember(Name = "processDefinitionId", EmitDefaultValue = true)]
        public string ProcessDefinitionId { get; set; }

        /// <summary>
        /// Filter by the key of the process definition the instances belongs to.
        /// </summary>
        /// <value>Filter by the key of the process definition the instances belongs to.</value>
        [DataMember(Name = "processDefinitionKey", EmitDefaultValue = true)]
        public string ProcessDefinitionKey { get; set; }

        /// <summary>
        /// Filter by the process instance the instances belongs to.
        /// </summary>
        /// <value>Filter by the process instance the instances belongs to.</value>
        [DataMember(Name = "processInstanceId", EmitDefaultValue = true)]
        public string ProcessInstanceId { get; set; }

        /// <summary>
        /// Filter by the case definition the instances belongs to.
        /// </summary>
        /// <value>Filter by the case definition the instances belongs to.</value>
        [DataMember(Name = "caseDefinitionId", EmitDefaultValue = true)]
        public string CaseDefinitionId { get; set; }

        /// <summary>
        /// Filter by the key of the case definition the instances belongs to.
        /// </summary>
        /// <value>Filter by the key of the case definition the instances belongs to.</value>
        [DataMember(Name = "caseDefinitionKey", EmitDefaultValue = true)]
        public string CaseDefinitionKey { get; set; }

        /// <summary>
        /// Filter by the case instance the instances belongs to.
        /// </summary>
        /// <value>Filter by the case instance the instances belongs to.</value>
        [DataMember(Name = "caseInstanceId", EmitDefaultValue = true)]
        public string CaseInstanceId { get; set; }

        /// <summary>
        /// Filter by the activity ids the instances belongs to. Must be a comma-separated list of acitvity ids.
        /// </summary>
        /// <value>Filter by the activity ids the instances belongs to. Must be a comma-separated list of acitvity ids.</value>
        [DataMember(Name = "activityIdIn", EmitDefaultValue = true)]
        public List<string> ActivityIdIn { get; set; }

        /// <summary>
        /// Filter by the activity instance ids the instances belongs to. Must be a comma-separated list of acitvity instance ids.
        /// </summary>
        /// <value>Filter by the activity instance ids the instances belongs to. Must be a comma-separated list of acitvity instance ids.</value>
        [DataMember(Name = "activityInstanceIdIn", EmitDefaultValue = true)]
        public List<string> ActivityInstanceIdIn { get; set; }

        /// <summary>
        /// Filter by a comma-separated list of tenant ids. A historic decision instance must have one of the given tenant ids.
        /// </summary>
        /// <value>Filter by a comma-separated list of tenant ids. A historic decision instance must have one of the given tenant ids.</value>
        [DataMember(Name = "tenantIdIn", EmitDefaultValue = true)]
        public List<string> TenantIdIn { get; set; }

        /// <summary>
        /// Only include historic decision instances that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
        /// </summary>
        /// <value>Only include historic decision instances that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.</value>
        [DataMember(Name = "withoutTenantId", EmitDefaultValue = true)]
        public bool? WithoutTenantId { get; set; }

        /// <summary>
        /// Restrict to instances that were evaluated before the given date. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM- dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
        /// </summary>
        /// <value>Restrict to instances that were evaluated before the given date. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM- dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.</value>
        [DataMember(Name = "evaluatedBefore", EmitDefaultValue = true)]
        public DateTime? EvaluatedBefore { get; set; }

        /// <summary>
        /// Restrict to instances that were evaluated after the given date. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM- dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
        /// </summary>
        /// <value>Restrict to instances that were evaluated after the given date. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM- dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.</value>
        [DataMember(Name = "evaluatedAfter", EmitDefaultValue = true)]
        public DateTime? EvaluatedAfter { get; set; }

        /// <summary>
        /// Restrict to instances that were evaluated by the given user.
        /// </summary>
        /// <value>Restrict to instances that were evaluated by the given user.</value>
        [DataMember(Name = "userId", EmitDefaultValue = true)]
        public string UserId { get; set; }

        /// <summary>
        /// Restrict to instances that have a given root decision instance id. This also includes the decision instance with the given id.
        /// </summary>
        /// <value>Restrict to instances that have a given root decision instance id. This also includes the decision instance with the given id.</value>
        [DataMember(Name = "rootDecisionInstanceId", EmitDefaultValue = true)]
        public string RootDecisionInstanceId { get; set; }

        /// <summary>
        /// Restrict to instances those are the root decision instance of an evaluation. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
        /// </summary>
        /// <value>Restrict to instances those are the root decision instance of an evaluation. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.</value>
        [DataMember(Name = "rootDecisionInstancesOnly", EmitDefaultValue = true)]
        public bool? RootDecisionInstancesOnly { get; set; }

        /// <summary>
        /// Filter by the decision requirements definition the instances belongs to.
        /// </summary>
        /// <value>Filter by the decision requirements definition the instances belongs to.</value>
        [DataMember(Name = "decisionRequirementsDefinitionId", EmitDefaultValue = true)]
        public string DecisionRequirementsDefinitionId { get; set; }

        /// <summary>
        /// Filter by the key of the decision requirements definition the instances belongs to.
        /// </summary>
        /// <value>Filter by the key of the decision requirements definition the instances belongs to.</value>
        [DataMember(Name = "decisionRequirementsDefinitionKey", EmitDefaultValue = true)]
        public string DecisionRequirementsDefinitionKey { get; set; }

        /// <summary>
        /// Include input values in the result. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
        /// </summary>
        /// <value>Include input values in the result. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.</value>
        [DataMember(Name = "includeInputs", EmitDefaultValue = true)]
        public bool? IncludeInputs { get; set; }

        /// <summary>
        /// Include output values in the result. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
        /// </summary>
        /// <value>Include output values in the result. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.</value>
        [DataMember(Name = "includeOutputs", EmitDefaultValue = true)]
        public bool? IncludeOutputs { get; set; }

        /// <summary>
        /// Disables fetching of byte array input and output values. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
        /// </summary>
        /// <value>Disables fetching of byte array input and output values. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.</value>
        [DataMember(Name = "disableBinaryFetching", EmitDefaultValue = true)]
        public bool? DisableBinaryFetching { get; set; }

        /// <summary>
        /// Disables deserialization of input and output values that are custom objects. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
        /// </summary>
        /// <value>Disables deserialization of input and output values that are custom objects. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.</value>
        [DataMember(Name = "disableCustomObjectDeserialization", EmitDefaultValue = true)]
        public bool? DisableCustomObjectDeserialization { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class HistoricDecisionInstanceQueryDto {\n");
            sb.Append("  DecisionInstanceId: ").Append(DecisionInstanceId).Append("\n");
            sb.Append("  DecisionInstanceIdIn: ").Append(DecisionInstanceIdIn).Append("\n");
            sb.Append("  DecisionDefinitionId: ").Append(DecisionDefinitionId).Append("\n");
            sb.Append("  DecisionDefinitionIdIn: ").Append(DecisionDefinitionIdIn).Append("\n");
            sb.Append("  DecisionDefinitionKey: ").Append(DecisionDefinitionKey).Append("\n");
            sb.Append("  DecisionDefinitionKeyIn: ").Append(DecisionDefinitionKeyIn).Append("\n");
            sb.Append("  DecisionDefinitionName: ").Append(DecisionDefinitionName).Append("\n");
            sb.Append("  DecisionDefinitionNameLike: ").Append(DecisionDefinitionNameLike).Append("\n");
            sb.Append("  ProcessDefinitionId: ").Append(ProcessDefinitionId).Append("\n");
            sb.Append("  ProcessDefinitionKey: ").Append(ProcessDefinitionKey).Append("\n");
            sb.Append("  ProcessInstanceId: ").Append(ProcessInstanceId).Append("\n");
            sb.Append("  CaseDefinitionId: ").Append(CaseDefinitionId).Append("\n");
            sb.Append("  CaseDefinitionKey: ").Append(CaseDefinitionKey).Append("\n");
            sb.Append("  CaseInstanceId: ").Append(CaseInstanceId).Append("\n");
            sb.Append("  ActivityIdIn: ").Append(ActivityIdIn).Append("\n");
            sb.Append("  ActivityInstanceIdIn: ").Append(ActivityInstanceIdIn).Append("\n");
            sb.Append("  TenantIdIn: ").Append(TenantIdIn).Append("\n");
            sb.Append("  WithoutTenantId: ").Append(WithoutTenantId).Append("\n");
            sb.Append("  EvaluatedBefore: ").Append(EvaluatedBefore).Append("\n");
            sb.Append("  EvaluatedAfter: ").Append(EvaluatedAfter).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  RootDecisionInstanceId: ").Append(RootDecisionInstanceId).Append("\n");
            sb.Append("  RootDecisionInstancesOnly: ").Append(RootDecisionInstancesOnly).Append("\n");
            sb.Append("  DecisionRequirementsDefinitionId: ").Append(DecisionRequirementsDefinitionId).Append("\n");
            sb.Append("  DecisionRequirementsDefinitionKey: ").Append(DecisionRequirementsDefinitionKey).Append("\n");
            sb.Append("  IncludeInputs: ").Append(IncludeInputs).Append("\n");
            sb.Append("  IncludeOutputs: ").Append(IncludeOutputs).Append("\n");
            sb.Append("  DisableBinaryFetching: ").Append(DisableBinaryFetching).Append("\n");
            sb.Append("  DisableCustomObjectDeserialization: ").Append(DisableCustomObjectDeserialization).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as HistoricDecisionInstanceQueryDto);
        }

        /// <summary>
        /// Returns true if HistoricDecisionInstanceQueryDto instances are equal
        /// </summary>
        /// <param name="input">Instance of HistoricDecisionInstanceQueryDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(HistoricDecisionInstanceQueryDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DecisionInstanceId == input.DecisionInstanceId ||
                    (this.DecisionInstanceId != null &&
                    this.DecisionInstanceId.Equals(input.DecisionInstanceId))
                ) && 
                (
                    this.DecisionInstanceIdIn == input.DecisionInstanceIdIn ||
                    this.DecisionInstanceIdIn != null &&
                    input.DecisionInstanceIdIn != null &&
                    this.DecisionInstanceIdIn.SequenceEqual(input.DecisionInstanceIdIn)
                ) && 
                (
                    this.DecisionDefinitionId == input.DecisionDefinitionId ||
                    (this.DecisionDefinitionId != null &&
                    this.DecisionDefinitionId.Equals(input.DecisionDefinitionId))
                ) && 
                (
                    this.DecisionDefinitionIdIn == input.DecisionDefinitionIdIn ||
                    this.DecisionDefinitionIdIn != null &&
                    input.DecisionDefinitionIdIn != null &&
                    this.DecisionDefinitionIdIn.SequenceEqual(input.DecisionDefinitionIdIn)
                ) && 
                (
                    this.DecisionDefinitionKey == input.DecisionDefinitionKey ||
                    (this.DecisionDefinitionKey != null &&
                    this.DecisionDefinitionKey.Equals(input.DecisionDefinitionKey))
                ) && 
                (
                    this.DecisionDefinitionKeyIn == input.DecisionDefinitionKeyIn ||
                    this.DecisionDefinitionKeyIn != null &&
                    input.DecisionDefinitionKeyIn != null &&
                    this.DecisionDefinitionKeyIn.SequenceEqual(input.DecisionDefinitionKeyIn)
                ) && 
                (
                    this.DecisionDefinitionName == input.DecisionDefinitionName ||
                    (this.DecisionDefinitionName != null &&
                    this.DecisionDefinitionName.Equals(input.DecisionDefinitionName))
                ) && 
                (
                    this.DecisionDefinitionNameLike == input.DecisionDefinitionNameLike ||
                    (this.DecisionDefinitionNameLike != null &&
                    this.DecisionDefinitionNameLike.Equals(input.DecisionDefinitionNameLike))
                ) && 
                (
                    this.ProcessDefinitionId == input.ProcessDefinitionId ||
                    (this.ProcessDefinitionId != null &&
                    this.ProcessDefinitionId.Equals(input.ProcessDefinitionId))
                ) && 
                (
                    this.ProcessDefinitionKey == input.ProcessDefinitionKey ||
                    (this.ProcessDefinitionKey != null &&
                    this.ProcessDefinitionKey.Equals(input.ProcessDefinitionKey))
                ) && 
                (
                    this.ProcessInstanceId == input.ProcessInstanceId ||
                    (this.ProcessInstanceId != null &&
                    this.ProcessInstanceId.Equals(input.ProcessInstanceId))
                ) && 
                (
                    this.CaseDefinitionId == input.CaseDefinitionId ||
                    (this.CaseDefinitionId != null &&
                    this.CaseDefinitionId.Equals(input.CaseDefinitionId))
                ) && 
                (
                    this.CaseDefinitionKey == input.CaseDefinitionKey ||
                    (this.CaseDefinitionKey != null &&
                    this.CaseDefinitionKey.Equals(input.CaseDefinitionKey))
                ) && 
                (
                    this.CaseInstanceId == input.CaseInstanceId ||
                    (this.CaseInstanceId != null &&
                    this.CaseInstanceId.Equals(input.CaseInstanceId))
                ) && 
                (
                    this.ActivityIdIn == input.ActivityIdIn ||
                    this.ActivityIdIn != null &&
                    input.ActivityIdIn != null &&
                    this.ActivityIdIn.SequenceEqual(input.ActivityIdIn)
                ) && 
                (
                    this.ActivityInstanceIdIn == input.ActivityInstanceIdIn ||
                    this.ActivityInstanceIdIn != null &&
                    input.ActivityInstanceIdIn != null &&
                    this.ActivityInstanceIdIn.SequenceEqual(input.ActivityInstanceIdIn)
                ) && 
                (
                    this.TenantIdIn == input.TenantIdIn ||
                    this.TenantIdIn != null &&
                    input.TenantIdIn != null &&
                    this.TenantIdIn.SequenceEqual(input.TenantIdIn)
                ) && 
                (
                    this.WithoutTenantId == input.WithoutTenantId ||
                    (this.WithoutTenantId != null &&
                    this.WithoutTenantId.Equals(input.WithoutTenantId))
                ) && 
                (
                    this.EvaluatedBefore == input.EvaluatedBefore ||
                    (this.EvaluatedBefore != null &&
                    this.EvaluatedBefore.Equals(input.EvaluatedBefore))
                ) && 
                (
                    this.EvaluatedAfter == input.EvaluatedAfter ||
                    (this.EvaluatedAfter != null &&
                    this.EvaluatedAfter.Equals(input.EvaluatedAfter))
                ) && 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                ) && 
                (
                    this.RootDecisionInstanceId == input.RootDecisionInstanceId ||
                    (this.RootDecisionInstanceId != null &&
                    this.RootDecisionInstanceId.Equals(input.RootDecisionInstanceId))
                ) && 
                (
                    this.RootDecisionInstancesOnly == input.RootDecisionInstancesOnly ||
                    (this.RootDecisionInstancesOnly != null &&
                    this.RootDecisionInstancesOnly.Equals(input.RootDecisionInstancesOnly))
                ) && 
                (
                    this.DecisionRequirementsDefinitionId == input.DecisionRequirementsDefinitionId ||
                    (this.DecisionRequirementsDefinitionId != null &&
                    this.DecisionRequirementsDefinitionId.Equals(input.DecisionRequirementsDefinitionId))
                ) && 
                (
                    this.DecisionRequirementsDefinitionKey == input.DecisionRequirementsDefinitionKey ||
                    (this.DecisionRequirementsDefinitionKey != null &&
                    this.DecisionRequirementsDefinitionKey.Equals(input.DecisionRequirementsDefinitionKey))
                ) && 
                (
                    this.IncludeInputs == input.IncludeInputs ||
                    (this.IncludeInputs != null &&
                    this.IncludeInputs.Equals(input.IncludeInputs))
                ) && 
                (
                    this.IncludeOutputs == input.IncludeOutputs ||
                    (this.IncludeOutputs != null &&
                    this.IncludeOutputs.Equals(input.IncludeOutputs))
                ) && 
                (
                    this.DisableBinaryFetching == input.DisableBinaryFetching ||
                    (this.DisableBinaryFetching != null &&
                    this.DisableBinaryFetching.Equals(input.DisableBinaryFetching))
                ) && 
                (
                    this.DisableCustomObjectDeserialization == input.DisableCustomObjectDeserialization ||
                    (this.DisableCustomObjectDeserialization != null &&
                    this.DisableCustomObjectDeserialization.Equals(input.DisableCustomObjectDeserialization))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DecisionInstanceId != null)
                    hashCode = hashCode * 59 + this.DecisionInstanceId.GetHashCode();
                if (this.DecisionInstanceIdIn != null)
                    hashCode = hashCode * 59 + this.DecisionInstanceIdIn.GetHashCode();
                if (this.DecisionDefinitionId != null)
                    hashCode = hashCode * 59 + this.DecisionDefinitionId.GetHashCode();
                if (this.DecisionDefinitionIdIn != null)
                    hashCode = hashCode * 59 + this.DecisionDefinitionIdIn.GetHashCode();
                if (this.DecisionDefinitionKey != null)
                    hashCode = hashCode * 59 + this.DecisionDefinitionKey.GetHashCode();
                if (this.DecisionDefinitionKeyIn != null)
                    hashCode = hashCode * 59 + this.DecisionDefinitionKeyIn.GetHashCode();
                if (this.DecisionDefinitionName != null)
                    hashCode = hashCode * 59 + this.DecisionDefinitionName.GetHashCode();
                if (this.DecisionDefinitionNameLike != null)
                    hashCode = hashCode * 59 + this.DecisionDefinitionNameLike.GetHashCode();
                if (this.ProcessDefinitionId != null)
                    hashCode = hashCode * 59 + this.ProcessDefinitionId.GetHashCode();
                if (this.ProcessDefinitionKey != null)
                    hashCode = hashCode * 59 + this.ProcessDefinitionKey.GetHashCode();
                if (this.ProcessInstanceId != null)
                    hashCode = hashCode * 59 + this.ProcessInstanceId.GetHashCode();
                if (this.CaseDefinitionId != null)
                    hashCode = hashCode * 59 + this.CaseDefinitionId.GetHashCode();
                if (this.CaseDefinitionKey != null)
                    hashCode = hashCode * 59 + this.CaseDefinitionKey.GetHashCode();
                if (this.CaseInstanceId != null)
                    hashCode = hashCode * 59 + this.CaseInstanceId.GetHashCode();
                if (this.ActivityIdIn != null)
                    hashCode = hashCode * 59 + this.ActivityIdIn.GetHashCode();
                if (this.ActivityInstanceIdIn != null)
                    hashCode = hashCode * 59 + this.ActivityInstanceIdIn.GetHashCode();
                if (this.TenantIdIn != null)
                    hashCode = hashCode * 59 + this.TenantIdIn.GetHashCode();
                if (this.WithoutTenantId != null)
                    hashCode = hashCode * 59 + this.WithoutTenantId.GetHashCode();
                if (this.EvaluatedBefore != null)
                    hashCode = hashCode * 59 + this.EvaluatedBefore.GetHashCode();
                if (this.EvaluatedAfter != null)
                    hashCode = hashCode * 59 + this.EvaluatedAfter.GetHashCode();
                if (this.UserId != null)
                    hashCode = hashCode * 59 + this.UserId.GetHashCode();
                if (this.RootDecisionInstanceId != null)
                    hashCode = hashCode * 59 + this.RootDecisionInstanceId.GetHashCode();
                if (this.RootDecisionInstancesOnly != null)
                    hashCode = hashCode * 59 + this.RootDecisionInstancesOnly.GetHashCode();
                if (this.DecisionRequirementsDefinitionId != null)
                    hashCode = hashCode * 59 + this.DecisionRequirementsDefinitionId.GetHashCode();
                if (this.DecisionRequirementsDefinitionKey != null)
                    hashCode = hashCode * 59 + this.DecisionRequirementsDefinitionKey.GetHashCode();
                if (this.IncludeInputs != null)
                    hashCode = hashCode * 59 + this.IncludeInputs.GetHashCode();
                if (this.IncludeOutputs != null)
                    hashCode = hashCode * 59 + this.IncludeOutputs.GetHashCode();
                if (this.DisableBinaryFetching != null)
                    hashCode = hashCode * 59 + this.DisableBinaryFetching.GetHashCode();
                if (this.DisableCustomObjectDeserialization != null)
                    hashCode = hashCode * 59 + this.DisableCustomObjectDeserialization.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
