/*
 * Camunda Platform REST API
 *
 * OpenApi Spec for Camunda Platform REST API.
 *
 * The version of the OpenAPI document: 7.17.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Camunda.OpenApi.Client.Client.FileParameter;
using OpenAPIDateConverter = Camunda.OpenApi.Client.Client.OpenAPIDateConverter;

namespace Camunda.OpenApi.Client.Model
{
    /// <summary>
    /// AbstractVendorVersionInformationDto
    /// </summary>
    [DataContract(Name = "AbstractVendorVersionInformationDto")]
    public partial class AbstractVendorVersionInformationDto : IEquatable<AbstractVendorVersionInformationDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AbstractVendorVersionInformationDto" /> class.
        /// </summary>
        /// <param name="vendor">Information about the vendor..</param>
        /// <param name="version">Information about the version..</param>
        public AbstractVendorVersionInformationDto(string vendor = default(string), string version = default(string))
        {
            this.Vendor = vendor;
            this._Version = version;
        }

        /// <summary>
        /// Information about the vendor.
        /// </summary>
        /// <value>Information about the vendor.</value>
        [DataMember(Name = "vendor", EmitDefaultValue = true)]
        public string Vendor { get; set; }

        /// <summary>
        /// Information about the version.
        /// </summary>
        /// <value>Information about the version.</value>
        [DataMember(Name = "version", EmitDefaultValue = true)]
        public string _Version { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AbstractVendorVersionInformationDto {\n");
            sb.Append("  Vendor: ").Append(Vendor).Append("\n");
            sb.Append("  _Version: ").Append(_Version).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AbstractVendorVersionInformationDto);
        }

        /// <summary>
        /// Returns true if AbstractVendorVersionInformationDto instances are equal
        /// </summary>
        /// <param name="input">Instance of AbstractVendorVersionInformationDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AbstractVendorVersionInformationDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Vendor == input.Vendor ||
                    (this.Vendor != null &&
                    this.Vendor.Equals(input.Vendor))
                ) && 
                (
                    this._Version == input._Version ||
                    (this._Version != null &&
                    this._Version.Equals(input._Version))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Vendor != null)
                    hashCode = hashCode * 59 + this.Vendor.GetHashCode();
                if (this._Version != null)
                    hashCode = hashCode * 59 + this._Version.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
