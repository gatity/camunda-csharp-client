/*
 * Camunda Platform REST API
 *
 * OpenApi Spec for Camunda Platform REST API.
 *
 * The version of the OpenAPI document: 7.17.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Camunda.OpenApi.Client.Client.FileParameter;
using OpenAPIDateConverter = Camunda.OpenApi.Client.Client.OpenAPIDateConverter;

namespace Camunda.OpenApi.Client.Model
{
    /// <summary>
    /// CamundaFormRef
    /// </summary>
    [DataContract(Name = "CamundaFormRef")]
    public partial class CamundaFormRef : IEquatable<CamundaFormRef>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CamundaFormRef" /> class.
        /// </summary>
        /// <param name="key">The key of the Camunda Form..</param>
        /// <param name="binding">The binding of the Camunda Form. Can be &#x60;latest&#x60;, &#x60;deployment&#x60; or &#x60;version&#x60;..</param>
        /// <param name="version">The specific version of a Camunda Form. This property is only set if &#x60;binding&#x60; is &#x60;version&#x60;..</param>
        public CamundaFormRef(string key = default(string), string binding = default(string), int? version = default(int?))
        {
            this.Key = key;
            this.Binding = binding;
            this._Version = version;
        }

        /// <summary>
        /// The key of the Camunda Form.
        /// </summary>
        /// <value>The key of the Camunda Form.</value>
        [DataMember(Name = "key", EmitDefaultValue = true)]
        public string Key { get; set; }

        /// <summary>
        /// The binding of the Camunda Form. Can be &#x60;latest&#x60;, &#x60;deployment&#x60; or &#x60;version&#x60;.
        /// </summary>
        /// <value>The binding of the Camunda Form. Can be &#x60;latest&#x60;, &#x60;deployment&#x60; or &#x60;version&#x60;.</value>
        [DataMember(Name = "binding", EmitDefaultValue = true)]
        public string Binding { get; set; }

        /// <summary>
        /// The specific version of a Camunda Form. This property is only set if &#x60;binding&#x60; is &#x60;version&#x60;.
        /// </summary>
        /// <value>The specific version of a Camunda Form. This property is only set if &#x60;binding&#x60; is &#x60;version&#x60;.</value>
        [DataMember(Name = "version", EmitDefaultValue = true)]
        public int? _Version { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CamundaFormRef {\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  Binding: ").Append(Binding).Append("\n");
            sb.Append("  _Version: ").Append(_Version).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CamundaFormRef);
        }

        /// <summary>
        /// Returns true if CamundaFormRef instances are equal
        /// </summary>
        /// <param name="input">Instance of CamundaFormRef to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CamundaFormRef input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Key == input.Key ||
                    (this.Key != null &&
                    this.Key.Equals(input.Key))
                ) && 
                (
                    this.Binding == input.Binding ||
                    (this.Binding != null &&
                    this.Binding.Equals(input.Binding))
                ) && 
                (
                    this._Version == input._Version ||
                    (this._Version != null &&
                    this._Version.Equals(input._Version))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Key != null)
                    hashCode = hashCode * 59 + this.Key.GetHashCode();
                if (this.Binding != null)
                    hashCode = hashCode * 59 + this.Binding.GetHashCode();
                if (this._Version != null)
                    hashCode = hashCode * 59 + this._Version.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
