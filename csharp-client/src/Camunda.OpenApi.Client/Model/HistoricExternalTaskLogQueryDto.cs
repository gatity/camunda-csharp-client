/*
 * Camunda Platform REST API
 *
 * OpenApi Spec for Camunda Platform REST API.
 *
 * The version of the OpenAPI document: 7.16.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Camunda.OpenApi.Client.Client.FileParameter;
using OpenAPIDateConverter = Camunda.OpenApi.Client.Client.OpenAPIDateConverter;

namespace Camunda.OpenApi.Client.Model
{
    /// <summary>
    /// A Historic External Task Log instance query which defines a list of Historic External Task Log instances
    /// </summary>
    [DataContract(Name = "HistoricExternalTaskLogQueryDto")]
    public partial class HistoricExternalTaskLogQueryDto : IEquatable<HistoricExternalTaskLogQueryDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="HistoricExternalTaskLogQueryDto" /> class.
        /// </summary>
        /// <param name="logId">Filter by historic external task log id..</param>
        /// <param name="externalTaskId">Filter by external task id..</param>
        /// <param name="topicName">Filter by an external task topic..</param>
        /// <param name="workerId">Filter by the id of the worker that the task was most recently locked by..</param>
        /// <param name="errorMessage">Filter by external task exception message..</param>
        /// <param name="activityIdIn">Only include historic external task logs which belong to one of the passed activity ids..</param>
        /// <param name="activityInstanceIdIn">Only include historic external task logs which belong to one of the passed activity instance ids..</param>
        /// <param name="executionIdIn">Only include historic external task logs which belong to one of the passed execution ids..</param>
        /// <param name="processInstanceId">Filter by process instance id..</param>
        /// <param name="processDefinitionId">Filter by process definition id..</param>
        /// <param name="processDefinitionKey">Filter by process definition key..</param>
        /// <param name="tenantIdIn">Only include historic external task log entries which belong to one of the passed and comma-separated tenant ids..</param>
        /// <param name="withoutTenantId">Only include historic external task log entries that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior..</param>
        /// <param name="priorityLowerThanOrEquals">Only include logs for which the associated external task had a priority lower than or equal to the given value. Value must be a valid &#x60;long&#x60; value..</param>
        /// <param name="priorityHigherThanOrEquals">Only include logs for which the associated external task had a priority higher than or equal to the given value. Value must be a valid &#x60;long&#x60; value..</param>
        /// <param name="creationLog">Only include creation logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior..</param>
        /// <param name="failureLog">Only include failure logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior..</param>
        /// <param name="successLog">Only include success logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior..</param>
        /// <param name="deletionLog">Only include deletion logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior..</param>
        /// <param name="sorting">An array of criteria to sort the result by. Each element of the array is                        an object that specifies one ordering. The position in the array                        identifies the rank of an ordering, i.e., whether it is primary, secondary,                        etc. Sorting has no effect for &#x60;count&#x60; endpoints..</param>
        public HistoricExternalTaskLogQueryDto(string logId = default(string), string externalTaskId = default(string), string topicName = default(string), string workerId = default(string), string errorMessage = default(string), List<string> activityIdIn = default(List<string>), List<string> activityInstanceIdIn = default(List<string>), List<string> executionIdIn = default(List<string>), string processInstanceId = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), List<string> tenantIdIn = default(List<string>), bool? withoutTenantId = default(bool?), long? priorityLowerThanOrEquals = default(long?), long? priorityHigherThanOrEquals = default(long?), bool? creationLog = default(bool?), bool? failureLog = default(bool?), bool? successLog = default(bool?), bool? deletionLog = default(bool?), List<HistoricExternalTaskLogQueryDtoSorting> sorting = default(List<HistoricExternalTaskLogQueryDtoSorting>))
        {
            this.LogId = logId;
            this.ExternalTaskId = externalTaskId;
            this.TopicName = topicName;
            this.WorkerId = workerId;
            this.ErrorMessage = errorMessage;
            this.ActivityIdIn = activityIdIn;
            this.ActivityInstanceIdIn = activityInstanceIdIn;
            this.ExecutionIdIn = executionIdIn;
            this.ProcessInstanceId = processInstanceId;
            this.ProcessDefinitionId = processDefinitionId;
            this.ProcessDefinitionKey = processDefinitionKey;
            this.TenantIdIn = tenantIdIn;
            this.WithoutTenantId = withoutTenantId;
            this.PriorityLowerThanOrEquals = priorityLowerThanOrEquals;
            this.PriorityHigherThanOrEquals = priorityHigherThanOrEquals;
            this.CreationLog = creationLog;
            this.FailureLog = failureLog;
            this.SuccessLog = successLog;
            this.DeletionLog = deletionLog;
            this.Sorting = sorting;
        }

        /// <summary>
        /// Filter by historic external task log id.
        /// </summary>
        /// <value>Filter by historic external task log id.</value>
        [DataMember(Name = "logId", EmitDefaultValue = true)]
        public string LogId { get; set; }

        /// <summary>
        /// Filter by external task id.
        /// </summary>
        /// <value>Filter by external task id.</value>
        [DataMember(Name = "externalTaskId", EmitDefaultValue = true)]
        public string ExternalTaskId { get; set; }

        /// <summary>
        /// Filter by an external task topic.
        /// </summary>
        /// <value>Filter by an external task topic.</value>
        [DataMember(Name = "topicName", EmitDefaultValue = true)]
        public string TopicName { get; set; }

        /// <summary>
        /// Filter by the id of the worker that the task was most recently locked by.
        /// </summary>
        /// <value>Filter by the id of the worker that the task was most recently locked by.</value>
        [DataMember(Name = "workerId", EmitDefaultValue = true)]
        public string WorkerId { get; set; }

        /// <summary>
        /// Filter by external task exception message.
        /// </summary>
        /// <value>Filter by external task exception message.</value>
        [DataMember(Name = "errorMessage", EmitDefaultValue = true)]
        public string ErrorMessage { get; set; }

        /// <summary>
        /// Only include historic external task logs which belong to one of the passed activity ids.
        /// </summary>
        /// <value>Only include historic external task logs which belong to one of the passed activity ids.</value>
        [DataMember(Name = "activityIdIn", EmitDefaultValue = true)]
        public List<string> ActivityIdIn { get; set; }

        /// <summary>
        /// Only include historic external task logs which belong to one of the passed activity instance ids.
        /// </summary>
        /// <value>Only include historic external task logs which belong to one of the passed activity instance ids.</value>
        [DataMember(Name = "activityInstanceIdIn", EmitDefaultValue = true)]
        public List<string> ActivityInstanceIdIn { get; set; }

        /// <summary>
        /// Only include historic external task logs which belong to one of the passed execution ids.
        /// </summary>
        /// <value>Only include historic external task logs which belong to one of the passed execution ids.</value>
        [DataMember(Name = "executionIdIn", EmitDefaultValue = true)]
        public List<string> ExecutionIdIn { get; set; }

        /// <summary>
        /// Filter by process instance id.
        /// </summary>
        /// <value>Filter by process instance id.</value>
        [DataMember(Name = "processInstanceId", EmitDefaultValue = true)]
        public string ProcessInstanceId { get; set; }

        /// <summary>
        /// Filter by process definition id.
        /// </summary>
        /// <value>Filter by process definition id.</value>
        [DataMember(Name = "processDefinitionId", EmitDefaultValue = true)]
        public string ProcessDefinitionId { get; set; }

        /// <summary>
        /// Filter by process definition key.
        /// </summary>
        /// <value>Filter by process definition key.</value>
        [DataMember(Name = "processDefinitionKey", EmitDefaultValue = true)]
        public string ProcessDefinitionKey { get; set; }

        /// <summary>
        /// Only include historic external task log entries which belong to one of the passed and comma-separated tenant ids.
        /// </summary>
        /// <value>Only include historic external task log entries which belong to one of the passed and comma-separated tenant ids.</value>
        [DataMember(Name = "tenantIdIn", EmitDefaultValue = true)]
        public List<string> TenantIdIn { get; set; }

        /// <summary>
        /// Only include historic external task log entries that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
        /// </summary>
        /// <value>Only include historic external task log entries that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.</value>
        [DataMember(Name = "withoutTenantId", EmitDefaultValue = true)]
        public bool? WithoutTenantId { get; set; }

        /// <summary>
        /// Only include logs for which the associated external task had a priority lower than or equal to the given value. Value must be a valid &#x60;long&#x60; value.
        /// </summary>
        /// <value>Only include logs for which the associated external task had a priority lower than or equal to the given value. Value must be a valid &#x60;long&#x60; value.</value>
        [DataMember(Name = "priorityLowerThanOrEquals", EmitDefaultValue = true)]
        public long? PriorityLowerThanOrEquals { get; set; }

        /// <summary>
        /// Only include logs for which the associated external task had a priority higher than or equal to the given value. Value must be a valid &#x60;long&#x60; value.
        /// </summary>
        /// <value>Only include logs for which the associated external task had a priority higher than or equal to the given value. Value must be a valid &#x60;long&#x60; value.</value>
        [DataMember(Name = "priorityHigherThanOrEquals", EmitDefaultValue = true)]
        public long? PriorityHigherThanOrEquals { get; set; }

        /// <summary>
        /// Only include creation logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
        /// </summary>
        /// <value>Only include creation logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.</value>
        [DataMember(Name = "creationLog", EmitDefaultValue = true)]
        public bool? CreationLog { get; set; }

        /// <summary>
        /// Only include failure logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
        /// </summary>
        /// <value>Only include failure logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.</value>
        [DataMember(Name = "failureLog", EmitDefaultValue = true)]
        public bool? FailureLog { get; set; }

        /// <summary>
        /// Only include success logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
        /// </summary>
        /// <value>Only include success logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.</value>
        [DataMember(Name = "successLog", EmitDefaultValue = true)]
        public bool? SuccessLog { get; set; }

        /// <summary>
        /// Only include deletion logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
        /// </summary>
        /// <value>Only include deletion logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.</value>
        [DataMember(Name = "deletionLog", EmitDefaultValue = true)]
        public bool? DeletionLog { get; set; }

        /// <summary>
        /// An array of criteria to sort the result by. Each element of the array is                        an object that specifies one ordering. The position in the array                        identifies the rank of an ordering, i.e., whether it is primary, secondary,                        etc. Sorting has no effect for &#x60;count&#x60; endpoints.
        /// </summary>
        /// <value>An array of criteria to sort the result by. Each element of the array is                        an object that specifies one ordering. The position in the array                        identifies the rank of an ordering, i.e., whether it is primary, secondary,                        etc. Sorting has no effect for &#x60;count&#x60; endpoints.</value>
        [DataMember(Name = "sorting", EmitDefaultValue = true)]
        public List<HistoricExternalTaskLogQueryDtoSorting> Sorting { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class HistoricExternalTaskLogQueryDto {\n");
            sb.Append("  LogId: ").Append(LogId).Append("\n");
            sb.Append("  ExternalTaskId: ").Append(ExternalTaskId).Append("\n");
            sb.Append("  TopicName: ").Append(TopicName).Append("\n");
            sb.Append("  WorkerId: ").Append(WorkerId).Append("\n");
            sb.Append("  ErrorMessage: ").Append(ErrorMessage).Append("\n");
            sb.Append("  ActivityIdIn: ").Append(ActivityIdIn).Append("\n");
            sb.Append("  ActivityInstanceIdIn: ").Append(ActivityInstanceIdIn).Append("\n");
            sb.Append("  ExecutionIdIn: ").Append(ExecutionIdIn).Append("\n");
            sb.Append("  ProcessInstanceId: ").Append(ProcessInstanceId).Append("\n");
            sb.Append("  ProcessDefinitionId: ").Append(ProcessDefinitionId).Append("\n");
            sb.Append("  ProcessDefinitionKey: ").Append(ProcessDefinitionKey).Append("\n");
            sb.Append("  TenantIdIn: ").Append(TenantIdIn).Append("\n");
            sb.Append("  WithoutTenantId: ").Append(WithoutTenantId).Append("\n");
            sb.Append("  PriorityLowerThanOrEquals: ").Append(PriorityLowerThanOrEquals).Append("\n");
            sb.Append("  PriorityHigherThanOrEquals: ").Append(PriorityHigherThanOrEquals).Append("\n");
            sb.Append("  CreationLog: ").Append(CreationLog).Append("\n");
            sb.Append("  FailureLog: ").Append(FailureLog).Append("\n");
            sb.Append("  SuccessLog: ").Append(SuccessLog).Append("\n");
            sb.Append("  DeletionLog: ").Append(DeletionLog).Append("\n");
            sb.Append("  Sorting: ").Append(Sorting).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as HistoricExternalTaskLogQueryDto);
        }

        /// <summary>
        /// Returns true if HistoricExternalTaskLogQueryDto instances are equal
        /// </summary>
        /// <param name="input">Instance of HistoricExternalTaskLogQueryDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(HistoricExternalTaskLogQueryDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.LogId == input.LogId ||
                    (this.LogId != null &&
                    this.LogId.Equals(input.LogId))
                ) && 
                (
                    this.ExternalTaskId == input.ExternalTaskId ||
                    (this.ExternalTaskId != null &&
                    this.ExternalTaskId.Equals(input.ExternalTaskId))
                ) && 
                (
                    this.TopicName == input.TopicName ||
                    (this.TopicName != null &&
                    this.TopicName.Equals(input.TopicName))
                ) && 
                (
                    this.WorkerId == input.WorkerId ||
                    (this.WorkerId != null &&
                    this.WorkerId.Equals(input.WorkerId))
                ) && 
                (
                    this.ErrorMessage == input.ErrorMessage ||
                    (this.ErrorMessage != null &&
                    this.ErrorMessage.Equals(input.ErrorMessage))
                ) && 
                (
                    this.ActivityIdIn == input.ActivityIdIn ||
                    this.ActivityIdIn != null &&
                    input.ActivityIdIn != null &&
                    this.ActivityIdIn.SequenceEqual(input.ActivityIdIn)
                ) && 
                (
                    this.ActivityInstanceIdIn == input.ActivityInstanceIdIn ||
                    this.ActivityInstanceIdIn != null &&
                    input.ActivityInstanceIdIn != null &&
                    this.ActivityInstanceIdIn.SequenceEqual(input.ActivityInstanceIdIn)
                ) && 
                (
                    this.ExecutionIdIn == input.ExecutionIdIn ||
                    this.ExecutionIdIn != null &&
                    input.ExecutionIdIn != null &&
                    this.ExecutionIdIn.SequenceEqual(input.ExecutionIdIn)
                ) && 
                (
                    this.ProcessInstanceId == input.ProcessInstanceId ||
                    (this.ProcessInstanceId != null &&
                    this.ProcessInstanceId.Equals(input.ProcessInstanceId))
                ) && 
                (
                    this.ProcessDefinitionId == input.ProcessDefinitionId ||
                    (this.ProcessDefinitionId != null &&
                    this.ProcessDefinitionId.Equals(input.ProcessDefinitionId))
                ) && 
                (
                    this.ProcessDefinitionKey == input.ProcessDefinitionKey ||
                    (this.ProcessDefinitionKey != null &&
                    this.ProcessDefinitionKey.Equals(input.ProcessDefinitionKey))
                ) && 
                (
                    this.TenantIdIn == input.TenantIdIn ||
                    this.TenantIdIn != null &&
                    input.TenantIdIn != null &&
                    this.TenantIdIn.SequenceEqual(input.TenantIdIn)
                ) && 
                (
                    this.WithoutTenantId == input.WithoutTenantId ||
                    (this.WithoutTenantId != null &&
                    this.WithoutTenantId.Equals(input.WithoutTenantId))
                ) && 
                (
                    this.PriorityLowerThanOrEquals == input.PriorityLowerThanOrEquals ||
                    (this.PriorityLowerThanOrEquals != null &&
                    this.PriorityLowerThanOrEquals.Equals(input.PriorityLowerThanOrEquals))
                ) && 
                (
                    this.PriorityHigherThanOrEquals == input.PriorityHigherThanOrEquals ||
                    (this.PriorityHigherThanOrEquals != null &&
                    this.PriorityHigherThanOrEquals.Equals(input.PriorityHigherThanOrEquals))
                ) && 
                (
                    this.CreationLog == input.CreationLog ||
                    (this.CreationLog != null &&
                    this.CreationLog.Equals(input.CreationLog))
                ) && 
                (
                    this.FailureLog == input.FailureLog ||
                    (this.FailureLog != null &&
                    this.FailureLog.Equals(input.FailureLog))
                ) && 
                (
                    this.SuccessLog == input.SuccessLog ||
                    (this.SuccessLog != null &&
                    this.SuccessLog.Equals(input.SuccessLog))
                ) && 
                (
                    this.DeletionLog == input.DeletionLog ||
                    (this.DeletionLog != null &&
                    this.DeletionLog.Equals(input.DeletionLog))
                ) && 
                (
                    this.Sorting == input.Sorting ||
                    this.Sorting != null &&
                    input.Sorting != null &&
                    this.Sorting.SequenceEqual(input.Sorting)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.LogId != null)
                    hashCode = hashCode * 59 + this.LogId.GetHashCode();
                if (this.ExternalTaskId != null)
                    hashCode = hashCode * 59 + this.ExternalTaskId.GetHashCode();
                if (this.TopicName != null)
                    hashCode = hashCode * 59 + this.TopicName.GetHashCode();
                if (this.WorkerId != null)
                    hashCode = hashCode * 59 + this.WorkerId.GetHashCode();
                if (this.ErrorMessage != null)
                    hashCode = hashCode * 59 + this.ErrorMessage.GetHashCode();
                if (this.ActivityIdIn != null)
                    hashCode = hashCode * 59 + this.ActivityIdIn.GetHashCode();
                if (this.ActivityInstanceIdIn != null)
                    hashCode = hashCode * 59 + this.ActivityInstanceIdIn.GetHashCode();
                if (this.ExecutionIdIn != null)
                    hashCode = hashCode * 59 + this.ExecutionIdIn.GetHashCode();
                if (this.ProcessInstanceId != null)
                    hashCode = hashCode * 59 + this.ProcessInstanceId.GetHashCode();
                if (this.ProcessDefinitionId != null)
                    hashCode = hashCode * 59 + this.ProcessDefinitionId.GetHashCode();
                if (this.ProcessDefinitionKey != null)
                    hashCode = hashCode * 59 + this.ProcessDefinitionKey.GetHashCode();
                if (this.TenantIdIn != null)
                    hashCode = hashCode * 59 + this.TenantIdIn.GetHashCode();
                if (this.WithoutTenantId != null)
                    hashCode = hashCode * 59 + this.WithoutTenantId.GetHashCode();
                if (this.PriorityLowerThanOrEquals != null)
                    hashCode = hashCode * 59 + this.PriorityLowerThanOrEquals.GetHashCode();
                if (this.PriorityHigherThanOrEquals != null)
                    hashCode = hashCode * 59 + this.PriorityHigherThanOrEquals.GetHashCode();
                if (this.CreationLog != null)
                    hashCode = hashCode * 59 + this.CreationLog.GetHashCode();
                if (this.FailureLog != null)
                    hashCode = hashCode * 59 + this.FailureLog.GetHashCode();
                if (this.SuccessLog != null)
                    hashCode = hashCode * 59 + this.SuccessLog.GetHashCode();
                if (this.DeletionLog != null)
                    hashCode = hashCode * 59 + this.DeletionLog.GetHashCode();
                if (this.Sorting != null)
                    hashCode = hashCode * 59 + this.Sorting.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
