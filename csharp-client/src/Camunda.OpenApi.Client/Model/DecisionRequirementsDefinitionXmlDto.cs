/*
 * Camunda Platform REST API
 *
 * OpenApi Spec for Camunda Platform REST API.
 *
 * The version of the OpenAPI document: 7.16.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Camunda.OpenApi.Client.Client.OpenAPIDateConverter;

namespace Camunda.OpenApi.Client.Model
{
    /// <summary>
    /// DecisionRequirementsDefinitionXmlDto
    /// </summary>
    [DataContract(Name = "DecisionRequirementsDefinitionXmlDto")]
    public partial class DecisionRequirementsDefinitionXmlDto : IEquatable<DecisionRequirementsDefinitionXmlDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DecisionRequirementsDefinitionXmlDto" /> class.
        /// </summary>
        /// <param name="id">The id of the decision requirements definition..</param>
        /// <param name="dmnXml">An escaped XML string containing the XML that this decision requirements definition was deployed with. Carriage returns, line feeds and quotation marks are escaped..</param>
        public DecisionRequirementsDefinitionXmlDto(string id = default(string), string dmnXml = default(string))
        {
            this.Id = id;
            this.DmnXml = dmnXml;
        }

        /// <summary>
        /// The id of the decision requirements definition.
        /// </summary>
        /// <value>The id of the decision requirements definition.</value>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// An escaped XML string containing the XML that this decision requirements definition was deployed with. Carriage returns, line feeds and quotation marks are escaped.
        /// </summary>
        /// <value>An escaped XML string containing the XML that this decision requirements definition was deployed with. Carriage returns, line feeds and quotation marks are escaped.</value>
        [DataMember(Name = "dmnXml", EmitDefaultValue = true)]
        public string DmnXml { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DecisionRequirementsDefinitionXmlDto {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  DmnXml: ").Append(DmnXml).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DecisionRequirementsDefinitionXmlDto);
        }

        /// <summary>
        /// Returns true if DecisionRequirementsDefinitionXmlDto instances are equal
        /// </summary>
        /// <param name="input">Instance of DecisionRequirementsDefinitionXmlDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DecisionRequirementsDefinitionXmlDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.DmnXml == input.DmnXml ||
                    (this.DmnXml != null &&
                    this.DmnXml.Equals(input.DmnXml))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.DmnXml != null)
                    hashCode = hashCode * 59 + this.DmnXml.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
