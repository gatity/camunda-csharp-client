/*
 * Camunda Platform REST API
 *
 * OpenApi Spec for Camunda Platform REST API.
 *
 * The version of the OpenAPI document: 7.16.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Camunda.OpenApi.Client.Client.OpenAPIDateConverter;

namespace Camunda.OpenApi.Client.Model
{
    /// <summary>
    /// JobDuedateDto
    /// </summary>
    [DataContract(Name = "JobDuedateDto")]
    public partial class JobDuedateDto : IEquatable<JobDuedateDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="JobDuedateDto" /> class.
        /// </summary>
        /// <param name="duedate">The date to set when the job has the next execution..</param>
        /// <param name="cascade">A boolean value to indicate if modifications to the due date should cascade to subsequent jobs. (e.g. Modify the due date of a timer by +15 minutes. This flag indicates if a +15 minutes should be applied to all subsequent timers.) This flag only affects timer jobs and only works if due date is not null. Default: &#x60;false&#x60;.</param>
        public JobDuedateDto(DateTime? duedate = default(DateTime?), bool? cascade = default(bool?))
        {
            this.Duedate = duedate;
            this.Cascade = cascade;
        }

        /// <summary>
        /// The date to set when the job has the next execution.
        /// </summary>
        /// <value>The date to set when the job has the next execution.</value>
        [DataMember(Name = "duedate", EmitDefaultValue = true)]
        public DateTime? Duedate { get; set; }

        /// <summary>
        /// A boolean value to indicate if modifications to the due date should cascade to subsequent jobs. (e.g. Modify the due date of a timer by +15 minutes. This flag indicates if a +15 minutes should be applied to all subsequent timers.) This flag only affects timer jobs and only works if due date is not null. Default: &#x60;false&#x60;
        /// </summary>
        /// <value>A boolean value to indicate if modifications to the due date should cascade to subsequent jobs. (e.g. Modify the due date of a timer by +15 minutes. This flag indicates if a +15 minutes should be applied to all subsequent timers.) This flag only affects timer jobs and only works if due date is not null. Default: &#x60;false&#x60;</value>
        [DataMember(Name = "cascade", EmitDefaultValue = true)]
        public bool? Cascade { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class JobDuedateDto {\n");
            sb.Append("  Duedate: ").Append(Duedate).Append("\n");
            sb.Append("  Cascade: ").Append(Cascade).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as JobDuedateDto);
        }

        /// <summary>
        /// Returns true if JobDuedateDto instances are equal
        /// </summary>
        /// <param name="input">Instance of JobDuedateDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JobDuedateDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Duedate == input.Duedate ||
                    (this.Duedate != null &&
                    this.Duedate.Equals(input.Duedate))
                ) && 
                (
                    this.Cascade == input.Cascade ||
                    (this.Cascade != null &&
                    this.Cascade.Equals(input.Cascade))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Duedate != null)
                    hashCode = hashCode * 59 + this.Duedate.GetHashCode();
                if (this.Cascade != null)
                    hashCode = hashCode * 59 + this.Cascade.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
