/*
 * Camunda Platform REST API
 *
 * OpenApi Spec for Camunda Platform REST API.
 *
 * The version of the OpenAPI document: 7.16.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Camunda.OpenApi.Client.Client.OpenAPIDateConverter;

namespace Camunda.OpenApi.Client.Model
{
    /// <summary>
    /// A historic detail query which defines a group of historic details.
    /// </summary>
    [DataContract(Name = "HistoricDetailQueryDto")]
    public partial class HistoricDetailQueryDto : IEquatable<HistoricDetailQueryDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="HistoricDetailQueryDto" /> class.
        /// </summary>
        /// <param name="processInstanceId">Filter by process instance id..</param>
        /// <param name="processInstanceIdIn">Only include historic details which belong to one of the passed  process instance ids..</param>
        /// <param name="executionId">Filter by execution id..</param>
        /// <param name="taskId">Filter by task id..</param>
        /// <param name="activityInstanceId">Filter by activity instance id..</param>
        /// <param name="caseInstanceId">Filter by case instance id..</param>
        /// <param name="caseExecutionId">Filter by case execution id..</param>
        /// <param name="variableInstanceId">Filter by variable instance id..</param>
        /// <param name="variableTypeIn">Only include historic details where the variable updates belong to one of the passed  list of variable types. A list of all supported variable types can be found [here](https://docs.camunda.org/manual/7.16/user-guide/process-engine/variables/#supported-variable-values). **Note:** All non-primitive variables are associated with the type &#x60;serializable&#x60;..</param>
        /// <param name="tenantIdIn">Filter by a  list of tenant ids..</param>
        /// <param name="withoutTenantId">Only include historic details that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior..</param>
        /// <param name="userOperationId">Filter by a user operation id..</param>
        /// <param name="formFields">Only include &#x60;HistoricFormFields&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior..</param>
        /// <param name="variableUpdates">Only include &#x60;HistoricVariableUpdates&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior..</param>
        /// <param name="excludeTaskDetails">Excludes all task-related &#x60;HistoricDetails&#x60;, so only items which have no task id set will be selected. When this parameter is used together with &#x60;taskId&#x60;, this call is ignored and task details are not excluded. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior..</param>
        /// <param name="initial">Restrict to historic variable updates that contain only initial variable values. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior..</param>
        /// <param name="occurredBefore">Restrict to historic details that occured before the given date (including the date). Default [format](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/) &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., 2013-01-23T14:42:45.000+0200..</param>
        /// <param name="occurredAfter">Restrict to historic details that occured after the given date (including the date). Default [format](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/) &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., 2013-01-23T14:42:45.000+0200..</param>
        /// <param name="sorting">A JSON array of criteria to sort the result by. Each element of the array is                     a JSON object that specifies one ordering. The position in the array                     identifies the rank of an ordering, i.e., whether it is primary, secondary,                     etc. Does not have an effect for the &#x60;count&#x60; endpoint..</param>
        public HistoricDetailQueryDto(string processInstanceId = default(string), List<string> processInstanceIdIn = default(List<string>), string executionId = default(string), string taskId = default(string), string activityInstanceId = default(string), string caseInstanceId = default(string), string caseExecutionId = default(string), string variableInstanceId = default(string), List<string> variableTypeIn = default(List<string>), List<string> tenantIdIn = default(List<string>), bool? withoutTenantId = default(bool?), string userOperationId = default(string), bool? formFields = default(bool?), bool? variableUpdates = default(bool?), bool? excludeTaskDetails = default(bool?), bool? initial = default(bool?), DateTime? occurredBefore = default(DateTime?), DateTime? occurredAfter = default(DateTime?), List<HistoricDetailQueryDtoSorting> sorting = default(List<HistoricDetailQueryDtoSorting>))
        {
            this.ProcessInstanceId = processInstanceId;
            this.ProcessInstanceIdIn = processInstanceIdIn;
            this.ExecutionId = executionId;
            this.TaskId = taskId;
            this.ActivityInstanceId = activityInstanceId;
            this.CaseInstanceId = caseInstanceId;
            this.CaseExecutionId = caseExecutionId;
            this.VariableInstanceId = variableInstanceId;
            this.VariableTypeIn = variableTypeIn;
            this.TenantIdIn = tenantIdIn;
            this.WithoutTenantId = withoutTenantId;
            this.UserOperationId = userOperationId;
            this.FormFields = formFields;
            this.VariableUpdates = variableUpdates;
            this.ExcludeTaskDetails = excludeTaskDetails;
            this.Initial = initial;
            this.OccurredBefore = occurredBefore;
            this.OccurredAfter = occurredAfter;
            this.Sorting = sorting;
        }

        /// <summary>
        /// Filter by process instance id.
        /// </summary>
        /// <value>Filter by process instance id.</value>
        [DataMember(Name = "processInstanceId", EmitDefaultValue = true)]
        public string ProcessInstanceId { get; set; }

        /// <summary>
        /// Only include historic details which belong to one of the passed  process instance ids.
        /// </summary>
        /// <value>Only include historic details which belong to one of the passed  process instance ids.</value>
        [DataMember(Name = "processInstanceIdIn", EmitDefaultValue = true)]
        public List<string> ProcessInstanceIdIn { get; set; }

        /// <summary>
        /// Filter by execution id.
        /// </summary>
        /// <value>Filter by execution id.</value>
        [DataMember(Name = "executionId", EmitDefaultValue = true)]
        public string ExecutionId { get; set; }

        /// <summary>
        /// Filter by task id.
        /// </summary>
        /// <value>Filter by task id.</value>
        [DataMember(Name = "taskId", EmitDefaultValue = true)]
        public string TaskId { get; set; }

        /// <summary>
        /// Filter by activity instance id.
        /// </summary>
        /// <value>Filter by activity instance id.</value>
        [DataMember(Name = "activityInstanceId", EmitDefaultValue = true)]
        public string ActivityInstanceId { get; set; }

        /// <summary>
        /// Filter by case instance id.
        /// </summary>
        /// <value>Filter by case instance id.</value>
        [DataMember(Name = "caseInstanceId", EmitDefaultValue = true)]
        public string CaseInstanceId { get; set; }

        /// <summary>
        /// Filter by case execution id.
        /// </summary>
        /// <value>Filter by case execution id.</value>
        [DataMember(Name = "caseExecutionId", EmitDefaultValue = true)]
        public string CaseExecutionId { get; set; }

        /// <summary>
        /// Filter by variable instance id.
        /// </summary>
        /// <value>Filter by variable instance id.</value>
        [DataMember(Name = "variableInstanceId", EmitDefaultValue = true)]
        public string VariableInstanceId { get; set; }

        /// <summary>
        /// Only include historic details where the variable updates belong to one of the passed  list of variable types. A list of all supported variable types can be found [here](https://docs.camunda.org/manual/7.16/user-guide/process-engine/variables/#supported-variable-values). **Note:** All non-primitive variables are associated with the type &#x60;serializable&#x60;.
        /// </summary>
        /// <value>Only include historic details where the variable updates belong to one of the passed  list of variable types. A list of all supported variable types can be found [here](https://docs.camunda.org/manual/7.16/user-guide/process-engine/variables/#supported-variable-values). **Note:** All non-primitive variables are associated with the type &#x60;serializable&#x60;.</value>
        [DataMember(Name = "variableTypeIn", EmitDefaultValue = true)]
        public List<string> VariableTypeIn { get; set; }

        /// <summary>
        /// Filter by a  list of tenant ids.
        /// </summary>
        /// <value>Filter by a  list of tenant ids.</value>
        [DataMember(Name = "tenantIdIn", EmitDefaultValue = true)]
        public List<string> TenantIdIn { get; set; }

        /// <summary>
        /// Only include historic details that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
        /// </summary>
        /// <value>Only include historic details that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.</value>
        [DataMember(Name = "withoutTenantId", EmitDefaultValue = true)]
        public bool? WithoutTenantId { get; set; }

        /// <summary>
        /// Filter by a user operation id.
        /// </summary>
        /// <value>Filter by a user operation id.</value>
        [DataMember(Name = "userOperationId", EmitDefaultValue = true)]
        public string UserOperationId { get; set; }

        /// <summary>
        /// Only include &#x60;HistoricFormFields&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
        /// </summary>
        /// <value>Only include &#x60;HistoricFormFields&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.</value>
        [DataMember(Name = "formFields", EmitDefaultValue = true)]
        public bool? FormFields { get; set; }

        /// <summary>
        /// Only include &#x60;HistoricVariableUpdates&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
        /// </summary>
        /// <value>Only include &#x60;HistoricVariableUpdates&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.</value>
        [DataMember(Name = "variableUpdates", EmitDefaultValue = true)]
        public bool? VariableUpdates { get; set; }

        /// <summary>
        /// Excludes all task-related &#x60;HistoricDetails&#x60;, so only items which have no task id set will be selected. When this parameter is used together with &#x60;taskId&#x60;, this call is ignored and task details are not excluded. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
        /// </summary>
        /// <value>Excludes all task-related &#x60;HistoricDetails&#x60;, so only items which have no task id set will be selected. When this parameter is used together with &#x60;taskId&#x60;, this call is ignored and task details are not excluded. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.</value>
        [DataMember(Name = "excludeTaskDetails", EmitDefaultValue = true)]
        public bool? ExcludeTaskDetails { get; set; }

        /// <summary>
        /// Restrict to historic variable updates that contain only initial variable values. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
        /// </summary>
        /// <value>Restrict to historic variable updates that contain only initial variable values. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.</value>
        [DataMember(Name = "initial", EmitDefaultValue = true)]
        public bool? Initial { get; set; }

        /// <summary>
        /// Restrict to historic details that occured before the given date (including the date). Default [format](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/) &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., 2013-01-23T14:42:45.000+0200.
        /// </summary>
        /// <value>Restrict to historic details that occured before the given date (including the date). Default [format](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/) &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., 2013-01-23T14:42:45.000+0200.</value>
        [DataMember(Name = "occurredBefore", EmitDefaultValue = true)]
        public DateTime? OccurredBefore { get; set; }

        /// <summary>
        /// Restrict to historic details that occured after the given date (including the date). Default [format](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/) &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., 2013-01-23T14:42:45.000+0200.
        /// </summary>
        /// <value>Restrict to historic details that occured after the given date (including the date). Default [format](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/) &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., 2013-01-23T14:42:45.000+0200.</value>
        [DataMember(Name = "occurredAfter", EmitDefaultValue = true)]
        public DateTime? OccurredAfter { get; set; }

        /// <summary>
        /// A JSON array of criteria to sort the result by. Each element of the array is                     a JSON object that specifies one ordering. The position in the array                     identifies the rank of an ordering, i.e., whether it is primary, secondary,                     etc. Does not have an effect for the &#x60;count&#x60; endpoint.
        /// </summary>
        /// <value>A JSON array of criteria to sort the result by. Each element of the array is                     a JSON object that specifies one ordering. The position in the array                     identifies the rank of an ordering, i.e., whether it is primary, secondary,                     etc. Does not have an effect for the &#x60;count&#x60; endpoint.</value>
        [DataMember(Name = "sorting", EmitDefaultValue = true)]
        public List<HistoricDetailQueryDtoSorting> Sorting { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class HistoricDetailQueryDto {\n");
            sb.Append("  ProcessInstanceId: ").Append(ProcessInstanceId).Append("\n");
            sb.Append("  ProcessInstanceIdIn: ").Append(ProcessInstanceIdIn).Append("\n");
            sb.Append("  ExecutionId: ").Append(ExecutionId).Append("\n");
            sb.Append("  TaskId: ").Append(TaskId).Append("\n");
            sb.Append("  ActivityInstanceId: ").Append(ActivityInstanceId).Append("\n");
            sb.Append("  CaseInstanceId: ").Append(CaseInstanceId).Append("\n");
            sb.Append("  CaseExecutionId: ").Append(CaseExecutionId).Append("\n");
            sb.Append("  VariableInstanceId: ").Append(VariableInstanceId).Append("\n");
            sb.Append("  VariableTypeIn: ").Append(VariableTypeIn).Append("\n");
            sb.Append("  TenantIdIn: ").Append(TenantIdIn).Append("\n");
            sb.Append("  WithoutTenantId: ").Append(WithoutTenantId).Append("\n");
            sb.Append("  UserOperationId: ").Append(UserOperationId).Append("\n");
            sb.Append("  FormFields: ").Append(FormFields).Append("\n");
            sb.Append("  VariableUpdates: ").Append(VariableUpdates).Append("\n");
            sb.Append("  ExcludeTaskDetails: ").Append(ExcludeTaskDetails).Append("\n");
            sb.Append("  Initial: ").Append(Initial).Append("\n");
            sb.Append("  OccurredBefore: ").Append(OccurredBefore).Append("\n");
            sb.Append("  OccurredAfter: ").Append(OccurredAfter).Append("\n");
            sb.Append("  Sorting: ").Append(Sorting).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as HistoricDetailQueryDto);
        }

        /// <summary>
        /// Returns true if HistoricDetailQueryDto instances are equal
        /// </summary>
        /// <param name="input">Instance of HistoricDetailQueryDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(HistoricDetailQueryDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ProcessInstanceId == input.ProcessInstanceId ||
                    (this.ProcessInstanceId != null &&
                    this.ProcessInstanceId.Equals(input.ProcessInstanceId))
                ) && 
                (
                    this.ProcessInstanceIdIn == input.ProcessInstanceIdIn ||
                    this.ProcessInstanceIdIn != null &&
                    input.ProcessInstanceIdIn != null &&
                    this.ProcessInstanceIdIn.SequenceEqual(input.ProcessInstanceIdIn)
                ) && 
                (
                    this.ExecutionId == input.ExecutionId ||
                    (this.ExecutionId != null &&
                    this.ExecutionId.Equals(input.ExecutionId))
                ) && 
                (
                    this.TaskId == input.TaskId ||
                    (this.TaskId != null &&
                    this.TaskId.Equals(input.TaskId))
                ) && 
                (
                    this.ActivityInstanceId == input.ActivityInstanceId ||
                    (this.ActivityInstanceId != null &&
                    this.ActivityInstanceId.Equals(input.ActivityInstanceId))
                ) && 
                (
                    this.CaseInstanceId == input.CaseInstanceId ||
                    (this.CaseInstanceId != null &&
                    this.CaseInstanceId.Equals(input.CaseInstanceId))
                ) && 
                (
                    this.CaseExecutionId == input.CaseExecutionId ||
                    (this.CaseExecutionId != null &&
                    this.CaseExecutionId.Equals(input.CaseExecutionId))
                ) && 
                (
                    this.VariableInstanceId == input.VariableInstanceId ||
                    (this.VariableInstanceId != null &&
                    this.VariableInstanceId.Equals(input.VariableInstanceId))
                ) && 
                (
                    this.VariableTypeIn == input.VariableTypeIn ||
                    this.VariableTypeIn != null &&
                    input.VariableTypeIn != null &&
                    this.VariableTypeIn.SequenceEqual(input.VariableTypeIn)
                ) && 
                (
                    this.TenantIdIn == input.TenantIdIn ||
                    this.TenantIdIn != null &&
                    input.TenantIdIn != null &&
                    this.TenantIdIn.SequenceEqual(input.TenantIdIn)
                ) && 
                (
                    this.WithoutTenantId == input.WithoutTenantId ||
                    (this.WithoutTenantId != null &&
                    this.WithoutTenantId.Equals(input.WithoutTenantId))
                ) && 
                (
                    this.UserOperationId == input.UserOperationId ||
                    (this.UserOperationId != null &&
                    this.UserOperationId.Equals(input.UserOperationId))
                ) && 
                (
                    this.FormFields == input.FormFields ||
                    (this.FormFields != null &&
                    this.FormFields.Equals(input.FormFields))
                ) && 
                (
                    this.VariableUpdates == input.VariableUpdates ||
                    (this.VariableUpdates != null &&
                    this.VariableUpdates.Equals(input.VariableUpdates))
                ) && 
                (
                    this.ExcludeTaskDetails == input.ExcludeTaskDetails ||
                    (this.ExcludeTaskDetails != null &&
                    this.ExcludeTaskDetails.Equals(input.ExcludeTaskDetails))
                ) && 
                (
                    this.Initial == input.Initial ||
                    (this.Initial != null &&
                    this.Initial.Equals(input.Initial))
                ) && 
                (
                    this.OccurredBefore == input.OccurredBefore ||
                    (this.OccurredBefore != null &&
                    this.OccurredBefore.Equals(input.OccurredBefore))
                ) && 
                (
                    this.OccurredAfter == input.OccurredAfter ||
                    (this.OccurredAfter != null &&
                    this.OccurredAfter.Equals(input.OccurredAfter))
                ) && 
                (
                    this.Sorting == input.Sorting ||
                    this.Sorting != null &&
                    input.Sorting != null &&
                    this.Sorting.SequenceEqual(input.Sorting)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ProcessInstanceId != null)
                    hashCode = hashCode * 59 + this.ProcessInstanceId.GetHashCode();
                if (this.ProcessInstanceIdIn != null)
                    hashCode = hashCode * 59 + this.ProcessInstanceIdIn.GetHashCode();
                if (this.ExecutionId != null)
                    hashCode = hashCode * 59 + this.ExecutionId.GetHashCode();
                if (this.TaskId != null)
                    hashCode = hashCode * 59 + this.TaskId.GetHashCode();
                if (this.ActivityInstanceId != null)
                    hashCode = hashCode * 59 + this.ActivityInstanceId.GetHashCode();
                if (this.CaseInstanceId != null)
                    hashCode = hashCode * 59 + this.CaseInstanceId.GetHashCode();
                if (this.CaseExecutionId != null)
                    hashCode = hashCode * 59 + this.CaseExecutionId.GetHashCode();
                if (this.VariableInstanceId != null)
                    hashCode = hashCode * 59 + this.VariableInstanceId.GetHashCode();
                if (this.VariableTypeIn != null)
                    hashCode = hashCode * 59 + this.VariableTypeIn.GetHashCode();
                if (this.TenantIdIn != null)
                    hashCode = hashCode * 59 + this.TenantIdIn.GetHashCode();
                if (this.WithoutTenantId != null)
                    hashCode = hashCode * 59 + this.WithoutTenantId.GetHashCode();
                if (this.UserOperationId != null)
                    hashCode = hashCode * 59 + this.UserOperationId.GetHashCode();
                if (this.FormFields != null)
                    hashCode = hashCode * 59 + this.FormFields.GetHashCode();
                if (this.VariableUpdates != null)
                    hashCode = hashCode * 59 + this.VariableUpdates.GetHashCode();
                if (this.ExcludeTaskDetails != null)
                    hashCode = hashCode * 59 + this.ExcludeTaskDetails.GetHashCode();
                if (this.Initial != null)
                    hashCode = hashCode * 59 + this.Initial.GetHashCode();
                if (this.OccurredBefore != null)
                    hashCode = hashCode * 59 + this.OccurredBefore.GetHashCode();
                if (this.OccurredAfter != null)
                    hashCode = hashCode * 59 + this.OccurredAfter.GetHashCode();
                if (this.Sorting != null)
                    hashCode = hashCode * 59 + this.Sorting.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
