/*
 * Camunda Platform REST API
 *
 * OpenApi Spec for Camunda Platform REST API.
 *
 * The version of the OpenAPI document: 7.16.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Camunda.OpenApi.Client.Client.FileParameter;
using OpenAPIDateConverter = Camunda.OpenApi.Client.Client.OpenAPIDateConverter;

namespace Camunda.OpenApi.Client.Model
{
    /// <summary>
    /// SetRemovalTimeToHistoricBatchesDto
    /// </summary>
    [DataContract(Name = "SetRemovalTimeToHistoricBatchesDto")]
    public partial class SetRemovalTimeToHistoricBatchesDto : IEquatable<SetRemovalTimeToHistoricBatchesDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SetRemovalTimeToHistoricBatchesDto" /> class.
        /// </summary>
        /// <param name="historicBatchQuery">Query for the historic batches to set the removal time for..</param>
        /// <param name="historicBatchIds">The ids of the historic batches to set the removal time for..</param>
        /// <param name="absoluteRemovalTime">The date for which the instances shall be removed. Value may not be &#x60;null&#x60;.  **Note:** Cannot be set in conjunction with &#x60;clearedRemovalTime&#x60; or &#x60;calculatedRemovalTime&#x60;..</param>
        /// <param name="clearedRemovalTime">Sets the removal time to &#x60;null&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.  **Note:** Cannot be set in conjunction with &#x60;absoluteRemovalTime&#x60; or &#x60;calculatedRemovalTime&#x60;..</param>
        /// <param name="calculatedRemovalTime">The removal time is calculated based on the engine&#39;s configuration settings. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.  **Note:** Cannot be set in conjunction with &#x60;absoluteRemovalTime&#x60; or &#x60;clearedRemovalTime&#x60;..</param>
        public SetRemovalTimeToHistoricBatchesDto(Object historicBatchQuery = default(Object), List<string> historicBatchIds = default(List<string>), DateTime? absoluteRemovalTime = default(DateTime?), bool? clearedRemovalTime = default(bool?), bool? calculatedRemovalTime = default(bool?))
        {
            this.HistoricBatchQuery = historicBatchQuery;
            this.HistoricBatchIds = historicBatchIds;
            this.AbsoluteRemovalTime = absoluteRemovalTime;
            this.ClearedRemovalTime = clearedRemovalTime;
            this.CalculatedRemovalTime = calculatedRemovalTime;
        }

        /// <summary>
        /// Query for the historic batches to set the removal time for.
        /// </summary>
        /// <value>Query for the historic batches to set the removal time for.</value>
        [DataMember(Name = "historicBatchQuery", EmitDefaultValue = true)]
        public Object HistoricBatchQuery { get; set; }

        /// <summary>
        /// The ids of the historic batches to set the removal time for.
        /// </summary>
        /// <value>The ids of the historic batches to set the removal time for.</value>
        [DataMember(Name = "historicBatchIds", EmitDefaultValue = true)]
        public List<string> HistoricBatchIds { get; set; }

        /// <summary>
        /// The date for which the instances shall be removed. Value may not be &#x60;null&#x60;.  **Note:** Cannot be set in conjunction with &#x60;clearedRemovalTime&#x60; or &#x60;calculatedRemovalTime&#x60;.
        /// </summary>
        /// <value>The date for which the instances shall be removed. Value may not be &#x60;null&#x60;.  **Note:** Cannot be set in conjunction with &#x60;clearedRemovalTime&#x60; or &#x60;calculatedRemovalTime&#x60;.</value>
        [DataMember(Name = "absoluteRemovalTime", EmitDefaultValue = true)]
        public DateTime? AbsoluteRemovalTime { get; set; }

        /// <summary>
        /// Sets the removal time to &#x60;null&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.  **Note:** Cannot be set in conjunction with &#x60;absoluteRemovalTime&#x60; or &#x60;calculatedRemovalTime&#x60;.
        /// </summary>
        /// <value>Sets the removal time to &#x60;null&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.  **Note:** Cannot be set in conjunction with &#x60;absoluteRemovalTime&#x60; or &#x60;calculatedRemovalTime&#x60;.</value>
        [DataMember(Name = "clearedRemovalTime", EmitDefaultValue = true)]
        public bool? ClearedRemovalTime { get; set; }

        /// <summary>
        /// The removal time is calculated based on the engine&#39;s configuration settings. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.  **Note:** Cannot be set in conjunction with &#x60;absoluteRemovalTime&#x60; or &#x60;clearedRemovalTime&#x60;.
        /// </summary>
        /// <value>The removal time is calculated based on the engine&#39;s configuration settings. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.  **Note:** Cannot be set in conjunction with &#x60;absoluteRemovalTime&#x60; or &#x60;clearedRemovalTime&#x60;.</value>
        [DataMember(Name = "calculatedRemovalTime", EmitDefaultValue = true)]
        public bool? CalculatedRemovalTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SetRemovalTimeToHistoricBatchesDto {\n");
            sb.Append("  HistoricBatchQuery: ").Append(HistoricBatchQuery).Append("\n");
            sb.Append("  HistoricBatchIds: ").Append(HistoricBatchIds).Append("\n");
            sb.Append("  AbsoluteRemovalTime: ").Append(AbsoluteRemovalTime).Append("\n");
            sb.Append("  ClearedRemovalTime: ").Append(ClearedRemovalTime).Append("\n");
            sb.Append("  CalculatedRemovalTime: ").Append(CalculatedRemovalTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SetRemovalTimeToHistoricBatchesDto);
        }

        /// <summary>
        /// Returns true if SetRemovalTimeToHistoricBatchesDto instances are equal
        /// </summary>
        /// <param name="input">Instance of SetRemovalTimeToHistoricBatchesDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SetRemovalTimeToHistoricBatchesDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.HistoricBatchQuery == input.HistoricBatchQuery ||
                    (this.HistoricBatchQuery != null &&
                    this.HistoricBatchQuery.Equals(input.HistoricBatchQuery))
                ) && 
                (
                    this.HistoricBatchIds == input.HistoricBatchIds ||
                    this.HistoricBatchIds != null &&
                    input.HistoricBatchIds != null &&
                    this.HistoricBatchIds.SequenceEqual(input.HistoricBatchIds)
                ) && 
                (
                    this.AbsoluteRemovalTime == input.AbsoluteRemovalTime ||
                    (this.AbsoluteRemovalTime != null &&
                    this.AbsoluteRemovalTime.Equals(input.AbsoluteRemovalTime))
                ) && 
                (
                    this.ClearedRemovalTime == input.ClearedRemovalTime ||
                    (this.ClearedRemovalTime != null &&
                    this.ClearedRemovalTime.Equals(input.ClearedRemovalTime))
                ) && 
                (
                    this.CalculatedRemovalTime == input.CalculatedRemovalTime ||
                    (this.CalculatedRemovalTime != null &&
                    this.CalculatedRemovalTime.Equals(input.CalculatedRemovalTime))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.HistoricBatchQuery != null)
                    hashCode = hashCode * 59 + this.HistoricBatchQuery.GetHashCode();
                if (this.HistoricBatchIds != null)
                    hashCode = hashCode * 59 + this.HistoricBatchIds.GetHashCode();
                if (this.AbsoluteRemovalTime != null)
                    hashCode = hashCode * 59 + this.AbsoluteRemovalTime.GetHashCode();
                if (this.ClearedRemovalTime != null)
                    hashCode = hashCode * 59 + this.ClearedRemovalTime.GetHashCode();
                if (this.CalculatedRemovalTime != null)
                    hashCode = hashCode * 59 + this.CalculatedRemovalTime.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
