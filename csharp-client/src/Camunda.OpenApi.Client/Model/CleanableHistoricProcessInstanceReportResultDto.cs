/*
 * Camunda Platform REST API
 *
 * OpenApi Spec for Camunda Platform REST API.
 *
 * The version of the OpenAPI document: 7.21.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Camunda.OpenApi.Client.Client.FileParameter;
using OpenAPIDateConverter = Camunda.OpenApi.Client.Client.OpenAPIDateConverter;

namespace Camunda.OpenApi.Client.Model
{
    /// <summary>
    /// CleanableHistoricProcessInstanceReportResultDto
    /// </summary>
    [DataContract(Name = "CleanableHistoricProcessInstanceReportResultDto")]
    public partial class CleanableHistoricProcessInstanceReportResultDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CleanableHistoricProcessInstanceReportResultDto" /> class.
        /// </summary>
        /// <param name="processDefinitionId">The id of the process definition..</param>
        /// <param name="processDefinitionKey">The key of the process definition..</param>
        /// <param name="processDefinitionName">The name of the process definition..</param>
        /// <param name="processDefinitionVersion">The version of the process definition..</param>
        /// <param name="historyTimeToLive">The history time to live of the process definition..</param>
        /// <param name="finishedProcessInstanceCount">The count of the finished historic process instances..</param>
        /// <param name="cleanableProcessInstanceCount">The count of the cleanable historic process instances, referring to history time to live..</param>
        /// <param name="tenantId">The tenant id of the process definition..</param>
        public CleanableHistoricProcessInstanceReportResultDto(string processDefinitionId = default(string), string processDefinitionKey = default(string), string processDefinitionName = default(string), int? processDefinitionVersion = default(int?), int? historyTimeToLive = default(int?), long? finishedProcessInstanceCount = default(long?), long? cleanableProcessInstanceCount = default(long?), string tenantId = default(string))
        {
            this.ProcessDefinitionId = processDefinitionId;
            this.ProcessDefinitionKey = processDefinitionKey;
            this.ProcessDefinitionName = processDefinitionName;
            this.ProcessDefinitionVersion = processDefinitionVersion;
            this.HistoryTimeToLive = historyTimeToLive;
            this.FinishedProcessInstanceCount = finishedProcessInstanceCount;
            this.CleanableProcessInstanceCount = cleanableProcessInstanceCount;
            this.TenantId = tenantId;
        }

        /// <summary>
        /// The id of the process definition.
        /// </summary>
        /// <value>The id of the process definition.</value>
        [DataMember(Name = "processDefinitionId", EmitDefaultValue = true)]
        public string ProcessDefinitionId { get; set; }

        /// <summary>
        /// The key of the process definition.
        /// </summary>
        /// <value>The key of the process definition.</value>
        [DataMember(Name = "processDefinitionKey", EmitDefaultValue = true)]
        public string ProcessDefinitionKey { get; set; }

        /// <summary>
        /// The name of the process definition.
        /// </summary>
        /// <value>The name of the process definition.</value>
        [DataMember(Name = "processDefinitionName", EmitDefaultValue = true)]
        public string ProcessDefinitionName { get; set; }

        /// <summary>
        /// The version of the process definition.
        /// </summary>
        /// <value>The version of the process definition.</value>
        [DataMember(Name = "processDefinitionVersion", EmitDefaultValue = true)]
        public int? ProcessDefinitionVersion { get; set; }

        /// <summary>
        /// The history time to live of the process definition.
        /// </summary>
        /// <value>The history time to live of the process definition.</value>
        [DataMember(Name = "historyTimeToLive", EmitDefaultValue = true)]
        public int? HistoryTimeToLive { get; set; }

        /// <summary>
        /// The count of the finished historic process instances.
        /// </summary>
        /// <value>The count of the finished historic process instances.</value>
        [DataMember(Name = "finishedProcessInstanceCount", EmitDefaultValue = true)]
        public long? FinishedProcessInstanceCount { get; set; }

        /// <summary>
        /// The count of the cleanable historic process instances, referring to history time to live.
        /// </summary>
        /// <value>The count of the cleanable historic process instances, referring to history time to live.</value>
        [DataMember(Name = "cleanableProcessInstanceCount", EmitDefaultValue = true)]
        public long? CleanableProcessInstanceCount { get; set; }

        /// <summary>
        /// The tenant id of the process definition.
        /// </summary>
        /// <value>The tenant id of the process definition.</value>
        [DataMember(Name = "tenantId", EmitDefaultValue = true)]
        public string TenantId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CleanableHistoricProcessInstanceReportResultDto {\n");
            sb.Append("  ProcessDefinitionId: ").Append(ProcessDefinitionId).Append("\n");
            sb.Append("  ProcessDefinitionKey: ").Append(ProcessDefinitionKey).Append("\n");
            sb.Append("  ProcessDefinitionName: ").Append(ProcessDefinitionName).Append("\n");
            sb.Append("  ProcessDefinitionVersion: ").Append(ProcessDefinitionVersion).Append("\n");
            sb.Append("  HistoryTimeToLive: ").Append(HistoryTimeToLive).Append("\n");
            sb.Append("  FinishedProcessInstanceCount: ").Append(FinishedProcessInstanceCount).Append("\n");
            sb.Append("  CleanableProcessInstanceCount: ").Append(CleanableProcessInstanceCount).Append("\n");
            sb.Append("  TenantId: ").Append(TenantId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
