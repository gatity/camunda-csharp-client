/*
 * Camunda Platform REST API
 *
 * OpenApi Spec for Camunda Platform REST API.
 *
 * The version of the OpenAPI document: 7.21.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Camunda.OpenApi.Client.Client.FileParameter;
using OpenAPIDateConverter = Camunda.OpenApi.Client.Client.OpenAPIDateConverter;

namespace Camunda.OpenApi.Client.Model
{
    /// <summary>
    /// TelemetryProductDto
    /// </summary>
    [DataContract(Name = "TelemetryProductDto")]
    public partial class TelemetryProductDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TelemetryProductDto" /> class.
        /// </summary>
        /// <param name="name">The name of the product (i.e., Camunda BPM Runtime)..</param>
        /// <param name="varVersion">The version of the process engine (i.e., 7.X.Y)..</param>
        /// <param name="edition">The edition of the product (i.e., either community or enterprise)..</param>
        /// <param name="internals">internals.</param>
        public TelemetryProductDto(string name = default(string), string varVersion = default(string), string edition = default(string), TelemetryInternalsDto internals = default(TelemetryInternalsDto))
        {
            this.Name = name;
            this.VarVersion = varVersion;
            this.Edition = edition;
            this.Internals = internals;
        }

        /// <summary>
        /// The name of the product (i.e., Camunda BPM Runtime).
        /// </summary>
        /// <value>The name of the product (i.e., Camunda BPM Runtime).</value>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// The version of the process engine (i.e., 7.X.Y).
        /// </summary>
        /// <value>The version of the process engine (i.e., 7.X.Y).</value>
        [DataMember(Name = "version", EmitDefaultValue = true)]
        public string VarVersion { get; set; }

        /// <summary>
        /// The edition of the product (i.e., either community or enterprise).
        /// </summary>
        /// <value>The edition of the product (i.e., either community or enterprise).</value>
        [DataMember(Name = "edition", EmitDefaultValue = true)]
        public string Edition { get; set; }

        /// <summary>
        /// Gets or Sets Internals
        /// </summary>
        [DataMember(Name = "internals", EmitDefaultValue = false)]
        public TelemetryInternalsDto Internals { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TelemetryProductDto {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  VarVersion: ").Append(VarVersion).Append("\n");
            sb.Append("  Edition: ").Append(Edition).Append("\n");
            sb.Append("  Internals: ").Append(Internals).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
