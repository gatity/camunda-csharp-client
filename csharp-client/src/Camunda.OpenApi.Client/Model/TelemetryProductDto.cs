/*
 * Camunda Platform REST API
 *
 * OpenApi Spec for Camunda Platform REST API.
 *
 * The version of the OpenAPI document: 7.17.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Camunda.OpenApi.Client.Client.FileParameter;
using OpenAPIDateConverter = Camunda.OpenApi.Client.Client.OpenAPIDateConverter;

namespace Camunda.OpenApi.Client.Model
{
    /// <summary>
    /// TelemetryProductDto
    /// </summary>
    [DataContract(Name = "TelemetryProductDto")]
    public partial class TelemetryProductDto : IEquatable<TelemetryProductDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TelemetryProductDto" /> class.
        /// </summary>
        /// <param name="name">The name of the product (i.e., Camunda BPM Runtime)..</param>
        /// <param name="version">The version of the process engine (i.e., 7.X.Y)..</param>
        /// <param name="edition">The edition of the product (i.e., either community or enterprise)..</param>
        /// <param name="internals">Internal data and metrics collected by the product..</param>
        public TelemetryProductDto(string name = default(string), string version = default(string), string edition = default(string), Dictionary<string, TelemetryInternalsDto> internals = default(Dictionary<string, TelemetryInternalsDto>))
        {
            this.Name = name;
            this._Version = version;
            this.Edition = edition;
            this.Internals = internals;
        }

        /// <summary>
        /// The name of the product (i.e., Camunda BPM Runtime).
        /// </summary>
        /// <value>The name of the product (i.e., Camunda BPM Runtime).</value>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// The version of the process engine (i.e., 7.X.Y).
        /// </summary>
        /// <value>The version of the process engine (i.e., 7.X.Y).</value>
        [DataMember(Name = "version", EmitDefaultValue = true)]
        public string _Version { get; set; }

        /// <summary>
        /// The edition of the product (i.e., either community or enterprise).
        /// </summary>
        /// <value>The edition of the product (i.e., either community or enterprise).</value>
        [DataMember(Name = "edition", EmitDefaultValue = true)]
        public string Edition { get; set; }

        /// <summary>
        /// Internal data and metrics collected by the product.
        /// </summary>
        /// <value>Internal data and metrics collected by the product.</value>
        [DataMember(Name = "internals", EmitDefaultValue = true)]
        public Dictionary<string, TelemetryInternalsDto> Internals { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TelemetryProductDto {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  _Version: ").Append(_Version).Append("\n");
            sb.Append("  Edition: ").Append(Edition).Append("\n");
            sb.Append("  Internals: ").Append(Internals).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TelemetryProductDto);
        }

        /// <summary>
        /// Returns true if TelemetryProductDto instances are equal
        /// </summary>
        /// <param name="input">Instance of TelemetryProductDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TelemetryProductDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this._Version == input._Version ||
                    (this._Version != null &&
                    this._Version.Equals(input._Version))
                ) && 
                (
                    this.Edition == input.Edition ||
                    (this.Edition != null &&
                    this.Edition.Equals(input.Edition))
                ) && 
                (
                    this.Internals == input.Internals ||
                    this.Internals != null &&
                    input.Internals != null &&
                    this.Internals.SequenceEqual(input.Internals)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this._Version != null)
                    hashCode = hashCode * 59 + this._Version.GetHashCode();
                if (this.Edition != null)
                    hashCode = hashCode * 59 + this.Edition.GetHashCode();
                if (this.Internals != null)
                    hashCode = hashCode * 59 + this.Internals.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
