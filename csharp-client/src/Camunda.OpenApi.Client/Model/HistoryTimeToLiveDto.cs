/*
 * Camunda Platform REST API
 *
 * OpenApi Spec for Camunda Platform REST API.
 *
 * The version of the OpenAPI document: 7.21.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Camunda.OpenApi.Client.Client.FileParameter;
using OpenAPIDateConverter = Camunda.OpenApi.Client.Client.OpenAPIDateConverter;

namespace Camunda.OpenApi.Client.Model
{
    /// <summary>
    /// HistoryTimeToLiveDto
    /// </summary>
    [DataContract(Name = "HistoryTimeToLiveDto")]
    public partial class HistoryTimeToLiveDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="HistoryTimeToLiveDto" /> class.
        /// </summary>
        /// <param name="historyTimeToLive">New value for historyTimeToLive field of the definition. Can be &#x60;null&#x60; if &#x60;enforceHistoryTimeToLive&#x60; is configured to &#x60;false&#x60;. Cannot be negative..</param>
        public HistoryTimeToLiveDto(int? historyTimeToLive = default(int?))
        {
            this.HistoryTimeToLive = historyTimeToLive;
        }

        /// <summary>
        /// New value for historyTimeToLive field of the definition. Can be &#x60;null&#x60; if &#x60;enforceHistoryTimeToLive&#x60; is configured to &#x60;false&#x60;. Cannot be negative.
        /// </summary>
        /// <value>New value for historyTimeToLive field of the definition. Can be &#x60;null&#x60; if &#x60;enforceHistoryTimeToLive&#x60; is configured to &#x60;false&#x60;. Cannot be negative.</value>
        [DataMember(Name = "historyTimeToLive", EmitDefaultValue = true)]
        public int? HistoryTimeToLive { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class HistoryTimeToLiveDto {\n");
            sb.Append("  HistoryTimeToLive: ").Append(HistoryTimeToLive).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // HistoryTimeToLive (int?) minimum
            if (this.HistoryTimeToLive < (int?)0)
            {
                yield return new ValidationResult("Invalid value for HistoryTimeToLive, must be a value greater than or equal to 0.", new [] { "HistoryTimeToLive" });
            }

            yield break;
        }
    }

}
