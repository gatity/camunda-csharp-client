/*
 * Camunda Platform REST API
 *
 * OpenApi Spec for Camunda Platform REST API.
 *
 * The version of the OpenAPI document: 7.21.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Camunda.OpenApi.Client.Client.FileParameter;
using OpenAPIDateConverter = Camunda.OpenApi.Client.Client.OpenAPIDateConverter;

namespace Camunda.OpenApi.Client.Model
{
    /// <summary>
    /// ModificationDto
    /// </summary>
    [DataContract(Name = "ModificationDto")]
    public partial class ModificationDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ModificationDto" /> class.
        /// </summary>
        /// <param name="processDefinitionId">The id of the process definition for the modification.</param>
        /// <param name="skipCustomListeners">Skip execution listener invocation for activities that are started or ended as part of this request..</param>
        /// <param name="skipIoMappings">Skip execution of [input/output variable mappings](https://docs.camunda.org/manual/7.21/user-guide/process-engine/variables/#input-output-variable-mapping) for activities that are started or ended as part of this request..</param>
        /// <param name="processInstanceIds">A list of process instance ids to modify..</param>
        /// <param name="processInstanceQuery">processInstanceQuery.</param>
        /// <param name="instructions">An array of modification instructions. The instructions are executed in the order they are in. .</param>
        /// <param name="annotation">An arbitrary text annotation set by a user for auditing reasons..</param>
        public ModificationDto(string processDefinitionId = default(string), bool? skipCustomListeners = default(bool?), bool? skipIoMappings = default(bool?), List<string> processInstanceIds = default(List<string>), ProcessInstanceQueryDto processInstanceQuery = default(ProcessInstanceQueryDto), List<MultipleProcessInstanceModificationInstructionDto> instructions = default(List<MultipleProcessInstanceModificationInstructionDto>), string annotation = default(string))
        {
            this.ProcessDefinitionId = processDefinitionId;
            this.SkipCustomListeners = skipCustomListeners;
            this.SkipIoMappings = skipIoMappings;
            this.ProcessInstanceIds = processInstanceIds;
            this.ProcessInstanceQuery = processInstanceQuery;
            this.Instructions = instructions;
            this.Annotation = annotation;
        }

        /// <summary>
        /// The id of the process definition for the modification
        /// </summary>
        /// <value>The id of the process definition for the modification</value>
        [DataMember(Name = "processDefinitionId", EmitDefaultValue = true)]
        public string ProcessDefinitionId { get; set; }

        /// <summary>
        /// Skip execution listener invocation for activities that are started or ended as part of this request.
        /// </summary>
        /// <value>Skip execution listener invocation for activities that are started or ended as part of this request.</value>
        [DataMember(Name = "skipCustomListeners", EmitDefaultValue = true)]
        public bool? SkipCustomListeners { get; set; }

        /// <summary>
        /// Skip execution of [input/output variable mappings](https://docs.camunda.org/manual/7.21/user-guide/process-engine/variables/#input-output-variable-mapping) for activities that are started or ended as part of this request.
        /// </summary>
        /// <value>Skip execution of [input/output variable mappings](https://docs.camunda.org/manual/7.21/user-guide/process-engine/variables/#input-output-variable-mapping) for activities that are started or ended as part of this request.</value>
        [DataMember(Name = "skipIoMappings", EmitDefaultValue = true)]
        public bool? SkipIoMappings { get; set; }

        /// <summary>
        /// A list of process instance ids to modify.
        /// </summary>
        /// <value>A list of process instance ids to modify.</value>
        [DataMember(Name = "processInstanceIds", EmitDefaultValue = true)]
        public List<string> ProcessInstanceIds { get; set; }

        /// <summary>
        /// Gets or Sets ProcessInstanceQuery
        /// </summary>
        [DataMember(Name = "processInstanceQuery", EmitDefaultValue = false)]
        public ProcessInstanceQueryDto ProcessInstanceQuery { get; set; }

        /// <summary>
        /// An array of modification instructions. The instructions are executed in the order they are in. 
        /// </summary>
        /// <value>An array of modification instructions. The instructions are executed in the order they are in. </value>
        [DataMember(Name = "instructions", EmitDefaultValue = true)]
        public List<MultipleProcessInstanceModificationInstructionDto> Instructions { get; set; }

        /// <summary>
        /// An arbitrary text annotation set by a user for auditing reasons.
        /// </summary>
        /// <value>An arbitrary text annotation set by a user for auditing reasons.</value>
        [DataMember(Name = "annotation", EmitDefaultValue = true)]
        public string Annotation { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ModificationDto {\n");
            sb.Append("  ProcessDefinitionId: ").Append(ProcessDefinitionId).Append("\n");
            sb.Append("  SkipCustomListeners: ").Append(SkipCustomListeners).Append("\n");
            sb.Append("  SkipIoMappings: ").Append(SkipIoMappings).Append("\n");
            sb.Append("  ProcessInstanceIds: ").Append(ProcessInstanceIds).Append("\n");
            sb.Append("  ProcessInstanceQuery: ").Append(ProcessInstanceQuery).Append("\n");
            sb.Append("  Instructions: ").Append(Instructions).Append("\n");
            sb.Append("  Annotation: ").Append(Annotation).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
