/*
 * Camunda Platform REST API
 *
 * OpenApi Spec for Camunda Platform REST API.
 *
 * The version of the OpenAPI document: 7.21.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Camunda.OpenApi.Client.Client.FileParameter;
using OpenAPIDateConverter = Camunda.OpenApi.Client.Client.OpenAPIDateConverter;

namespace Camunda.OpenApi.Client.Model
{
    /// <summary>
    /// SetRetriesForExternalTasksDto
    /// </summary>
    [DataContract(Name = "SetRetriesForExternalTasksDto")]
    public partial class SetRetriesForExternalTasksDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SetRetriesForExternalTasksDto" /> class.
        /// </summary>
        /// <param name="retries">The number of retries to set for the external task.  Must be &gt;&#x3D; 0. If this is 0, an incident is created and the task cannot be fetched anymore unless the retries are increased again. Can not be null..</param>
        /// <param name="externalTaskIds">The ids of the external tasks to set the number of retries for..</param>
        /// <param name="processInstanceIds">The ids of process instances containing the tasks to set the number of retries for..</param>
        /// <param name="externalTaskQuery">externalTaskQuery.</param>
        /// <param name="processInstanceQuery">processInstanceQuery.</param>
        /// <param name="historicProcessInstanceQuery">historicProcessInstanceQuery.</param>
        public SetRetriesForExternalTasksDto(int? retries = default(int?), List<string> externalTaskIds = default(List<string>), List<string> processInstanceIds = default(List<string>), ExternalTaskQueryDto externalTaskQuery = default(ExternalTaskQueryDto), ProcessInstanceQueryDto processInstanceQuery = default(ProcessInstanceQueryDto), HistoricProcessInstanceQueryDto historicProcessInstanceQuery = default(HistoricProcessInstanceQueryDto))
        {
            this.Retries = retries;
            this.ExternalTaskIds = externalTaskIds;
            this.ProcessInstanceIds = processInstanceIds;
            this.ExternalTaskQuery = externalTaskQuery;
            this.ProcessInstanceQuery = processInstanceQuery;
            this.HistoricProcessInstanceQuery = historicProcessInstanceQuery;
        }

        /// <summary>
        /// The number of retries to set for the external task.  Must be &gt;&#x3D; 0. If this is 0, an incident is created and the task cannot be fetched anymore unless the retries are increased again. Can not be null.
        /// </summary>
        /// <value>The number of retries to set for the external task.  Must be &gt;&#x3D; 0. If this is 0, an incident is created and the task cannot be fetched anymore unless the retries are increased again. Can not be null.</value>
        [DataMember(Name = "retries", EmitDefaultValue = true)]
        public int? Retries { get; set; }

        /// <summary>
        /// The ids of the external tasks to set the number of retries for.
        /// </summary>
        /// <value>The ids of the external tasks to set the number of retries for.</value>
        [DataMember(Name = "externalTaskIds", EmitDefaultValue = true)]
        public List<string> ExternalTaskIds { get; set; }

        /// <summary>
        /// The ids of process instances containing the tasks to set the number of retries for.
        /// </summary>
        /// <value>The ids of process instances containing the tasks to set the number of retries for.</value>
        [DataMember(Name = "processInstanceIds", EmitDefaultValue = true)]
        public List<string> ProcessInstanceIds { get; set; }

        /// <summary>
        /// Gets or Sets ExternalTaskQuery
        /// </summary>
        [DataMember(Name = "externalTaskQuery", EmitDefaultValue = false)]
        public ExternalTaskQueryDto ExternalTaskQuery { get; set; }

        /// <summary>
        /// Gets or Sets ProcessInstanceQuery
        /// </summary>
        [DataMember(Name = "processInstanceQuery", EmitDefaultValue = false)]
        public ProcessInstanceQueryDto ProcessInstanceQuery { get; set; }

        /// <summary>
        /// Gets or Sets HistoricProcessInstanceQuery
        /// </summary>
        [DataMember(Name = "historicProcessInstanceQuery", EmitDefaultValue = false)]
        public HistoricProcessInstanceQueryDto HistoricProcessInstanceQuery { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SetRetriesForExternalTasksDto {\n");
            sb.Append("  Retries: ").Append(Retries).Append("\n");
            sb.Append("  ExternalTaskIds: ").Append(ExternalTaskIds).Append("\n");
            sb.Append("  ProcessInstanceIds: ").Append(ProcessInstanceIds).Append("\n");
            sb.Append("  ExternalTaskQuery: ").Append(ExternalTaskQuery).Append("\n");
            sb.Append("  ProcessInstanceQuery: ").Append(ProcessInstanceQuery).Append("\n");
            sb.Append("  HistoricProcessInstanceQuery: ").Append(HistoricProcessInstanceQuery).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
