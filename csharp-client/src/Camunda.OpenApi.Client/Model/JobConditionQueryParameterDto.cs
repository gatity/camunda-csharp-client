/*
 * Camunda Platform REST API
 *
 * OpenApi Spec for Camunda Platform REST API.
 *
 * The version of the OpenAPI document: 7.16.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Camunda.OpenApi.Client.Client.FileParameter;
using OpenAPIDateConverter = Camunda.OpenApi.Client.Client.OpenAPIDateConverter;

namespace Camunda.OpenApi.Client.Model
{
    /// <summary>
    /// JobConditionQueryParameterDto
    /// </summary>
    [DataContract(Name = "JobConditionQueryParameterDto")]
    public partial class JobConditionQueryParameterDto : IEquatable<JobConditionQueryParameterDto>, IValidatableObject
    {
        /// <summary>
        /// Comparison operator to be used.
        /// </summary>
        /// <value>Comparison operator to be used.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum OperatorEnum
        {
            /// <summary>
            /// Enum Gt for value: gt
            /// </summary>
            [EnumMember(Value = "gt")]
            Gt = 1,

            /// <summary>
            /// Enum Lt for value: lt
            /// </summary>
            [EnumMember(Value = "lt")]
            Lt = 2

        }


        /// <summary>
        /// Comparison operator to be used.
        /// </summary>
        /// <value>Comparison operator to be used.</value>
        [DataMember(Name = "operator", EmitDefaultValue = true)]
        public OperatorEnum? Operator { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="JobConditionQueryParameterDto" /> class.
        /// </summary>
        /// <param name="_operator">Comparison operator to be used..</param>
        /// <param name="value">Date value to compare with..</param>
        public JobConditionQueryParameterDto(OperatorEnum? _operator = default(OperatorEnum?), DateTime? value = default(DateTime?))
        {
            this.Operator = _operator;
            this.Value = value;
        }

        /// <summary>
        /// Date value to compare with.
        /// </summary>
        /// <value>Date value to compare with.</value>
        [DataMember(Name = "value", EmitDefaultValue = true)]
        public DateTime? Value { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class JobConditionQueryParameterDto {\n");
            sb.Append("  Operator: ").Append(Operator).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as JobConditionQueryParameterDto);
        }

        /// <summary>
        /// Returns true if JobConditionQueryParameterDto instances are equal
        /// </summary>
        /// <param name="input">Instance of JobConditionQueryParameterDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JobConditionQueryParameterDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Operator == input.Operator ||
                    this.Operator.Equals(input.Operator)
                ) && 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Operator.GetHashCode();
                if (this.Value != null)
                    hashCode = hashCode * 59 + this.Value.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
