/*
 * Camunda Platform REST API
 *
 * OpenApi Spec for Camunda Platform REST API.
 *
 * The version of the OpenAPI document: 7.16.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Camunda.OpenApi.Client.Client.FileParameter;
using OpenAPIDateConverter = Camunda.OpenApi.Client.Client.OpenAPIDateConverter;

namespace Camunda.OpenApi.Client.Model
{
    /// <summary>
    /// HistoricJobLogDto
    /// </summary>
    [DataContract(Name = "HistoricJobLogDto")]
    public partial class HistoricJobLogDto : IEquatable<HistoricJobLogDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="HistoricJobLogDto" /> class.
        /// </summary>
        /// <param name="id">The id of the log entry..</param>
        /// <param name="timestamp">The time when the log entry has been written..</param>
        /// <param name="removalTime">The time after which the log entry should be removed by the History Cleanup job. Default format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;. For further info see the [docs](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/).</param>
        /// <param name="jobId">The id of the associated job..</param>
        /// <param name="jobDueDate">The date on which the associated job is supposed to be processed..</param>
        /// <param name="jobRetries">The number of retries the associated job has left..</param>
        /// <param name="jobPriority">The execution priority the job had when the log entry was created..</param>
        /// <param name="jobExceptionMessage">The message of the exception that occurred by executing the associated job..</param>
        /// <param name="failedActivityId">The id of the activity on which the last exception occurred by executing the associated job..</param>
        /// <param name="jobDefinitionId">The id of the job definition on which the associated job was created..</param>
        /// <param name="jobDefinitionType">The job definition type of the associated job. See the [User Guide](https://docs.camunda.org/manual/7.16/user-guide/process-engine/the-job-executor/#job-creation) for more information about job definition types..</param>
        /// <param name="jobDefinitionConfiguration">The job definition configuration type of the associated job..</param>
        /// <param name="activityId">The id of the activity on which the associated job was created..</param>
        /// <param name="executionId">The execution id on which the associated job was created..</param>
        /// <param name="processInstanceId">The id of the process instance on which the associated job was created..</param>
        /// <param name="processDefinitionId">The id of the process definition which the associated job belongs to..</param>
        /// <param name="processDefinitionKey">The key of the process definition which the associated job belongs to..</param>
        /// <param name="deploymentId">The id of the deployment which the associated job belongs to..</param>
        /// <param name="rootProcessInstanceId">The process instance id of the root process instance that initiated the process which the associated job belongs to..</param>
        /// <param name="tenantId">The id of the tenant that this historic job log entry belongs to..</param>
        /// <param name="hostname"> The name of the host of the Process Engine where the job of this historic job log entry was executed..</param>
        /// <param name="creationLog">A flag indicating whether this log represents the creation of the associated job..</param>
        /// <param name="failureLog">A flag indicating whether this log represents the failed execution of the associated job..</param>
        /// <param name="successLog">A flag indicating whether this log represents the successful execution of the associated job..</param>
        /// <param name="deletionLog">A flag indicating whether this log represents the deletion of the associated job..</param>
        public HistoricJobLogDto(string id = default(string), DateTime? timestamp = default(DateTime?), DateTime? removalTime = default(DateTime?), string jobId = default(string), DateTime? jobDueDate = default(DateTime?), int? jobRetries = default(int?), long? jobPriority = default(long?), string jobExceptionMessage = default(string), string failedActivityId = default(string), string jobDefinitionId = default(string), string jobDefinitionType = default(string), string jobDefinitionConfiguration = default(string), string activityId = default(string), string executionId = default(string), string processInstanceId = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string deploymentId = default(string), string rootProcessInstanceId = default(string), string tenantId = default(string), string hostname = default(string), bool? creationLog = default(bool?), bool? failureLog = default(bool?), bool? successLog = default(bool?), bool? deletionLog = default(bool?))
        {
            this.Id = id;
            this.Timestamp = timestamp;
            this.RemovalTime = removalTime;
            this.JobId = jobId;
            this.JobDueDate = jobDueDate;
            this.JobRetries = jobRetries;
            this.JobPriority = jobPriority;
            this.JobExceptionMessage = jobExceptionMessage;
            this.FailedActivityId = failedActivityId;
            this.JobDefinitionId = jobDefinitionId;
            this.JobDefinitionType = jobDefinitionType;
            this.JobDefinitionConfiguration = jobDefinitionConfiguration;
            this.ActivityId = activityId;
            this.ExecutionId = executionId;
            this.ProcessInstanceId = processInstanceId;
            this.ProcessDefinitionId = processDefinitionId;
            this.ProcessDefinitionKey = processDefinitionKey;
            this.DeploymentId = deploymentId;
            this.RootProcessInstanceId = rootProcessInstanceId;
            this.TenantId = tenantId;
            this.Hostname = hostname;
            this.CreationLog = creationLog;
            this.FailureLog = failureLog;
            this.SuccessLog = successLog;
            this.DeletionLog = deletionLog;
        }

        /// <summary>
        /// The id of the log entry.
        /// </summary>
        /// <value>The id of the log entry.</value>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// The time when the log entry has been written.
        /// </summary>
        /// <value>The time when the log entry has been written.</value>
        [DataMember(Name = "timestamp", EmitDefaultValue = true)]
        public DateTime? Timestamp { get; set; }

        /// <summary>
        /// The time after which the log entry should be removed by the History Cleanup job. Default format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;. For further info see the [docs](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/)
        /// </summary>
        /// <value>The time after which the log entry should be removed by the History Cleanup job. Default format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;. For further info see the [docs](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/)</value>
        [DataMember(Name = "removalTime", EmitDefaultValue = true)]
        public DateTime? RemovalTime { get; set; }

        /// <summary>
        /// The id of the associated job.
        /// </summary>
        /// <value>The id of the associated job.</value>
        [DataMember(Name = "jobId", EmitDefaultValue = true)]
        public string JobId { get; set; }

        /// <summary>
        /// The date on which the associated job is supposed to be processed.
        /// </summary>
        /// <value>The date on which the associated job is supposed to be processed.</value>
        [DataMember(Name = "jobDueDate", EmitDefaultValue = true)]
        public DateTime? JobDueDate { get; set; }

        /// <summary>
        /// The number of retries the associated job has left.
        /// </summary>
        /// <value>The number of retries the associated job has left.</value>
        [DataMember(Name = "jobRetries", EmitDefaultValue = true)]
        public int? JobRetries { get; set; }

        /// <summary>
        /// The execution priority the job had when the log entry was created.
        /// </summary>
        /// <value>The execution priority the job had when the log entry was created.</value>
        [DataMember(Name = "jobPriority", EmitDefaultValue = true)]
        public long? JobPriority { get; set; }

        /// <summary>
        /// The message of the exception that occurred by executing the associated job.
        /// </summary>
        /// <value>The message of the exception that occurred by executing the associated job.</value>
        [DataMember(Name = "jobExceptionMessage", EmitDefaultValue = true)]
        public string JobExceptionMessage { get; set; }

        /// <summary>
        /// The id of the activity on which the last exception occurred by executing the associated job.
        /// </summary>
        /// <value>The id of the activity on which the last exception occurred by executing the associated job.</value>
        [DataMember(Name = "failedActivityId", EmitDefaultValue = true)]
        public string FailedActivityId { get; set; }

        /// <summary>
        /// The id of the job definition on which the associated job was created.
        /// </summary>
        /// <value>The id of the job definition on which the associated job was created.</value>
        [DataMember(Name = "jobDefinitionId", EmitDefaultValue = true)]
        public string JobDefinitionId { get; set; }

        /// <summary>
        /// The job definition type of the associated job. See the [User Guide](https://docs.camunda.org/manual/7.16/user-guide/process-engine/the-job-executor/#job-creation) for more information about job definition types.
        /// </summary>
        /// <value>The job definition type of the associated job. See the [User Guide](https://docs.camunda.org/manual/7.16/user-guide/process-engine/the-job-executor/#job-creation) for more information about job definition types.</value>
        [DataMember(Name = "jobDefinitionType", EmitDefaultValue = true)]
        public string JobDefinitionType { get; set; }

        /// <summary>
        /// The job definition configuration type of the associated job.
        /// </summary>
        /// <value>The job definition configuration type of the associated job.</value>
        [DataMember(Name = "jobDefinitionConfiguration", EmitDefaultValue = true)]
        public string JobDefinitionConfiguration { get; set; }

        /// <summary>
        /// The id of the activity on which the associated job was created.
        /// </summary>
        /// <value>The id of the activity on which the associated job was created.</value>
        [DataMember(Name = "activityId", EmitDefaultValue = true)]
        public string ActivityId { get; set; }

        /// <summary>
        /// The execution id on which the associated job was created.
        /// </summary>
        /// <value>The execution id on which the associated job was created.</value>
        [DataMember(Name = "executionId", EmitDefaultValue = true)]
        public string ExecutionId { get; set; }

        /// <summary>
        /// The id of the process instance on which the associated job was created.
        /// </summary>
        /// <value>The id of the process instance on which the associated job was created.</value>
        [DataMember(Name = "processInstanceId", EmitDefaultValue = true)]
        public string ProcessInstanceId { get; set; }

        /// <summary>
        /// The id of the process definition which the associated job belongs to.
        /// </summary>
        /// <value>The id of the process definition which the associated job belongs to.</value>
        [DataMember(Name = "processDefinitionId", EmitDefaultValue = true)]
        public string ProcessDefinitionId { get; set; }

        /// <summary>
        /// The key of the process definition which the associated job belongs to.
        /// </summary>
        /// <value>The key of the process definition which the associated job belongs to.</value>
        [DataMember(Name = "processDefinitionKey", EmitDefaultValue = true)]
        public string ProcessDefinitionKey { get; set; }

        /// <summary>
        /// The id of the deployment which the associated job belongs to.
        /// </summary>
        /// <value>The id of the deployment which the associated job belongs to.</value>
        [DataMember(Name = "deploymentId", EmitDefaultValue = true)]
        public string DeploymentId { get; set; }

        /// <summary>
        /// The process instance id of the root process instance that initiated the process which the associated job belongs to.
        /// </summary>
        /// <value>The process instance id of the root process instance that initiated the process which the associated job belongs to.</value>
        [DataMember(Name = "rootProcessInstanceId", EmitDefaultValue = true)]
        public string RootProcessInstanceId { get; set; }

        /// <summary>
        /// The id of the tenant that this historic job log entry belongs to.
        /// </summary>
        /// <value>The id of the tenant that this historic job log entry belongs to.</value>
        [DataMember(Name = "tenantId", EmitDefaultValue = true)]
        public string TenantId { get; set; }

        /// <summary>
        ///  The name of the host of the Process Engine where the job of this historic job log entry was executed.
        /// </summary>
        /// <value> The name of the host of the Process Engine where the job of this historic job log entry was executed.</value>
        [DataMember(Name = "hostname", EmitDefaultValue = true)]
        public string Hostname { get; set; }

        /// <summary>
        /// A flag indicating whether this log represents the creation of the associated job.
        /// </summary>
        /// <value>A flag indicating whether this log represents the creation of the associated job.</value>
        [DataMember(Name = "creationLog", EmitDefaultValue = true)]
        public bool? CreationLog { get; set; }

        /// <summary>
        /// A flag indicating whether this log represents the failed execution of the associated job.
        /// </summary>
        /// <value>A flag indicating whether this log represents the failed execution of the associated job.</value>
        [DataMember(Name = "failureLog", EmitDefaultValue = true)]
        public bool? FailureLog { get; set; }

        /// <summary>
        /// A flag indicating whether this log represents the successful execution of the associated job.
        /// </summary>
        /// <value>A flag indicating whether this log represents the successful execution of the associated job.</value>
        [DataMember(Name = "successLog", EmitDefaultValue = true)]
        public bool? SuccessLog { get; set; }

        /// <summary>
        /// A flag indicating whether this log represents the deletion of the associated job.
        /// </summary>
        /// <value>A flag indicating whether this log represents the deletion of the associated job.</value>
        [DataMember(Name = "deletionLog", EmitDefaultValue = true)]
        public bool? DeletionLog { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class HistoricJobLogDto {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  RemovalTime: ").Append(RemovalTime).Append("\n");
            sb.Append("  JobId: ").Append(JobId).Append("\n");
            sb.Append("  JobDueDate: ").Append(JobDueDate).Append("\n");
            sb.Append("  JobRetries: ").Append(JobRetries).Append("\n");
            sb.Append("  JobPriority: ").Append(JobPriority).Append("\n");
            sb.Append("  JobExceptionMessage: ").Append(JobExceptionMessage).Append("\n");
            sb.Append("  FailedActivityId: ").Append(FailedActivityId).Append("\n");
            sb.Append("  JobDefinitionId: ").Append(JobDefinitionId).Append("\n");
            sb.Append("  JobDefinitionType: ").Append(JobDefinitionType).Append("\n");
            sb.Append("  JobDefinitionConfiguration: ").Append(JobDefinitionConfiguration).Append("\n");
            sb.Append("  ActivityId: ").Append(ActivityId).Append("\n");
            sb.Append("  ExecutionId: ").Append(ExecutionId).Append("\n");
            sb.Append("  ProcessInstanceId: ").Append(ProcessInstanceId).Append("\n");
            sb.Append("  ProcessDefinitionId: ").Append(ProcessDefinitionId).Append("\n");
            sb.Append("  ProcessDefinitionKey: ").Append(ProcessDefinitionKey).Append("\n");
            sb.Append("  DeploymentId: ").Append(DeploymentId).Append("\n");
            sb.Append("  RootProcessInstanceId: ").Append(RootProcessInstanceId).Append("\n");
            sb.Append("  TenantId: ").Append(TenantId).Append("\n");
            sb.Append("  Hostname: ").Append(Hostname).Append("\n");
            sb.Append("  CreationLog: ").Append(CreationLog).Append("\n");
            sb.Append("  FailureLog: ").Append(FailureLog).Append("\n");
            sb.Append("  SuccessLog: ").Append(SuccessLog).Append("\n");
            sb.Append("  DeletionLog: ").Append(DeletionLog).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as HistoricJobLogDto);
        }

        /// <summary>
        /// Returns true if HistoricJobLogDto instances are equal
        /// </summary>
        /// <param name="input">Instance of HistoricJobLogDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(HistoricJobLogDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Timestamp == input.Timestamp ||
                    (this.Timestamp != null &&
                    this.Timestamp.Equals(input.Timestamp))
                ) && 
                (
                    this.RemovalTime == input.RemovalTime ||
                    (this.RemovalTime != null &&
                    this.RemovalTime.Equals(input.RemovalTime))
                ) && 
                (
                    this.JobId == input.JobId ||
                    (this.JobId != null &&
                    this.JobId.Equals(input.JobId))
                ) && 
                (
                    this.JobDueDate == input.JobDueDate ||
                    (this.JobDueDate != null &&
                    this.JobDueDate.Equals(input.JobDueDate))
                ) && 
                (
                    this.JobRetries == input.JobRetries ||
                    (this.JobRetries != null &&
                    this.JobRetries.Equals(input.JobRetries))
                ) && 
                (
                    this.JobPriority == input.JobPriority ||
                    (this.JobPriority != null &&
                    this.JobPriority.Equals(input.JobPriority))
                ) && 
                (
                    this.JobExceptionMessage == input.JobExceptionMessage ||
                    (this.JobExceptionMessage != null &&
                    this.JobExceptionMessage.Equals(input.JobExceptionMessage))
                ) && 
                (
                    this.FailedActivityId == input.FailedActivityId ||
                    (this.FailedActivityId != null &&
                    this.FailedActivityId.Equals(input.FailedActivityId))
                ) && 
                (
                    this.JobDefinitionId == input.JobDefinitionId ||
                    (this.JobDefinitionId != null &&
                    this.JobDefinitionId.Equals(input.JobDefinitionId))
                ) && 
                (
                    this.JobDefinitionType == input.JobDefinitionType ||
                    (this.JobDefinitionType != null &&
                    this.JobDefinitionType.Equals(input.JobDefinitionType))
                ) && 
                (
                    this.JobDefinitionConfiguration == input.JobDefinitionConfiguration ||
                    (this.JobDefinitionConfiguration != null &&
                    this.JobDefinitionConfiguration.Equals(input.JobDefinitionConfiguration))
                ) && 
                (
                    this.ActivityId == input.ActivityId ||
                    (this.ActivityId != null &&
                    this.ActivityId.Equals(input.ActivityId))
                ) && 
                (
                    this.ExecutionId == input.ExecutionId ||
                    (this.ExecutionId != null &&
                    this.ExecutionId.Equals(input.ExecutionId))
                ) && 
                (
                    this.ProcessInstanceId == input.ProcessInstanceId ||
                    (this.ProcessInstanceId != null &&
                    this.ProcessInstanceId.Equals(input.ProcessInstanceId))
                ) && 
                (
                    this.ProcessDefinitionId == input.ProcessDefinitionId ||
                    (this.ProcessDefinitionId != null &&
                    this.ProcessDefinitionId.Equals(input.ProcessDefinitionId))
                ) && 
                (
                    this.ProcessDefinitionKey == input.ProcessDefinitionKey ||
                    (this.ProcessDefinitionKey != null &&
                    this.ProcessDefinitionKey.Equals(input.ProcessDefinitionKey))
                ) && 
                (
                    this.DeploymentId == input.DeploymentId ||
                    (this.DeploymentId != null &&
                    this.DeploymentId.Equals(input.DeploymentId))
                ) && 
                (
                    this.RootProcessInstanceId == input.RootProcessInstanceId ||
                    (this.RootProcessInstanceId != null &&
                    this.RootProcessInstanceId.Equals(input.RootProcessInstanceId))
                ) && 
                (
                    this.TenantId == input.TenantId ||
                    (this.TenantId != null &&
                    this.TenantId.Equals(input.TenantId))
                ) && 
                (
                    this.Hostname == input.Hostname ||
                    (this.Hostname != null &&
                    this.Hostname.Equals(input.Hostname))
                ) && 
                (
                    this.CreationLog == input.CreationLog ||
                    (this.CreationLog != null &&
                    this.CreationLog.Equals(input.CreationLog))
                ) && 
                (
                    this.FailureLog == input.FailureLog ||
                    (this.FailureLog != null &&
                    this.FailureLog.Equals(input.FailureLog))
                ) && 
                (
                    this.SuccessLog == input.SuccessLog ||
                    (this.SuccessLog != null &&
                    this.SuccessLog.Equals(input.SuccessLog))
                ) && 
                (
                    this.DeletionLog == input.DeletionLog ||
                    (this.DeletionLog != null &&
                    this.DeletionLog.Equals(input.DeletionLog))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Timestamp != null)
                    hashCode = hashCode * 59 + this.Timestamp.GetHashCode();
                if (this.RemovalTime != null)
                    hashCode = hashCode * 59 + this.RemovalTime.GetHashCode();
                if (this.JobId != null)
                    hashCode = hashCode * 59 + this.JobId.GetHashCode();
                if (this.JobDueDate != null)
                    hashCode = hashCode * 59 + this.JobDueDate.GetHashCode();
                if (this.JobRetries != null)
                    hashCode = hashCode * 59 + this.JobRetries.GetHashCode();
                if (this.JobPriority != null)
                    hashCode = hashCode * 59 + this.JobPriority.GetHashCode();
                if (this.JobExceptionMessage != null)
                    hashCode = hashCode * 59 + this.JobExceptionMessage.GetHashCode();
                if (this.FailedActivityId != null)
                    hashCode = hashCode * 59 + this.FailedActivityId.GetHashCode();
                if (this.JobDefinitionId != null)
                    hashCode = hashCode * 59 + this.JobDefinitionId.GetHashCode();
                if (this.JobDefinitionType != null)
                    hashCode = hashCode * 59 + this.JobDefinitionType.GetHashCode();
                if (this.JobDefinitionConfiguration != null)
                    hashCode = hashCode * 59 + this.JobDefinitionConfiguration.GetHashCode();
                if (this.ActivityId != null)
                    hashCode = hashCode * 59 + this.ActivityId.GetHashCode();
                if (this.ExecutionId != null)
                    hashCode = hashCode * 59 + this.ExecutionId.GetHashCode();
                if (this.ProcessInstanceId != null)
                    hashCode = hashCode * 59 + this.ProcessInstanceId.GetHashCode();
                if (this.ProcessDefinitionId != null)
                    hashCode = hashCode * 59 + this.ProcessDefinitionId.GetHashCode();
                if (this.ProcessDefinitionKey != null)
                    hashCode = hashCode * 59 + this.ProcessDefinitionKey.GetHashCode();
                if (this.DeploymentId != null)
                    hashCode = hashCode * 59 + this.DeploymentId.GetHashCode();
                if (this.RootProcessInstanceId != null)
                    hashCode = hashCode * 59 + this.RootProcessInstanceId.GetHashCode();
                if (this.TenantId != null)
                    hashCode = hashCode * 59 + this.TenantId.GetHashCode();
                if (this.Hostname != null)
                    hashCode = hashCode * 59 + this.Hostname.GetHashCode();
                if (this.CreationLog != null)
                    hashCode = hashCode * 59 + this.CreationLog.GetHashCode();
                if (this.FailureLog != null)
                    hashCode = hashCode * 59 + this.FailureLog.GetHashCode();
                if (this.SuccessLog != null)
                    hashCode = hashCode * 59 + this.SuccessLog.GetHashCode();
                if (this.DeletionLog != null)
                    hashCode = hashCode * 59 + this.DeletionLog.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
