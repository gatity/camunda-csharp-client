/*
 * Camunda Platform REST API
 *
 * OpenApi Spec for Camunda Platform REST API.
 *
 * The version of the OpenAPI document: 7.21.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Camunda.OpenApi.Client.Client.FileParameter;
using OpenAPIDateConverter = Camunda.OpenApi.Client.Client.OpenAPIDateConverter;

namespace Camunda.OpenApi.Client.Model
{
    /// <summary>
    /// A JSON object with the following properties:
    /// </summary>
    [DataContract(Name = "ExternalTaskQueryDto")]
    public partial class ExternalTaskQueryDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ExternalTaskQueryDto" /> class.
        /// </summary>
        /// <param name="externalTaskId">Filter by an external task&#39;s id..</param>
        /// <param name="externalTaskIdIn">Filter by the comma-separated list of external task ids..</param>
        /// <param name="topicName">Filter by an external task topic..</param>
        /// <param name="workerId">Filter by the id of the worker that the task was most recently locked by..</param>
        /// <param name="locked">Only include external tasks that are currently locked (i.e., they have a lock time and it has not expired). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task..</param>
        /// <param name="notLocked">Only include external tasks that are currently not locked (i.e., they have no lock or it has expired). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task..</param>
        /// <param name="withRetriesLeft">Only include external tasks that have a positive (&amp;gt; 0) number of retries (or &#x60;null&#x60;). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task..</param>
        /// <param name="noRetriesLeft">Only include external tasks that have 0 retries. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task..</param>
        /// <param name="lockExpirationAfter">Restrict to external tasks that have a lock that expires after a given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;..</param>
        /// <param name="lockExpirationBefore">Restrict to external tasks that have a lock that expires before a given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;..</param>
        /// <param name="activityId">Filter by the id of the activity that an external task is created for..</param>
        /// <param name="activityIdIn">Filter by the comma-separated list of ids of the activities that an external task is created for..</param>
        /// <param name="executionId">Filter by the id of the execution that an external task belongs to..</param>
        /// <param name="processInstanceId">Filter by the id of the process instance that an external task belongs to..</param>
        /// <param name="processInstanceIdIn">Filter by a comma-separated list of process instance ids that an external task may belong to..</param>
        /// <param name="processDefinitionId">Filter by the id of the process definition that an external task belongs to..</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. An external task must have one of the given tenant ids..</param>
        /// <param name="active">Only include active tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task..</param>
        /// <param name="suspended">Only include suspended tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task..</param>
        /// <param name="priorityHigherThanOrEquals">Only include jobs with a priority higher than or equal to the given value. Value must be a valid &#x60;long&#x60; value..</param>
        /// <param name="priorityLowerThanOrEquals">Only include jobs with a priority lower than or equal to the given value. Value must be a valid &#x60;long&#x60; value..</param>
        /// <param name="sorting">A JSON array of criteria to sort the result by. Each element of the array is a JSON object that                     specifies one ordering. The position in the array identifies the rank of an ordering, i.e., whether                     it is primary, secondary, etc. The ordering objects have the following properties:                      **Note:** The &#x60;sorting&#x60; properties will not be applied to the External Task count query..</param>
        public ExternalTaskQueryDto(string externalTaskId = default(string), List<string> externalTaskIdIn = default(List<string>), string topicName = default(string), string workerId = default(string), bool? locked = default(bool?), bool? notLocked = default(bool?), bool? withRetriesLeft = default(bool?), bool? noRetriesLeft = default(bool?), DateTime? lockExpirationAfter = default(DateTime?), DateTime? lockExpirationBefore = default(DateTime?), string activityId = default(string), List<string> activityIdIn = default(List<string>), string executionId = default(string), string processInstanceId = default(string), List<string> processInstanceIdIn = default(List<string>), string processDefinitionId = default(string), List<string> tenantIdIn = default(List<string>), bool? active = default(bool?), bool? suspended = default(bool?), long? priorityHigherThanOrEquals = default(long?), long? priorityLowerThanOrEquals = default(long?), List<ExternalTaskQueryDtoSortingInner> sorting = default(List<ExternalTaskQueryDtoSortingInner>))
        {
            this.ExternalTaskId = externalTaskId;
            this.ExternalTaskIdIn = externalTaskIdIn;
            this.TopicName = topicName;
            this.WorkerId = workerId;
            this.Locked = locked;
            this.NotLocked = notLocked;
            this.WithRetriesLeft = withRetriesLeft;
            this.NoRetriesLeft = noRetriesLeft;
            this.LockExpirationAfter = lockExpirationAfter;
            this.LockExpirationBefore = lockExpirationBefore;
            this.ActivityId = activityId;
            this.ActivityIdIn = activityIdIn;
            this.ExecutionId = executionId;
            this.ProcessInstanceId = processInstanceId;
            this.ProcessInstanceIdIn = processInstanceIdIn;
            this.ProcessDefinitionId = processDefinitionId;
            this.TenantIdIn = tenantIdIn;
            this.Active = active;
            this.Suspended = suspended;
            this.PriorityHigherThanOrEquals = priorityHigherThanOrEquals;
            this.PriorityLowerThanOrEquals = priorityLowerThanOrEquals;
            this.Sorting = sorting;
        }

        /// <summary>
        /// Filter by an external task&#39;s id.
        /// </summary>
        /// <value>Filter by an external task&#39;s id.</value>
        [DataMember(Name = "externalTaskId", EmitDefaultValue = true)]
        public string ExternalTaskId { get; set; }

        /// <summary>
        /// Filter by the comma-separated list of external task ids.
        /// </summary>
        /// <value>Filter by the comma-separated list of external task ids.</value>
        [DataMember(Name = "externalTaskIdIn", EmitDefaultValue = true)]
        public List<string> ExternalTaskIdIn { get; set; }

        /// <summary>
        /// Filter by an external task topic.
        /// </summary>
        /// <value>Filter by an external task topic.</value>
        [DataMember(Name = "topicName", EmitDefaultValue = true)]
        public string TopicName { get; set; }

        /// <summary>
        /// Filter by the id of the worker that the task was most recently locked by.
        /// </summary>
        /// <value>Filter by the id of the worker that the task was most recently locked by.</value>
        [DataMember(Name = "workerId", EmitDefaultValue = true)]
        public string WorkerId { get; set; }

        /// <summary>
        /// Only include external tasks that are currently locked (i.e., they have a lock time and it has not expired). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task.
        /// </summary>
        /// <value>Only include external tasks that are currently locked (i.e., they have a lock time and it has not expired). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task.</value>
        [DataMember(Name = "locked", EmitDefaultValue = true)]
        public bool? Locked { get; set; }

        /// <summary>
        /// Only include external tasks that are currently not locked (i.e., they have no lock or it has expired). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task.
        /// </summary>
        /// <value>Only include external tasks that are currently not locked (i.e., they have no lock or it has expired). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task.</value>
        [DataMember(Name = "notLocked", EmitDefaultValue = true)]
        public bool? NotLocked { get; set; }

        /// <summary>
        /// Only include external tasks that have a positive (&amp;gt; 0) number of retries (or &#x60;null&#x60;). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task.
        /// </summary>
        /// <value>Only include external tasks that have a positive (&amp;gt; 0) number of retries (or &#x60;null&#x60;). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task.</value>
        [DataMember(Name = "withRetriesLeft", EmitDefaultValue = true)]
        public bool? WithRetriesLeft { get; set; }

        /// <summary>
        /// Only include external tasks that have 0 retries. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task.
        /// </summary>
        /// <value>Only include external tasks that have 0 retries. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task.</value>
        [DataMember(Name = "noRetriesLeft", EmitDefaultValue = true)]
        public bool? NoRetriesLeft { get; set; }

        /// <summary>
        /// Restrict to external tasks that have a lock that expires after a given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
        /// </summary>
        /// <value>Restrict to external tasks that have a lock that expires after a given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.</value>
        [DataMember(Name = "lockExpirationAfter", EmitDefaultValue = true)]
        public DateTime? LockExpirationAfter { get; set; }

        /// <summary>
        /// Restrict to external tasks that have a lock that expires before a given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
        /// </summary>
        /// <value>Restrict to external tasks that have a lock that expires before a given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.</value>
        [DataMember(Name = "lockExpirationBefore", EmitDefaultValue = true)]
        public DateTime? LockExpirationBefore { get; set; }

        /// <summary>
        /// Filter by the id of the activity that an external task is created for.
        /// </summary>
        /// <value>Filter by the id of the activity that an external task is created for.</value>
        [DataMember(Name = "activityId", EmitDefaultValue = true)]
        public string ActivityId { get; set; }

        /// <summary>
        /// Filter by the comma-separated list of ids of the activities that an external task is created for.
        /// </summary>
        /// <value>Filter by the comma-separated list of ids of the activities that an external task is created for.</value>
        [DataMember(Name = "activityIdIn", EmitDefaultValue = true)]
        public List<string> ActivityIdIn { get; set; }

        /// <summary>
        /// Filter by the id of the execution that an external task belongs to.
        /// </summary>
        /// <value>Filter by the id of the execution that an external task belongs to.</value>
        [DataMember(Name = "executionId", EmitDefaultValue = true)]
        public string ExecutionId { get; set; }

        /// <summary>
        /// Filter by the id of the process instance that an external task belongs to.
        /// </summary>
        /// <value>Filter by the id of the process instance that an external task belongs to.</value>
        [DataMember(Name = "processInstanceId", EmitDefaultValue = true)]
        public string ProcessInstanceId { get; set; }

        /// <summary>
        /// Filter by a comma-separated list of process instance ids that an external task may belong to.
        /// </summary>
        /// <value>Filter by a comma-separated list of process instance ids that an external task may belong to.</value>
        [DataMember(Name = "processInstanceIdIn", EmitDefaultValue = true)]
        public List<string> ProcessInstanceIdIn { get; set; }

        /// <summary>
        /// Filter by the id of the process definition that an external task belongs to.
        /// </summary>
        /// <value>Filter by the id of the process definition that an external task belongs to.</value>
        [DataMember(Name = "processDefinitionId", EmitDefaultValue = true)]
        public string ProcessDefinitionId { get; set; }

        /// <summary>
        /// Filter by a comma-separated list of tenant ids. An external task must have one of the given tenant ids.
        /// </summary>
        /// <value>Filter by a comma-separated list of tenant ids. An external task must have one of the given tenant ids.</value>
        [DataMember(Name = "tenantIdIn", EmitDefaultValue = true)]
        public List<string> TenantIdIn { get; set; }

        /// <summary>
        /// Only include active tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task.
        /// </summary>
        /// <value>Only include active tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task.</value>
        [DataMember(Name = "active", EmitDefaultValue = true)]
        public bool? Active { get; set; }

        /// <summary>
        /// Only include suspended tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task.
        /// </summary>
        /// <value>Only include suspended tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task.</value>
        [DataMember(Name = "suspended", EmitDefaultValue = true)]
        public bool? Suspended { get; set; }

        /// <summary>
        /// Only include jobs with a priority higher than or equal to the given value. Value must be a valid &#x60;long&#x60; value.
        /// </summary>
        /// <value>Only include jobs with a priority higher than or equal to the given value. Value must be a valid &#x60;long&#x60; value.</value>
        [DataMember(Name = "priorityHigherThanOrEquals", EmitDefaultValue = true)]
        public long? PriorityHigherThanOrEquals { get; set; }

        /// <summary>
        /// Only include jobs with a priority lower than or equal to the given value. Value must be a valid &#x60;long&#x60; value.
        /// </summary>
        /// <value>Only include jobs with a priority lower than or equal to the given value. Value must be a valid &#x60;long&#x60; value.</value>
        [DataMember(Name = "priorityLowerThanOrEquals", EmitDefaultValue = true)]
        public long? PriorityLowerThanOrEquals { get; set; }

        /// <summary>
        /// A JSON array of criteria to sort the result by. Each element of the array is a JSON object that                     specifies one ordering. The position in the array identifies the rank of an ordering, i.e., whether                     it is primary, secondary, etc. The ordering objects have the following properties:                      **Note:** The &#x60;sorting&#x60; properties will not be applied to the External Task count query.
        /// </summary>
        /// <value>A JSON array of criteria to sort the result by. Each element of the array is a JSON object that                     specifies one ordering. The position in the array identifies the rank of an ordering, i.e., whether                     it is primary, secondary, etc. The ordering objects have the following properties:                      **Note:** The &#x60;sorting&#x60; properties will not be applied to the External Task count query.</value>
        [DataMember(Name = "sorting", EmitDefaultValue = true)]
        public List<ExternalTaskQueryDtoSortingInner> Sorting { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ExternalTaskQueryDto {\n");
            sb.Append("  ExternalTaskId: ").Append(ExternalTaskId).Append("\n");
            sb.Append("  ExternalTaskIdIn: ").Append(ExternalTaskIdIn).Append("\n");
            sb.Append("  TopicName: ").Append(TopicName).Append("\n");
            sb.Append("  WorkerId: ").Append(WorkerId).Append("\n");
            sb.Append("  Locked: ").Append(Locked).Append("\n");
            sb.Append("  NotLocked: ").Append(NotLocked).Append("\n");
            sb.Append("  WithRetriesLeft: ").Append(WithRetriesLeft).Append("\n");
            sb.Append("  NoRetriesLeft: ").Append(NoRetriesLeft).Append("\n");
            sb.Append("  LockExpirationAfter: ").Append(LockExpirationAfter).Append("\n");
            sb.Append("  LockExpirationBefore: ").Append(LockExpirationBefore).Append("\n");
            sb.Append("  ActivityId: ").Append(ActivityId).Append("\n");
            sb.Append("  ActivityIdIn: ").Append(ActivityIdIn).Append("\n");
            sb.Append("  ExecutionId: ").Append(ExecutionId).Append("\n");
            sb.Append("  ProcessInstanceId: ").Append(ProcessInstanceId).Append("\n");
            sb.Append("  ProcessInstanceIdIn: ").Append(ProcessInstanceIdIn).Append("\n");
            sb.Append("  ProcessDefinitionId: ").Append(ProcessDefinitionId).Append("\n");
            sb.Append("  TenantIdIn: ").Append(TenantIdIn).Append("\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  Suspended: ").Append(Suspended).Append("\n");
            sb.Append("  PriorityHigherThanOrEquals: ").Append(PriorityHigherThanOrEquals).Append("\n");
            sb.Append("  PriorityLowerThanOrEquals: ").Append(PriorityLowerThanOrEquals).Append("\n");
            sb.Append("  Sorting: ").Append(Sorting).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
