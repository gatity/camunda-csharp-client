/*
 * Camunda Platform REST API
 *
 * OpenApi Spec for Camunda Platform REST API.
 *
 * The version of the OpenAPI document: 7.21.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Camunda.OpenApi.Client.Client.FileParameter;
using OpenAPIDateConverter = Camunda.OpenApi.Client.Client.OpenAPIDateConverter;

namespace Camunda.OpenApi.Client.Model
{
    /// <summary>
    /// SetRemovalTimeToHistoricProcessInstancesDto
    /// </summary>
    [DataContract(Name = "SetRemovalTimeToHistoricProcessInstancesDto")]
    public partial class SetRemovalTimeToHistoricProcessInstancesDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SetRemovalTimeToHistoricProcessInstancesDto" /> class.
        /// </summary>
        /// <param name="absoluteRemovalTime">The date for which the instances shall be removed. Value may not be &#x60;null&#x60;.  **Note:** Cannot be set in conjunction with &#x60;clearedRemovalTime&#x60; or &#x60;calculatedRemovalTime&#x60;..</param>
        /// <param name="clearedRemovalTime">Sets the removal time to &#x60;null&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.  **Note:** Cannot be set in conjunction with &#x60;absoluteRemovalTime&#x60; or &#x60;calculatedRemovalTime&#x60;..</param>
        /// <param name="calculatedRemovalTime">The removal time is calculated based on the engine&#39;s configuration settings. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.  **Note:** Cannot be set in conjunction with &#x60;absoluteRemovalTime&#x60; or &#x60;clearedRemovalTime&#x60;..</param>
        /// <param name="historicProcessInstanceIds">The id of the process instance..</param>
        /// <param name="historicProcessInstanceQuery">historicProcessInstanceQuery.</param>
        /// <param name="hierarchical">Sets the removal time to all historic process instances in the hierarchy. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior..</param>
        /// <param name="updateInChunks">Handles removal time updates in chunks, taking into account the defined size in &#x60;removalTimeUpdateChunkSize&#x60; in the process engine configuration. The size of the  chunks can also be overridden per call with the &#x60;updateChunkSize&#x60; parameter. Enabling this option can lead to multiple executions of the resulting jobs, preventing the database transaction from timing out by limiting the number of rows to update. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior..</param>
        /// <param name="updateChunkSize">Defines the size of the chunks in which removal time updates are processed. The value must be a positive integer between &#x60;1&#x60; and &#x60;500&#x60;. This only has an  effect if &#x60;updateInChunks&#x60; is set to &#x60;true&#x60;. If undefined, the operation uses the  &#x60;removalTimeUpdateChunkSize&#x60; defined in the process engine configuration..</param>
        public SetRemovalTimeToHistoricProcessInstancesDto(DateTime? absoluteRemovalTime = default(DateTime?), bool? clearedRemovalTime = default(bool?), bool? calculatedRemovalTime = default(bool?), List<string> historicProcessInstanceIds = default(List<string>), HistoricProcessInstanceQueryDto historicProcessInstanceQuery = default(HistoricProcessInstanceQueryDto), bool? hierarchical = default(bool?), bool? updateInChunks = default(bool?), int? updateChunkSize = default(int?))
        {
            this.AbsoluteRemovalTime = absoluteRemovalTime;
            this.ClearedRemovalTime = clearedRemovalTime;
            this.CalculatedRemovalTime = calculatedRemovalTime;
            this.HistoricProcessInstanceIds = historicProcessInstanceIds;
            this.HistoricProcessInstanceQuery = historicProcessInstanceQuery;
            this.Hierarchical = hierarchical;
            this.UpdateInChunks = updateInChunks;
            this.UpdateChunkSize = updateChunkSize;
        }

        /// <summary>
        /// The date for which the instances shall be removed. Value may not be &#x60;null&#x60;.  **Note:** Cannot be set in conjunction with &#x60;clearedRemovalTime&#x60; or &#x60;calculatedRemovalTime&#x60;.
        /// </summary>
        /// <value>The date for which the instances shall be removed. Value may not be &#x60;null&#x60;.  **Note:** Cannot be set in conjunction with &#x60;clearedRemovalTime&#x60; or &#x60;calculatedRemovalTime&#x60;.</value>
        [DataMember(Name = "absoluteRemovalTime", EmitDefaultValue = true)]
        public DateTime? AbsoluteRemovalTime { get; set; }

        /// <summary>
        /// Sets the removal time to &#x60;null&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.  **Note:** Cannot be set in conjunction with &#x60;absoluteRemovalTime&#x60; or &#x60;calculatedRemovalTime&#x60;.
        /// </summary>
        /// <value>Sets the removal time to &#x60;null&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.  **Note:** Cannot be set in conjunction with &#x60;absoluteRemovalTime&#x60; or &#x60;calculatedRemovalTime&#x60;.</value>
        [DataMember(Name = "clearedRemovalTime", EmitDefaultValue = true)]
        public bool? ClearedRemovalTime { get; set; }

        /// <summary>
        /// The removal time is calculated based on the engine&#39;s configuration settings. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.  **Note:** Cannot be set in conjunction with &#x60;absoluteRemovalTime&#x60; or &#x60;clearedRemovalTime&#x60;.
        /// </summary>
        /// <value>The removal time is calculated based on the engine&#39;s configuration settings. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.  **Note:** Cannot be set in conjunction with &#x60;absoluteRemovalTime&#x60; or &#x60;clearedRemovalTime&#x60;.</value>
        [DataMember(Name = "calculatedRemovalTime", EmitDefaultValue = true)]
        public bool? CalculatedRemovalTime { get; set; }

        /// <summary>
        /// The id of the process instance.
        /// </summary>
        /// <value>The id of the process instance.</value>
        [DataMember(Name = "historicProcessInstanceIds", EmitDefaultValue = true)]
        public List<string> HistoricProcessInstanceIds { get; set; }

        /// <summary>
        /// Gets or Sets HistoricProcessInstanceQuery
        /// </summary>
        [DataMember(Name = "historicProcessInstanceQuery", EmitDefaultValue = false)]
        public HistoricProcessInstanceQueryDto HistoricProcessInstanceQuery { get; set; }

        /// <summary>
        /// Sets the removal time to all historic process instances in the hierarchy. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
        /// </summary>
        /// <value>Sets the removal time to all historic process instances in the hierarchy. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.</value>
        [DataMember(Name = "hierarchical", EmitDefaultValue = true)]
        public bool? Hierarchical { get; set; }

        /// <summary>
        /// Handles removal time updates in chunks, taking into account the defined size in &#x60;removalTimeUpdateChunkSize&#x60; in the process engine configuration. The size of the  chunks can also be overridden per call with the &#x60;updateChunkSize&#x60; parameter. Enabling this option can lead to multiple executions of the resulting jobs, preventing the database transaction from timing out by limiting the number of rows to update. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
        /// </summary>
        /// <value>Handles removal time updates in chunks, taking into account the defined size in &#x60;removalTimeUpdateChunkSize&#x60; in the process engine configuration. The size of the  chunks can also be overridden per call with the &#x60;updateChunkSize&#x60; parameter. Enabling this option can lead to multiple executions of the resulting jobs, preventing the database transaction from timing out by limiting the number of rows to update. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.</value>
        [DataMember(Name = "updateInChunks", EmitDefaultValue = true)]
        public bool? UpdateInChunks { get; set; }

        /// <summary>
        /// Defines the size of the chunks in which removal time updates are processed. The value must be a positive integer between &#x60;1&#x60; and &#x60;500&#x60;. This only has an  effect if &#x60;updateInChunks&#x60; is set to &#x60;true&#x60;. If undefined, the operation uses the  &#x60;removalTimeUpdateChunkSize&#x60; defined in the process engine configuration.
        /// </summary>
        /// <value>Defines the size of the chunks in which removal time updates are processed. The value must be a positive integer between &#x60;1&#x60; and &#x60;500&#x60;. This only has an  effect if &#x60;updateInChunks&#x60; is set to &#x60;true&#x60;. If undefined, the operation uses the  &#x60;removalTimeUpdateChunkSize&#x60; defined in the process engine configuration.</value>
        [DataMember(Name = "updateChunkSize", EmitDefaultValue = true)]
        public int? UpdateChunkSize { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SetRemovalTimeToHistoricProcessInstancesDto {\n");
            sb.Append("  AbsoluteRemovalTime: ").Append(AbsoluteRemovalTime).Append("\n");
            sb.Append("  ClearedRemovalTime: ").Append(ClearedRemovalTime).Append("\n");
            sb.Append("  CalculatedRemovalTime: ").Append(CalculatedRemovalTime).Append("\n");
            sb.Append("  HistoricProcessInstanceIds: ").Append(HistoricProcessInstanceIds).Append("\n");
            sb.Append("  HistoricProcessInstanceQuery: ").Append(HistoricProcessInstanceQuery).Append("\n");
            sb.Append("  Hierarchical: ").Append(Hierarchical).Append("\n");
            sb.Append("  UpdateInChunks: ").Append(UpdateInChunks).Append("\n");
            sb.Append("  UpdateChunkSize: ").Append(UpdateChunkSize).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
