/*
 * Camunda Platform REST API
 *
 * OpenApi Spec for Camunda Platform REST API.
 *
 * The version of the OpenAPI document: 7.17.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Camunda.OpenApi.Client.Client.FileParameter;
using OpenAPIDateConverter = Camunda.OpenApi.Client.Client.OpenAPIDateConverter;

namespace Camunda.OpenApi.Client.Model
{
    /// <summary>
    /// TelemetryDataDto
    /// </summary>
    [DataContract(Name = "TelemetryDataDto")]
    public partial class TelemetryDataDto : IEquatable<TelemetryDataDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TelemetryDataDto" /> class.
        /// </summary>
        /// <param name="installation">An id which is unique for each installation of Camunda. It is stored once per database so all engines connected to the same database will have the same installation ID. The ID is used to identify a single installation of Camunda Platform..</param>
        /// <param name="product">Information about the product collection telemetry data..</param>
        public TelemetryDataDto(string installation = default(string), Dictionary<string, TelemetryProductDto> product = default(Dictionary<string, TelemetryProductDto>))
        {
            this.Installation = installation;
            this.Product = product;
        }

        /// <summary>
        /// An id which is unique for each installation of Camunda. It is stored once per database so all engines connected to the same database will have the same installation ID. The ID is used to identify a single installation of Camunda Platform.
        /// </summary>
        /// <value>An id which is unique for each installation of Camunda. It is stored once per database so all engines connected to the same database will have the same installation ID. The ID is used to identify a single installation of Camunda Platform.</value>
        [DataMember(Name = "installation", EmitDefaultValue = true)]
        public string Installation { get; set; }

        /// <summary>
        /// Information about the product collection telemetry data.
        /// </summary>
        /// <value>Information about the product collection telemetry data.</value>
        [DataMember(Name = "product", EmitDefaultValue = true)]
        public Dictionary<string, TelemetryProductDto> Product { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TelemetryDataDto {\n");
            sb.Append("  Installation: ").Append(Installation).Append("\n");
            sb.Append("  Product: ").Append(Product).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TelemetryDataDto);
        }

        /// <summary>
        /// Returns true if TelemetryDataDto instances are equal
        /// </summary>
        /// <param name="input">Instance of TelemetryDataDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TelemetryDataDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Installation == input.Installation ||
                    (this.Installation != null &&
                    this.Installation.Equals(input.Installation))
                ) && 
                (
                    this.Product == input.Product ||
                    this.Product != null &&
                    input.Product != null &&
                    this.Product.SequenceEqual(input.Product)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Installation != null)
                    hashCode = hashCode * 59 + this.Installation.GetHashCode();
                if (this.Product != null)
                    hashCode = hashCode * 59 + this.Product.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
