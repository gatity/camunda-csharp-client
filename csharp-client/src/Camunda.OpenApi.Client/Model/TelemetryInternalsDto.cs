/*
 * Camunda Platform REST API
 *
 * OpenApi Spec for Camunda Platform REST API.
 *
 * The version of the OpenAPI document: 7.21.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Camunda.OpenApi.Client.Client.FileParameter;
using OpenAPIDateConverter = Camunda.OpenApi.Client.Client.OpenAPIDateConverter;

namespace Camunda.OpenApi.Client.Model
{
    /// <summary>
    /// TelemetryInternalsDto
    /// </summary>
    [DataContract(Name = "TelemetryInternalsDto")]
    public partial class TelemetryInternalsDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TelemetryInternalsDto" /> class.
        /// </summary>
        /// <param name="database">database.</param>
        /// <param name="applicationServer">applicationServer.</param>
        /// <param name="licenseKey">licenseKey.</param>
        /// <param name="camundaIntegration">List of Camunda integrations used (e.g., Camunda Spring Boot Starter, Camunda Run, WildFly/JBoss subsystem, Camunda EJB)..</param>
        /// <param name="commands">The count of executed commands after the last retrieved data..</param>
        /// <param name="metrics">The collected metrics are the number of root process instance executions started, the number of activity instances started or also known as flow node instances, and the number of executed decision instances and elements..</param>
        /// <param name="webapps">The webapps enabled in this installation of Camunda..</param>
        /// <param name="jdk">jdk.</param>
        /// <param name="dataCollectionStartDate">The date when the engine started to collect dynamic data, such as command executions and metrics. If telemetry sending is enabled, dynamic data resets on sending the data to Camunda. Dynamic data and the date returned by this method are reset in three cases: engine startup, after engine start when sending telemetry data to Camunda is enabled via API, after sending telemetry data to Camunda (only when this was enabled) The date is in the format &lt;code&gt;YYYY-MM-DD&#39;T&#39;HH:mm:ss.SSSZ&lt;/code&gt;..</param>
        public TelemetryInternalsDto(AbstractVendorVersionInformationDto database = default(AbstractVendorVersionInformationDto), AbstractVendorVersionInformationDto applicationServer = default(AbstractVendorVersionInformationDto), TelemetryLicenseKeyDto licenseKey = default(TelemetryLicenseKeyDto), List<string> camundaIntegration = default(List<string>), Dictionary<string, TelemetryCountDto> commands = default(Dictionary<string, TelemetryCountDto>), Dictionary<string, TelemetryCountDto> metrics = default(Dictionary<string, TelemetryCountDto>), List<string> webapps = default(List<string>), AbstractVendorVersionInformationDto jdk = default(AbstractVendorVersionInformationDto), DateTime dataCollectionStartDate = default(DateTime))
        {
            this.Database = database;
            this.ApplicationServer = applicationServer;
            this.LicenseKey = licenseKey;
            this.CamundaIntegration = camundaIntegration;
            this.Commands = commands;
            this.Metrics = metrics;
            this.Webapps = webapps;
            this.Jdk = jdk;
            this.DataCollectionStartDate = dataCollectionStartDate;
        }

        /// <summary>
        /// Gets or Sets Database
        /// </summary>
        [DataMember(Name = "database", EmitDefaultValue = false)]
        public AbstractVendorVersionInformationDto Database { get; set; }

        /// <summary>
        /// Gets or Sets ApplicationServer
        /// </summary>
        [DataMember(Name = "application-server", EmitDefaultValue = false)]
        public AbstractVendorVersionInformationDto ApplicationServer { get; set; }

        /// <summary>
        /// Gets or Sets LicenseKey
        /// </summary>
        [DataMember(Name = "license-key", EmitDefaultValue = false)]
        public TelemetryLicenseKeyDto LicenseKey { get; set; }

        /// <summary>
        /// List of Camunda integrations used (e.g., Camunda Spring Boot Starter, Camunda Run, WildFly/JBoss subsystem, Camunda EJB).
        /// </summary>
        /// <value>List of Camunda integrations used (e.g., Camunda Spring Boot Starter, Camunda Run, WildFly/JBoss subsystem, Camunda EJB).</value>
        [DataMember(Name = "camunda-integration", EmitDefaultValue = true)]
        public List<string> CamundaIntegration { get; set; }

        /// <summary>
        /// The count of executed commands after the last retrieved data.
        /// </summary>
        /// <value>The count of executed commands after the last retrieved data.</value>
        [DataMember(Name = "commands", EmitDefaultValue = true)]
        public Dictionary<string, TelemetryCountDto> Commands { get; set; }

        /// <summary>
        /// The collected metrics are the number of root process instance executions started, the number of activity instances started or also known as flow node instances, and the number of executed decision instances and elements.
        /// </summary>
        /// <value>The collected metrics are the number of root process instance executions started, the number of activity instances started or also known as flow node instances, and the number of executed decision instances and elements.</value>
        [DataMember(Name = "metrics", EmitDefaultValue = true)]
        public Dictionary<string, TelemetryCountDto> Metrics { get; set; }

        /// <summary>
        /// The webapps enabled in this installation of Camunda.
        /// </summary>
        /// <value>The webapps enabled in this installation of Camunda.</value>
        [DataMember(Name = "webapps", EmitDefaultValue = true)]
        public List<string> Webapps { get; set; }

        /// <summary>
        /// Gets or Sets Jdk
        /// </summary>
        [DataMember(Name = "jdk", EmitDefaultValue = false)]
        public AbstractVendorVersionInformationDto Jdk { get; set; }

        /// <summary>
        /// The date when the engine started to collect dynamic data, such as command executions and metrics. If telemetry sending is enabled, dynamic data resets on sending the data to Camunda. Dynamic data and the date returned by this method are reset in three cases: engine startup, after engine start when sending telemetry data to Camunda is enabled via API, after sending telemetry data to Camunda (only when this was enabled) The date is in the format &lt;code&gt;YYYY-MM-DD&#39;T&#39;HH:mm:ss.SSSZ&lt;/code&gt;.
        /// </summary>
        /// <value>The date when the engine started to collect dynamic data, such as command executions and metrics. If telemetry sending is enabled, dynamic data resets on sending the data to Camunda. Dynamic data and the date returned by this method are reset in three cases: engine startup, after engine start when sending telemetry data to Camunda is enabled via API, after sending telemetry data to Camunda (only when this was enabled) The date is in the format &lt;code&gt;YYYY-MM-DD&#39;T&#39;HH:mm:ss.SSSZ&lt;/code&gt;.</value>
        [DataMember(Name = "data-collection-start-date", EmitDefaultValue = false)]
        public DateTime DataCollectionStartDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TelemetryInternalsDto {\n");
            sb.Append("  Database: ").Append(Database).Append("\n");
            sb.Append("  ApplicationServer: ").Append(ApplicationServer).Append("\n");
            sb.Append("  LicenseKey: ").Append(LicenseKey).Append("\n");
            sb.Append("  CamundaIntegration: ").Append(CamundaIntegration).Append("\n");
            sb.Append("  Commands: ").Append(Commands).Append("\n");
            sb.Append("  Metrics: ").Append(Metrics).Append("\n");
            sb.Append("  Webapps: ").Append(Webapps).Append("\n");
            sb.Append("  Jdk: ").Append(Jdk).Append("\n");
            sb.Append("  DataCollectionStartDate: ").Append(DataCollectionStartDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
