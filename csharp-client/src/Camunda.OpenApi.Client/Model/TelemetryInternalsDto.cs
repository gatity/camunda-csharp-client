/*
 * Camunda Platform REST API
 *
 * OpenApi Spec for Camunda Platform REST API.
 *
 * The version of the OpenAPI document: 7.17.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Camunda.OpenApi.Client.Client.FileParameter;
using OpenAPIDateConverter = Camunda.OpenApi.Client.Client.OpenAPIDateConverter;

namespace Camunda.OpenApi.Client.Model
{
    /// <summary>
    /// TelemetryInternalsDto
    /// </summary>
    [DataContract(Name = "TelemetryInternalsDto")]
    public partial class TelemetryInternalsDto : IEquatable<TelemetryInternalsDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TelemetryInternalsDto" /> class.
        /// </summary>
        /// <param name="database">Vendor and version of the connected database..</param>
        /// <param name="applicationServer">Vendor and version of the application server..</param>
        /// <param name="licenseKey">Information about the Camunda license key..</param>
        /// <param name="camundaIntegration">List of Camunda integrations used (e.g., Camunda Spring Boot Starter, Camunda Run, WildFly/JBoss subsystem, Camunda EJB)..</param>
        /// <param name="commands">The count of executed commands after the last retrieved data..</param>
        /// <param name="metrics">The collected metrics are the number of root process instance executions started, the number of activity instances started or also known as flow node instances, and the number of executed decision instances and elements..</param>
        /// <param name="webapps">The webapps enabled in this installation of Camunda..</param>
        /// <param name="jdk">Vendor and version of the installed JDK..</param>
        public TelemetryInternalsDto(Dictionary<string, AbstractVendorVersionInformationDto> database = default(Dictionary<string, AbstractVendorVersionInformationDto>), Dictionary<string, AbstractVendorVersionInformationDto> applicationServer = default(Dictionary<string, AbstractVendorVersionInformationDto>), Dictionary<string, TelemetryLicenseKeyDto> licenseKey = default(Dictionary<string, TelemetryLicenseKeyDto>), List<string> camundaIntegration = default(List<string>), Dictionary<string, TelemetryCountDto> commands = default(Dictionary<string, TelemetryCountDto>), Dictionary<string, TelemetryCountDto> metrics = default(Dictionary<string, TelemetryCountDto>), List<string> webapps = default(List<string>), Dictionary<string, AbstractVendorVersionInformationDto> jdk = default(Dictionary<string, AbstractVendorVersionInformationDto>))
        {
            this.Database = database;
            this.ApplicationServer = applicationServer;
            this.LicenseKey = licenseKey;
            this.CamundaIntegration = camundaIntegration;
            this.Commands = commands;
            this.Metrics = metrics;
            this.Webapps = webapps;
            this.Jdk = jdk;
        }

        /// <summary>
        /// Vendor and version of the connected database.
        /// </summary>
        /// <value>Vendor and version of the connected database.</value>
        [DataMember(Name = "database", EmitDefaultValue = true)]
        public Dictionary<string, AbstractVendorVersionInformationDto> Database { get; set; }

        /// <summary>
        /// Vendor and version of the application server.
        /// </summary>
        /// <value>Vendor and version of the application server.</value>
        [DataMember(Name = "application-server", EmitDefaultValue = true)]
        public Dictionary<string, AbstractVendorVersionInformationDto> ApplicationServer { get; set; }

        /// <summary>
        /// Information about the Camunda license key.
        /// </summary>
        /// <value>Information about the Camunda license key.</value>
        [DataMember(Name = "license-key", EmitDefaultValue = true)]
        public Dictionary<string, TelemetryLicenseKeyDto> LicenseKey { get; set; }

        /// <summary>
        /// List of Camunda integrations used (e.g., Camunda Spring Boot Starter, Camunda Run, WildFly/JBoss subsystem, Camunda EJB).
        /// </summary>
        /// <value>List of Camunda integrations used (e.g., Camunda Spring Boot Starter, Camunda Run, WildFly/JBoss subsystem, Camunda EJB).</value>
        [DataMember(Name = "camunda-integration", EmitDefaultValue = true)]
        public List<string> CamundaIntegration { get; set; }

        /// <summary>
        /// The count of executed commands after the last retrieved data.
        /// </summary>
        /// <value>The count of executed commands after the last retrieved data.</value>
        [DataMember(Name = "commands", EmitDefaultValue = true)]
        public Dictionary<string, TelemetryCountDto> Commands { get; set; }

        /// <summary>
        /// The collected metrics are the number of root process instance executions started, the number of activity instances started or also known as flow node instances, and the number of executed decision instances and elements.
        /// </summary>
        /// <value>The collected metrics are the number of root process instance executions started, the number of activity instances started or also known as flow node instances, and the number of executed decision instances and elements.</value>
        [DataMember(Name = "metrics", EmitDefaultValue = true)]
        public Dictionary<string, TelemetryCountDto> Metrics { get; set; }

        /// <summary>
        /// The webapps enabled in this installation of Camunda.
        /// </summary>
        /// <value>The webapps enabled in this installation of Camunda.</value>
        [DataMember(Name = "webapps", EmitDefaultValue = true)]
        public List<string> Webapps { get; set; }

        /// <summary>
        /// Vendor and version of the installed JDK.
        /// </summary>
        /// <value>Vendor and version of the installed JDK.</value>
        [DataMember(Name = "jdk", EmitDefaultValue = true)]
        public Dictionary<string, AbstractVendorVersionInformationDto> Jdk { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TelemetryInternalsDto {\n");
            sb.Append("  Database: ").Append(Database).Append("\n");
            sb.Append("  ApplicationServer: ").Append(ApplicationServer).Append("\n");
            sb.Append("  LicenseKey: ").Append(LicenseKey).Append("\n");
            sb.Append("  CamundaIntegration: ").Append(CamundaIntegration).Append("\n");
            sb.Append("  Commands: ").Append(Commands).Append("\n");
            sb.Append("  Metrics: ").Append(Metrics).Append("\n");
            sb.Append("  Webapps: ").Append(Webapps).Append("\n");
            sb.Append("  Jdk: ").Append(Jdk).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TelemetryInternalsDto);
        }

        /// <summary>
        /// Returns true if TelemetryInternalsDto instances are equal
        /// </summary>
        /// <param name="input">Instance of TelemetryInternalsDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TelemetryInternalsDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Database == input.Database ||
                    this.Database != null &&
                    input.Database != null &&
                    this.Database.SequenceEqual(input.Database)
                ) && 
                (
                    this.ApplicationServer == input.ApplicationServer ||
                    this.ApplicationServer != null &&
                    input.ApplicationServer != null &&
                    this.ApplicationServer.SequenceEqual(input.ApplicationServer)
                ) && 
                (
                    this.LicenseKey == input.LicenseKey ||
                    this.LicenseKey != null &&
                    input.LicenseKey != null &&
                    this.LicenseKey.SequenceEqual(input.LicenseKey)
                ) && 
                (
                    this.CamundaIntegration == input.CamundaIntegration ||
                    this.CamundaIntegration != null &&
                    input.CamundaIntegration != null &&
                    this.CamundaIntegration.SequenceEqual(input.CamundaIntegration)
                ) && 
                (
                    this.Commands == input.Commands ||
                    this.Commands != null &&
                    input.Commands != null &&
                    this.Commands.SequenceEqual(input.Commands)
                ) && 
                (
                    this.Metrics == input.Metrics ||
                    this.Metrics != null &&
                    input.Metrics != null &&
                    this.Metrics.SequenceEqual(input.Metrics)
                ) && 
                (
                    this.Webapps == input.Webapps ||
                    this.Webapps != null &&
                    input.Webapps != null &&
                    this.Webapps.SequenceEqual(input.Webapps)
                ) && 
                (
                    this.Jdk == input.Jdk ||
                    this.Jdk != null &&
                    input.Jdk != null &&
                    this.Jdk.SequenceEqual(input.Jdk)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Database != null)
                    hashCode = hashCode * 59 + this.Database.GetHashCode();
                if (this.ApplicationServer != null)
                    hashCode = hashCode * 59 + this.ApplicationServer.GetHashCode();
                if (this.LicenseKey != null)
                    hashCode = hashCode * 59 + this.LicenseKey.GetHashCode();
                if (this.CamundaIntegration != null)
                    hashCode = hashCode * 59 + this.CamundaIntegration.GetHashCode();
                if (this.Commands != null)
                    hashCode = hashCode * 59 + this.Commands.GetHashCode();
                if (this.Metrics != null)
                    hashCode = hashCode * 59 + this.Metrics.GetHashCode();
                if (this.Webapps != null)
                    hashCode = hashCode * 59 + this.Webapps.GetHashCode();
                if (this.Jdk != null)
                    hashCode = hashCode * 59 + this.Jdk.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
