/*
 * Camunda Platform REST API
 *
 * OpenApi Spec for Camunda Platform REST API.
 *
 * The version of the OpenAPI document: 7.21.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Camunda.OpenApi.Client.Client.FileParameter;
using OpenAPIDateConverter = Camunda.OpenApi.Client.Client.OpenAPIDateConverter;

namespace Camunda.OpenApi.Client.Model
{
    /// <summary>
    /// AuthorizationCreateDto
    /// </summary>
    [DataContract(Name = "AuthorizationCreateDto")]
    public partial class AuthorizationCreateDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthorizationCreateDto" /> class.
        /// </summary>
        /// <param name="type">The type of the authorization (0&#x3D;global, 1&#x3D;grant, 2&#x3D;revoke). See the [User Guide](https://docs.camunda.org/manual/7.21/user-guide/process-engine/authorization-service.md#authorization-type) for more information about authorization types..</param>
        /// <param name="permissions">An array of Strings holding the permissions provided by this authorization..</param>
        /// <param name="userId">The id of the user this authorization has been created for. The value &#x60;*&#x60; represents a global authorization ranging over all users..</param>
        /// <param name="groupId">The id of the group this authorization has been created for..</param>
        /// <param name="resourceType">An integer representing the resource type. See the [User Guide](https://docs.camunda.org/manual/7.21/user-guide/process-engine/authorization-service/#resources) for a list of integer representations of resource types..</param>
        /// <param name="resourceId">The resource Id. The value &#x60;*&#x60; represents an authorization ranging over all instances of a resource..</param>
        public AuthorizationCreateDto(int? type = default(int?), List<string> permissions = default(List<string>), string userId = default(string), string groupId = default(string), int? resourceType = default(int?), string resourceId = default(string))
        {
            this.Type = type;
            this.Permissions = permissions;
            this.UserId = userId;
            this.GroupId = groupId;
            this.ResourceType = resourceType;
            this.ResourceId = resourceId;
        }

        /// <summary>
        /// The type of the authorization (0&#x3D;global, 1&#x3D;grant, 2&#x3D;revoke). See the [User Guide](https://docs.camunda.org/manual/7.21/user-guide/process-engine/authorization-service.md#authorization-type) for more information about authorization types.
        /// </summary>
        /// <value>The type of the authorization (0&#x3D;global, 1&#x3D;grant, 2&#x3D;revoke). See the [User Guide](https://docs.camunda.org/manual/7.21/user-guide/process-engine/authorization-service.md#authorization-type) for more information about authorization types.</value>
        [DataMember(Name = "type", EmitDefaultValue = true)]
        public int? Type { get; set; }

        /// <summary>
        /// An array of Strings holding the permissions provided by this authorization.
        /// </summary>
        /// <value>An array of Strings holding the permissions provided by this authorization.</value>
        [DataMember(Name = "permissions", EmitDefaultValue = true)]
        public List<string> Permissions { get; set; }

        /// <summary>
        /// The id of the user this authorization has been created for. The value &#x60;*&#x60; represents a global authorization ranging over all users.
        /// </summary>
        /// <value>The id of the user this authorization has been created for. The value &#x60;*&#x60; represents a global authorization ranging over all users.</value>
        [DataMember(Name = "userId", EmitDefaultValue = true)]
        public string UserId { get; set; }

        /// <summary>
        /// The id of the group this authorization has been created for.
        /// </summary>
        /// <value>The id of the group this authorization has been created for.</value>
        [DataMember(Name = "groupId", EmitDefaultValue = true)]
        public string GroupId { get; set; }

        /// <summary>
        /// An integer representing the resource type. See the [User Guide](https://docs.camunda.org/manual/7.21/user-guide/process-engine/authorization-service/#resources) for a list of integer representations of resource types.
        /// </summary>
        /// <value>An integer representing the resource type. See the [User Guide](https://docs.camunda.org/manual/7.21/user-guide/process-engine/authorization-service/#resources) for a list of integer representations of resource types.</value>
        [DataMember(Name = "resourceType", EmitDefaultValue = true)]
        public int? ResourceType { get; set; }

        /// <summary>
        /// The resource Id. The value &#x60;*&#x60; represents an authorization ranging over all instances of a resource.
        /// </summary>
        /// <value>The resource Id. The value &#x60;*&#x60; represents an authorization ranging over all instances of a resource.</value>
        [DataMember(Name = "resourceId", EmitDefaultValue = true)]
        public string ResourceId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AuthorizationCreateDto {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Permissions: ").Append(Permissions).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  GroupId: ").Append(GroupId).Append("\n");
            sb.Append("  ResourceType: ").Append(ResourceType).Append("\n");
            sb.Append("  ResourceId: ").Append(ResourceId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
