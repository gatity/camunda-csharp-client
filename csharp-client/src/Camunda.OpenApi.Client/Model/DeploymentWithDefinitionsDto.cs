/*
 * Camunda Platform REST API
 *
 * OpenApi Spec for Camunda Platform REST API.
 *
 * The version of the OpenAPI document: 7.21.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Camunda.OpenApi.Client.Client.FileParameter;
using OpenAPIDateConverter = Camunda.OpenApi.Client.Client.OpenAPIDateConverter;

namespace Camunda.OpenApi.Client.Model
{
    /// <summary>
    /// DeploymentWithDefinitionsDto
    /// </summary>
    [DataContract(Name = "DeploymentWithDefinitionsDto")]
    public partial class DeploymentWithDefinitionsDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DeploymentWithDefinitionsDto" /> class.
        /// </summary>
        /// <param name="id">The id of the deployment..</param>
        /// <param name="tenantId">The tenant id of the deployment..</param>
        /// <param name="deploymentTime">The time when the deployment was created..</param>
        /// <param name="source">The source of the deployment..</param>
        /// <param name="name">The name of the deployment..</param>
        /// <param name="links">The links associated to this resource, with &#x60;method&#x60;, &#x60;href&#x60; and &#x60;rel&#x60;..</param>
        /// <param name="deployedProcessDefinitions">A JSON Object containing a property for each of the process definitions, which are successfully deployed with that deployment. The key is the process definition id, the value is a JSON Object corresponding to the process definition..</param>
        /// <param name="deployedDecisionDefinitions">A JSON Object containing a property for each of the decision definitions, which are successfully deployed with that deployment. The key is the decision definition id, the value is a JSON Object corresponding to the decision definition..</param>
        /// <param name="deployedDecisionRequirementsDefinitions">A JSON Object containing a property for each of the decision requirements definitions, which are successfully deployed with that deployment. The key is the decision requirements definition id, the value is a JSON Object corresponding to the decision requirements definition..</param>
        /// <param name="deployedCaseDefinitions">A JSON Object containing a property for each of the case definitions, which are successfully deployed with that deployment. The key is the case definition id, the value is a JSON Object corresponding to the case definition..</param>
        public DeploymentWithDefinitionsDto(string id = default(string), string tenantId = default(string), DateTime? deploymentTime = default(DateTime?), string source = default(string), string name = default(string), List<AtomLink> links = default(List<AtomLink>), Dictionary<string, ProcessDefinitionDto> deployedProcessDefinitions = default(Dictionary<string, ProcessDefinitionDto>), Dictionary<string, DecisionDefinitionDto> deployedDecisionDefinitions = default(Dictionary<string, DecisionDefinitionDto>), Dictionary<string, DecisionRequirementsDefinitionDto> deployedDecisionRequirementsDefinitions = default(Dictionary<string, DecisionRequirementsDefinitionDto>), Dictionary<string, CaseDefinitionDto> deployedCaseDefinitions = default(Dictionary<string, CaseDefinitionDto>))
        {
            this.Id = id;
            this.TenantId = tenantId;
            this.DeploymentTime = deploymentTime;
            this.Source = source;
            this.Name = name;
            this.Links = links;
            this.DeployedProcessDefinitions = deployedProcessDefinitions;
            this.DeployedDecisionDefinitions = deployedDecisionDefinitions;
            this.DeployedDecisionRequirementsDefinitions = deployedDecisionRequirementsDefinitions;
            this.DeployedCaseDefinitions = deployedCaseDefinitions;
        }

        /// <summary>
        /// The id of the deployment.
        /// </summary>
        /// <value>The id of the deployment.</value>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// The tenant id of the deployment.
        /// </summary>
        /// <value>The tenant id of the deployment.</value>
        [DataMember(Name = "tenantId", EmitDefaultValue = true)]
        public string TenantId { get; set; }

        /// <summary>
        /// The time when the deployment was created.
        /// </summary>
        /// <value>The time when the deployment was created.</value>
        [DataMember(Name = "deploymentTime", EmitDefaultValue = true)]
        public DateTime? DeploymentTime { get; set; }

        /// <summary>
        /// The source of the deployment.
        /// </summary>
        /// <value>The source of the deployment.</value>
        [DataMember(Name = "source", EmitDefaultValue = true)]
        public string Source { get; set; }

        /// <summary>
        /// The name of the deployment.
        /// </summary>
        /// <value>The name of the deployment.</value>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// The links associated to this resource, with &#x60;method&#x60;, &#x60;href&#x60; and &#x60;rel&#x60;.
        /// </summary>
        /// <value>The links associated to this resource, with &#x60;method&#x60;, &#x60;href&#x60; and &#x60;rel&#x60;.</value>
        [DataMember(Name = "links", EmitDefaultValue = true)]
        public List<AtomLink> Links { get; set; }

        /// <summary>
        /// A JSON Object containing a property for each of the process definitions, which are successfully deployed with that deployment. The key is the process definition id, the value is a JSON Object corresponding to the process definition.
        /// </summary>
        /// <value>A JSON Object containing a property for each of the process definitions, which are successfully deployed with that deployment. The key is the process definition id, the value is a JSON Object corresponding to the process definition.</value>
        [DataMember(Name = "deployedProcessDefinitions", EmitDefaultValue = true)]
        public Dictionary<string, ProcessDefinitionDto> DeployedProcessDefinitions { get; set; }

        /// <summary>
        /// A JSON Object containing a property for each of the decision definitions, which are successfully deployed with that deployment. The key is the decision definition id, the value is a JSON Object corresponding to the decision definition.
        /// </summary>
        /// <value>A JSON Object containing a property for each of the decision definitions, which are successfully deployed with that deployment. The key is the decision definition id, the value is a JSON Object corresponding to the decision definition.</value>
        [DataMember(Name = "deployedDecisionDefinitions", EmitDefaultValue = true)]
        public Dictionary<string, DecisionDefinitionDto> DeployedDecisionDefinitions { get; set; }

        /// <summary>
        /// A JSON Object containing a property for each of the decision requirements definitions, which are successfully deployed with that deployment. The key is the decision requirements definition id, the value is a JSON Object corresponding to the decision requirements definition.
        /// </summary>
        /// <value>A JSON Object containing a property for each of the decision requirements definitions, which are successfully deployed with that deployment. The key is the decision requirements definition id, the value is a JSON Object corresponding to the decision requirements definition.</value>
        [DataMember(Name = "deployedDecisionRequirementsDefinitions", EmitDefaultValue = true)]
        public Dictionary<string, DecisionRequirementsDefinitionDto> DeployedDecisionRequirementsDefinitions { get; set; }

        /// <summary>
        /// A JSON Object containing a property for each of the case definitions, which are successfully deployed with that deployment. The key is the case definition id, the value is a JSON Object corresponding to the case definition.
        /// </summary>
        /// <value>A JSON Object containing a property for each of the case definitions, which are successfully deployed with that deployment. The key is the case definition id, the value is a JSON Object corresponding to the case definition.</value>
        [DataMember(Name = "deployedCaseDefinitions", EmitDefaultValue = true)]
        public Dictionary<string, CaseDefinitionDto> DeployedCaseDefinitions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DeploymentWithDefinitionsDto {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  TenantId: ").Append(TenantId).Append("\n");
            sb.Append("  DeploymentTime: ").Append(DeploymentTime).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("  DeployedProcessDefinitions: ").Append(DeployedProcessDefinitions).Append("\n");
            sb.Append("  DeployedDecisionDefinitions: ").Append(DeployedDecisionDefinitions).Append("\n");
            sb.Append("  DeployedDecisionRequirementsDefinitions: ").Append(DeployedDecisionRequirementsDefinitions).Append("\n");
            sb.Append("  DeployedCaseDefinitions: ").Append(DeployedCaseDefinitions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
