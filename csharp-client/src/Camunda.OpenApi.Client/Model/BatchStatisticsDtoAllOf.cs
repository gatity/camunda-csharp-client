/*
 * Camunda Platform REST API
 *
 * OpenApi Spec for Camunda Platform REST API.
 *
 * The version of the OpenAPI document: 7.16.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Camunda.OpenApi.Client.Client.OpenAPIDateConverter;

namespace Camunda.OpenApi.Client.Model
{
    /// <summary>
    /// BatchStatisticsDtoAllOf
    /// </summary>
    [DataContract(Name = "BatchStatisticsDto_allOf")]
    public partial class BatchStatisticsDtoAllOf : IEquatable<BatchStatisticsDtoAllOf>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BatchStatisticsDtoAllOf" /> class.
        /// </summary>
        /// <param name="remainingJobs">The number of remaining batch execution jobs. This does include failed batch execution jobs and batch execution jobs which still have to be created by the seed job..</param>
        /// <param name="completedJobs">The number of completed batch execution jobs. This does include aborted/deleted batch execution jobs..</param>
        /// <param name="failedJobs">The number of failed batch execution jobs. This does not include aborted or deleted batch execution jobs..</param>
        public BatchStatisticsDtoAllOf(int? remainingJobs = default(int?), int? completedJobs = default(int?), int? failedJobs = default(int?))
        {
            this.RemainingJobs = remainingJobs;
            this.CompletedJobs = completedJobs;
            this.FailedJobs = failedJobs;
        }

        /// <summary>
        /// The number of remaining batch execution jobs. This does include failed batch execution jobs and batch execution jobs which still have to be created by the seed job.
        /// </summary>
        /// <value>The number of remaining batch execution jobs. This does include failed batch execution jobs and batch execution jobs which still have to be created by the seed job.</value>
        [DataMember(Name = "remainingJobs", EmitDefaultValue = true)]
        public int? RemainingJobs { get; set; }

        /// <summary>
        /// The number of completed batch execution jobs. This does include aborted/deleted batch execution jobs.
        /// </summary>
        /// <value>The number of completed batch execution jobs. This does include aborted/deleted batch execution jobs.</value>
        [DataMember(Name = "completedJobs", EmitDefaultValue = true)]
        public int? CompletedJobs { get; set; }

        /// <summary>
        /// The number of failed batch execution jobs. This does not include aborted or deleted batch execution jobs.
        /// </summary>
        /// <value>The number of failed batch execution jobs. This does not include aborted or deleted batch execution jobs.</value>
        [DataMember(Name = "failedJobs", EmitDefaultValue = true)]
        public int? FailedJobs { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BatchStatisticsDtoAllOf {\n");
            sb.Append("  RemainingJobs: ").Append(RemainingJobs).Append("\n");
            sb.Append("  CompletedJobs: ").Append(CompletedJobs).Append("\n");
            sb.Append("  FailedJobs: ").Append(FailedJobs).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BatchStatisticsDtoAllOf);
        }

        /// <summary>
        /// Returns true if BatchStatisticsDtoAllOf instances are equal
        /// </summary>
        /// <param name="input">Instance of BatchStatisticsDtoAllOf to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BatchStatisticsDtoAllOf input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.RemainingJobs == input.RemainingJobs ||
                    (this.RemainingJobs != null &&
                    this.RemainingJobs.Equals(input.RemainingJobs))
                ) && 
                (
                    this.CompletedJobs == input.CompletedJobs ||
                    (this.CompletedJobs != null &&
                    this.CompletedJobs.Equals(input.CompletedJobs))
                ) && 
                (
                    this.FailedJobs == input.FailedJobs ||
                    (this.FailedJobs != null &&
                    this.FailedJobs.Equals(input.FailedJobs))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RemainingJobs != null)
                    hashCode = hashCode * 59 + this.RemainingJobs.GetHashCode();
                if (this.CompletedJobs != null)
                    hashCode = hashCode * 59 + this.CompletedJobs.GetHashCode();
                if (this.FailedJobs != null)
                    hashCode = hashCode * 59 + this.FailedJobs.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
