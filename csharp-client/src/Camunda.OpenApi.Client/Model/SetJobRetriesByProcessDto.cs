/*
 * Camunda Platform REST API
 *
 * OpenApi Spec for Camunda Platform REST API.
 *
 * The version of the OpenAPI document: 7.21.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Camunda.OpenApi.Client.Client.FileParameter;
using OpenAPIDateConverter = Camunda.OpenApi.Client.Client.OpenAPIDateConverter;

namespace Camunda.OpenApi.Client.Model
{
    /// <summary>
    /// SetJobRetriesByProcessDto
    /// </summary>
    [DataContract(Name = "SetJobRetriesByProcessDto")]
    public partial class SetJobRetriesByProcessDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SetJobRetriesByProcessDto" /> class.
        /// </summary>
        /// <param name="jobIds">A list of job ids to set retries for..</param>
        /// <param name="jobQuery">jobQuery.</param>
        /// <param name="dueDate">The due date to set for the job. A due date indicates when this job is ready for execution. Jobs with due dates in the past will be scheduled for execution..</param>
        /// <param name="retries">The number of retries to set for the resource.  Must be &gt;&#x3D; 0. If this is 0, an incident is created and the task, or job, cannot be fetched, or acquired anymore unless the retries are increased again. Can not be null..</param>
        /// <param name="processInstances">A list of process instance ids to fetch jobs, for which retries will be set..</param>
        /// <param name="processInstanceQuery">processInstanceQuery.</param>
        /// <param name="historicProcessInstanceQuery">historicProcessInstanceQuery.</param>
        public SetJobRetriesByProcessDto(List<string> jobIds = default(List<string>), JobQueryDto jobQuery = default(JobQueryDto), DateTime? dueDate = default(DateTime?), int? retries = default(int?), List<string> processInstances = default(List<string>), ProcessInstanceQueryDto processInstanceQuery = default(ProcessInstanceQueryDto), HistoricProcessInstanceQueryDto historicProcessInstanceQuery = default(HistoricProcessInstanceQueryDto))
        {
            this.JobIds = jobIds;
            this.JobQuery = jobQuery;
            this.DueDate = dueDate;
            this.Retries = retries;
            this.ProcessInstances = processInstances;
            this.ProcessInstanceQuery = processInstanceQuery;
            this.HistoricProcessInstanceQuery = historicProcessInstanceQuery;
        }

        /// <summary>
        /// A list of job ids to set retries for.
        /// </summary>
        /// <value>A list of job ids to set retries for.</value>
        [DataMember(Name = "jobIds", EmitDefaultValue = true)]
        public List<string> JobIds { get; set; }

        /// <summary>
        /// Gets or Sets JobQuery
        /// </summary>
        [DataMember(Name = "jobQuery", EmitDefaultValue = false)]
        public JobQueryDto JobQuery { get; set; }

        /// <summary>
        /// The due date to set for the job. A due date indicates when this job is ready for execution. Jobs with due dates in the past will be scheduled for execution.
        /// </summary>
        /// <value>The due date to set for the job. A due date indicates when this job is ready for execution. Jobs with due dates in the past will be scheduled for execution.</value>
        [DataMember(Name = "dueDate", EmitDefaultValue = true)]
        public DateTime? DueDate { get; set; }

        /// <summary>
        /// The number of retries to set for the resource.  Must be &gt;&#x3D; 0. If this is 0, an incident is created and the task, or job, cannot be fetched, or acquired anymore unless the retries are increased again. Can not be null.
        /// </summary>
        /// <value>The number of retries to set for the resource.  Must be &gt;&#x3D; 0. If this is 0, an incident is created and the task, or job, cannot be fetched, or acquired anymore unless the retries are increased again. Can not be null.</value>
        [DataMember(Name = "retries", EmitDefaultValue = true)]
        public int? Retries { get; set; }

        /// <summary>
        /// A list of process instance ids to fetch jobs, for which retries will be set.
        /// </summary>
        /// <value>A list of process instance ids to fetch jobs, for which retries will be set.</value>
        [DataMember(Name = "processInstances", EmitDefaultValue = true)]
        public List<string> ProcessInstances { get; set; }

        /// <summary>
        /// Gets or Sets ProcessInstanceQuery
        /// </summary>
        [DataMember(Name = "processInstanceQuery", EmitDefaultValue = false)]
        public ProcessInstanceQueryDto ProcessInstanceQuery { get; set; }

        /// <summary>
        /// Gets or Sets HistoricProcessInstanceQuery
        /// </summary>
        [DataMember(Name = "historicProcessInstanceQuery", EmitDefaultValue = false)]
        public HistoricProcessInstanceQueryDto HistoricProcessInstanceQuery { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SetJobRetriesByProcessDto {\n");
            sb.Append("  JobIds: ").Append(JobIds).Append("\n");
            sb.Append("  JobQuery: ").Append(JobQuery).Append("\n");
            sb.Append("  DueDate: ").Append(DueDate).Append("\n");
            sb.Append("  Retries: ").Append(Retries).Append("\n");
            sb.Append("  ProcessInstances: ").Append(ProcessInstances).Append("\n");
            sb.Append("  ProcessInstanceQuery: ").Append(ProcessInstanceQuery).Append("\n");
            sb.Append("  HistoricProcessInstanceQuery: ").Append(HistoricProcessInstanceQuery).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
