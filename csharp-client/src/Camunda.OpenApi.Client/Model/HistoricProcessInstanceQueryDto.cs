/*
 * Camunda Platform REST API
 *
 * OpenApi Spec for Camunda Platform REST API.
 *
 * The version of the OpenAPI document: 7.21.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Camunda.OpenApi.Client.Client.FileParameter;
using OpenAPIDateConverter = Camunda.OpenApi.Client.Client.OpenAPIDateConverter;

namespace Camunda.OpenApi.Client.Model
{
    /// <summary>
    /// A historic process instance query which defines a group of historic process instances
    /// </summary>
    [DataContract(Name = "HistoricProcessInstanceQueryDto")]
    public partial class HistoricProcessInstanceQueryDto : IValidatableObject
    {
        /// <summary>
        /// Only include process instances which have an incident in status either open or resolved. To get all process instances, use the query parameter withIncidents.
        /// </summary>
        /// <value>Only include process instances which have an incident in status either open or resolved. To get all process instances, use the query parameter withIncidents.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum IncidentStatusEnum
        {
            /// <summary>
            /// Enum Open for value: open
            /// </summary>
            [EnumMember(Value = "open")]
            Open = 1,

            /// <summary>
            /// Enum Resolved for value: resolved
            /// </summary>
            [EnumMember(Value = "resolved")]
            Resolved = 2
        }


        /// <summary>
        /// Only include process instances which have an incident in status either open or resolved. To get all process instances, use the query parameter withIncidents.
        /// </summary>
        /// <value>Only include process instances which have an incident in status either open or resolved. To get all process instances, use the query parameter withIncidents.</value>
        [DataMember(Name = "incidentStatus", EmitDefaultValue = true)]
        public IncidentStatusEnum? IncidentStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="HistoricProcessInstanceQueryDto" /> class.
        /// </summary>
        /// <param name="processInstanceId">Filter by process instance id..</param>
        /// <param name="processInstanceIds">Filter by process instance ids. Must be a JSON array of &#x60;Strings&#x60;..</param>
        /// <param name="processDefinitionId">Filter by the process definition the instances run on..</param>
        /// <param name="processDefinitionKey">Filter by the key of the process definition the instances run on..</param>
        /// <param name="processDefinitionKeyIn">Filter by a list of process definition keys. A process instance must have one of the given process definition keys. Must be a JSON array of &#x60;Strings&#x60;..</param>
        /// <param name="processDefinitionName">Filter by the name of the process definition the instances run on..</param>
        /// <param name="processDefinitionNameLike">Filter by process definition names that the parameter is a substring of..</param>
        /// <param name="processDefinitionKeyNotIn">Exclude instances that belong to a set of process definitions. Must be a JSON array of &#x60;Strings&#x60;..</param>
        /// <param name="processInstanceBusinessKey">Filter by process instance business key..</param>
        /// <param name="processInstanceBusinessKeyIn">Filter by a list of business keys. A process instance must have one of the given business keys. Must be a JSON array of &#x60;Strings&#x60;.</param>
        /// <param name="processInstanceBusinessKeyLike">Filter by process instance business key that the parameter is a substring of..</param>
        /// <param name="rootProcessInstances">Restrict the query to all process instances that are top level process instances..</param>
        /// <param name="finished">Only include finished process instances. This flag includes all process instances that are completed or terminated. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior..</param>
        /// <param name="unfinished">Only include unfinished process instances. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior..</param>
        /// <param name="withIncidents">Only include process instances which have an incident. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior..</param>
        /// <param name="withRootIncidents">Only include process instances which have a root incident. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior..</param>
        /// <param name="incidentType">Filter by the incident type. See the [User Guide](https://docs.camunda.org/manual/7.21/user-guide/process-engine/incidents/#incident-types) for a list of incident types..</param>
        /// <param name="incidentStatus">Only include process instances which have an incident in status either open or resolved. To get all process instances, use the query parameter withIncidents..</param>
        /// <param name="incidentMessage">Filter by the incident message. Exact match..</param>
        /// <param name="incidentMessageLike">Filter by the incident message that the parameter is a substring of..</param>
        /// <param name="startedBefore">Restrict to instances that were started before the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;..</param>
        /// <param name="startedAfter">Restrict to instances that were started after the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;..</param>
        /// <param name="finishedBefore">Restrict to instances that were finished before the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;..</param>
        /// <param name="finishedAfter">Restrict to instances that were finished after the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;..</param>
        /// <param name="executedActivityAfter">Restrict to instances that executed an activity after the given date (inclusive). By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;..</param>
        /// <param name="executedActivityBefore">Restrict to instances that executed an activity before the given date (inclusive). By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;..</param>
        /// <param name="executedJobAfter">Restrict to instances that executed an job after the given date (inclusive). By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;..</param>
        /// <param name="executedJobBefore">Restrict to instances that executed an job before the given date (inclusive). By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;..</param>
        /// <param name="startedBy">Only include process instances that were started by the given user..</param>
        /// <param name="superProcessInstanceId">Restrict query to all process instances that are sub process instances of the given process instance. Takes a process instance id..</param>
        /// <param name="subProcessInstanceId">Restrict query to one process instance that has a sub process instance with the given id..</param>
        /// <param name="superCaseInstanceId">Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id..</param>
        /// <param name="subCaseInstanceId">Restrict query to one process instance that has a sub case instance with the given id..</param>
        /// <param name="caseInstanceId">Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id..</param>
        /// <param name="tenantIdIn">Filter by a list of tenant ids. A process instance must have one of the given tenant ids. Must be a JSON array of &#x60;Strings&#x60;.</param>
        /// <param name="withoutTenantId">Only include historic process instances which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior..</param>
        /// <param name="executedActivityIdIn">Restrict to instances that executed an activity with one of given ids. Must be a JSON array of &#x60;Strings&#x60;.</param>
        /// <param name="activeActivityIdIn">Restrict to instances that have an active activity with one of given ids. Must be a JSON array of &#x60;Strings&#x60;.</param>
        /// <param name="active">Restrict to instances that are active..</param>
        /// <param name="suspended">Restrict to instances that are suspended..</param>
        /// <param name="completed">Restrict to instances that are completed..</param>
        /// <param name="externallyTerminated">Restrict to instances that are externallyTerminated..</param>
        /// <param name="internallyTerminated">Restrict to instances that are internallyTerminated..</param>
        /// <param name="variables">A JSON array to only include process instances that have/had variables with certain values. The array consists of objects with the three properties &#x60;name&#x60;, &#x60;operator&#x60; and &#x60;value&#x60;. &#x60;name&#x60; (&#x60;String&#x60;) is the variable name, &#x60;operator&#x60; (&#x60;String&#x60;) is the comparison operator to be used and &#x60;value&#x60; the variable value.  Value may be &#x60;String&#x60;, &#x60;Number&#x60; or &#x60;Boolean&#x60;.  Valid operator values are: &#x60;eq&#x60; - equal to; &#x60;neq&#x60; - not equal to; &#x60;gt&#x60; - greater than; &#x60;gteq&#x60; - greater than or equal to; &#x60;lt&#x60; - lower than; &#x60;lteq&#x60; - lower than or equal to; &#x60;like&#x60;. .</param>
        /// <param name="variableNamesIgnoreCase">Match all variable names provided in variables case-insensitively. If set to &#x60;true&#x60; variableName and variablename are treated as equal..</param>
        /// <param name="variableValuesIgnoreCase">Match all variable values provided in variables case-insensitively. If set to &#x60;true&#x60; variableValue and variablevalue are treated as equal..</param>
        /// <param name="orQueries">A JSON array of nested historic process instance queries with OR semantics.  A process instance matches a nested query if it fulfills at least one of the query&#39;s predicates.  With multiple nested queries, a process instance must fulfill at least one predicate of each query ([Conjunctive Normal Form](https://en.wikipedia.org/wiki/Conjunctive_normal_form)).  All process instance query properties can be used except for: &#x60;sorting&#x60;  See the [User Guide](https://docs.camunda.org/manual/7.21/user-guide/process-engine/process-engine-api/#or-queries) for more information about OR queries..</param>
        /// <param name="sorting">Apply sorting of the result.</param>
        public HistoricProcessInstanceQueryDto(string processInstanceId = default(string), List<string> processInstanceIds = default(List<string>), string processDefinitionId = default(string), string processDefinitionKey = default(string), List<string> processDefinitionKeyIn = default(List<string>), string processDefinitionName = default(string), string processDefinitionNameLike = default(string), List<string> processDefinitionKeyNotIn = default(List<string>), string processInstanceBusinessKey = default(string), List<string> processInstanceBusinessKeyIn = default(List<string>), string processInstanceBusinessKeyLike = default(string), bool? rootProcessInstances = default(bool?), bool? finished = default(bool?), bool? unfinished = default(bool?), bool? withIncidents = default(bool?), bool? withRootIncidents = default(bool?), string incidentType = default(string), IncidentStatusEnum? incidentStatus = default(IncidentStatusEnum?), string incidentMessage = default(string), string incidentMessageLike = default(string), DateTime? startedBefore = default(DateTime?), DateTime? startedAfter = default(DateTime?), DateTime? finishedBefore = default(DateTime?), DateTime? finishedAfter = default(DateTime?), DateTime? executedActivityAfter = default(DateTime?), DateTime? executedActivityBefore = default(DateTime?), DateTime? executedJobAfter = default(DateTime?), DateTime? executedJobBefore = default(DateTime?), string startedBy = default(string), string superProcessInstanceId = default(string), string subProcessInstanceId = default(string), string superCaseInstanceId = default(string), string subCaseInstanceId = default(string), string caseInstanceId = default(string), List<string> tenantIdIn = default(List<string>), bool? withoutTenantId = default(bool?), List<string> executedActivityIdIn = default(List<string>), List<string> activeActivityIdIn = default(List<string>), bool? active = default(bool?), bool? suspended = default(bool?), bool? completed = default(bool?), bool? externallyTerminated = default(bool?), bool? internallyTerminated = default(bool?), List<VariableQueryParameterDto> variables = default(List<VariableQueryParameterDto>), bool? variableNamesIgnoreCase = default(bool?), bool? variableValuesIgnoreCase = default(bool?), List<HistoricProcessInstanceQueryDto> orQueries = default(List<HistoricProcessInstanceQueryDto>), List<HistoricProcessInstanceQueryDtoSortingInner> sorting = default(List<HistoricProcessInstanceQueryDtoSortingInner>))
        {
            this.ProcessInstanceId = processInstanceId;
            this.ProcessInstanceIds = processInstanceIds;
            this.ProcessDefinitionId = processDefinitionId;
            this.ProcessDefinitionKey = processDefinitionKey;
            this.ProcessDefinitionKeyIn = processDefinitionKeyIn;
            this.ProcessDefinitionName = processDefinitionName;
            this.ProcessDefinitionNameLike = processDefinitionNameLike;
            this.ProcessDefinitionKeyNotIn = processDefinitionKeyNotIn;
            this.ProcessInstanceBusinessKey = processInstanceBusinessKey;
            this.ProcessInstanceBusinessKeyIn = processInstanceBusinessKeyIn;
            this.ProcessInstanceBusinessKeyLike = processInstanceBusinessKeyLike;
            this.RootProcessInstances = rootProcessInstances;
            this.Finished = finished;
            this.Unfinished = unfinished;
            this.WithIncidents = withIncidents;
            this.WithRootIncidents = withRootIncidents;
            this.IncidentType = incidentType;
            this.IncidentStatus = incidentStatus;
            this.IncidentMessage = incidentMessage;
            this.IncidentMessageLike = incidentMessageLike;
            this.StartedBefore = startedBefore;
            this.StartedAfter = startedAfter;
            this.FinishedBefore = finishedBefore;
            this.FinishedAfter = finishedAfter;
            this.ExecutedActivityAfter = executedActivityAfter;
            this.ExecutedActivityBefore = executedActivityBefore;
            this.ExecutedJobAfter = executedJobAfter;
            this.ExecutedJobBefore = executedJobBefore;
            this.StartedBy = startedBy;
            this.SuperProcessInstanceId = superProcessInstanceId;
            this.SubProcessInstanceId = subProcessInstanceId;
            this.SuperCaseInstanceId = superCaseInstanceId;
            this.SubCaseInstanceId = subCaseInstanceId;
            this.CaseInstanceId = caseInstanceId;
            this.TenantIdIn = tenantIdIn;
            this.WithoutTenantId = withoutTenantId;
            this.ExecutedActivityIdIn = executedActivityIdIn;
            this.ActiveActivityIdIn = activeActivityIdIn;
            this.Active = active;
            this.Suspended = suspended;
            this.Completed = completed;
            this.ExternallyTerminated = externallyTerminated;
            this.InternallyTerminated = internallyTerminated;
            this.Variables = variables;
            this.VariableNamesIgnoreCase = variableNamesIgnoreCase;
            this.VariableValuesIgnoreCase = variableValuesIgnoreCase;
            this.OrQueries = orQueries;
            this.Sorting = sorting;
        }

        /// <summary>
        /// Filter by process instance id.
        /// </summary>
        /// <value>Filter by process instance id.</value>
        [DataMember(Name = "processInstanceId", EmitDefaultValue = true)]
        public string ProcessInstanceId { get; set; }

        /// <summary>
        /// Filter by process instance ids. Must be a JSON array of &#x60;Strings&#x60;.
        /// </summary>
        /// <value>Filter by process instance ids. Must be a JSON array of &#x60;Strings&#x60;.</value>
        [DataMember(Name = "processInstanceIds", EmitDefaultValue = true)]
        public List<string> ProcessInstanceIds { get; set; }

        /// <summary>
        /// Filter by the process definition the instances run on.
        /// </summary>
        /// <value>Filter by the process definition the instances run on.</value>
        [DataMember(Name = "processDefinitionId", EmitDefaultValue = true)]
        public string ProcessDefinitionId { get; set; }

        /// <summary>
        /// Filter by the key of the process definition the instances run on.
        /// </summary>
        /// <value>Filter by the key of the process definition the instances run on.</value>
        [DataMember(Name = "processDefinitionKey", EmitDefaultValue = true)]
        public string ProcessDefinitionKey { get; set; }

        /// <summary>
        /// Filter by a list of process definition keys. A process instance must have one of the given process definition keys. Must be a JSON array of &#x60;Strings&#x60;.
        /// </summary>
        /// <value>Filter by a list of process definition keys. A process instance must have one of the given process definition keys. Must be a JSON array of &#x60;Strings&#x60;.</value>
        [DataMember(Name = "processDefinitionKeyIn", EmitDefaultValue = true)]
        public List<string> ProcessDefinitionKeyIn { get; set; }

        /// <summary>
        /// Filter by the name of the process definition the instances run on.
        /// </summary>
        /// <value>Filter by the name of the process definition the instances run on.</value>
        [DataMember(Name = "processDefinitionName", EmitDefaultValue = true)]
        public string ProcessDefinitionName { get; set; }

        /// <summary>
        /// Filter by process definition names that the parameter is a substring of.
        /// </summary>
        /// <value>Filter by process definition names that the parameter is a substring of.</value>
        [DataMember(Name = "processDefinitionNameLike", EmitDefaultValue = true)]
        public string ProcessDefinitionNameLike { get; set; }

        /// <summary>
        /// Exclude instances that belong to a set of process definitions. Must be a JSON array of &#x60;Strings&#x60;.
        /// </summary>
        /// <value>Exclude instances that belong to a set of process definitions. Must be a JSON array of &#x60;Strings&#x60;.</value>
        [DataMember(Name = "processDefinitionKeyNotIn", EmitDefaultValue = true)]
        public List<string> ProcessDefinitionKeyNotIn { get; set; }

        /// <summary>
        /// Filter by process instance business key.
        /// </summary>
        /// <value>Filter by process instance business key.</value>
        [DataMember(Name = "processInstanceBusinessKey", EmitDefaultValue = true)]
        public string ProcessInstanceBusinessKey { get; set; }

        /// <summary>
        /// Filter by a list of business keys. A process instance must have one of the given business keys. Must be a JSON array of &#x60;Strings&#x60;
        /// </summary>
        /// <value>Filter by a list of business keys. A process instance must have one of the given business keys. Must be a JSON array of &#x60;Strings&#x60;</value>
        [DataMember(Name = "processInstanceBusinessKeyIn", EmitDefaultValue = true)]
        public List<string> ProcessInstanceBusinessKeyIn { get; set; }

        /// <summary>
        /// Filter by process instance business key that the parameter is a substring of.
        /// </summary>
        /// <value>Filter by process instance business key that the parameter is a substring of.</value>
        [DataMember(Name = "processInstanceBusinessKeyLike", EmitDefaultValue = true)]
        public string ProcessInstanceBusinessKeyLike { get; set; }

        /// <summary>
        /// Restrict the query to all process instances that are top level process instances.
        /// </summary>
        /// <value>Restrict the query to all process instances that are top level process instances.</value>
        [DataMember(Name = "rootProcessInstances", EmitDefaultValue = true)]
        public bool? RootProcessInstances { get; set; }

        /// <summary>
        /// Only include finished process instances. This flag includes all process instances that are completed or terminated. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
        /// </summary>
        /// <value>Only include finished process instances. This flag includes all process instances that are completed or terminated. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.</value>
        [DataMember(Name = "finished", EmitDefaultValue = true)]
        public bool? Finished { get; set; }

        /// <summary>
        /// Only include unfinished process instances. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
        /// </summary>
        /// <value>Only include unfinished process instances. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.</value>
        [DataMember(Name = "unfinished", EmitDefaultValue = true)]
        public bool? Unfinished { get; set; }

        /// <summary>
        /// Only include process instances which have an incident. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
        /// </summary>
        /// <value>Only include process instances which have an incident. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.</value>
        [DataMember(Name = "withIncidents", EmitDefaultValue = true)]
        public bool? WithIncidents { get; set; }

        /// <summary>
        /// Only include process instances which have a root incident. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
        /// </summary>
        /// <value>Only include process instances which have a root incident. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.</value>
        [DataMember(Name = "withRootIncidents", EmitDefaultValue = true)]
        public bool? WithRootIncidents { get; set; }

        /// <summary>
        /// Filter by the incident type. See the [User Guide](https://docs.camunda.org/manual/7.21/user-guide/process-engine/incidents/#incident-types) for a list of incident types.
        /// </summary>
        /// <value>Filter by the incident type. See the [User Guide](https://docs.camunda.org/manual/7.21/user-guide/process-engine/incidents/#incident-types) for a list of incident types.</value>
        [DataMember(Name = "incidentType", EmitDefaultValue = true)]
        public string IncidentType { get; set; }

        /// <summary>
        /// Filter by the incident message. Exact match.
        /// </summary>
        /// <value>Filter by the incident message. Exact match.</value>
        [DataMember(Name = "incidentMessage", EmitDefaultValue = true)]
        public string IncidentMessage { get; set; }

        /// <summary>
        /// Filter by the incident message that the parameter is a substring of.
        /// </summary>
        /// <value>Filter by the incident message that the parameter is a substring of.</value>
        [DataMember(Name = "incidentMessageLike", EmitDefaultValue = true)]
        public string IncidentMessageLike { get; set; }

        /// <summary>
        /// Restrict to instances that were started before the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
        /// </summary>
        /// <value>Restrict to instances that were started before the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.</value>
        [DataMember(Name = "startedBefore", EmitDefaultValue = true)]
        public DateTime? StartedBefore { get; set; }

        /// <summary>
        /// Restrict to instances that were started after the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
        /// </summary>
        /// <value>Restrict to instances that were started after the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.</value>
        [DataMember(Name = "startedAfter", EmitDefaultValue = true)]
        public DateTime? StartedAfter { get; set; }

        /// <summary>
        /// Restrict to instances that were finished before the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
        /// </summary>
        /// <value>Restrict to instances that were finished before the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.</value>
        [DataMember(Name = "finishedBefore", EmitDefaultValue = true)]
        public DateTime? FinishedBefore { get; set; }

        /// <summary>
        /// Restrict to instances that were finished after the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
        /// </summary>
        /// <value>Restrict to instances that were finished after the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.</value>
        [DataMember(Name = "finishedAfter", EmitDefaultValue = true)]
        public DateTime? FinishedAfter { get; set; }

        /// <summary>
        /// Restrict to instances that executed an activity after the given date (inclusive). By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
        /// </summary>
        /// <value>Restrict to instances that executed an activity after the given date (inclusive). By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.</value>
        [DataMember(Name = "executedActivityAfter", EmitDefaultValue = true)]
        public DateTime? ExecutedActivityAfter { get; set; }

        /// <summary>
        /// Restrict to instances that executed an activity before the given date (inclusive). By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
        /// </summary>
        /// <value>Restrict to instances that executed an activity before the given date (inclusive). By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.</value>
        [DataMember(Name = "executedActivityBefore", EmitDefaultValue = true)]
        public DateTime? ExecutedActivityBefore { get; set; }

        /// <summary>
        /// Restrict to instances that executed an job after the given date (inclusive). By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
        /// </summary>
        /// <value>Restrict to instances that executed an job after the given date (inclusive). By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.</value>
        [DataMember(Name = "executedJobAfter", EmitDefaultValue = true)]
        public DateTime? ExecutedJobAfter { get; set; }

        /// <summary>
        /// Restrict to instances that executed an job before the given date (inclusive). By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
        /// </summary>
        /// <value>Restrict to instances that executed an job before the given date (inclusive). By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.</value>
        [DataMember(Name = "executedJobBefore", EmitDefaultValue = true)]
        public DateTime? ExecutedJobBefore { get; set; }

        /// <summary>
        /// Only include process instances that were started by the given user.
        /// </summary>
        /// <value>Only include process instances that were started by the given user.</value>
        [DataMember(Name = "startedBy", EmitDefaultValue = true)]
        public string StartedBy { get; set; }

        /// <summary>
        /// Restrict query to all process instances that are sub process instances of the given process instance. Takes a process instance id.
        /// </summary>
        /// <value>Restrict query to all process instances that are sub process instances of the given process instance. Takes a process instance id.</value>
        [DataMember(Name = "superProcessInstanceId", EmitDefaultValue = true)]
        public string SuperProcessInstanceId { get; set; }

        /// <summary>
        /// Restrict query to one process instance that has a sub process instance with the given id.
        /// </summary>
        /// <value>Restrict query to one process instance that has a sub process instance with the given id.</value>
        [DataMember(Name = "subProcessInstanceId", EmitDefaultValue = true)]
        public string SubProcessInstanceId { get; set; }

        /// <summary>
        /// Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id.
        /// </summary>
        /// <value>Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id.</value>
        [DataMember(Name = "superCaseInstanceId", EmitDefaultValue = true)]
        public string SuperCaseInstanceId { get; set; }

        /// <summary>
        /// Restrict query to one process instance that has a sub case instance with the given id.
        /// </summary>
        /// <value>Restrict query to one process instance that has a sub case instance with the given id.</value>
        [DataMember(Name = "subCaseInstanceId", EmitDefaultValue = true)]
        public string SubCaseInstanceId { get; set; }

        /// <summary>
        /// Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id.
        /// </summary>
        /// <value>Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id.</value>
        [DataMember(Name = "caseInstanceId", EmitDefaultValue = true)]
        public string CaseInstanceId { get; set; }

        /// <summary>
        /// Filter by a list of tenant ids. A process instance must have one of the given tenant ids. Must be a JSON array of &#x60;Strings&#x60;
        /// </summary>
        /// <value>Filter by a list of tenant ids. A process instance must have one of the given tenant ids. Must be a JSON array of &#x60;Strings&#x60;</value>
        [DataMember(Name = "tenantIdIn", EmitDefaultValue = true)]
        public List<string> TenantIdIn { get; set; }

        /// <summary>
        /// Only include historic process instances which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
        /// </summary>
        /// <value>Only include historic process instances which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.</value>
        [DataMember(Name = "withoutTenantId", EmitDefaultValue = true)]
        public bool? WithoutTenantId { get; set; }

        /// <summary>
        /// Restrict to instances that executed an activity with one of given ids. Must be a JSON array of &#x60;Strings&#x60;
        /// </summary>
        /// <value>Restrict to instances that executed an activity with one of given ids. Must be a JSON array of &#x60;Strings&#x60;</value>
        [DataMember(Name = "executedActivityIdIn", EmitDefaultValue = true)]
        public List<string> ExecutedActivityIdIn { get; set; }

        /// <summary>
        /// Restrict to instances that have an active activity with one of given ids. Must be a JSON array of &#x60;Strings&#x60;
        /// </summary>
        /// <value>Restrict to instances that have an active activity with one of given ids. Must be a JSON array of &#x60;Strings&#x60;</value>
        [DataMember(Name = "activeActivityIdIn", EmitDefaultValue = true)]
        public List<string> ActiveActivityIdIn { get; set; }

        /// <summary>
        /// Restrict to instances that are active.
        /// </summary>
        /// <value>Restrict to instances that are active.</value>
        [DataMember(Name = "active", EmitDefaultValue = true)]
        public bool? Active { get; set; }

        /// <summary>
        /// Restrict to instances that are suspended.
        /// </summary>
        /// <value>Restrict to instances that are suspended.</value>
        [DataMember(Name = "suspended", EmitDefaultValue = true)]
        public bool? Suspended { get; set; }

        /// <summary>
        /// Restrict to instances that are completed.
        /// </summary>
        /// <value>Restrict to instances that are completed.</value>
        [DataMember(Name = "completed", EmitDefaultValue = true)]
        public bool? Completed { get; set; }

        /// <summary>
        /// Restrict to instances that are externallyTerminated.
        /// </summary>
        /// <value>Restrict to instances that are externallyTerminated.</value>
        [DataMember(Name = "externallyTerminated", EmitDefaultValue = true)]
        public bool? ExternallyTerminated { get; set; }

        /// <summary>
        /// Restrict to instances that are internallyTerminated.
        /// </summary>
        /// <value>Restrict to instances that are internallyTerminated.</value>
        [DataMember(Name = "internallyTerminated", EmitDefaultValue = true)]
        public bool? InternallyTerminated { get; set; }

        /// <summary>
        /// A JSON array to only include process instances that have/had variables with certain values. The array consists of objects with the three properties &#x60;name&#x60;, &#x60;operator&#x60; and &#x60;value&#x60;. &#x60;name&#x60; (&#x60;String&#x60;) is the variable name, &#x60;operator&#x60; (&#x60;String&#x60;) is the comparison operator to be used and &#x60;value&#x60; the variable value.  Value may be &#x60;String&#x60;, &#x60;Number&#x60; or &#x60;Boolean&#x60;.  Valid operator values are: &#x60;eq&#x60; - equal to; &#x60;neq&#x60; - not equal to; &#x60;gt&#x60; - greater than; &#x60;gteq&#x60; - greater than or equal to; &#x60;lt&#x60; - lower than; &#x60;lteq&#x60; - lower than or equal to; &#x60;like&#x60;. 
        /// </summary>
        /// <value>A JSON array to only include process instances that have/had variables with certain values. The array consists of objects with the three properties &#x60;name&#x60;, &#x60;operator&#x60; and &#x60;value&#x60;. &#x60;name&#x60; (&#x60;String&#x60;) is the variable name, &#x60;operator&#x60; (&#x60;String&#x60;) is the comparison operator to be used and &#x60;value&#x60; the variable value.  Value may be &#x60;String&#x60;, &#x60;Number&#x60; or &#x60;Boolean&#x60;.  Valid operator values are: &#x60;eq&#x60; - equal to; &#x60;neq&#x60; - not equal to; &#x60;gt&#x60; - greater than; &#x60;gteq&#x60; - greater than or equal to; &#x60;lt&#x60; - lower than; &#x60;lteq&#x60; - lower than or equal to; &#x60;like&#x60;. </value>
        [DataMember(Name = "variables", EmitDefaultValue = true)]
        public List<VariableQueryParameterDto> Variables { get; set; }

        /// <summary>
        /// Match all variable names provided in variables case-insensitively. If set to &#x60;true&#x60; variableName and variablename are treated as equal.
        /// </summary>
        /// <value>Match all variable names provided in variables case-insensitively. If set to &#x60;true&#x60; variableName and variablename are treated as equal.</value>
        [DataMember(Name = "variableNamesIgnoreCase", EmitDefaultValue = true)]
        public bool? VariableNamesIgnoreCase { get; set; }

        /// <summary>
        /// Match all variable values provided in variables case-insensitively. If set to &#x60;true&#x60; variableValue and variablevalue are treated as equal.
        /// </summary>
        /// <value>Match all variable values provided in variables case-insensitively. If set to &#x60;true&#x60; variableValue and variablevalue are treated as equal.</value>
        [DataMember(Name = "variableValuesIgnoreCase", EmitDefaultValue = true)]
        public bool? VariableValuesIgnoreCase { get; set; }

        /// <summary>
        /// A JSON array of nested historic process instance queries with OR semantics.  A process instance matches a nested query if it fulfills at least one of the query&#39;s predicates.  With multiple nested queries, a process instance must fulfill at least one predicate of each query ([Conjunctive Normal Form](https://en.wikipedia.org/wiki/Conjunctive_normal_form)).  All process instance query properties can be used except for: &#x60;sorting&#x60;  See the [User Guide](https://docs.camunda.org/manual/7.21/user-guide/process-engine/process-engine-api/#or-queries) for more information about OR queries.
        /// </summary>
        /// <value>A JSON array of nested historic process instance queries with OR semantics.  A process instance matches a nested query if it fulfills at least one of the query&#39;s predicates.  With multiple nested queries, a process instance must fulfill at least one predicate of each query ([Conjunctive Normal Form](https://en.wikipedia.org/wiki/Conjunctive_normal_form)).  All process instance query properties can be used except for: &#x60;sorting&#x60;  See the [User Guide](https://docs.camunda.org/manual/7.21/user-guide/process-engine/process-engine-api/#or-queries) for more information about OR queries.</value>
        [DataMember(Name = "orQueries", EmitDefaultValue = true)]
        public List<HistoricProcessInstanceQueryDto> OrQueries { get; set; }

        /// <summary>
        /// Apply sorting of the result
        /// </summary>
        /// <value>Apply sorting of the result</value>
        [DataMember(Name = "sorting", EmitDefaultValue = true)]
        public List<HistoricProcessInstanceQueryDtoSortingInner> Sorting { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class HistoricProcessInstanceQueryDto {\n");
            sb.Append("  ProcessInstanceId: ").Append(ProcessInstanceId).Append("\n");
            sb.Append("  ProcessInstanceIds: ").Append(ProcessInstanceIds).Append("\n");
            sb.Append("  ProcessDefinitionId: ").Append(ProcessDefinitionId).Append("\n");
            sb.Append("  ProcessDefinitionKey: ").Append(ProcessDefinitionKey).Append("\n");
            sb.Append("  ProcessDefinitionKeyIn: ").Append(ProcessDefinitionKeyIn).Append("\n");
            sb.Append("  ProcessDefinitionName: ").Append(ProcessDefinitionName).Append("\n");
            sb.Append("  ProcessDefinitionNameLike: ").Append(ProcessDefinitionNameLike).Append("\n");
            sb.Append("  ProcessDefinitionKeyNotIn: ").Append(ProcessDefinitionKeyNotIn).Append("\n");
            sb.Append("  ProcessInstanceBusinessKey: ").Append(ProcessInstanceBusinessKey).Append("\n");
            sb.Append("  ProcessInstanceBusinessKeyIn: ").Append(ProcessInstanceBusinessKeyIn).Append("\n");
            sb.Append("  ProcessInstanceBusinessKeyLike: ").Append(ProcessInstanceBusinessKeyLike).Append("\n");
            sb.Append("  RootProcessInstances: ").Append(RootProcessInstances).Append("\n");
            sb.Append("  Finished: ").Append(Finished).Append("\n");
            sb.Append("  Unfinished: ").Append(Unfinished).Append("\n");
            sb.Append("  WithIncidents: ").Append(WithIncidents).Append("\n");
            sb.Append("  WithRootIncidents: ").Append(WithRootIncidents).Append("\n");
            sb.Append("  IncidentType: ").Append(IncidentType).Append("\n");
            sb.Append("  IncidentStatus: ").Append(IncidentStatus).Append("\n");
            sb.Append("  IncidentMessage: ").Append(IncidentMessage).Append("\n");
            sb.Append("  IncidentMessageLike: ").Append(IncidentMessageLike).Append("\n");
            sb.Append("  StartedBefore: ").Append(StartedBefore).Append("\n");
            sb.Append("  StartedAfter: ").Append(StartedAfter).Append("\n");
            sb.Append("  FinishedBefore: ").Append(FinishedBefore).Append("\n");
            sb.Append("  FinishedAfter: ").Append(FinishedAfter).Append("\n");
            sb.Append("  ExecutedActivityAfter: ").Append(ExecutedActivityAfter).Append("\n");
            sb.Append("  ExecutedActivityBefore: ").Append(ExecutedActivityBefore).Append("\n");
            sb.Append("  ExecutedJobAfter: ").Append(ExecutedJobAfter).Append("\n");
            sb.Append("  ExecutedJobBefore: ").Append(ExecutedJobBefore).Append("\n");
            sb.Append("  StartedBy: ").Append(StartedBy).Append("\n");
            sb.Append("  SuperProcessInstanceId: ").Append(SuperProcessInstanceId).Append("\n");
            sb.Append("  SubProcessInstanceId: ").Append(SubProcessInstanceId).Append("\n");
            sb.Append("  SuperCaseInstanceId: ").Append(SuperCaseInstanceId).Append("\n");
            sb.Append("  SubCaseInstanceId: ").Append(SubCaseInstanceId).Append("\n");
            sb.Append("  CaseInstanceId: ").Append(CaseInstanceId).Append("\n");
            sb.Append("  TenantIdIn: ").Append(TenantIdIn).Append("\n");
            sb.Append("  WithoutTenantId: ").Append(WithoutTenantId).Append("\n");
            sb.Append("  ExecutedActivityIdIn: ").Append(ExecutedActivityIdIn).Append("\n");
            sb.Append("  ActiveActivityIdIn: ").Append(ActiveActivityIdIn).Append("\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  Suspended: ").Append(Suspended).Append("\n");
            sb.Append("  Completed: ").Append(Completed).Append("\n");
            sb.Append("  ExternallyTerminated: ").Append(ExternallyTerminated).Append("\n");
            sb.Append("  InternallyTerminated: ").Append(InternallyTerminated).Append("\n");
            sb.Append("  Variables: ").Append(Variables).Append("\n");
            sb.Append("  VariableNamesIgnoreCase: ").Append(VariableNamesIgnoreCase).Append("\n");
            sb.Append("  VariableValuesIgnoreCase: ").Append(VariableValuesIgnoreCase).Append("\n");
            sb.Append("  OrQueries: ").Append(OrQueries).Append("\n");
            sb.Append("  Sorting: ").Append(Sorting).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
