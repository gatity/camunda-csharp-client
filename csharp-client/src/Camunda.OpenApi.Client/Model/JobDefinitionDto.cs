/*
 * Camunda Platform REST API
 *
 * OpenApi Spec for Camunda Platform REST API.
 *
 * The version of the OpenAPI document: 7.21.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Camunda.OpenApi.Client.Client.FileParameter;
using OpenAPIDateConverter = Camunda.OpenApi.Client.Client.OpenAPIDateConverter;

namespace Camunda.OpenApi.Client.Model
{
    /// <summary>
    /// JobDefinitionDto
    /// </summary>
    [DataContract(Name = "JobDefinitionDto")]
    public partial class JobDefinitionDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="JobDefinitionDto" /> class.
        /// </summary>
        /// <param name="id">The id of the job definition..</param>
        /// <param name="processDefinitionId">The id of the process definition this job definition is associated with..</param>
        /// <param name="processDefinitionKey">The key of the process definition this job definition is associated with..</param>
        /// <param name="activityId">The id of the activity this job definition is associated with..</param>
        /// <param name="jobType">The type of the job which is running for this job definition. See the [User Guide](https://docs.camunda.org/manual/7.21/user-guide/process-engine/the-job-executor/#job-creation) for more information about job types..</param>
        /// <param name="jobConfiguration">The configuration of a job definition provides details about the jobs which will be created. For example: for timer jobs it is the timer configuration..</param>
        /// <param name="overridingJobPriority">The execution priority defined for jobs that are created based on this definition. May be &#x60;null&#x60; when the priority has not been overridden on the job definition level..</param>
        /// <param name="suspended">Indicates whether this job definition is suspended or not..</param>
        /// <param name="tenantId">The id of the tenant this job definition is associated with..</param>
        /// <param name="deploymentId">The id of the deployment this job definition is related to. In a deployment-aware setup, this leads to all jobs of the same definition being executed on the same node..</param>
        public JobDefinitionDto(string id = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string activityId = default(string), string jobType = default(string), string jobConfiguration = default(string), long? overridingJobPriority = default(long?), bool? suspended = default(bool?), string tenantId = default(string), string deploymentId = default(string))
        {
            this.Id = id;
            this.ProcessDefinitionId = processDefinitionId;
            this.ProcessDefinitionKey = processDefinitionKey;
            this.ActivityId = activityId;
            this.JobType = jobType;
            this.JobConfiguration = jobConfiguration;
            this.OverridingJobPriority = overridingJobPriority;
            this.Suspended = suspended;
            this.TenantId = tenantId;
            this.DeploymentId = deploymentId;
        }

        /// <summary>
        /// The id of the job definition.
        /// </summary>
        /// <value>The id of the job definition.</value>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// The id of the process definition this job definition is associated with.
        /// </summary>
        /// <value>The id of the process definition this job definition is associated with.</value>
        [DataMember(Name = "processDefinitionId", EmitDefaultValue = true)]
        public string ProcessDefinitionId { get; set; }

        /// <summary>
        /// The key of the process definition this job definition is associated with.
        /// </summary>
        /// <value>The key of the process definition this job definition is associated with.</value>
        [DataMember(Name = "processDefinitionKey", EmitDefaultValue = true)]
        public string ProcessDefinitionKey { get; set; }

        /// <summary>
        /// The id of the activity this job definition is associated with.
        /// </summary>
        /// <value>The id of the activity this job definition is associated with.</value>
        [DataMember(Name = "activityId", EmitDefaultValue = true)]
        public string ActivityId { get; set; }

        /// <summary>
        /// The type of the job which is running for this job definition. See the [User Guide](https://docs.camunda.org/manual/7.21/user-guide/process-engine/the-job-executor/#job-creation) for more information about job types.
        /// </summary>
        /// <value>The type of the job which is running for this job definition. See the [User Guide](https://docs.camunda.org/manual/7.21/user-guide/process-engine/the-job-executor/#job-creation) for more information about job types.</value>
        [DataMember(Name = "jobType", EmitDefaultValue = true)]
        public string JobType { get; set; }

        /// <summary>
        /// The configuration of a job definition provides details about the jobs which will be created. For example: for timer jobs it is the timer configuration.
        /// </summary>
        /// <value>The configuration of a job definition provides details about the jobs which will be created. For example: for timer jobs it is the timer configuration.</value>
        [DataMember(Name = "jobConfiguration", EmitDefaultValue = true)]
        public string JobConfiguration { get; set; }

        /// <summary>
        /// The execution priority defined for jobs that are created based on this definition. May be &#x60;null&#x60; when the priority has not been overridden on the job definition level.
        /// </summary>
        /// <value>The execution priority defined for jobs that are created based on this definition. May be &#x60;null&#x60; when the priority has not been overridden on the job definition level.</value>
        [DataMember(Name = "overridingJobPriority", EmitDefaultValue = true)]
        public long? OverridingJobPriority { get; set; }

        /// <summary>
        /// Indicates whether this job definition is suspended or not.
        /// </summary>
        /// <value>Indicates whether this job definition is suspended or not.</value>
        [DataMember(Name = "suspended", EmitDefaultValue = true)]
        public bool? Suspended { get; set; }

        /// <summary>
        /// The id of the tenant this job definition is associated with.
        /// </summary>
        /// <value>The id of the tenant this job definition is associated with.</value>
        [DataMember(Name = "tenantId", EmitDefaultValue = true)]
        public string TenantId { get; set; }

        /// <summary>
        /// The id of the deployment this job definition is related to. In a deployment-aware setup, this leads to all jobs of the same definition being executed on the same node.
        /// </summary>
        /// <value>The id of the deployment this job definition is related to. In a deployment-aware setup, this leads to all jobs of the same definition being executed on the same node.</value>
        [DataMember(Name = "deploymentId", EmitDefaultValue = true)]
        public string DeploymentId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class JobDefinitionDto {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ProcessDefinitionId: ").Append(ProcessDefinitionId).Append("\n");
            sb.Append("  ProcessDefinitionKey: ").Append(ProcessDefinitionKey).Append("\n");
            sb.Append("  ActivityId: ").Append(ActivityId).Append("\n");
            sb.Append("  JobType: ").Append(JobType).Append("\n");
            sb.Append("  JobConfiguration: ").Append(JobConfiguration).Append("\n");
            sb.Append("  OverridingJobPriority: ").Append(OverridingJobPriority).Append("\n");
            sb.Append("  Suspended: ").Append(Suspended).Append("\n");
            sb.Append("  TenantId: ").Append(TenantId).Append("\n");
            sb.Append("  DeploymentId: ").Append(DeploymentId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
