/*
 * Camunda Platform REST API
 *
 * OpenApi Spec for Camunda Platform REST API.
 *
 * The version of the OpenAPI document: 7.17.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Camunda.OpenApi.Client.Client.FileParameter;
using OpenAPIDateConverter = Camunda.OpenApi.Client.Client.OpenAPIDateConverter;

namespace Camunda.OpenApi.Client.Model
{
    /// <summary>
    /// IdentityServiceGroupInfoDto
    /// </summary>
    [DataContract(Name = "IdentityServiceGroupInfoDto")]
    public partial class IdentityServiceGroupInfoDto : IEquatable<IdentityServiceGroupInfoDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IdentityServiceGroupInfoDto" /> class.
        /// </summary>
        /// <param name="groups">An array of group objects..</param>
        /// <param name="groupUsers">An array that contains all users that are member in one of the groups..</param>
        public IdentityServiceGroupInfoDto(List<IdentityServiceGroupDto> groups = default(List<IdentityServiceGroupDto>), List<IdentityServiceUserDto> groupUsers = default(List<IdentityServiceUserDto>))
        {
            this.Groups = groups;
            this.GroupUsers = groupUsers;
        }

        /// <summary>
        /// An array of group objects.
        /// </summary>
        /// <value>An array of group objects.</value>
        [DataMember(Name = "groups", EmitDefaultValue = true)]
        public List<IdentityServiceGroupDto> Groups { get; set; }

        /// <summary>
        /// An array that contains all users that are member in one of the groups.
        /// </summary>
        /// <value>An array that contains all users that are member in one of the groups.</value>
        [DataMember(Name = "groupUsers", EmitDefaultValue = true)]
        public List<IdentityServiceUserDto> GroupUsers { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class IdentityServiceGroupInfoDto {\n");
            sb.Append("  Groups: ").Append(Groups).Append("\n");
            sb.Append("  GroupUsers: ").Append(GroupUsers).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as IdentityServiceGroupInfoDto);
        }

        /// <summary>
        /// Returns true if IdentityServiceGroupInfoDto instances are equal
        /// </summary>
        /// <param name="input">Instance of IdentityServiceGroupInfoDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IdentityServiceGroupInfoDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Groups == input.Groups ||
                    this.Groups != null &&
                    input.Groups != null &&
                    this.Groups.SequenceEqual(input.Groups)
                ) && 
                (
                    this.GroupUsers == input.GroupUsers ||
                    this.GroupUsers != null &&
                    input.GroupUsers != null &&
                    this.GroupUsers.SequenceEqual(input.GroupUsers)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Groups != null)
                    hashCode = hashCode * 59 + this.Groups.GetHashCode();
                if (this.GroupUsers != null)
                    hashCode = hashCode * 59 + this.GroupUsers.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
