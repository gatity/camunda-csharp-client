/*
 * Camunda Platform REST API
 *
 * OpenApi Spec for Camunda Platform REST API.
 *
 * The version of the OpenAPI document: 7.21.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Camunda.OpenApi.Client.Client.FileParameter;
using OpenAPIDateConverter = Camunda.OpenApi.Client.Client.OpenAPIDateConverter;

namespace Camunda.OpenApi.Client.Model
{
    /// <summary>
    /// ExecutionDto
    /// </summary>
    [DataContract(Name = "ExecutionDto")]
    public partial class ExecutionDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ExecutionDto" /> class.
        /// </summary>
        /// <param name="id">The id of the Execution..</param>
        /// <param name="processInstanceId">The id of the root of the execution tree representing the process instance..</param>
        /// <param name="ended">Indicates if the execution is ended..</param>
        /// <param name="tenantId">The id of the tenant this execution belongs to. Can be &#x60;null&#x60; if the execution belongs to no single tenant..</param>
        public ExecutionDto(string id = default(string), string processInstanceId = default(string), bool? ended = default(bool?), string tenantId = default(string))
        {
            this.Id = id;
            this.ProcessInstanceId = processInstanceId;
            this.Ended = ended;
            this.TenantId = tenantId;
        }

        /// <summary>
        /// The id of the Execution.
        /// </summary>
        /// <value>The id of the Execution.</value>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// The id of the root of the execution tree representing the process instance.
        /// </summary>
        /// <value>The id of the root of the execution tree representing the process instance.</value>
        [DataMember(Name = "processInstanceId", EmitDefaultValue = true)]
        public string ProcessInstanceId { get; set; }

        /// <summary>
        /// Indicates if the execution is ended.
        /// </summary>
        /// <value>Indicates if the execution is ended.</value>
        [DataMember(Name = "ended", EmitDefaultValue = true)]
        public bool? Ended { get; set; }

        /// <summary>
        /// The id of the tenant this execution belongs to. Can be &#x60;null&#x60; if the execution belongs to no single tenant.
        /// </summary>
        /// <value>The id of the tenant this execution belongs to. Can be &#x60;null&#x60; if the execution belongs to no single tenant.</value>
        [DataMember(Name = "tenantId", EmitDefaultValue = true)]
        public string TenantId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ExecutionDto {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ProcessInstanceId: ").Append(ProcessInstanceId).Append("\n");
            sb.Append("  Ended: ").Append(Ended).Append("\n");
            sb.Append("  TenantId: ").Append(TenantId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
