/*
 * Camunda Platform REST API
 *
 * OpenApi Spec for Camunda Platform REST API.
 *
 * The version of the OpenAPI document: 7.17.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Camunda.OpenApi.Client.Client.FileParameter;
using OpenAPIDateConverter = Camunda.OpenApi.Client.Client.OpenAPIDateConverter;

namespace Camunda.OpenApi.Client.Model
{
    /// <summary>
    /// Defines the number of retries for a selection of jobs. Please note that if both jobIds and jobQuery are provided, then retries will be set on the union of these sets.
    /// </summary>
    [DataContract(Name = "SetJobRetriesDto")]
    public partial class SetJobRetriesDto : IEquatable<SetJobRetriesDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SetJobRetriesDto" /> class.
        /// </summary>
        /// <param name="jobIds">A list of job ids to set retries for..</param>
        /// <param name="jobQuery">jobQuery.</param>
        /// <param name="retries">An integer representing the number of retries. Please note that the value cannot be negative or null..</param>
        public SetJobRetriesDto(List<string> jobIds = default(List<string>), JobQueryDto jobQuery = default(JobQueryDto), int? retries = default(int?))
        {
            this.JobIds = jobIds;
            this.JobQuery = jobQuery;
            this.Retries = retries;
        }

        /// <summary>
        /// A list of job ids to set retries for.
        /// </summary>
        /// <value>A list of job ids to set retries for.</value>
        [DataMember(Name = "jobIds", EmitDefaultValue = true)]
        public List<string> JobIds { get; set; }

        /// <summary>
        /// Gets or Sets JobQuery
        /// </summary>
        [DataMember(Name = "jobQuery", EmitDefaultValue = false)]
        public JobQueryDto JobQuery { get; set; }

        /// <summary>
        /// An integer representing the number of retries. Please note that the value cannot be negative or null.
        /// </summary>
        /// <value>An integer representing the number of retries. Please note that the value cannot be negative or null.</value>
        [DataMember(Name = "retries", EmitDefaultValue = true)]
        public int? Retries { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SetJobRetriesDto {\n");
            sb.Append("  JobIds: ").Append(JobIds).Append("\n");
            sb.Append("  JobQuery: ").Append(JobQuery).Append("\n");
            sb.Append("  Retries: ").Append(Retries).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SetJobRetriesDto);
        }

        /// <summary>
        /// Returns true if SetJobRetriesDto instances are equal
        /// </summary>
        /// <param name="input">Instance of SetJobRetriesDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SetJobRetriesDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.JobIds == input.JobIds ||
                    this.JobIds != null &&
                    input.JobIds != null &&
                    this.JobIds.SequenceEqual(input.JobIds)
                ) && 
                (
                    this.JobQuery == input.JobQuery ||
                    (this.JobQuery != null &&
                    this.JobQuery.Equals(input.JobQuery))
                ) && 
                (
                    this.Retries == input.Retries ||
                    (this.Retries != null &&
                    this.Retries.Equals(input.Retries))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.JobIds != null)
                    hashCode = hashCode * 59 + this.JobIds.GetHashCode();
                if (this.JobQuery != null)
                    hashCode = hashCode * 59 + this.JobQuery.GetHashCode();
                if (this.Retries != null)
                    hashCode = hashCode * 59 + this.Retries.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Retries (int?) minimum
            if(this.Retries < (int?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Retries, must be a value greater than or equal to 0.", new [] { "Retries" });
            }

            yield break;
        }
    }

}
