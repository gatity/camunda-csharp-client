/*
 * Camunda Platform REST API
 *
 * OpenApi Spec for Camunda Platform REST API.
 *
 * The version of the OpenAPI document: 7.17.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Camunda.OpenApi.Client.Client.FileParameter;
using OpenAPIDateConverter = Camunda.OpenApi.Client.Client.OpenAPIDateConverter;

namespace Camunda.OpenApi.Client.Model
{
    /// <summary>
    /// AuthenticationResult
    /// </summary>
    [DataContract(Name = "AuthenticationResult")]
    public partial class AuthenticationResult : IEquatable<AuthenticationResult>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticationResult" /> class.
        /// </summary>
        /// <param name="authenticatedUser">An id of authenticated user..</param>
        /// <param name="isAuthenticated">A flag indicating if user is authenticated..</param>
        /// <param name="tenants">Will be null..</param>
        /// <param name="groups">Will be null..</param>
        public AuthenticationResult(string authenticatedUser = default(string), bool? isAuthenticated = default(bool?), List<string> tenants = default(List<string>), List<string> groups = default(List<string>))
        {
            this.AuthenticatedUser = authenticatedUser;
            this.IsAuthenticated = isAuthenticated;
            this.Tenants = tenants;
            this.Groups = groups;
        }

        /// <summary>
        /// An id of authenticated user.
        /// </summary>
        /// <value>An id of authenticated user.</value>
        [DataMember(Name = "authenticatedUser", EmitDefaultValue = true)]
        public string AuthenticatedUser { get; set; }

        /// <summary>
        /// A flag indicating if user is authenticated.
        /// </summary>
        /// <value>A flag indicating if user is authenticated.</value>
        [DataMember(Name = "isAuthenticated", EmitDefaultValue = true)]
        public bool? IsAuthenticated { get; set; }

        /// <summary>
        /// Will be null.
        /// </summary>
        /// <value>Will be null.</value>
        [DataMember(Name = "tenants", EmitDefaultValue = true)]
        public List<string> Tenants { get; set; }

        /// <summary>
        /// Will be null.
        /// </summary>
        /// <value>Will be null.</value>
        [DataMember(Name = "groups", EmitDefaultValue = true)]
        public List<string> Groups { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AuthenticationResult {\n");
            sb.Append("  AuthenticatedUser: ").Append(AuthenticatedUser).Append("\n");
            sb.Append("  IsAuthenticated: ").Append(IsAuthenticated).Append("\n");
            sb.Append("  Tenants: ").Append(Tenants).Append("\n");
            sb.Append("  Groups: ").Append(Groups).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AuthenticationResult);
        }

        /// <summary>
        /// Returns true if AuthenticationResult instances are equal
        /// </summary>
        /// <param name="input">Instance of AuthenticationResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AuthenticationResult input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AuthenticatedUser == input.AuthenticatedUser ||
                    (this.AuthenticatedUser != null &&
                    this.AuthenticatedUser.Equals(input.AuthenticatedUser))
                ) && 
                (
                    this.IsAuthenticated == input.IsAuthenticated ||
                    (this.IsAuthenticated != null &&
                    this.IsAuthenticated.Equals(input.IsAuthenticated))
                ) && 
                (
                    this.Tenants == input.Tenants ||
                    this.Tenants != null &&
                    input.Tenants != null &&
                    this.Tenants.SequenceEqual(input.Tenants)
                ) && 
                (
                    this.Groups == input.Groups ||
                    this.Groups != null &&
                    input.Groups != null &&
                    this.Groups.SequenceEqual(input.Groups)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AuthenticatedUser != null)
                    hashCode = hashCode * 59 + this.AuthenticatedUser.GetHashCode();
                if (this.IsAuthenticated != null)
                    hashCode = hashCode * 59 + this.IsAuthenticated.GetHashCode();
                if (this.Tenants != null)
                    hashCode = hashCode * 59 + this.Tenants.GetHashCode();
                if (this.Groups != null)
                    hashCode = hashCode * 59 + this.Groups.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
