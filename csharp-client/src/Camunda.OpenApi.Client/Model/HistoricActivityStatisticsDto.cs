/*
 * Camunda Platform REST API
 *
 * OpenApi Spec for Camunda Platform REST API.
 *
 * The version of the OpenAPI document: 7.17.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Camunda.OpenApi.Client.Client.FileParameter;
using OpenAPIDateConverter = Camunda.OpenApi.Client.Client.OpenAPIDateConverter;

namespace Camunda.OpenApi.Client.Model
{
    /// <summary>
    /// HistoricActivityStatisticsDto
    /// </summary>
    [DataContract(Name = "HistoricActivityStatisticsDto")]
    public partial class HistoricActivityStatisticsDto : IEquatable<HistoricActivityStatisticsDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="HistoricActivityStatisticsDto" /> class.
        /// </summary>
        /// <param name="id">The id of the activity the results are aggregated for..</param>
        /// <param name="instances">The total number of all running instances of the activity..</param>
        /// <param name="canceled">The total number of all canceled instances of the activity. **Note:** Will be &#x60;0&#x60; (not &#x60;null&#x60;), if canceled activity instances were excluded..</param>
        /// <param name="finished">The total number of all finished instances of the activity. **Note:** Will be &#x60;0&#x60; (not &#x60;null&#x60;), if finished activity instances were excluded..</param>
        /// <param name="completeScope">The total number of all instances which completed a scope of the activity. **Note:** Will be &#x60;0&#x60; (not &#x60;null&#x60;), if activity instances which completed a scope were excluded..</param>
        /// <param name="openIncidents">The total number of open incidents for the activity. **Note:** Will be &#x60;0&#x60; (not &#x60;null&#x60;), if &#x60;incidents&#x60; is set to &#x60;false&#x60;..</param>
        /// <param name="resolvedIncidents">The total number of resolved incidents for the activity. **Note:** Will be &#x60;0&#x60; (not &#x60;null&#x60;), if &#x60;incidents&#x60; is set to &#x60;false&#x60;..</param>
        /// <param name="deletedIncidents">The total number of deleted incidents for the activity. **Note:** Will be &#x60;0&#x60; (not &#x60;null&#x60;), if &#x60;incidents&#x60; is set to &#x60;false&#x60;..</param>
        public HistoricActivityStatisticsDto(string id = default(string), long? instances = default(long?), long? canceled = default(long?), long? finished = default(long?), long? completeScope = default(long?), long? openIncidents = default(long?), long? resolvedIncidents = default(long?), long? deletedIncidents = default(long?))
        {
            this.Id = id;
            this.Instances = instances;
            this.Canceled = canceled;
            this.Finished = finished;
            this.CompleteScope = completeScope;
            this.OpenIncidents = openIncidents;
            this.ResolvedIncidents = resolvedIncidents;
            this.DeletedIncidents = deletedIncidents;
        }

        /// <summary>
        /// The id of the activity the results are aggregated for.
        /// </summary>
        /// <value>The id of the activity the results are aggregated for.</value>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// The total number of all running instances of the activity.
        /// </summary>
        /// <value>The total number of all running instances of the activity.</value>
        [DataMember(Name = "instances", EmitDefaultValue = true)]
        public long? Instances { get; set; }

        /// <summary>
        /// The total number of all canceled instances of the activity. **Note:** Will be &#x60;0&#x60; (not &#x60;null&#x60;), if canceled activity instances were excluded.
        /// </summary>
        /// <value>The total number of all canceled instances of the activity. **Note:** Will be &#x60;0&#x60; (not &#x60;null&#x60;), if canceled activity instances were excluded.</value>
        [DataMember(Name = "canceled", EmitDefaultValue = true)]
        public long? Canceled { get; set; }

        /// <summary>
        /// The total number of all finished instances of the activity. **Note:** Will be &#x60;0&#x60; (not &#x60;null&#x60;), if finished activity instances were excluded.
        /// </summary>
        /// <value>The total number of all finished instances of the activity. **Note:** Will be &#x60;0&#x60; (not &#x60;null&#x60;), if finished activity instances were excluded.</value>
        [DataMember(Name = "finished", EmitDefaultValue = true)]
        public long? Finished { get; set; }

        /// <summary>
        /// The total number of all instances which completed a scope of the activity. **Note:** Will be &#x60;0&#x60; (not &#x60;null&#x60;), if activity instances which completed a scope were excluded.
        /// </summary>
        /// <value>The total number of all instances which completed a scope of the activity. **Note:** Will be &#x60;0&#x60; (not &#x60;null&#x60;), if activity instances which completed a scope were excluded.</value>
        [DataMember(Name = "completeScope", EmitDefaultValue = true)]
        public long? CompleteScope { get; set; }

        /// <summary>
        /// The total number of open incidents for the activity. **Note:** Will be &#x60;0&#x60; (not &#x60;null&#x60;), if &#x60;incidents&#x60; is set to &#x60;false&#x60;.
        /// </summary>
        /// <value>The total number of open incidents for the activity. **Note:** Will be &#x60;0&#x60; (not &#x60;null&#x60;), if &#x60;incidents&#x60; is set to &#x60;false&#x60;.</value>
        [DataMember(Name = "openIncidents", EmitDefaultValue = true)]
        public long? OpenIncidents { get; set; }

        /// <summary>
        /// The total number of resolved incidents for the activity. **Note:** Will be &#x60;0&#x60; (not &#x60;null&#x60;), if &#x60;incidents&#x60; is set to &#x60;false&#x60;.
        /// </summary>
        /// <value>The total number of resolved incidents for the activity. **Note:** Will be &#x60;0&#x60; (not &#x60;null&#x60;), if &#x60;incidents&#x60; is set to &#x60;false&#x60;.</value>
        [DataMember(Name = "resolvedIncidents", EmitDefaultValue = true)]
        public long? ResolvedIncidents { get; set; }

        /// <summary>
        /// The total number of deleted incidents for the activity. **Note:** Will be &#x60;0&#x60; (not &#x60;null&#x60;), if &#x60;incidents&#x60; is set to &#x60;false&#x60;.
        /// </summary>
        /// <value>The total number of deleted incidents for the activity. **Note:** Will be &#x60;0&#x60; (not &#x60;null&#x60;), if &#x60;incidents&#x60; is set to &#x60;false&#x60;.</value>
        [DataMember(Name = "deletedIncidents", EmitDefaultValue = true)]
        public long? DeletedIncidents { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class HistoricActivityStatisticsDto {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Instances: ").Append(Instances).Append("\n");
            sb.Append("  Canceled: ").Append(Canceled).Append("\n");
            sb.Append("  Finished: ").Append(Finished).Append("\n");
            sb.Append("  CompleteScope: ").Append(CompleteScope).Append("\n");
            sb.Append("  OpenIncidents: ").Append(OpenIncidents).Append("\n");
            sb.Append("  ResolvedIncidents: ").Append(ResolvedIncidents).Append("\n");
            sb.Append("  DeletedIncidents: ").Append(DeletedIncidents).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as HistoricActivityStatisticsDto);
        }

        /// <summary>
        /// Returns true if HistoricActivityStatisticsDto instances are equal
        /// </summary>
        /// <param name="input">Instance of HistoricActivityStatisticsDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(HistoricActivityStatisticsDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Instances == input.Instances ||
                    (this.Instances != null &&
                    this.Instances.Equals(input.Instances))
                ) && 
                (
                    this.Canceled == input.Canceled ||
                    (this.Canceled != null &&
                    this.Canceled.Equals(input.Canceled))
                ) && 
                (
                    this.Finished == input.Finished ||
                    (this.Finished != null &&
                    this.Finished.Equals(input.Finished))
                ) && 
                (
                    this.CompleteScope == input.CompleteScope ||
                    (this.CompleteScope != null &&
                    this.CompleteScope.Equals(input.CompleteScope))
                ) && 
                (
                    this.OpenIncidents == input.OpenIncidents ||
                    (this.OpenIncidents != null &&
                    this.OpenIncidents.Equals(input.OpenIncidents))
                ) && 
                (
                    this.ResolvedIncidents == input.ResolvedIncidents ||
                    (this.ResolvedIncidents != null &&
                    this.ResolvedIncidents.Equals(input.ResolvedIncidents))
                ) && 
                (
                    this.DeletedIncidents == input.DeletedIncidents ||
                    (this.DeletedIncidents != null &&
                    this.DeletedIncidents.Equals(input.DeletedIncidents))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Instances != null)
                    hashCode = hashCode * 59 + this.Instances.GetHashCode();
                if (this.Canceled != null)
                    hashCode = hashCode * 59 + this.Canceled.GetHashCode();
                if (this.Finished != null)
                    hashCode = hashCode * 59 + this.Finished.GetHashCode();
                if (this.CompleteScope != null)
                    hashCode = hashCode * 59 + this.CompleteScope.GetHashCode();
                if (this.OpenIncidents != null)
                    hashCode = hashCode * 59 + this.OpenIncidents.GetHashCode();
                if (this.ResolvedIncidents != null)
                    hashCode = hashCode * 59 + this.ResolvedIncidents.GetHashCode();
                if (this.DeletedIncidents != null)
                    hashCode = hashCode * 59 + this.DeletedIncidents.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
