/*
 * Camunda Platform REST API
 *
 * OpenApi Spec for Camunda Platform REST API.
 *
 * The version of the OpenAPI document: 7.16.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Camunda.OpenApi.Client.Client.FileParameter;
using OpenAPIDateConverter = Camunda.OpenApi.Client.Client.OpenAPIDateConverter;

namespace Camunda.OpenApi.Client.Model
{
    /// <summary>
    /// CleanableHistoricBatchReportResultDto
    /// </summary>
    [DataContract(Name = "CleanableHistoricBatchReportResultDto")]
    public partial class CleanableHistoricBatchReportResultDto : IEquatable<CleanableHistoricBatchReportResultDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CleanableHistoricBatchReportResultDto" /> class.
        /// </summary>
        /// <param name="batchType">The type of the batch operation..</param>
        /// <param name="historyTimeToLive">The history time to live of the batch operation..</param>
        /// <param name="finishedBatchesCount">The count of the finished batch operations..</param>
        /// <param name="cleanableBatchesCount">The count of the cleanable historic batch operations, referring to history time to live..</param>
        public CleanableHistoricBatchReportResultDto(string batchType = default(string), int? historyTimeToLive = default(int?), long? finishedBatchesCount = default(long?), long? cleanableBatchesCount = default(long?))
        {
            this.BatchType = batchType;
            this.HistoryTimeToLive = historyTimeToLive;
            this.FinishedBatchesCount = finishedBatchesCount;
            this.CleanableBatchesCount = cleanableBatchesCount;
        }

        /// <summary>
        /// The type of the batch operation.
        /// </summary>
        /// <value>The type of the batch operation.</value>
        [DataMember(Name = "batchType", EmitDefaultValue = true)]
        public string BatchType { get; set; }

        /// <summary>
        /// The history time to live of the batch operation.
        /// </summary>
        /// <value>The history time to live of the batch operation.</value>
        [DataMember(Name = "historyTimeToLive", EmitDefaultValue = true)]
        public int? HistoryTimeToLive { get; set; }

        /// <summary>
        /// The count of the finished batch operations.
        /// </summary>
        /// <value>The count of the finished batch operations.</value>
        [DataMember(Name = "finishedBatchesCount", EmitDefaultValue = true)]
        public long? FinishedBatchesCount { get; set; }

        /// <summary>
        /// The count of the cleanable historic batch operations, referring to history time to live.
        /// </summary>
        /// <value>The count of the cleanable historic batch operations, referring to history time to live.</value>
        [DataMember(Name = "cleanableBatchesCount", EmitDefaultValue = true)]
        public long? CleanableBatchesCount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CleanableHistoricBatchReportResultDto {\n");
            sb.Append("  BatchType: ").Append(BatchType).Append("\n");
            sb.Append("  HistoryTimeToLive: ").Append(HistoryTimeToLive).Append("\n");
            sb.Append("  FinishedBatchesCount: ").Append(FinishedBatchesCount).Append("\n");
            sb.Append("  CleanableBatchesCount: ").Append(CleanableBatchesCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CleanableHistoricBatchReportResultDto);
        }

        /// <summary>
        /// Returns true if CleanableHistoricBatchReportResultDto instances are equal
        /// </summary>
        /// <param name="input">Instance of CleanableHistoricBatchReportResultDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CleanableHistoricBatchReportResultDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.BatchType == input.BatchType ||
                    (this.BatchType != null &&
                    this.BatchType.Equals(input.BatchType))
                ) && 
                (
                    this.HistoryTimeToLive == input.HistoryTimeToLive ||
                    (this.HistoryTimeToLive != null &&
                    this.HistoryTimeToLive.Equals(input.HistoryTimeToLive))
                ) && 
                (
                    this.FinishedBatchesCount == input.FinishedBatchesCount ||
                    (this.FinishedBatchesCount != null &&
                    this.FinishedBatchesCount.Equals(input.FinishedBatchesCount))
                ) && 
                (
                    this.CleanableBatchesCount == input.CleanableBatchesCount ||
                    (this.CleanableBatchesCount != null &&
                    this.CleanableBatchesCount.Equals(input.CleanableBatchesCount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BatchType != null)
                    hashCode = hashCode * 59 + this.BatchType.GetHashCode();
                if (this.HistoryTimeToLive != null)
                    hashCode = hashCode * 59 + this.HistoryTimeToLive.GetHashCode();
                if (this.FinishedBatchesCount != null)
                    hashCode = hashCode * 59 + this.FinishedBatchesCount.GetHashCode();
                if (this.CleanableBatchesCount != null)
                    hashCode = hashCode * 59 + this.CleanableBatchesCount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
