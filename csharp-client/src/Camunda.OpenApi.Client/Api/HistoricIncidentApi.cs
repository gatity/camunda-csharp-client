/*
 * Camunda Platform REST API
 *
 * OpenApi Spec for Camunda Platform REST API.
 *
 * The version of the OpenAPI document: 7.16.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using Camunda.OpenApi.Client.Client;
using Camunda.OpenApi.Client.Model;

namespace Camunda.OpenApi.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IHistoricIncidentApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get Incidents
        /// </summary>
        /// <remarks>
        /// Queries for historic incidents that fulfill given parameters. The size of the result set can be retrieved by using the [Get Incident Count](https://docs.camunda.org/manual/7.16/reference/rest/history/incident/get-incident-query-count/) method.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="incidentId">Restricts to incidents that have the given id. (optional)</param>
        /// <param name="incidentType">Restricts to incidents that belong to the given incident type. See the [User Guide](/manual/develop/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)</param>
        /// <param name="incidentMessage">Restricts to incidents that have the given incident message. (optional)</param>
        /// <param name="incidentMessageLike">Restricts to incidents that incidents message is a substring of the given value. The string can include the wildcard character &#39;%&#39; to express like-strategy: starts with (string%), ends with (%string) or contains (%string%).  (optional)</param>
        /// <param name="processDefinitionId">Restricts to incidents that belong to a process definition with the given id. (optional)</param>
        /// <param name="processDefinitionKey">Restricts to incidents that have the given processDefinitionKey. (optional)</param>
        /// <param name="processDefinitionKeyIn">Restricts to incidents that have one of the given process definition keys. (optional)</param>
        /// <param name="processInstanceId">Restricts to incidents that belong to a process instance with the given id. (optional)</param>
        /// <param name="executionId">Restricts to incidents that belong to an execution with the given id. (optional)</param>
        /// <param name="createTimeBefore">Restricts to incidents that have a createTime date before the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="createTimeAfter">Restricts to incidents that have a createTime date after the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="endTimeBefore">Restricts to incidents that have an endTimeBefore date before the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="endTimeAfter">Restricts to incidents that have an endTimeAfter date after the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="activityId">Restricts to incidents that belong to an activity with the given id. (optional)</param>
        /// <param name="failedActivityId">Restricts to incidents that were created due to the failure of an activity with the given id. (optional)</param>
        /// <param name="causeIncidentId">Restricts to incidents that have the given incident id as cause incident. (optional)</param>
        /// <param name="rootCauseIncidentId">Restricts to incidents that have the given incident id as root cause incident. (optional)</param>
        /// <param name="configuration">Restricts to incidents that have the given parameter set as configuration. (optional)</param>
        /// <param name="historyConfiguration">Restricts to incidents that have the given parameter set as history configuration. (optional)</param>
        /// <param name="open">Restricts to incidents that are open. (optional)</param>
        /// <param name="resolved">Restricts to incidents that are resolved. (optional)</param>
        /// <param name="deleted">Restricts to incidents that are deleted. (optional)</param>
        /// <param name="tenantIdIn">Restricts to incidents that have one of the given comma-separated tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include historic incidents that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="jobDefinitionIdIn">Restricts to incidents that have one of the given comma-separated job definition ids. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <returns>List&lt;HistoricIncidentDto&gt;</returns>
        List<HistoricIncidentDto> GetHistoricIncidents(string incidentId = default(string), string incidentType = default(string), string incidentMessage = default(string), string incidentMessageLike = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string processDefinitionKeyIn = default(string), string processInstanceId = default(string), string executionId = default(string), DateTime? createTimeBefore = default(DateTime?), DateTime? createTimeAfter = default(DateTime?), DateTime? endTimeBefore = default(DateTime?), DateTime? endTimeAfter = default(DateTime?), string activityId = default(string), string failedActivityId = default(string), string causeIncidentId = default(string), string rootCauseIncidentId = default(string), string configuration = default(string), string historyConfiguration = default(string), bool? open = default(bool?), bool? resolved = default(bool?), bool? deleted = default(bool?), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), string jobDefinitionIdIn = default(string), string sortBy = default(string), string sortOrder = default(string));

        /// <summary>
        /// Get Incidents
        /// </summary>
        /// <remarks>
        /// Queries for historic incidents that fulfill given parameters. The size of the result set can be retrieved by using the [Get Incident Count](https://docs.camunda.org/manual/7.16/reference/rest/history/incident/get-incident-query-count/) method.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="incidentId">Restricts to incidents that have the given id. (optional)</param>
        /// <param name="incidentType">Restricts to incidents that belong to the given incident type. See the [User Guide](/manual/develop/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)</param>
        /// <param name="incidentMessage">Restricts to incidents that have the given incident message. (optional)</param>
        /// <param name="incidentMessageLike">Restricts to incidents that incidents message is a substring of the given value. The string can include the wildcard character &#39;%&#39; to express like-strategy: starts with (string%), ends with (%string) or contains (%string%).  (optional)</param>
        /// <param name="processDefinitionId">Restricts to incidents that belong to a process definition with the given id. (optional)</param>
        /// <param name="processDefinitionKey">Restricts to incidents that have the given processDefinitionKey. (optional)</param>
        /// <param name="processDefinitionKeyIn">Restricts to incidents that have one of the given process definition keys. (optional)</param>
        /// <param name="processInstanceId">Restricts to incidents that belong to a process instance with the given id. (optional)</param>
        /// <param name="executionId">Restricts to incidents that belong to an execution with the given id. (optional)</param>
        /// <param name="createTimeBefore">Restricts to incidents that have a createTime date before the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="createTimeAfter">Restricts to incidents that have a createTime date after the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="endTimeBefore">Restricts to incidents that have an endTimeBefore date before the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="endTimeAfter">Restricts to incidents that have an endTimeAfter date after the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="activityId">Restricts to incidents that belong to an activity with the given id. (optional)</param>
        /// <param name="failedActivityId">Restricts to incidents that were created due to the failure of an activity with the given id. (optional)</param>
        /// <param name="causeIncidentId">Restricts to incidents that have the given incident id as cause incident. (optional)</param>
        /// <param name="rootCauseIncidentId">Restricts to incidents that have the given incident id as root cause incident. (optional)</param>
        /// <param name="configuration">Restricts to incidents that have the given parameter set as configuration. (optional)</param>
        /// <param name="historyConfiguration">Restricts to incidents that have the given parameter set as history configuration. (optional)</param>
        /// <param name="open">Restricts to incidents that are open. (optional)</param>
        /// <param name="resolved">Restricts to incidents that are resolved. (optional)</param>
        /// <param name="deleted">Restricts to incidents that are deleted. (optional)</param>
        /// <param name="tenantIdIn">Restricts to incidents that have one of the given comma-separated tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include historic incidents that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="jobDefinitionIdIn">Restricts to incidents that have one of the given comma-separated job definition ids. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <returns>ApiResponse of List&lt;HistoricIncidentDto&gt;</returns>
        ApiResponse<List<HistoricIncidentDto>> GetHistoricIncidentsWithHttpInfo(string incidentId = default(string), string incidentType = default(string), string incidentMessage = default(string), string incidentMessageLike = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string processDefinitionKeyIn = default(string), string processInstanceId = default(string), string executionId = default(string), DateTime? createTimeBefore = default(DateTime?), DateTime? createTimeAfter = default(DateTime?), DateTime? endTimeBefore = default(DateTime?), DateTime? endTimeAfter = default(DateTime?), string activityId = default(string), string failedActivityId = default(string), string causeIncidentId = default(string), string rootCauseIncidentId = default(string), string configuration = default(string), string historyConfiguration = default(string), bool? open = default(bool?), bool? resolved = default(bool?), bool? deleted = default(bool?), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), string jobDefinitionIdIn = default(string), string sortBy = default(string), string sortOrder = default(string));
        /// <summary>
        /// Get Incident Count
        /// </summary>
        /// <remarks>
        /// Queries for the number of historic incidents that fulfill the given parameters. Takes the same parameters as the [Get Incidents](https://docs.camunda.org/manual/7.16/reference/rest/history/incident/get-incident-query/) method.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="incidentId">Restricts to incidents that have the given id. (optional)</param>
        /// <param name="incidentType">Restricts to incidents that belong to the given incident type. See the [User Guide](/manual/develop/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)</param>
        /// <param name="incidentMessage">Restricts to incidents that have the given incident message. (optional)</param>
        /// <param name="incidentMessageLike">Restricts to incidents that incidents message is a substring of the given value. The string can include the wildcard character &#39;%&#39; to express like-strategy: starts with (string%), ends with (%string) or contains (%string%).  (optional)</param>
        /// <param name="processDefinitionId">Restricts to incidents that belong to a process definition with the given id. (optional)</param>
        /// <param name="processDefinitionKey">Restricts to incidents that have the given processDefinitionKey. (optional)</param>
        /// <param name="processDefinitionKeyIn">Restricts to incidents that have one of the given process definition keys. (optional)</param>
        /// <param name="processInstanceId">Restricts to incidents that belong to a process instance with the given id. (optional)</param>
        /// <param name="executionId">Restricts to incidents that belong to an execution with the given id. (optional)</param>
        /// <param name="createTimeBefore">Restricts to incidents that have a createTime date before the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="createTimeAfter">Restricts to incidents that have a createTime date after the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="endTimeBefore">Restricts to incidents that have an endTimeBefore date before the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="endTimeAfter">Restricts to incidents that have an endTimeAfter date after the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="activityId">Restricts to incidents that belong to an activity with the given id. (optional)</param>
        /// <param name="failedActivityId">Restricts to incidents that were created due to the failure of an activity with the given id. (optional)</param>
        /// <param name="causeIncidentId">Restricts to incidents that have the given incident id as cause incident. (optional)</param>
        /// <param name="rootCauseIncidentId">Restricts to incidents that have the given incident id as root cause incident. (optional)</param>
        /// <param name="configuration">Restricts to incidents that have the given parameter set as configuration. (optional)</param>
        /// <param name="historyConfiguration">Restricts to incidents that have the given parameter set as history configuration. (optional)</param>
        /// <param name="open">Restricts to incidents that are open. (optional)</param>
        /// <param name="resolved">Restricts to incidents that are resolved. (optional)</param>
        /// <param name="deleted">Restricts to incidents that are deleted. (optional)</param>
        /// <param name="tenantIdIn">Restricts to incidents that have one of the given comma-separated tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include historic incidents that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="jobDefinitionIdIn">Restricts to incidents that have one of the given comma-separated job definition ids. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <returns>CountResultDto</returns>
        CountResultDto GetHistoricIncidentsCount(string incidentId = default(string), string incidentType = default(string), string incidentMessage = default(string), string incidentMessageLike = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string processDefinitionKeyIn = default(string), string processInstanceId = default(string), string executionId = default(string), DateTime? createTimeBefore = default(DateTime?), DateTime? createTimeAfter = default(DateTime?), DateTime? endTimeBefore = default(DateTime?), DateTime? endTimeAfter = default(DateTime?), string activityId = default(string), string failedActivityId = default(string), string causeIncidentId = default(string), string rootCauseIncidentId = default(string), string configuration = default(string), string historyConfiguration = default(string), bool? open = default(bool?), bool? resolved = default(bool?), bool? deleted = default(bool?), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), string jobDefinitionIdIn = default(string), string sortBy = default(string), string sortOrder = default(string));

        /// <summary>
        /// Get Incident Count
        /// </summary>
        /// <remarks>
        /// Queries for the number of historic incidents that fulfill the given parameters. Takes the same parameters as the [Get Incidents](https://docs.camunda.org/manual/7.16/reference/rest/history/incident/get-incident-query/) method.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="incidentId">Restricts to incidents that have the given id. (optional)</param>
        /// <param name="incidentType">Restricts to incidents that belong to the given incident type. See the [User Guide](/manual/develop/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)</param>
        /// <param name="incidentMessage">Restricts to incidents that have the given incident message. (optional)</param>
        /// <param name="incidentMessageLike">Restricts to incidents that incidents message is a substring of the given value. The string can include the wildcard character &#39;%&#39; to express like-strategy: starts with (string%), ends with (%string) or contains (%string%).  (optional)</param>
        /// <param name="processDefinitionId">Restricts to incidents that belong to a process definition with the given id. (optional)</param>
        /// <param name="processDefinitionKey">Restricts to incidents that have the given processDefinitionKey. (optional)</param>
        /// <param name="processDefinitionKeyIn">Restricts to incidents that have one of the given process definition keys. (optional)</param>
        /// <param name="processInstanceId">Restricts to incidents that belong to a process instance with the given id. (optional)</param>
        /// <param name="executionId">Restricts to incidents that belong to an execution with the given id. (optional)</param>
        /// <param name="createTimeBefore">Restricts to incidents that have a createTime date before the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="createTimeAfter">Restricts to incidents that have a createTime date after the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="endTimeBefore">Restricts to incidents that have an endTimeBefore date before the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="endTimeAfter">Restricts to incidents that have an endTimeAfter date after the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="activityId">Restricts to incidents that belong to an activity with the given id. (optional)</param>
        /// <param name="failedActivityId">Restricts to incidents that were created due to the failure of an activity with the given id. (optional)</param>
        /// <param name="causeIncidentId">Restricts to incidents that have the given incident id as cause incident. (optional)</param>
        /// <param name="rootCauseIncidentId">Restricts to incidents that have the given incident id as root cause incident. (optional)</param>
        /// <param name="configuration">Restricts to incidents that have the given parameter set as configuration. (optional)</param>
        /// <param name="historyConfiguration">Restricts to incidents that have the given parameter set as history configuration. (optional)</param>
        /// <param name="open">Restricts to incidents that are open. (optional)</param>
        /// <param name="resolved">Restricts to incidents that are resolved. (optional)</param>
        /// <param name="deleted">Restricts to incidents that are deleted. (optional)</param>
        /// <param name="tenantIdIn">Restricts to incidents that have one of the given comma-separated tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include historic incidents that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="jobDefinitionIdIn">Restricts to incidents that have one of the given comma-separated job definition ids. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <returns>ApiResponse of CountResultDto</returns>
        ApiResponse<CountResultDto> GetHistoricIncidentsCountWithHttpInfo(string incidentId = default(string), string incidentType = default(string), string incidentMessage = default(string), string incidentMessageLike = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string processDefinitionKeyIn = default(string), string processInstanceId = default(string), string executionId = default(string), DateTime? createTimeBefore = default(DateTime?), DateTime? createTimeAfter = default(DateTime?), DateTime? endTimeBefore = default(DateTime?), DateTime? endTimeAfter = default(DateTime?), string activityId = default(string), string failedActivityId = default(string), string causeIncidentId = default(string), string rootCauseIncidentId = default(string), string configuration = default(string), string historyConfiguration = default(string), bool? open = default(bool?), bool? resolved = default(bool?), bool? deleted = default(bool?), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), string jobDefinitionIdIn = default(string), string sortBy = default(string), string sortOrder = default(string));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IHistoricIncidentApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get Incidents
        /// </summary>
        /// <remarks>
        /// Queries for historic incidents that fulfill given parameters. The size of the result set can be retrieved by using the [Get Incident Count](https://docs.camunda.org/manual/7.16/reference/rest/history/incident/get-incident-query-count/) method.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="incidentId">Restricts to incidents that have the given id. (optional)</param>
        /// <param name="incidentType">Restricts to incidents that belong to the given incident type. See the [User Guide](/manual/develop/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)</param>
        /// <param name="incidentMessage">Restricts to incidents that have the given incident message. (optional)</param>
        /// <param name="incidentMessageLike">Restricts to incidents that incidents message is a substring of the given value. The string can include the wildcard character &#39;%&#39; to express like-strategy: starts with (string%), ends with (%string) or contains (%string%).  (optional)</param>
        /// <param name="processDefinitionId">Restricts to incidents that belong to a process definition with the given id. (optional)</param>
        /// <param name="processDefinitionKey">Restricts to incidents that have the given processDefinitionKey. (optional)</param>
        /// <param name="processDefinitionKeyIn">Restricts to incidents that have one of the given process definition keys. (optional)</param>
        /// <param name="processInstanceId">Restricts to incidents that belong to a process instance with the given id. (optional)</param>
        /// <param name="executionId">Restricts to incidents that belong to an execution with the given id. (optional)</param>
        /// <param name="createTimeBefore">Restricts to incidents that have a createTime date before the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="createTimeAfter">Restricts to incidents that have a createTime date after the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="endTimeBefore">Restricts to incidents that have an endTimeBefore date before the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="endTimeAfter">Restricts to incidents that have an endTimeAfter date after the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="activityId">Restricts to incidents that belong to an activity with the given id. (optional)</param>
        /// <param name="failedActivityId">Restricts to incidents that were created due to the failure of an activity with the given id. (optional)</param>
        /// <param name="causeIncidentId">Restricts to incidents that have the given incident id as cause incident. (optional)</param>
        /// <param name="rootCauseIncidentId">Restricts to incidents that have the given incident id as root cause incident. (optional)</param>
        /// <param name="configuration">Restricts to incidents that have the given parameter set as configuration. (optional)</param>
        /// <param name="historyConfiguration">Restricts to incidents that have the given parameter set as history configuration. (optional)</param>
        /// <param name="open">Restricts to incidents that are open. (optional)</param>
        /// <param name="resolved">Restricts to incidents that are resolved. (optional)</param>
        /// <param name="deleted">Restricts to incidents that are deleted. (optional)</param>
        /// <param name="tenantIdIn">Restricts to incidents that have one of the given comma-separated tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include historic incidents that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="jobDefinitionIdIn">Restricts to incidents that have one of the given comma-separated job definition ids. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;HistoricIncidentDto&gt;</returns>
        System.Threading.Tasks.Task<List<HistoricIncidentDto>> GetHistoricIncidentsAsync(string incidentId = default(string), string incidentType = default(string), string incidentMessage = default(string), string incidentMessageLike = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string processDefinitionKeyIn = default(string), string processInstanceId = default(string), string executionId = default(string), DateTime? createTimeBefore = default(DateTime?), DateTime? createTimeAfter = default(DateTime?), DateTime? endTimeBefore = default(DateTime?), DateTime? endTimeAfter = default(DateTime?), string activityId = default(string), string failedActivityId = default(string), string causeIncidentId = default(string), string rootCauseIncidentId = default(string), string configuration = default(string), string historyConfiguration = default(string), bool? open = default(bool?), bool? resolved = default(bool?), bool? deleted = default(bool?), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), string jobDefinitionIdIn = default(string), string sortBy = default(string), string sortOrder = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Incidents
        /// </summary>
        /// <remarks>
        /// Queries for historic incidents that fulfill given parameters. The size of the result set can be retrieved by using the [Get Incident Count](https://docs.camunda.org/manual/7.16/reference/rest/history/incident/get-incident-query-count/) method.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="incidentId">Restricts to incidents that have the given id. (optional)</param>
        /// <param name="incidentType">Restricts to incidents that belong to the given incident type. See the [User Guide](/manual/develop/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)</param>
        /// <param name="incidentMessage">Restricts to incidents that have the given incident message. (optional)</param>
        /// <param name="incidentMessageLike">Restricts to incidents that incidents message is a substring of the given value. The string can include the wildcard character &#39;%&#39; to express like-strategy: starts with (string%), ends with (%string) or contains (%string%).  (optional)</param>
        /// <param name="processDefinitionId">Restricts to incidents that belong to a process definition with the given id. (optional)</param>
        /// <param name="processDefinitionKey">Restricts to incidents that have the given processDefinitionKey. (optional)</param>
        /// <param name="processDefinitionKeyIn">Restricts to incidents that have one of the given process definition keys. (optional)</param>
        /// <param name="processInstanceId">Restricts to incidents that belong to a process instance with the given id. (optional)</param>
        /// <param name="executionId">Restricts to incidents that belong to an execution with the given id. (optional)</param>
        /// <param name="createTimeBefore">Restricts to incidents that have a createTime date before the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="createTimeAfter">Restricts to incidents that have a createTime date after the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="endTimeBefore">Restricts to incidents that have an endTimeBefore date before the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="endTimeAfter">Restricts to incidents that have an endTimeAfter date after the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="activityId">Restricts to incidents that belong to an activity with the given id. (optional)</param>
        /// <param name="failedActivityId">Restricts to incidents that were created due to the failure of an activity with the given id. (optional)</param>
        /// <param name="causeIncidentId">Restricts to incidents that have the given incident id as cause incident. (optional)</param>
        /// <param name="rootCauseIncidentId">Restricts to incidents that have the given incident id as root cause incident. (optional)</param>
        /// <param name="configuration">Restricts to incidents that have the given parameter set as configuration. (optional)</param>
        /// <param name="historyConfiguration">Restricts to incidents that have the given parameter set as history configuration. (optional)</param>
        /// <param name="open">Restricts to incidents that are open. (optional)</param>
        /// <param name="resolved">Restricts to incidents that are resolved. (optional)</param>
        /// <param name="deleted">Restricts to incidents that are deleted. (optional)</param>
        /// <param name="tenantIdIn">Restricts to incidents that have one of the given comma-separated tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include historic incidents that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="jobDefinitionIdIn">Restricts to incidents that have one of the given comma-separated job definition ids. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;HistoricIncidentDto&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<HistoricIncidentDto>>> GetHistoricIncidentsWithHttpInfoAsync(string incidentId = default(string), string incidentType = default(string), string incidentMessage = default(string), string incidentMessageLike = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string processDefinitionKeyIn = default(string), string processInstanceId = default(string), string executionId = default(string), DateTime? createTimeBefore = default(DateTime?), DateTime? createTimeAfter = default(DateTime?), DateTime? endTimeBefore = default(DateTime?), DateTime? endTimeAfter = default(DateTime?), string activityId = default(string), string failedActivityId = default(string), string causeIncidentId = default(string), string rootCauseIncidentId = default(string), string configuration = default(string), string historyConfiguration = default(string), bool? open = default(bool?), bool? resolved = default(bool?), bool? deleted = default(bool?), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), string jobDefinitionIdIn = default(string), string sortBy = default(string), string sortOrder = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Incident Count
        /// </summary>
        /// <remarks>
        /// Queries for the number of historic incidents that fulfill the given parameters. Takes the same parameters as the [Get Incidents](https://docs.camunda.org/manual/7.16/reference/rest/history/incident/get-incident-query/) method.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="incidentId">Restricts to incidents that have the given id. (optional)</param>
        /// <param name="incidentType">Restricts to incidents that belong to the given incident type. See the [User Guide](/manual/develop/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)</param>
        /// <param name="incidentMessage">Restricts to incidents that have the given incident message. (optional)</param>
        /// <param name="incidentMessageLike">Restricts to incidents that incidents message is a substring of the given value. The string can include the wildcard character &#39;%&#39; to express like-strategy: starts with (string%), ends with (%string) or contains (%string%).  (optional)</param>
        /// <param name="processDefinitionId">Restricts to incidents that belong to a process definition with the given id. (optional)</param>
        /// <param name="processDefinitionKey">Restricts to incidents that have the given processDefinitionKey. (optional)</param>
        /// <param name="processDefinitionKeyIn">Restricts to incidents that have one of the given process definition keys. (optional)</param>
        /// <param name="processInstanceId">Restricts to incidents that belong to a process instance with the given id. (optional)</param>
        /// <param name="executionId">Restricts to incidents that belong to an execution with the given id. (optional)</param>
        /// <param name="createTimeBefore">Restricts to incidents that have a createTime date before the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="createTimeAfter">Restricts to incidents that have a createTime date after the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="endTimeBefore">Restricts to incidents that have an endTimeBefore date before the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="endTimeAfter">Restricts to incidents that have an endTimeAfter date after the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="activityId">Restricts to incidents that belong to an activity with the given id. (optional)</param>
        /// <param name="failedActivityId">Restricts to incidents that were created due to the failure of an activity with the given id. (optional)</param>
        /// <param name="causeIncidentId">Restricts to incidents that have the given incident id as cause incident. (optional)</param>
        /// <param name="rootCauseIncidentId">Restricts to incidents that have the given incident id as root cause incident. (optional)</param>
        /// <param name="configuration">Restricts to incidents that have the given parameter set as configuration. (optional)</param>
        /// <param name="historyConfiguration">Restricts to incidents that have the given parameter set as history configuration. (optional)</param>
        /// <param name="open">Restricts to incidents that are open. (optional)</param>
        /// <param name="resolved">Restricts to incidents that are resolved. (optional)</param>
        /// <param name="deleted">Restricts to incidents that are deleted. (optional)</param>
        /// <param name="tenantIdIn">Restricts to incidents that have one of the given comma-separated tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include historic incidents that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="jobDefinitionIdIn">Restricts to incidents that have one of the given comma-separated job definition ids. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CountResultDto</returns>
        System.Threading.Tasks.Task<CountResultDto> GetHistoricIncidentsCountAsync(string incidentId = default(string), string incidentType = default(string), string incidentMessage = default(string), string incidentMessageLike = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string processDefinitionKeyIn = default(string), string processInstanceId = default(string), string executionId = default(string), DateTime? createTimeBefore = default(DateTime?), DateTime? createTimeAfter = default(DateTime?), DateTime? endTimeBefore = default(DateTime?), DateTime? endTimeAfter = default(DateTime?), string activityId = default(string), string failedActivityId = default(string), string causeIncidentId = default(string), string rootCauseIncidentId = default(string), string configuration = default(string), string historyConfiguration = default(string), bool? open = default(bool?), bool? resolved = default(bool?), bool? deleted = default(bool?), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), string jobDefinitionIdIn = default(string), string sortBy = default(string), string sortOrder = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Incident Count
        /// </summary>
        /// <remarks>
        /// Queries for the number of historic incidents that fulfill the given parameters. Takes the same parameters as the [Get Incidents](https://docs.camunda.org/manual/7.16/reference/rest/history/incident/get-incident-query/) method.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="incidentId">Restricts to incidents that have the given id. (optional)</param>
        /// <param name="incidentType">Restricts to incidents that belong to the given incident type. See the [User Guide](/manual/develop/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)</param>
        /// <param name="incidentMessage">Restricts to incidents that have the given incident message. (optional)</param>
        /// <param name="incidentMessageLike">Restricts to incidents that incidents message is a substring of the given value. The string can include the wildcard character &#39;%&#39; to express like-strategy: starts with (string%), ends with (%string) or contains (%string%).  (optional)</param>
        /// <param name="processDefinitionId">Restricts to incidents that belong to a process definition with the given id. (optional)</param>
        /// <param name="processDefinitionKey">Restricts to incidents that have the given processDefinitionKey. (optional)</param>
        /// <param name="processDefinitionKeyIn">Restricts to incidents that have one of the given process definition keys. (optional)</param>
        /// <param name="processInstanceId">Restricts to incidents that belong to a process instance with the given id. (optional)</param>
        /// <param name="executionId">Restricts to incidents that belong to an execution with the given id. (optional)</param>
        /// <param name="createTimeBefore">Restricts to incidents that have a createTime date before the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="createTimeAfter">Restricts to incidents that have a createTime date after the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="endTimeBefore">Restricts to incidents that have an endTimeBefore date before the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="endTimeAfter">Restricts to incidents that have an endTimeAfter date after the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="activityId">Restricts to incidents that belong to an activity with the given id. (optional)</param>
        /// <param name="failedActivityId">Restricts to incidents that were created due to the failure of an activity with the given id. (optional)</param>
        /// <param name="causeIncidentId">Restricts to incidents that have the given incident id as cause incident. (optional)</param>
        /// <param name="rootCauseIncidentId">Restricts to incidents that have the given incident id as root cause incident. (optional)</param>
        /// <param name="configuration">Restricts to incidents that have the given parameter set as configuration. (optional)</param>
        /// <param name="historyConfiguration">Restricts to incidents that have the given parameter set as history configuration. (optional)</param>
        /// <param name="open">Restricts to incidents that are open. (optional)</param>
        /// <param name="resolved">Restricts to incidents that are resolved. (optional)</param>
        /// <param name="deleted">Restricts to incidents that are deleted. (optional)</param>
        /// <param name="tenantIdIn">Restricts to incidents that have one of the given comma-separated tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include historic incidents that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="jobDefinitionIdIn">Restricts to incidents that have one of the given comma-separated job definition ids. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CountResultDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<CountResultDto>> GetHistoricIncidentsCountWithHttpInfoAsync(string incidentId = default(string), string incidentType = default(string), string incidentMessage = default(string), string incidentMessageLike = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string processDefinitionKeyIn = default(string), string processInstanceId = default(string), string executionId = default(string), DateTime? createTimeBefore = default(DateTime?), DateTime? createTimeAfter = default(DateTime?), DateTime? endTimeBefore = default(DateTime?), DateTime? endTimeAfter = default(DateTime?), string activityId = default(string), string failedActivityId = default(string), string causeIncidentId = default(string), string rootCauseIncidentId = default(string), string configuration = default(string), string historyConfiguration = default(string), bool? open = default(bool?), bool? resolved = default(bool?), bool? deleted = default(bool?), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), string jobDefinitionIdIn = default(string), string sortBy = default(string), string sortOrder = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IHistoricIncidentApi : IHistoricIncidentApiSync, IHistoricIncidentApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class HistoricIncidentApi : IDisposable, IHistoricIncidentApi
    {
        private Camunda.OpenApi.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="HistoricIncidentApi"/> class.
        /// **IMPORTANT** This will also create an istance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHander</see>.
        /// </summary>
        /// <returns></returns>
        public HistoricIncidentApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="HistoricIncidentApi"/> class.
        /// **IMPORTANT** This will also create an istance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHander</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public HistoricIncidentApi(string basePath)
        {
            this.Configuration = Camunda.OpenApi.Client.Client.Configuration.MergeConfigurations(
                Camunda.OpenApi.Client.Client.GlobalConfiguration.Instance,
                new Camunda.OpenApi.Client.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new Camunda.OpenApi.Client.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = Camunda.OpenApi.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="HistoricIncidentApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an istance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHander</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public HistoricIncidentApi(Camunda.OpenApi.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Camunda.OpenApi.Client.Client.Configuration.MergeConfigurations(
                Camunda.OpenApi.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new Camunda.OpenApi.Client.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = Camunda.OpenApi.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="HistoricIncidentApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public HistoricIncidentApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="HistoricIncidentApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public HistoricIncidentApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = Camunda.OpenApi.Client.Client.Configuration.MergeConfigurations(
                Camunda.OpenApi.Client.Client.GlobalConfiguration.Instance,
                new Camunda.OpenApi.Client.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new Camunda.OpenApi.Client.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = Camunda.OpenApi.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="HistoricIncidentApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public HistoricIncidentApi(HttpClient client, Camunda.OpenApi.Client.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = Camunda.OpenApi.Client.Client.Configuration.MergeConfigurations(
                Camunda.OpenApi.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new Camunda.OpenApi.Client.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = Camunda.OpenApi.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="HistoricIncidentApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public HistoricIncidentApi(Camunda.OpenApi.Client.Client.ISynchronousClient client, Camunda.OpenApi.Client.Client.IAsynchronousClient asyncClient, Camunda.OpenApi.Client.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Camunda.OpenApi.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public Camunda.OpenApi.Client.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Camunda.OpenApi.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Camunda.OpenApi.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Camunda.OpenApi.Client.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Camunda.OpenApi.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get Incidents Queries for historic incidents that fulfill given parameters. The size of the result set can be retrieved by using the [Get Incident Count](https://docs.camunda.org/manual/7.16/reference/rest/history/incident/get-incident-query-count/) method.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="incidentId">Restricts to incidents that have the given id. (optional)</param>
        /// <param name="incidentType">Restricts to incidents that belong to the given incident type. See the [User Guide](/manual/develop/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)</param>
        /// <param name="incidentMessage">Restricts to incidents that have the given incident message. (optional)</param>
        /// <param name="incidentMessageLike">Restricts to incidents that incidents message is a substring of the given value. The string can include the wildcard character &#39;%&#39; to express like-strategy: starts with (string%), ends with (%string) or contains (%string%).  (optional)</param>
        /// <param name="processDefinitionId">Restricts to incidents that belong to a process definition with the given id. (optional)</param>
        /// <param name="processDefinitionKey">Restricts to incidents that have the given processDefinitionKey. (optional)</param>
        /// <param name="processDefinitionKeyIn">Restricts to incidents that have one of the given process definition keys. (optional)</param>
        /// <param name="processInstanceId">Restricts to incidents that belong to a process instance with the given id. (optional)</param>
        /// <param name="executionId">Restricts to incidents that belong to an execution with the given id. (optional)</param>
        /// <param name="createTimeBefore">Restricts to incidents that have a createTime date before the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="createTimeAfter">Restricts to incidents that have a createTime date after the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="endTimeBefore">Restricts to incidents that have an endTimeBefore date before the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="endTimeAfter">Restricts to incidents that have an endTimeAfter date after the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="activityId">Restricts to incidents that belong to an activity with the given id. (optional)</param>
        /// <param name="failedActivityId">Restricts to incidents that were created due to the failure of an activity with the given id. (optional)</param>
        /// <param name="causeIncidentId">Restricts to incidents that have the given incident id as cause incident. (optional)</param>
        /// <param name="rootCauseIncidentId">Restricts to incidents that have the given incident id as root cause incident. (optional)</param>
        /// <param name="configuration">Restricts to incidents that have the given parameter set as configuration. (optional)</param>
        /// <param name="historyConfiguration">Restricts to incidents that have the given parameter set as history configuration. (optional)</param>
        /// <param name="open">Restricts to incidents that are open. (optional)</param>
        /// <param name="resolved">Restricts to incidents that are resolved. (optional)</param>
        /// <param name="deleted">Restricts to incidents that are deleted. (optional)</param>
        /// <param name="tenantIdIn">Restricts to incidents that have one of the given comma-separated tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include historic incidents that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="jobDefinitionIdIn">Restricts to incidents that have one of the given comma-separated job definition ids. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <returns>List&lt;HistoricIncidentDto&gt;</returns>
        public List<HistoricIncidentDto> GetHistoricIncidents(string incidentId = default(string), string incidentType = default(string), string incidentMessage = default(string), string incidentMessageLike = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string processDefinitionKeyIn = default(string), string processInstanceId = default(string), string executionId = default(string), DateTime? createTimeBefore = default(DateTime?), DateTime? createTimeAfter = default(DateTime?), DateTime? endTimeBefore = default(DateTime?), DateTime? endTimeAfter = default(DateTime?), string activityId = default(string), string failedActivityId = default(string), string causeIncidentId = default(string), string rootCauseIncidentId = default(string), string configuration = default(string), string historyConfiguration = default(string), bool? open = default(bool?), bool? resolved = default(bool?), bool? deleted = default(bool?), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), string jobDefinitionIdIn = default(string), string sortBy = default(string), string sortOrder = default(string))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<List<HistoricIncidentDto>> localVarResponse = GetHistoricIncidentsWithHttpInfo(incidentId, incidentType, incidentMessage, incidentMessageLike, processDefinitionId, processDefinitionKey, processDefinitionKeyIn, processInstanceId, executionId, createTimeBefore, createTimeAfter, endTimeBefore, endTimeAfter, activityId, failedActivityId, causeIncidentId, rootCauseIncidentId, configuration, historyConfiguration, open, resolved, deleted, tenantIdIn, withoutTenantId, jobDefinitionIdIn, sortBy, sortOrder);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Incidents Queries for historic incidents that fulfill given parameters. The size of the result set can be retrieved by using the [Get Incident Count](https://docs.camunda.org/manual/7.16/reference/rest/history/incident/get-incident-query-count/) method.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="incidentId">Restricts to incidents that have the given id. (optional)</param>
        /// <param name="incidentType">Restricts to incidents that belong to the given incident type. See the [User Guide](/manual/develop/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)</param>
        /// <param name="incidentMessage">Restricts to incidents that have the given incident message. (optional)</param>
        /// <param name="incidentMessageLike">Restricts to incidents that incidents message is a substring of the given value. The string can include the wildcard character &#39;%&#39; to express like-strategy: starts with (string%), ends with (%string) or contains (%string%).  (optional)</param>
        /// <param name="processDefinitionId">Restricts to incidents that belong to a process definition with the given id. (optional)</param>
        /// <param name="processDefinitionKey">Restricts to incidents that have the given processDefinitionKey. (optional)</param>
        /// <param name="processDefinitionKeyIn">Restricts to incidents that have one of the given process definition keys. (optional)</param>
        /// <param name="processInstanceId">Restricts to incidents that belong to a process instance with the given id. (optional)</param>
        /// <param name="executionId">Restricts to incidents that belong to an execution with the given id. (optional)</param>
        /// <param name="createTimeBefore">Restricts to incidents that have a createTime date before the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="createTimeAfter">Restricts to incidents that have a createTime date after the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="endTimeBefore">Restricts to incidents that have an endTimeBefore date before the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="endTimeAfter">Restricts to incidents that have an endTimeAfter date after the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="activityId">Restricts to incidents that belong to an activity with the given id. (optional)</param>
        /// <param name="failedActivityId">Restricts to incidents that were created due to the failure of an activity with the given id. (optional)</param>
        /// <param name="causeIncidentId">Restricts to incidents that have the given incident id as cause incident. (optional)</param>
        /// <param name="rootCauseIncidentId">Restricts to incidents that have the given incident id as root cause incident. (optional)</param>
        /// <param name="configuration">Restricts to incidents that have the given parameter set as configuration. (optional)</param>
        /// <param name="historyConfiguration">Restricts to incidents that have the given parameter set as history configuration. (optional)</param>
        /// <param name="open">Restricts to incidents that are open. (optional)</param>
        /// <param name="resolved">Restricts to incidents that are resolved. (optional)</param>
        /// <param name="deleted">Restricts to incidents that are deleted. (optional)</param>
        /// <param name="tenantIdIn">Restricts to incidents that have one of the given comma-separated tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include historic incidents that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="jobDefinitionIdIn">Restricts to incidents that have one of the given comma-separated job definition ids. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <returns>ApiResponse of List&lt;HistoricIncidentDto&gt;</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<List<HistoricIncidentDto>> GetHistoricIncidentsWithHttpInfo(string incidentId = default(string), string incidentType = default(string), string incidentMessage = default(string), string incidentMessageLike = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string processDefinitionKeyIn = default(string), string processInstanceId = default(string), string executionId = default(string), DateTime? createTimeBefore = default(DateTime?), DateTime? createTimeAfter = default(DateTime?), DateTime? endTimeBefore = default(DateTime?), DateTime? endTimeAfter = default(DateTime?), string activityId = default(string), string failedActivityId = default(string), string causeIncidentId = default(string), string rootCauseIncidentId = default(string), string configuration = default(string), string historyConfiguration = default(string), bool? open = default(bool?), bool? resolved = default(bool?), bool? deleted = default(bool?), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), string jobDefinitionIdIn = default(string), string sortBy = default(string), string sortOrder = default(string))
        {
            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (incidentId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "incidentId", incidentId));
            }
            if (incidentType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "incidentType", incidentType));
            }
            if (incidentMessage != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "incidentMessage", incidentMessage));
            }
            if (incidentMessageLike != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "incidentMessageLike", incidentMessageLike));
            }
            if (processDefinitionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processDefinitionId", processDefinitionId));
            }
            if (processDefinitionKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processDefinitionKey", processDefinitionKey));
            }
            if (processDefinitionKeyIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processDefinitionKeyIn", processDefinitionKeyIn));
            }
            if (processInstanceId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processInstanceId", processInstanceId));
            }
            if (executionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "executionId", executionId));
            }
            if (createTimeBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "createTimeBefore", createTimeBefore));
            }
            if (createTimeAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "createTimeAfter", createTimeAfter));
            }
            if (endTimeBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "endTimeBefore", endTimeBefore));
            }
            if (endTimeAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "endTimeAfter", endTimeAfter));
            }
            if (activityId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "activityId", activityId));
            }
            if (failedActivityId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "failedActivityId", failedActivityId));
            }
            if (causeIncidentId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "causeIncidentId", causeIncidentId));
            }
            if (rootCauseIncidentId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "rootCauseIncidentId", rootCauseIncidentId));
            }
            if (configuration != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "configuration", configuration));
            }
            if (historyConfiguration != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "historyConfiguration", historyConfiguration));
            }
            if (open != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "open", open));
            }
            if (resolved != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "resolved", resolved));
            }
            if (deleted != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "deleted", deleted));
            }
            if (tenantIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "tenantIdIn", tenantIdIn));
            }
            if (withoutTenantId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "withoutTenantId", withoutTenantId));
            }
            if (jobDefinitionIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "jobDefinitionIdIn", jobDefinitionIdIn));
            }
            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "sortBy", sortBy));
            }
            if (sortOrder != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "sortOrder", sortOrder));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<HistoricIncidentDto>>("/history/incident", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetHistoricIncidents", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Incidents Queries for historic incidents that fulfill given parameters. The size of the result set can be retrieved by using the [Get Incident Count](https://docs.camunda.org/manual/7.16/reference/rest/history/incident/get-incident-query-count/) method.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="incidentId">Restricts to incidents that have the given id. (optional)</param>
        /// <param name="incidentType">Restricts to incidents that belong to the given incident type. See the [User Guide](/manual/develop/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)</param>
        /// <param name="incidentMessage">Restricts to incidents that have the given incident message. (optional)</param>
        /// <param name="incidentMessageLike">Restricts to incidents that incidents message is a substring of the given value. The string can include the wildcard character &#39;%&#39; to express like-strategy: starts with (string%), ends with (%string) or contains (%string%).  (optional)</param>
        /// <param name="processDefinitionId">Restricts to incidents that belong to a process definition with the given id. (optional)</param>
        /// <param name="processDefinitionKey">Restricts to incidents that have the given processDefinitionKey. (optional)</param>
        /// <param name="processDefinitionKeyIn">Restricts to incidents that have one of the given process definition keys. (optional)</param>
        /// <param name="processInstanceId">Restricts to incidents that belong to a process instance with the given id. (optional)</param>
        /// <param name="executionId">Restricts to incidents that belong to an execution with the given id. (optional)</param>
        /// <param name="createTimeBefore">Restricts to incidents that have a createTime date before the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="createTimeAfter">Restricts to incidents that have a createTime date after the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="endTimeBefore">Restricts to incidents that have an endTimeBefore date before the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="endTimeAfter">Restricts to incidents that have an endTimeAfter date after the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="activityId">Restricts to incidents that belong to an activity with the given id. (optional)</param>
        /// <param name="failedActivityId">Restricts to incidents that were created due to the failure of an activity with the given id. (optional)</param>
        /// <param name="causeIncidentId">Restricts to incidents that have the given incident id as cause incident. (optional)</param>
        /// <param name="rootCauseIncidentId">Restricts to incidents that have the given incident id as root cause incident. (optional)</param>
        /// <param name="configuration">Restricts to incidents that have the given parameter set as configuration. (optional)</param>
        /// <param name="historyConfiguration">Restricts to incidents that have the given parameter set as history configuration. (optional)</param>
        /// <param name="open">Restricts to incidents that are open. (optional)</param>
        /// <param name="resolved">Restricts to incidents that are resolved. (optional)</param>
        /// <param name="deleted">Restricts to incidents that are deleted. (optional)</param>
        /// <param name="tenantIdIn">Restricts to incidents that have one of the given comma-separated tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include historic incidents that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="jobDefinitionIdIn">Restricts to incidents that have one of the given comma-separated job definition ids. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;HistoricIncidentDto&gt;</returns>
        public async System.Threading.Tasks.Task<List<HistoricIncidentDto>> GetHistoricIncidentsAsync(string incidentId = default(string), string incidentType = default(string), string incidentMessage = default(string), string incidentMessageLike = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string processDefinitionKeyIn = default(string), string processInstanceId = default(string), string executionId = default(string), DateTime? createTimeBefore = default(DateTime?), DateTime? createTimeAfter = default(DateTime?), DateTime? endTimeBefore = default(DateTime?), DateTime? endTimeAfter = default(DateTime?), string activityId = default(string), string failedActivityId = default(string), string causeIncidentId = default(string), string rootCauseIncidentId = default(string), string configuration = default(string), string historyConfiguration = default(string), bool? open = default(bool?), bool? resolved = default(bool?), bool? deleted = default(bool?), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), string jobDefinitionIdIn = default(string), string sortBy = default(string), string sortOrder = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<List<HistoricIncidentDto>> localVarResponse = await GetHistoricIncidentsWithHttpInfoAsync(incidentId, incidentType, incidentMessage, incidentMessageLike, processDefinitionId, processDefinitionKey, processDefinitionKeyIn, processInstanceId, executionId, createTimeBefore, createTimeAfter, endTimeBefore, endTimeAfter, activityId, failedActivityId, causeIncidentId, rootCauseIncidentId, configuration, historyConfiguration, open, resolved, deleted, tenantIdIn, withoutTenantId, jobDefinitionIdIn, sortBy, sortOrder, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Incidents Queries for historic incidents that fulfill given parameters. The size of the result set can be retrieved by using the [Get Incident Count](https://docs.camunda.org/manual/7.16/reference/rest/history/incident/get-incident-query-count/) method.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="incidentId">Restricts to incidents that have the given id. (optional)</param>
        /// <param name="incidentType">Restricts to incidents that belong to the given incident type. See the [User Guide](/manual/develop/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)</param>
        /// <param name="incidentMessage">Restricts to incidents that have the given incident message. (optional)</param>
        /// <param name="incidentMessageLike">Restricts to incidents that incidents message is a substring of the given value. The string can include the wildcard character &#39;%&#39; to express like-strategy: starts with (string%), ends with (%string) or contains (%string%).  (optional)</param>
        /// <param name="processDefinitionId">Restricts to incidents that belong to a process definition with the given id. (optional)</param>
        /// <param name="processDefinitionKey">Restricts to incidents that have the given processDefinitionKey. (optional)</param>
        /// <param name="processDefinitionKeyIn">Restricts to incidents that have one of the given process definition keys. (optional)</param>
        /// <param name="processInstanceId">Restricts to incidents that belong to a process instance with the given id. (optional)</param>
        /// <param name="executionId">Restricts to incidents that belong to an execution with the given id. (optional)</param>
        /// <param name="createTimeBefore">Restricts to incidents that have a createTime date before the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="createTimeAfter">Restricts to incidents that have a createTime date after the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="endTimeBefore">Restricts to incidents that have an endTimeBefore date before the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="endTimeAfter">Restricts to incidents that have an endTimeAfter date after the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="activityId">Restricts to incidents that belong to an activity with the given id. (optional)</param>
        /// <param name="failedActivityId">Restricts to incidents that were created due to the failure of an activity with the given id. (optional)</param>
        /// <param name="causeIncidentId">Restricts to incidents that have the given incident id as cause incident. (optional)</param>
        /// <param name="rootCauseIncidentId">Restricts to incidents that have the given incident id as root cause incident. (optional)</param>
        /// <param name="configuration">Restricts to incidents that have the given parameter set as configuration. (optional)</param>
        /// <param name="historyConfiguration">Restricts to incidents that have the given parameter set as history configuration. (optional)</param>
        /// <param name="open">Restricts to incidents that are open. (optional)</param>
        /// <param name="resolved">Restricts to incidents that are resolved. (optional)</param>
        /// <param name="deleted">Restricts to incidents that are deleted. (optional)</param>
        /// <param name="tenantIdIn">Restricts to incidents that have one of the given comma-separated tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include historic incidents that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="jobDefinitionIdIn">Restricts to incidents that have one of the given comma-separated job definition ids. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;HistoricIncidentDto&gt;)</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<List<HistoricIncidentDto>>> GetHistoricIncidentsWithHttpInfoAsync(string incidentId = default(string), string incidentType = default(string), string incidentMessage = default(string), string incidentMessageLike = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string processDefinitionKeyIn = default(string), string processInstanceId = default(string), string executionId = default(string), DateTime? createTimeBefore = default(DateTime?), DateTime? createTimeAfter = default(DateTime?), DateTime? endTimeBefore = default(DateTime?), DateTime? endTimeAfter = default(DateTime?), string activityId = default(string), string failedActivityId = default(string), string causeIncidentId = default(string), string rootCauseIncidentId = default(string), string configuration = default(string), string historyConfiguration = default(string), bool? open = default(bool?), bool? resolved = default(bool?), bool? deleted = default(bool?), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), string jobDefinitionIdIn = default(string), string sortBy = default(string), string sortOrder = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (incidentId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "incidentId", incidentId));
            }
            if (incidentType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "incidentType", incidentType));
            }
            if (incidentMessage != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "incidentMessage", incidentMessage));
            }
            if (incidentMessageLike != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "incidentMessageLike", incidentMessageLike));
            }
            if (processDefinitionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processDefinitionId", processDefinitionId));
            }
            if (processDefinitionKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processDefinitionKey", processDefinitionKey));
            }
            if (processDefinitionKeyIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processDefinitionKeyIn", processDefinitionKeyIn));
            }
            if (processInstanceId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processInstanceId", processInstanceId));
            }
            if (executionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "executionId", executionId));
            }
            if (createTimeBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "createTimeBefore", createTimeBefore));
            }
            if (createTimeAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "createTimeAfter", createTimeAfter));
            }
            if (endTimeBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "endTimeBefore", endTimeBefore));
            }
            if (endTimeAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "endTimeAfter", endTimeAfter));
            }
            if (activityId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "activityId", activityId));
            }
            if (failedActivityId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "failedActivityId", failedActivityId));
            }
            if (causeIncidentId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "causeIncidentId", causeIncidentId));
            }
            if (rootCauseIncidentId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "rootCauseIncidentId", rootCauseIncidentId));
            }
            if (configuration != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "configuration", configuration));
            }
            if (historyConfiguration != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "historyConfiguration", historyConfiguration));
            }
            if (open != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "open", open));
            }
            if (resolved != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "resolved", resolved));
            }
            if (deleted != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "deleted", deleted));
            }
            if (tenantIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "tenantIdIn", tenantIdIn));
            }
            if (withoutTenantId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "withoutTenantId", withoutTenantId));
            }
            if (jobDefinitionIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "jobDefinitionIdIn", jobDefinitionIdIn));
            }
            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "sortBy", sortBy));
            }
            if (sortOrder != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "sortOrder", sortOrder));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<HistoricIncidentDto>>("/history/incident", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetHistoricIncidents", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Incident Count Queries for the number of historic incidents that fulfill the given parameters. Takes the same parameters as the [Get Incidents](https://docs.camunda.org/manual/7.16/reference/rest/history/incident/get-incident-query/) method.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="incidentId">Restricts to incidents that have the given id. (optional)</param>
        /// <param name="incidentType">Restricts to incidents that belong to the given incident type. See the [User Guide](/manual/develop/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)</param>
        /// <param name="incidentMessage">Restricts to incidents that have the given incident message. (optional)</param>
        /// <param name="incidentMessageLike">Restricts to incidents that incidents message is a substring of the given value. The string can include the wildcard character &#39;%&#39; to express like-strategy: starts with (string%), ends with (%string) or contains (%string%).  (optional)</param>
        /// <param name="processDefinitionId">Restricts to incidents that belong to a process definition with the given id. (optional)</param>
        /// <param name="processDefinitionKey">Restricts to incidents that have the given processDefinitionKey. (optional)</param>
        /// <param name="processDefinitionKeyIn">Restricts to incidents that have one of the given process definition keys. (optional)</param>
        /// <param name="processInstanceId">Restricts to incidents that belong to a process instance with the given id. (optional)</param>
        /// <param name="executionId">Restricts to incidents that belong to an execution with the given id. (optional)</param>
        /// <param name="createTimeBefore">Restricts to incidents that have a createTime date before the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="createTimeAfter">Restricts to incidents that have a createTime date after the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="endTimeBefore">Restricts to incidents that have an endTimeBefore date before the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="endTimeAfter">Restricts to incidents that have an endTimeAfter date after the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="activityId">Restricts to incidents that belong to an activity with the given id. (optional)</param>
        /// <param name="failedActivityId">Restricts to incidents that were created due to the failure of an activity with the given id. (optional)</param>
        /// <param name="causeIncidentId">Restricts to incidents that have the given incident id as cause incident. (optional)</param>
        /// <param name="rootCauseIncidentId">Restricts to incidents that have the given incident id as root cause incident. (optional)</param>
        /// <param name="configuration">Restricts to incidents that have the given parameter set as configuration. (optional)</param>
        /// <param name="historyConfiguration">Restricts to incidents that have the given parameter set as history configuration. (optional)</param>
        /// <param name="open">Restricts to incidents that are open. (optional)</param>
        /// <param name="resolved">Restricts to incidents that are resolved. (optional)</param>
        /// <param name="deleted">Restricts to incidents that are deleted. (optional)</param>
        /// <param name="tenantIdIn">Restricts to incidents that have one of the given comma-separated tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include historic incidents that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="jobDefinitionIdIn">Restricts to incidents that have one of the given comma-separated job definition ids. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <returns>CountResultDto</returns>
        public CountResultDto GetHistoricIncidentsCount(string incidentId = default(string), string incidentType = default(string), string incidentMessage = default(string), string incidentMessageLike = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string processDefinitionKeyIn = default(string), string processInstanceId = default(string), string executionId = default(string), DateTime? createTimeBefore = default(DateTime?), DateTime? createTimeAfter = default(DateTime?), DateTime? endTimeBefore = default(DateTime?), DateTime? endTimeAfter = default(DateTime?), string activityId = default(string), string failedActivityId = default(string), string causeIncidentId = default(string), string rootCauseIncidentId = default(string), string configuration = default(string), string historyConfiguration = default(string), bool? open = default(bool?), bool? resolved = default(bool?), bool? deleted = default(bool?), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), string jobDefinitionIdIn = default(string), string sortBy = default(string), string sortOrder = default(string))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<CountResultDto> localVarResponse = GetHistoricIncidentsCountWithHttpInfo(incidentId, incidentType, incidentMessage, incidentMessageLike, processDefinitionId, processDefinitionKey, processDefinitionKeyIn, processInstanceId, executionId, createTimeBefore, createTimeAfter, endTimeBefore, endTimeAfter, activityId, failedActivityId, causeIncidentId, rootCauseIncidentId, configuration, historyConfiguration, open, resolved, deleted, tenantIdIn, withoutTenantId, jobDefinitionIdIn, sortBy, sortOrder);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Incident Count Queries for the number of historic incidents that fulfill the given parameters. Takes the same parameters as the [Get Incidents](https://docs.camunda.org/manual/7.16/reference/rest/history/incident/get-incident-query/) method.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="incidentId">Restricts to incidents that have the given id. (optional)</param>
        /// <param name="incidentType">Restricts to incidents that belong to the given incident type. See the [User Guide](/manual/develop/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)</param>
        /// <param name="incidentMessage">Restricts to incidents that have the given incident message. (optional)</param>
        /// <param name="incidentMessageLike">Restricts to incidents that incidents message is a substring of the given value. The string can include the wildcard character &#39;%&#39; to express like-strategy: starts with (string%), ends with (%string) or contains (%string%).  (optional)</param>
        /// <param name="processDefinitionId">Restricts to incidents that belong to a process definition with the given id. (optional)</param>
        /// <param name="processDefinitionKey">Restricts to incidents that have the given processDefinitionKey. (optional)</param>
        /// <param name="processDefinitionKeyIn">Restricts to incidents that have one of the given process definition keys. (optional)</param>
        /// <param name="processInstanceId">Restricts to incidents that belong to a process instance with the given id. (optional)</param>
        /// <param name="executionId">Restricts to incidents that belong to an execution with the given id. (optional)</param>
        /// <param name="createTimeBefore">Restricts to incidents that have a createTime date before the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="createTimeAfter">Restricts to incidents that have a createTime date after the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="endTimeBefore">Restricts to incidents that have an endTimeBefore date before the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="endTimeAfter">Restricts to incidents that have an endTimeAfter date after the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="activityId">Restricts to incidents that belong to an activity with the given id. (optional)</param>
        /// <param name="failedActivityId">Restricts to incidents that were created due to the failure of an activity with the given id. (optional)</param>
        /// <param name="causeIncidentId">Restricts to incidents that have the given incident id as cause incident. (optional)</param>
        /// <param name="rootCauseIncidentId">Restricts to incidents that have the given incident id as root cause incident. (optional)</param>
        /// <param name="configuration">Restricts to incidents that have the given parameter set as configuration. (optional)</param>
        /// <param name="historyConfiguration">Restricts to incidents that have the given parameter set as history configuration. (optional)</param>
        /// <param name="open">Restricts to incidents that are open. (optional)</param>
        /// <param name="resolved">Restricts to incidents that are resolved. (optional)</param>
        /// <param name="deleted">Restricts to incidents that are deleted. (optional)</param>
        /// <param name="tenantIdIn">Restricts to incidents that have one of the given comma-separated tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include historic incidents that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="jobDefinitionIdIn">Restricts to incidents that have one of the given comma-separated job definition ids. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <returns>ApiResponse of CountResultDto</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<CountResultDto> GetHistoricIncidentsCountWithHttpInfo(string incidentId = default(string), string incidentType = default(string), string incidentMessage = default(string), string incidentMessageLike = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string processDefinitionKeyIn = default(string), string processInstanceId = default(string), string executionId = default(string), DateTime? createTimeBefore = default(DateTime?), DateTime? createTimeAfter = default(DateTime?), DateTime? endTimeBefore = default(DateTime?), DateTime? endTimeAfter = default(DateTime?), string activityId = default(string), string failedActivityId = default(string), string causeIncidentId = default(string), string rootCauseIncidentId = default(string), string configuration = default(string), string historyConfiguration = default(string), bool? open = default(bool?), bool? resolved = default(bool?), bool? deleted = default(bool?), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), string jobDefinitionIdIn = default(string), string sortBy = default(string), string sortOrder = default(string))
        {
            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (incidentId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "incidentId", incidentId));
            }
            if (incidentType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "incidentType", incidentType));
            }
            if (incidentMessage != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "incidentMessage", incidentMessage));
            }
            if (incidentMessageLike != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "incidentMessageLike", incidentMessageLike));
            }
            if (processDefinitionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processDefinitionId", processDefinitionId));
            }
            if (processDefinitionKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processDefinitionKey", processDefinitionKey));
            }
            if (processDefinitionKeyIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processDefinitionKeyIn", processDefinitionKeyIn));
            }
            if (processInstanceId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processInstanceId", processInstanceId));
            }
            if (executionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "executionId", executionId));
            }
            if (createTimeBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "createTimeBefore", createTimeBefore));
            }
            if (createTimeAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "createTimeAfter", createTimeAfter));
            }
            if (endTimeBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "endTimeBefore", endTimeBefore));
            }
            if (endTimeAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "endTimeAfter", endTimeAfter));
            }
            if (activityId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "activityId", activityId));
            }
            if (failedActivityId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "failedActivityId", failedActivityId));
            }
            if (causeIncidentId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "causeIncidentId", causeIncidentId));
            }
            if (rootCauseIncidentId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "rootCauseIncidentId", rootCauseIncidentId));
            }
            if (configuration != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "configuration", configuration));
            }
            if (historyConfiguration != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "historyConfiguration", historyConfiguration));
            }
            if (open != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "open", open));
            }
            if (resolved != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "resolved", resolved));
            }
            if (deleted != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "deleted", deleted));
            }
            if (tenantIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "tenantIdIn", tenantIdIn));
            }
            if (withoutTenantId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "withoutTenantId", withoutTenantId));
            }
            if (jobDefinitionIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "jobDefinitionIdIn", jobDefinitionIdIn));
            }
            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "sortBy", sortBy));
            }
            if (sortOrder != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "sortOrder", sortOrder));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<CountResultDto>("/history/incident/count", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetHistoricIncidentsCount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Incident Count Queries for the number of historic incidents that fulfill the given parameters. Takes the same parameters as the [Get Incidents](https://docs.camunda.org/manual/7.16/reference/rest/history/incident/get-incident-query/) method.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="incidentId">Restricts to incidents that have the given id. (optional)</param>
        /// <param name="incidentType">Restricts to incidents that belong to the given incident type. See the [User Guide](/manual/develop/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)</param>
        /// <param name="incidentMessage">Restricts to incidents that have the given incident message. (optional)</param>
        /// <param name="incidentMessageLike">Restricts to incidents that incidents message is a substring of the given value. The string can include the wildcard character &#39;%&#39; to express like-strategy: starts with (string%), ends with (%string) or contains (%string%).  (optional)</param>
        /// <param name="processDefinitionId">Restricts to incidents that belong to a process definition with the given id. (optional)</param>
        /// <param name="processDefinitionKey">Restricts to incidents that have the given processDefinitionKey. (optional)</param>
        /// <param name="processDefinitionKeyIn">Restricts to incidents that have one of the given process definition keys. (optional)</param>
        /// <param name="processInstanceId">Restricts to incidents that belong to a process instance with the given id. (optional)</param>
        /// <param name="executionId">Restricts to incidents that belong to an execution with the given id. (optional)</param>
        /// <param name="createTimeBefore">Restricts to incidents that have a createTime date before the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="createTimeAfter">Restricts to incidents that have a createTime date after the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="endTimeBefore">Restricts to incidents that have an endTimeBefore date before the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="endTimeAfter">Restricts to incidents that have an endTimeAfter date after the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="activityId">Restricts to incidents that belong to an activity with the given id. (optional)</param>
        /// <param name="failedActivityId">Restricts to incidents that were created due to the failure of an activity with the given id. (optional)</param>
        /// <param name="causeIncidentId">Restricts to incidents that have the given incident id as cause incident. (optional)</param>
        /// <param name="rootCauseIncidentId">Restricts to incidents that have the given incident id as root cause incident. (optional)</param>
        /// <param name="configuration">Restricts to incidents that have the given parameter set as configuration. (optional)</param>
        /// <param name="historyConfiguration">Restricts to incidents that have the given parameter set as history configuration. (optional)</param>
        /// <param name="open">Restricts to incidents that are open. (optional)</param>
        /// <param name="resolved">Restricts to incidents that are resolved. (optional)</param>
        /// <param name="deleted">Restricts to incidents that are deleted. (optional)</param>
        /// <param name="tenantIdIn">Restricts to incidents that have one of the given comma-separated tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include historic incidents that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="jobDefinitionIdIn">Restricts to incidents that have one of the given comma-separated job definition ids. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CountResultDto</returns>
        public async System.Threading.Tasks.Task<CountResultDto> GetHistoricIncidentsCountAsync(string incidentId = default(string), string incidentType = default(string), string incidentMessage = default(string), string incidentMessageLike = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string processDefinitionKeyIn = default(string), string processInstanceId = default(string), string executionId = default(string), DateTime? createTimeBefore = default(DateTime?), DateTime? createTimeAfter = default(DateTime?), DateTime? endTimeBefore = default(DateTime?), DateTime? endTimeAfter = default(DateTime?), string activityId = default(string), string failedActivityId = default(string), string causeIncidentId = default(string), string rootCauseIncidentId = default(string), string configuration = default(string), string historyConfiguration = default(string), bool? open = default(bool?), bool? resolved = default(bool?), bool? deleted = default(bool?), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), string jobDefinitionIdIn = default(string), string sortBy = default(string), string sortOrder = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<CountResultDto> localVarResponse = await GetHistoricIncidentsCountWithHttpInfoAsync(incidentId, incidentType, incidentMessage, incidentMessageLike, processDefinitionId, processDefinitionKey, processDefinitionKeyIn, processInstanceId, executionId, createTimeBefore, createTimeAfter, endTimeBefore, endTimeAfter, activityId, failedActivityId, causeIncidentId, rootCauseIncidentId, configuration, historyConfiguration, open, resolved, deleted, tenantIdIn, withoutTenantId, jobDefinitionIdIn, sortBy, sortOrder, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Incident Count Queries for the number of historic incidents that fulfill the given parameters. Takes the same parameters as the [Get Incidents](https://docs.camunda.org/manual/7.16/reference/rest/history/incident/get-incident-query/) method.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="incidentId">Restricts to incidents that have the given id. (optional)</param>
        /// <param name="incidentType">Restricts to incidents that belong to the given incident type. See the [User Guide](/manual/develop/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)</param>
        /// <param name="incidentMessage">Restricts to incidents that have the given incident message. (optional)</param>
        /// <param name="incidentMessageLike">Restricts to incidents that incidents message is a substring of the given value. The string can include the wildcard character &#39;%&#39; to express like-strategy: starts with (string%), ends with (%string) or contains (%string%).  (optional)</param>
        /// <param name="processDefinitionId">Restricts to incidents that belong to a process definition with the given id. (optional)</param>
        /// <param name="processDefinitionKey">Restricts to incidents that have the given processDefinitionKey. (optional)</param>
        /// <param name="processDefinitionKeyIn">Restricts to incidents that have one of the given process definition keys. (optional)</param>
        /// <param name="processInstanceId">Restricts to incidents that belong to a process instance with the given id. (optional)</param>
        /// <param name="executionId">Restricts to incidents that belong to an execution with the given id. (optional)</param>
        /// <param name="createTimeBefore">Restricts to incidents that have a createTime date before the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="createTimeAfter">Restricts to incidents that have a createTime date after the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="endTimeBefore">Restricts to incidents that have an endTimeBefore date before the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="endTimeAfter">Restricts to incidents that have an endTimeAfter date after the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="activityId">Restricts to incidents that belong to an activity with the given id. (optional)</param>
        /// <param name="failedActivityId">Restricts to incidents that were created due to the failure of an activity with the given id. (optional)</param>
        /// <param name="causeIncidentId">Restricts to incidents that have the given incident id as cause incident. (optional)</param>
        /// <param name="rootCauseIncidentId">Restricts to incidents that have the given incident id as root cause incident. (optional)</param>
        /// <param name="configuration">Restricts to incidents that have the given parameter set as configuration. (optional)</param>
        /// <param name="historyConfiguration">Restricts to incidents that have the given parameter set as history configuration. (optional)</param>
        /// <param name="open">Restricts to incidents that are open. (optional)</param>
        /// <param name="resolved">Restricts to incidents that are resolved. (optional)</param>
        /// <param name="deleted">Restricts to incidents that are deleted. (optional)</param>
        /// <param name="tenantIdIn">Restricts to incidents that have one of the given comma-separated tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include historic incidents that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="jobDefinitionIdIn">Restricts to incidents that have one of the given comma-separated job definition ids. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CountResultDto)</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<CountResultDto>> GetHistoricIncidentsCountWithHttpInfoAsync(string incidentId = default(string), string incidentType = default(string), string incidentMessage = default(string), string incidentMessageLike = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string processDefinitionKeyIn = default(string), string processInstanceId = default(string), string executionId = default(string), DateTime? createTimeBefore = default(DateTime?), DateTime? createTimeAfter = default(DateTime?), DateTime? endTimeBefore = default(DateTime?), DateTime? endTimeAfter = default(DateTime?), string activityId = default(string), string failedActivityId = default(string), string causeIncidentId = default(string), string rootCauseIncidentId = default(string), string configuration = default(string), string historyConfiguration = default(string), bool? open = default(bool?), bool? resolved = default(bool?), bool? deleted = default(bool?), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), string jobDefinitionIdIn = default(string), string sortBy = default(string), string sortOrder = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (incidentId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "incidentId", incidentId));
            }
            if (incidentType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "incidentType", incidentType));
            }
            if (incidentMessage != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "incidentMessage", incidentMessage));
            }
            if (incidentMessageLike != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "incidentMessageLike", incidentMessageLike));
            }
            if (processDefinitionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processDefinitionId", processDefinitionId));
            }
            if (processDefinitionKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processDefinitionKey", processDefinitionKey));
            }
            if (processDefinitionKeyIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processDefinitionKeyIn", processDefinitionKeyIn));
            }
            if (processInstanceId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processInstanceId", processInstanceId));
            }
            if (executionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "executionId", executionId));
            }
            if (createTimeBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "createTimeBefore", createTimeBefore));
            }
            if (createTimeAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "createTimeAfter", createTimeAfter));
            }
            if (endTimeBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "endTimeBefore", endTimeBefore));
            }
            if (endTimeAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "endTimeAfter", endTimeAfter));
            }
            if (activityId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "activityId", activityId));
            }
            if (failedActivityId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "failedActivityId", failedActivityId));
            }
            if (causeIncidentId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "causeIncidentId", causeIncidentId));
            }
            if (rootCauseIncidentId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "rootCauseIncidentId", rootCauseIncidentId));
            }
            if (configuration != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "configuration", configuration));
            }
            if (historyConfiguration != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "historyConfiguration", historyConfiguration));
            }
            if (open != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "open", open));
            }
            if (resolved != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "resolved", resolved));
            }
            if (deleted != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "deleted", deleted));
            }
            if (tenantIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "tenantIdIn", tenantIdIn));
            }
            if (withoutTenantId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "withoutTenantId", withoutTenantId));
            }
            if (jobDefinitionIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "jobDefinitionIdIn", jobDefinitionIdIn));
            }
            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "sortBy", sortBy));
            }
            if (sortOrder != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "sortOrder", sortOrder));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<CountResultDto>("/history/incident/count", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetHistoricIncidentsCount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
