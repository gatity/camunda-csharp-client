/*
 * Camunda BPM REST API
 *
 * OpenApi Spec for Camunda BPM REST API.
 *
 * The version of the OpenAPI document: 7.14.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Camunda.OpenApi.Client.Client;
using Camunda.OpenApi.Client.Model;

namespace Camunda.OpenApi.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDeploymentApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a deployment.  **Security Consideration**  Deployments can contain custom code in form of scripts or EL expressions to customize process behavior. This may be abused for remote execution of arbitrary code.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">The tenant id for the deployment to be created. (optional)</param>
        /// <param name="deploymentSource">The source for the deployment to be created. (optional)</param>
        /// <param name="deployChangedOnly">A flag indicating whether the process engine should perform duplicate checking on a per-resource basis. If set to true, only those resources that have actually changed are deployed. Checks are made against resources included previous deployments of the same name and only against the latest versions of those resources. If set to true, the option enable-duplicate-filtering is overridden and set to true. (optional, default to false)</param>
        /// <param name="enableDuplicateFiltering">A flag indicating whether the process engine should perform duplicate checking for the deployment or not. This allows you to check if a deployment with the same name and the same resouces already exists and if true, not create a new deployment but instead return the existing deployment. The default value is false. (optional, default to false)</param>
        /// <param name="deploymentName">The name for the deployment to be created. (optional)</param>
        /// <param name="data">The binary data to create the deployment resource. It is possible to have more than one form part with different form part names for the binary data to create a deployment. (optional)</param>
        /// <returns>DeploymentWithDefinitionsDto</returns>
        DeploymentWithDefinitionsDto CreateDeployment(string tenantId = default(string), string deploymentSource = default(string), bool? deployChangedOnly = default(bool?), bool? enableDuplicateFiltering = default(bool?), string deploymentName = default(string), System.IO.Stream data = default(System.IO.Stream));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a deployment.  **Security Consideration**  Deployments can contain custom code in form of scripts or EL expressions to customize process behavior. This may be abused for remote execution of arbitrary code.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">The tenant id for the deployment to be created. (optional)</param>
        /// <param name="deploymentSource">The source for the deployment to be created. (optional)</param>
        /// <param name="deployChangedOnly">A flag indicating whether the process engine should perform duplicate checking on a per-resource basis. If set to true, only those resources that have actually changed are deployed. Checks are made against resources included previous deployments of the same name and only against the latest versions of those resources. If set to true, the option enable-duplicate-filtering is overridden and set to true. (optional, default to false)</param>
        /// <param name="enableDuplicateFiltering">A flag indicating whether the process engine should perform duplicate checking for the deployment or not. This allows you to check if a deployment with the same name and the same resouces already exists and if true, not create a new deployment but instead return the existing deployment. The default value is false. (optional, default to false)</param>
        /// <param name="deploymentName">The name for the deployment to be created. (optional)</param>
        /// <param name="data">The binary data to create the deployment resource. It is possible to have more than one form part with different form part names for the binary data to create a deployment. (optional)</param>
        /// <returns>ApiResponse of DeploymentWithDefinitionsDto</returns>
        ApiResponse<DeploymentWithDefinitionsDto> CreateDeploymentWithHttpInfo(string tenantId = default(string), string deploymentSource = default(string), bool? deployChangedOnly = default(bool?), bool? enableDuplicateFiltering = default(bool?), string deploymentName = default(string), System.IO.Stream data = default(System.IO.Stream));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes a deployment by id.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the deployment to be deleted.</param>
        /// <param name="cascade">&#x60;true&#x60;, if all process instances, historic process instances and jobs for this deployment should be deleted. (optional, default to false)</param>
        /// <param name="skipCustomListeners">&#x60;true&#x60;, if only the built-in ExecutionListeners should be notified with the end event. (optional, default to false)</param>
        /// <param name="skipIoMappings">&#x60;true&#x60;, if all input/output mappings should not be invoked. (optional, default to false)</param>
        /// <returns></returns>
        void DeleteDeployment(string id, bool? cascade = default(bool?), bool? skipCustomListeners = default(bool?), bool? skipIoMappings = default(bool?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes a deployment by id.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the deployment to be deleted.</param>
        /// <param name="cascade">&#x60;true&#x60;, if all process instances, historic process instances and jobs for this deployment should be deleted. (optional, default to false)</param>
        /// <param name="skipCustomListeners">&#x60;true&#x60;, if only the built-in ExecutionListeners should be notified with the end event. (optional, default to false)</param>
        /// <param name="skipIoMappings">&#x60;true&#x60;, if all input/output mappings should not be invoked. (optional, default to false)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteDeploymentWithHttpInfo(string id, bool? cascade = default(bool?), bool? skipCustomListeners = default(bool?), bool? skipIoMappings = default(bool?));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves a deployment by id, according to the &#x60;Deployment&#x60; interface of the engine.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the deployment.</param>
        /// <returns>List&lt;DeploymentDto&gt;</returns>
        List<DeploymentDto> GetDeployment(string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves a deployment by id, according to the &#x60;Deployment&#x60; interface of the engine.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the deployment.</param>
        /// <returns>ApiResponse of List&lt;DeploymentDto&gt;</returns>
        ApiResponse<List<DeploymentDto>> GetDeploymentWithHttpInfo(string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves a deployment resource by resource id for the given deployment.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the deployment</param>
        /// <param name="resourceId">The id of the deployment resource</param>
        /// <returns>DeploymentResourceDto</returns>
        DeploymentResourceDto GetDeploymentResource(string id, string resourceId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves a deployment resource by resource id for the given deployment.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the deployment</param>
        /// <param name="resourceId">The id of the deployment resource</param>
        /// <returns>ApiResponse of DeploymentResourceDto</returns>
        ApiResponse<DeploymentResourceDto> GetDeploymentResourceWithHttpInfo(string id, string resourceId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves the binary content of a deployment resource for the given deployment by id.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the deployment.</param>
        /// <param name="resourceId">The id of the deployment resource.</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetDeploymentResourceData(string id, string resourceId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves the binary content of a deployment resource for the given deployment by id.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the deployment.</param>
        /// <param name="resourceId">The id of the deployment resource.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetDeploymentResourceDataWithHttpInfo(string id, string resourceId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all deployment resources of a given deployment.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the deployment to retrieve the deployment resources for.</param>
        /// <returns>List&lt;DeploymentResourceDto&gt;</returns>
        List<DeploymentResourceDto> GetDeploymentResources(string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all deployment resources of a given deployment.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the deployment to retrieve the deployment resources for.</param>
        /// <returns>ApiResponse of List&lt;DeploymentResourceDto&gt;</returns>
        ApiResponse<List<DeploymentResourceDto>> GetDeploymentResourcesWithHttpInfo(string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Queries for deployments that fulfill given parameters. Parameters may be the properties of deployments, such as the id or name or a range of the deployment time. The size of the result set can be retrieved by using the [Get Deployment count](https://docs.camunda.org/manual/7.14/reference/rest/deployment/get-query-count/) method.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Filter by deployment id (optional)</param>
        /// <param name="name">Filter by the deployment name. Exact match. (optional)</param>
        /// <param name="nameLike">Filter by the deployment name that the parameter is a substring of. The parameter can include the wildcard &#x60;%&#x60; to express like-strategy such as: starts with (&#x60;%&#x60;name), ends with (name&#x60;%&#x60;) or contains (&#x60;%&#x60;name&#x60;%&#x60;). (optional)</param>
        /// <param name="source">Filter by the deployment source. (optional)</param>
        /// <param name="withoutSource">Filter by the deployment source whereby source is equal to &#x60;null&#x60;. (optional, default to false)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. A deployment must have one of the given tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include deployments which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="includeDeploymentsWithoutTenantId">Include deployments which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="after">Restricts to all deployments after the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="before">Restricts to all deployments before the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <returns>List&lt;DeploymentDto&gt;</returns>
        List<DeploymentDto> GetDeployments(string id = default(string), string name = default(string), string nameLike = default(string), string source = default(string), bool? withoutSource = default(bool?), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), bool? includeDeploymentsWithoutTenantId = default(bool?), DateTime? after = default(DateTime?), DateTime? before = default(DateTime?), string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Queries for deployments that fulfill given parameters. Parameters may be the properties of deployments, such as the id or name or a range of the deployment time. The size of the result set can be retrieved by using the [Get Deployment count](https://docs.camunda.org/manual/7.14/reference/rest/deployment/get-query-count/) method.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Filter by deployment id (optional)</param>
        /// <param name="name">Filter by the deployment name. Exact match. (optional)</param>
        /// <param name="nameLike">Filter by the deployment name that the parameter is a substring of. The parameter can include the wildcard &#x60;%&#x60; to express like-strategy such as: starts with (&#x60;%&#x60;name), ends with (name&#x60;%&#x60;) or contains (&#x60;%&#x60;name&#x60;%&#x60;). (optional)</param>
        /// <param name="source">Filter by the deployment source. (optional)</param>
        /// <param name="withoutSource">Filter by the deployment source whereby source is equal to &#x60;null&#x60;. (optional, default to false)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. A deployment must have one of the given tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include deployments which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="includeDeploymentsWithoutTenantId">Include deployments which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="after">Restricts to all deployments after the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="before">Restricts to all deployments before the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <returns>ApiResponse of List&lt;DeploymentDto&gt;</returns>
        ApiResponse<List<DeploymentDto>> GetDeploymentsWithHttpInfo(string id = default(string), string name = default(string), string nameLike = default(string), string source = default(string), bool? withoutSource = default(bool?), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), bool? includeDeploymentsWithoutTenantId = default(bool?), DateTime? after = default(DateTime?), DateTime? before = default(DateTime?), string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Queries for the number of deployments that fulfill given parameters. Takes the same parameters as the [Get Deployments](https://docs.camunda.org/manual/7.14/reference/rest/deployment/get-query/) method.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Filter by deployment id (optional)</param>
        /// <param name="name">Filter by the deployment name. Exact match. (optional)</param>
        /// <param name="nameLike">Filter by the deployment name that the parameter is a substring of. The parameter can include the wildcard &#x60;%&#x60; to express like-strategy such as: starts with (&#x60;%&#x60;name), ends with (name&#x60;%&#x60;) or contains (&#x60;%&#x60;name&#x60;%&#x60;). (optional)</param>
        /// <param name="source">Filter by the deployment source. (optional)</param>
        /// <param name="withoutSource">Filter by the deployment source whereby source is equal to &#x60;null&#x60;. (optional, default to false)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. A deployment must have one of the given tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include deployments which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="includeDeploymentsWithoutTenantId">Include deployments which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="after">Restricts to all deployments after the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="before">Restricts to all deployments before the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <returns>CountResultDto</returns>
        CountResultDto GetDeploymentsCount(string id = default(string), string name = default(string), string nameLike = default(string), string source = default(string), bool? withoutSource = default(bool?), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), bool? includeDeploymentsWithoutTenantId = default(bool?), DateTime? after = default(DateTime?), DateTime? before = default(DateTime?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Queries for the number of deployments that fulfill given parameters. Takes the same parameters as the [Get Deployments](https://docs.camunda.org/manual/7.14/reference/rest/deployment/get-query/) method.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Filter by deployment id (optional)</param>
        /// <param name="name">Filter by the deployment name. Exact match. (optional)</param>
        /// <param name="nameLike">Filter by the deployment name that the parameter is a substring of. The parameter can include the wildcard &#x60;%&#x60; to express like-strategy such as: starts with (&#x60;%&#x60;name), ends with (name&#x60;%&#x60;) or contains (&#x60;%&#x60;name&#x60;%&#x60;). (optional)</param>
        /// <param name="source">Filter by the deployment source. (optional)</param>
        /// <param name="withoutSource">Filter by the deployment source whereby source is equal to &#x60;null&#x60;. (optional, default to false)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. A deployment must have one of the given tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include deployments which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="includeDeploymentsWithoutTenantId">Include deployments which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="after">Restricts to all deployments after the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="before">Restricts to all deployments before the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <returns>ApiResponse of CountResultDto</returns>
        ApiResponse<CountResultDto> GetDeploymentsCountWithHttpInfo(string id = default(string), string name = default(string), string nameLike = default(string), string source = default(string), bool? withoutSource = default(bool?), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), bool? includeDeploymentsWithoutTenantId = default(bool?), DateTime? after = default(DateTime?), DateTime? before = default(DateTime?));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Re-deploys an existing deployment.  The deployment resources to re-deploy can be restricted by using the properties &#x60;resourceIds&#x60; or &#x60;resourceNames&#x60;. If no deployment resources to re-deploy are passed then all existing resources of the given deployment are re-deployed.  **Warning**: Deployments can contain custom code in form of scripts or EL expressions to customize process behavior. This may be abused for remote execution of arbitrary code. See the section on [security considerations for custom code](https://docs.camunda.org/manual/7.14/user-guide/process-engine/securing-custom-code/) in the user guide for details.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the deployment to re-deploy.</param>
        /// <param name="redeploymentDto"> (optional)</param>
        /// <returns>DeploymentWithDefinitionsDto</returns>
        DeploymentWithDefinitionsDto Redeploy(string id, RedeploymentDto redeploymentDto = default(RedeploymentDto));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Re-deploys an existing deployment.  The deployment resources to re-deploy can be restricted by using the properties &#x60;resourceIds&#x60; or &#x60;resourceNames&#x60;. If no deployment resources to re-deploy are passed then all existing resources of the given deployment are re-deployed.  **Warning**: Deployments can contain custom code in form of scripts or EL expressions to customize process behavior. This may be abused for remote execution of arbitrary code. See the section on [security considerations for custom code](https://docs.camunda.org/manual/7.14/user-guide/process-engine/securing-custom-code/) in the user guide for details.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the deployment to re-deploy.</param>
        /// <param name="redeploymentDto"> (optional)</param>
        /// <returns>ApiResponse of DeploymentWithDefinitionsDto</returns>
        ApiResponse<DeploymentWithDefinitionsDto> RedeployWithHttpInfo(string id, RedeploymentDto redeploymentDto = default(RedeploymentDto));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDeploymentApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a deployment.  **Security Consideration**  Deployments can contain custom code in form of scripts or EL expressions to customize process behavior. This may be abused for remote execution of arbitrary code.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">The tenant id for the deployment to be created. (optional)</param>
        /// <param name="deploymentSource">The source for the deployment to be created. (optional)</param>
        /// <param name="deployChangedOnly">A flag indicating whether the process engine should perform duplicate checking on a per-resource basis. If set to true, only those resources that have actually changed are deployed. Checks are made against resources included previous deployments of the same name and only against the latest versions of those resources. If set to true, the option enable-duplicate-filtering is overridden and set to true. (optional, default to false)</param>
        /// <param name="enableDuplicateFiltering">A flag indicating whether the process engine should perform duplicate checking for the deployment or not. This allows you to check if a deployment with the same name and the same resouces already exists and if true, not create a new deployment but instead return the existing deployment. The default value is false. (optional, default to false)</param>
        /// <param name="deploymentName">The name for the deployment to be created. (optional)</param>
        /// <param name="data">The binary data to create the deployment resource. It is possible to have more than one form part with different form part names for the binary data to create a deployment. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeploymentWithDefinitionsDto</returns>
        System.Threading.Tasks.Task<DeploymentWithDefinitionsDto> CreateDeploymentAsync(string tenantId = default(string), string deploymentSource = default(string), bool? deployChangedOnly = default(bool?), bool? enableDuplicateFiltering = default(bool?), string deploymentName = default(string), System.IO.Stream data = default(System.IO.Stream), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a deployment.  **Security Consideration**  Deployments can contain custom code in form of scripts or EL expressions to customize process behavior. This may be abused for remote execution of arbitrary code.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">The tenant id for the deployment to be created. (optional)</param>
        /// <param name="deploymentSource">The source for the deployment to be created. (optional)</param>
        /// <param name="deployChangedOnly">A flag indicating whether the process engine should perform duplicate checking on a per-resource basis. If set to true, only those resources that have actually changed are deployed. Checks are made against resources included previous deployments of the same name and only against the latest versions of those resources. If set to true, the option enable-duplicate-filtering is overridden and set to true. (optional, default to false)</param>
        /// <param name="enableDuplicateFiltering">A flag indicating whether the process engine should perform duplicate checking for the deployment or not. This allows you to check if a deployment with the same name and the same resouces already exists and if true, not create a new deployment but instead return the existing deployment. The default value is false. (optional, default to false)</param>
        /// <param name="deploymentName">The name for the deployment to be created. (optional)</param>
        /// <param name="data">The binary data to create the deployment resource. It is possible to have more than one form part with different form part names for the binary data to create a deployment. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeploymentWithDefinitionsDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeploymentWithDefinitionsDto>> CreateDeploymentWithHttpInfoAsync(string tenantId = default(string), string deploymentSource = default(string), bool? deployChangedOnly = default(bool?), bool? enableDuplicateFiltering = default(bool?), string deploymentName = default(string), System.IO.Stream data = default(System.IO.Stream), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes a deployment by id.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the deployment to be deleted.</param>
        /// <param name="cascade">&#x60;true&#x60;, if all process instances, historic process instances and jobs for this deployment should be deleted. (optional, default to false)</param>
        /// <param name="skipCustomListeners">&#x60;true&#x60;, if only the built-in ExecutionListeners should be notified with the end event. (optional, default to false)</param>
        /// <param name="skipIoMappings">&#x60;true&#x60;, if all input/output mappings should not be invoked. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteDeploymentAsync(string id, bool? cascade = default(bool?), bool? skipCustomListeners = default(bool?), bool? skipIoMappings = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes a deployment by id.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the deployment to be deleted.</param>
        /// <param name="cascade">&#x60;true&#x60;, if all process instances, historic process instances and jobs for this deployment should be deleted. (optional, default to false)</param>
        /// <param name="skipCustomListeners">&#x60;true&#x60;, if only the built-in ExecutionListeners should be notified with the end event. (optional, default to false)</param>
        /// <param name="skipIoMappings">&#x60;true&#x60;, if all input/output mappings should not be invoked. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteDeploymentWithHttpInfoAsync(string id, bool? cascade = default(bool?), bool? skipCustomListeners = default(bool?), bool? skipIoMappings = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves a deployment by id, according to the &#x60;Deployment&#x60; interface of the engine.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the deployment.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;DeploymentDto&gt;</returns>
        System.Threading.Tasks.Task<List<DeploymentDto>> GetDeploymentAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves a deployment by id, according to the &#x60;Deployment&#x60; interface of the engine.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the deployment.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;DeploymentDto&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DeploymentDto>>> GetDeploymentWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves a deployment resource by resource id for the given deployment.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the deployment</param>
        /// <param name="resourceId">The id of the deployment resource</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeploymentResourceDto</returns>
        System.Threading.Tasks.Task<DeploymentResourceDto> GetDeploymentResourceAsync(string id, string resourceId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves a deployment resource by resource id for the given deployment.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the deployment</param>
        /// <param name="resourceId">The id of the deployment resource</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeploymentResourceDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeploymentResourceDto>> GetDeploymentResourceWithHttpInfoAsync(string id, string resourceId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves the binary content of a deployment resource for the given deployment by id.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the deployment.</param>
        /// <param name="resourceId">The id of the deployment resource.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetDeploymentResourceDataAsync(string id, string resourceId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves the binary content of a deployment resource for the given deployment by id.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the deployment.</param>
        /// <param name="resourceId">The id of the deployment resource.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetDeploymentResourceDataWithHttpInfoAsync(string id, string resourceId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all deployment resources of a given deployment.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the deployment to retrieve the deployment resources for.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;DeploymentResourceDto&gt;</returns>
        System.Threading.Tasks.Task<List<DeploymentResourceDto>> GetDeploymentResourcesAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all deployment resources of a given deployment.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the deployment to retrieve the deployment resources for.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;DeploymentResourceDto&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DeploymentResourceDto>>> GetDeploymentResourcesWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Queries for deployments that fulfill given parameters. Parameters may be the properties of deployments, such as the id or name or a range of the deployment time. The size of the result set can be retrieved by using the [Get Deployment count](https://docs.camunda.org/manual/7.14/reference/rest/deployment/get-query-count/) method.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Filter by deployment id (optional)</param>
        /// <param name="name">Filter by the deployment name. Exact match. (optional)</param>
        /// <param name="nameLike">Filter by the deployment name that the parameter is a substring of. The parameter can include the wildcard &#x60;%&#x60; to express like-strategy such as: starts with (&#x60;%&#x60;name), ends with (name&#x60;%&#x60;) or contains (&#x60;%&#x60;name&#x60;%&#x60;). (optional)</param>
        /// <param name="source">Filter by the deployment source. (optional)</param>
        /// <param name="withoutSource">Filter by the deployment source whereby source is equal to &#x60;null&#x60;. (optional, default to false)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. A deployment must have one of the given tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include deployments which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="includeDeploymentsWithoutTenantId">Include deployments which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="after">Restricts to all deployments after the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="before">Restricts to all deployments before the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;DeploymentDto&gt;</returns>
        System.Threading.Tasks.Task<List<DeploymentDto>> GetDeploymentsAsync(string id = default(string), string name = default(string), string nameLike = default(string), string source = default(string), bool? withoutSource = default(bool?), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), bool? includeDeploymentsWithoutTenantId = default(bool?), DateTime? after = default(DateTime?), DateTime? before = default(DateTime?), string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Queries for deployments that fulfill given parameters. Parameters may be the properties of deployments, such as the id or name or a range of the deployment time. The size of the result set can be retrieved by using the [Get Deployment count](https://docs.camunda.org/manual/7.14/reference/rest/deployment/get-query-count/) method.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Filter by deployment id (optional)</param>
        /// <param name="name">Filter by the deployment name. Exact match. (optional)</param>
        /// <param name="nameLike">Filter by the deployment name that the parameter is a substring of. The parameter can include the wildcard &#x60;%&#x60; to express like-strategy such as: starts with (&#x60;%&#x60;name), ends with (name&#x60;%&#x60;) or contains (&#x60;%&#x60;name&#x60;%&#x60;). (optional)</param>
        /// <param name="source">Filter by the deployment source. (optional)</param>
        /// <param name="withoutSource">Filter by the deployment source whereby source is equal to &#x60;null&#x60;. (optional, default to false)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. A deployment must have one of the given tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include deployments which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="includeDeploymentsWithoutTenantId">Include deployments which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="after">Restricts to all deployments after the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="before">Restricts to all deployments before the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;DeploymentDto&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DeploymentDto>>> GetDeploymentsWithHttpInfoAsync(string id = default(string), string name = default(string), string nameLike = default(string), string source = default(string), bool? withoutSource = default(bool?), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), bool? includeDeploymentsWithoutTenantId = default(bool?), DateTime? after = default(DateTime?), DateTime? before = default(DateTime?), string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Queries for the number of deployments that fulfill given parameters. Takes the same parameters as the [Get Deployments](https://docs.camunda.org/manual/7.14/reference/rest/deployment/get-query/) method.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Filter by deployment id (optional)</param>
        /// <param name="name">Filter by the deployment name. Exact match. (optional)</param>
        /// <param name="nameLike">Filter by the deployment name that the parameter is a substring of. The parameter can include the wildcard &#x60;%&#x60; to express like-strategy such as: starts with (&#x60;%&#x60;name), ends with (name&#x60;%&#x60;) or contains (&#x60;%&#x60;name&#x60;%&#x60;). (optional)</param>
        /// <param name="source">Filter by the deployment source. (optional)</param>
        /// <param name="withoutSource">Filter by the deployment source whereby source is equal to &#x60;null&#x60;. (optional, default to false)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. A deployment must have one of the given tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include deployments which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="includeDeploymentsWithoutTenantId">Include deployments which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="after">Restricts to all deployments after the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="before">Restricts to all deployments before the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CountResultDto</returns>
        System.Threading.Tasks.Task<CountResultDto> GetDeploymentsCountAsync(string id = default(string), string name = default(string), string nameLike = default(string), string source = default(string), bool? withoutSource = default(bool?), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), bool? includeDeploymentsWithoutTenantId = default(bool?), DateTime? after = default(DateTime?), DateTime? before = default(DateTime?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Queries for the number of deployments that fulfill given parameters. Takes the same parameters as the [Get Deployments](https://docs.camunda.org/manual/7.14/reference/rest/deployment/get-query/) method.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Filter by deployment id (optional)</param>
        /// <param name="name">Filter by the deployment name. Exact match. (optional)</param>
        /// <param name="nameLike">Filter by the deployment name that the parameter is a substring of. The parameter can include the wildcard &#x60;%&#x60; to express like-strategy such as: starts with (&#x60;%&#x60;name), ends with (name&#x60;%&#x60;) or contains (&#x60;%&#x60;name&#x60;%&#x60;). (optional)</param>
        /// <param name="source">Filter by the deployment source. (optional)</param>
        /// <param name="withoutSource">Filter by the deployment source whereby source is equal to &#x60;null&#x60;. (optional, default to false)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. A deployment must have one of the given tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include deployments which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="includeDeploymentsWithoutTenantId">Include deployments which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="after">Restricts to all deployments after the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="before">Restricts to all deployments before the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CountResultDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<CountResultDto>> GetDeploymentsCountWithHttpInfoAsync(string id = default(string), string name = default(string), string nameLike = default(string), string source = default(string), bool? withoutSource = default(bool?), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), bool? includeDeploymentsWithoutTenantId = default(bool?), DateTime? after = default(DateTime?), DateTime? before = default(DateTime?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Re-deploys an existing deployment.  The deployment resources to re-deploy can be restricted by using the properties &#x60;resourceIds&#x60; or &#x60;resourceNames&#x60;. If no deployment resources to re-deploy are passed then all existing resources of the given deployment are re-deployed.  **Warning**: Deployments can contain custom code in form of scripts or EL expressions to customize process behavior. This may be abused for remote execution of arbitrary code. See the section on [security considerations for custom code](https://docs.camunda.org/manual/7.14/user-guide/process-engine/securing-custom-code/) in the user guide for details.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the deployment to re-deploy.</param>
        /// <param name="redeploymentDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeploymentWithDefinitionsDto</returns>
        System.Threading.Tasks.Task<DeploymentWithDefinitionsDto> RedeployAsync(string id, RedeploymentDto redeploymentDto = default(RedeploymentDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Re-deploys an existing deployment.  The deployment resources to re-deploy can be restricted by using the properties &#x60;resourceIds&#x60; or &#x60;resourceNames&#x60;. If no deployment resources to re-deploy are passed then all existing resources of the given deployment are re-deployed.  **Warning**: Deployments can contain custom code in form of scripts or EL expressions to customize process behavior. This may be abused for remote execution of arbitrary code. See the section on [security considerations for custom code](https://docs.camunda.org/manual/7.14/user-guide/process-engine/securing-custom-code/) in the user guide for details.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the deployment to re-deploy.</param>
        /// <param name="redeploymentDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeploymentWithDefinitionsDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeploymentWithDefinitionsDto>> RedeployWithHttpInfoAsync(string id, RedeploymentDto redeploymentDto = default(RedeploymentDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDeploymentApi : IDeploymentApiSync, IDeploymentApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DeploymentApi : IDeploymentApi
    {
        private Camunda.OpenApi.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DeploymentApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DeploymentApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DeploymentApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DeploymentApi(String basePath)
        {
            this.Configuration = Camunda.OpenApi.Client.Client.Configuration.MergeConfigurations(
                Camunda.OpenApi.Client.Client.GlobalConfiguration.Instance,
                new Camunda.OpenApi.Client.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Camunda.OpenApi.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Camunda.OpenApi.Client.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Camunda.OpenApi.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DeploymentApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DeploymentApi(Camunda.OpenApi.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Camunda.OpenApi.Client.Client.Configuration.MergeConfigurations(
                Camunda.OpenApi.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Camunda.OpenApi.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Camunda.OpenApi.Client.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Camunda.OpenApi.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DeploymentApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public DeploymentApi(Camunda.OpenApi.Client.Client.ISynchronousClient client, Camunda.OpenApi.Client.Client.IAsynchronousClient asyncClient, Camunda.OpenApi.Client.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Camunda.OpenApi.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Camunda.OpenApi.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Camunda.OpenApi.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Camunda.OpenApi.Client.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Camunda.OpenApi.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  Creates a deployment.  **Security Consideration**  Deployments can contain custom code in form of scripts or EL expressions to customize process behavior. This may be abused for remote execution of arbitrary code.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">The tenant id for the deployment to be created. (optional)</param>
        /// <param name="deploymentSource">The source for the deployment to be created. (optional)</param>
        /// <param name="deployChangedOnly">A flag indicating whether the process engine should perform duplicate checking on a per-resource basis. If set to true, only those resources that have actually changed are deployed. Checks are made against resources included previous deployments of the same name and only against the latest versions of those resources. If set to true, the option enable-duplicate-filtering is overridden and set to true. (optional, default to false)</param>
        /// <param name="enableDuplicateFiltering">A flag indicating whether the process engine should perform duplicate checking for the deployment or not. This allows you to check if a deployment with the same name and the same resouces already exists and if true, not create a new deployment but instead return the existing deployment. The default value is false. (optional, default to false)</param>
        /// <param name="deploymentName">The name for the deployment to be created. (optional)</param>
        /// <param name="data">The binary data to create the deployment resource. It is possible to have more than one form part with different form part names for the binary data to create a deployment. (optional)</param>
        /// <returns>DeploymentWithDefinitionsDto</returns>
        public DeploymentWithDefinitionsDto CreateDeployment(string tenantId = default(string), string deploymentSource = default(string), bool? deployChangedOnly = default(bool?), bool? enableDuplicateFiltering = default(bool?), string deploymentName = default(string), System.IO.Stream data = default(System.IO.Stream))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<DeploymentWithDefinitionsDto> localVarResponse = CreateDeploymentWithHttpInfo(tenantId, deploymentSource, deployChangedOnly, enableDuplicateFiltering, deploymentName, data);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Creates a deployment.  **Security Consideration**  Deployments can contain custom code in form of scripts or EL expressions to customize process behavior. This may be abused for remote execution of arbitrary code.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">The tenant id for the deployment to be created. (optional)</param>
        /// <param name="deploymentSource">The source for the deployment to be created. (optional)</param>
        /// <param name="deployChangedOnly">A flag indicating whether the process engine should perform duplicate checking on a per-resource basis. If set to true, only those resources that have actually changed are deployed. Checks are made against resources included previous deployments of the same name and only against the latest versions of those resources. If set to true, the option enable-duplicate-filtering is overridden and set to true. (optional, default to false)</param>
        /// <param name="enableDuplicateFiltering">A flag indicating whether the process engine should perform duplicate checking for the deployment or not. This allows you to check if a deployment with the same name and the same resouces already exists and if true, not create a new deployment but instead return the existing deployment. The default value is false. (optional, default to false)</param>
        /// <param name="deploymentName">The name for the deployment to be created. (optional)</param>
        /// <param name="data">The binary data to create the deployment resource. It is possible to have more than one form part with different form part names for the binary data to create a deployment. (optional)</param>
        /// <returns>ApiResponse of DeploymentWithDefinitionsDto</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<DeploymentWithDefinitionsDto> CreateDeploymentWithHttpInfo(string tenantId = default(string), string deploymentSource = default(string), bool? deployChangedOnly = default(bool?), bool? enableDuplicateFiltering = default(bool?), string deploymentName = default(string), System.IO.Stream data = default(System.IO.Stream))
        {
            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (tenantId != null)
            {
                localVarRequestOptions.FormParameters.Add("tenant-id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(tenantId)); // form parameter
            }
            if (deploymentSource != null)
            {
                localVarRequestOptions.FormParameters.Add("deployment-source", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(deploymentSource)); // form parameter
            }
            if (deployChangedOnly != null)
            {
                localVarRequestOptions.FormParameters.Add("deploy-changed-only", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(deployChangedOnly)); // form parameter
            }
            if (enableDuplicateFiltering != null)
            {
                localVarRequestOptions.FormParameters.Add("enable-duplicate-filtering", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(enableDuplicateFiltering)); // form parameter
            }
            if (deploymentName != null)
            {
                localVarRequestOptions.FormParameters.Add("deployment-name", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(deploymentName)); // form parameter
            }
            if (data != null)
            {
                localVarRequestOptions.FileParameters.Add("data", data);
            }


            // make the HTTP request
            var localVarResponse = this.Client.Post<DeploymentWithDefinitionsDto>("/deployment/create", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateDeployment", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Creates a deployment.  **Security Consideration**  Deployments can contain custom code in form of scripts or EL expressions to customize process behavior. This may be abused for remote execution of arbitrary code.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">The tenant id for the deployment to be created. (optional)</param>
        /// <param name="deploymentSource">The source for the deployment to be created. (optional)</param>
        /// <param name="deployChangedOnly">A flag indicating whether the process engine should perform duplicate checking on a per-resource basis. If set to true, only those resources that have actually changed are deployed. Checks are made against resources included previous deployments of the same name and only against the latest versions of those resources. If set to true, the option enable-duplicate-filtering is overridden and set to true. (optional, default to false)</param>
        /// <param name="enableDuplicateFiltering">A flag indicating whether the process engine should perform duplicate checking for the deployment or not. This allows you to check if a deployment with the same name and the same resouces already exists and if true, not create a new deployment but instead return the existing deployment. The default value is false. (optional, default to false)</param>
        /// <param name="deploymentName">The name for the deployment to be created. (optional)</param>
        /// <param name="data">The binary data to create the deployment resource. It is possible to have more than one form part with different form part names for the binary data to create a deployment. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeploymentWithDefinitionsDto</returns>
        public async System.Threading.Tasks.Task<DeploymentWithDefinitionsDto> CreateDeploymentAsync(string tenantId = default(string), string deploymentSource = default(string), bool? deployChangedOnly = default(bool?), bool? enableDuplicateFiltering = default(bool?), string deploymentName = default(string), System.IO.Stream data = default(System.IO.Stream), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<DeploymentWithDefinitionsDto> localVarResponse = await CreateDeploymentWithHttpInfoAsync(tenantId, deploymentSource, deployChangedOnly, enableDuplicateFiltering, deploymentName, data, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Creates a deployment.  **Security Consideration**  Deployments can contain custom code in form of scripts or EL expressions to customize process behavior. This may be abused for remote execution of arbitrary code.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">The tenant id for the deployment to be created. (optional)</param>
        /// <param name="deploymentSource">The source for the deployment to be created. (optional)</param>
        /// <param name="deployChangedOnly">A flag indicating whether the process engine should perform duplicate checking on a per-resource basis. If set to true, only those resources that have actually changed are deployed. Checks are made against resources included previous deployments of the same name and only against the latest versions of those resources. If set to true, the option enable-duplicate-filtering is overridden and set to true. (optional, default to false)</param>
        /// <param name="enableDuplicateFiltering">A flag indicating whether the process engine should perform duplicate checking for the deployment or not. This allows you to check if a deployment with the same name and the same resouces already exists and if true, not create a new deployment but instead return the existing deployment. The default value is false. (optional, default to false)</param>
        /// <param name="deploymentName">The name for the deployment to be created. (optional)</param>
        /// <param name="data">The binary data to create the deployment resource. It is possible to have more than one form part with different form part names for the binary data to create a deployment. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeploymentWithDefinitionsDto)</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<DeploymentWithDefinitionsDto>> CreateDeploymentWithHttpInfoAsync(string tenantId = default(string), string deploymentSource = default(string), bool? deployChangedOnly = default(bool?), bool? enableDuplicateFiltering = default(bool?), string deploymentName = default(string), System.IO.Stream data = default(System.IO.Stream), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (tenantId != null)
            {
                localVarRequestOptions.FormParameters.Add("tenant-id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(tenantId)); // form parameter
            }
            if (deploymentSource != null)
            {
                localVarRequestOptions.FormParameters.Add("deployment-source", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(deploymentSource)); // form parameter
            }
            if (deployChangedOnly != null)
            {
                localVarRequestOptions.FormParameters.Add("deploy-changed-only", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(deployChangedOnly)); // form parameter
            }
            if (enableDuplicateFiltering != null)
            {
                localVarRequestOptions.FormParameters.Add("enable-duplicate-filtering", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(enableDuplicateFiltering)); // form parameter
            }
            if (deploymentName != null)
            {
                localVarRequestOptions.FormParameters.Add("deployment-name", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(deploymentName)); // form parameter
            }
            if (data != null)
            {
                localVarRequestOptions.FileParameters.Add("data", data);
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<DeploymentWithDefinitionsDto>("/deployment/create", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateDeployment", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Deletes a deployment by id.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the deployment to be deleted.</param>
        /// <param name="cascade">&#x60;true&#x60;, if all process instances, historic process instances and jobs for this deployment should be deleted. (optional, default to false)</param>
        /// <param name="skipCustomListeners">&#x60;true&#x60;, if only the built-in ExecutionListeners should be notified with the end event. (optional, default to false)</param>
        /// <param name="skipIoMappings">&#x60;true&#x60;, if all input/output mappings should not be invoked. (optional, default to false)</param>
        /// <returns></returns>
        public void DeleteDeployment(string id, bool? cascade = default(bool?), bool? skipCustomListeners = default(bool?), bool? skipIoMappings = default(bool?))
        {
            DeleteDeploymentWithHttpInfo(id, cascade, skipCustomListeners, skipIoMappings);
        }

        /// <summary>
        ///  Deletes a deployment by id.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the deployment to be deleted.</param>
        /// <param name="cascade">&#x60;true&#x60;, if all process instances, historic process instances and jobs for this deployment should be deleted. (optional, default to false)</param>
        /// <param name="skipCustomListeners">&#x60;true&#x60;, if only the built-in ExecutionListeners should be notified with the end event. (optional, default to false)</param>
        /// <param name="skipIoMappings">&#x60;true&#x60;, if all input/output mappings should not be invoked. (optional, default to false)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<Object> DeleteDeploymentWithHttpInfo(string id, bool? cascade = default(bool?), bool? skipCustomListeners = default(bool?), bool? skipIoMappings = default(bool?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling DeploymentApi->DeleteDeployment");

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (cascade != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "cascade", cascade));
            }
            if (skipCustomListeners != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "skipCustomListeners", skipCustomListeners));
            }
            if (skipIoMappings != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "skipIoMappings", skipIoMappings));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/deployment/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteDeployment", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Deletes a deployment by id.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the deployment to be deleted.</param>
        /// <param name="cascade">&#x60;true&#x60;, if all process instances, historic process instances and jobs for this deployment should be deleted. (optional, default to false)</param>
        /// <param name="skipCustomListeners">&#x60;true&#x60;, if only the built-in ExecutionListeners should be notified with the end event. (optional, default to false)</param>
        /// <param name="skipIoMappings">&#x60;true&#x60;, if all input/output mappings should not be invoked. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteDeploymentAsync(string id, bool? cascade = default(bool?), bool? skipCustomListeners = default(bool?), bool? skipIoMappings = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteDeploymentWithHttpInfoAsync(id, cascade, skipCustomListeners, skipIoMappings, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  Deletes a deployment by id.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the deployment to be deleted.</param>
        /// <param name="cascade">&#x60;true&#x60;, if all process instances, historic process instances and jobs for this deployment should be deleted. (optional, default to false)</param>
        /// <param name="skipCustomListeners">&#x60;true&#x60;, if only the built-in ExecutionListeners should be notified with the end event. (optional, default to false)</param>
        /// <param name="skipIoMappings">&#x60;true&#x60;, if all input/output mappings should not be invoked. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<Object>> DeleteDeploymentWithHttpInfoAsync(string id, bool? cascade = default(bool?), bool? skipCustomListeners = default(bool?), bool? skipIoMappings = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling DeploymentApi->DeleteDeployment");


            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (cascade != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "cascade", cascade));
            }
            if (skipCustomListeners != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "skipCustomListeners", skipCustomListeners));
            }
            if (skipIoMappings != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "skipIoMappings", skipIoMappings));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/deployment/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteDeployment", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Retrieves a deployment by id, according to the &#x60;Deployment&#x60; interface of the engine.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the deployment.</param>
        /// <returns>List&lt;DeploymentDto&gt;</returns>
        public List<DeploymentDto> GetDeployment(string id)
        {
            Camunda.OpenApi.Client.Client.ApiResponse<List<DeploymentDto>> localVarResponse = GetDeploymentWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves a deployment by id, according to the &#x60;Deployment&#x60; interface of the engine.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the deployment.</param>
        /// <returns>ApiResponse of List&lt;DeploymentDto&gt;</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<List<DeploymentDto>> GetDeploymentWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling DeploymentApi->GetDeployment");

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<DeploymentDto>>("/deployment/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDeployment", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Retrieves a deployment by id, according to the &#x60;Deployment&#x60; interface of the engine.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the deployment.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;DeploymentDto&gt;</returns>
        public async System.Threading.Tasks.Task<List<DeploymentDto>> GetDeploymentAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<List<DeploymentDto>> localVarResponse = await GetDeploymentWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves a deployment by id, according to the &#x60;Deployment&#x60; interface of the engine.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the deployment.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;DeploymentDto&gt;)</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<List<DeploymentDto>>> GetDeploymentWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling DeploymentApi->GetDeployment");


            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<DeploymentDto>>("/deployment/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDeployment", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Retrieves a deployment resource by resource id for the given deployment.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the deployment</param>
        /// <param name="resourceId">The id of the deployment resource</param>
        /// <returns>DeploymentResourceDto</returns>
        public DeploymentResourceDto GetDeploymentResource(string id, string resourceId)
        {
            Camunda.OpenApi.Client.Client.ApiResponse<DeploymentResourceDto> localVarResponse = GetDeploymentResourceWithHttpInfo(id, resourceId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves a deployment resource by resource id for the given deployment.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the deployment</param>
        /// <param name="resourceId">The id of the deployment resource</param>
        /// <returns>ApiResponse of DeploymentResourceDto</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<DeploymentResourceDto> GetDeploymentResourceWithHttpInfo(string id, string resourceId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling DeploymentApi->GetDeploymentResource");

            // verify the required parameter 'resourceId' is set
            if (resourceId == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'resourceId' when calling DeploymentApi->GetDeploymentResource");

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("resourceId", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(resourceId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<DeploymentResourceDto>("/deployment/{id}/resources/{resourceId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDeploymentResource", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Retrieves a deployment resource by resource id for the given deployment.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the deployment</param>
        /// <param name="resourceId">The id of the deployment resource</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeploymentResourceDto</returns>
        public async System.Threading.Tasks.Task<DeploymentResourceDto> GetDeploymentResourceAsync(string id, string resourceId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<DeploymentResourceDto> localVarResponse = await GetDeploymentResourceWithHttpInfoAsync(id, resourceId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves a deployment resource by resource id for the given deployment.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the deployment</param>
        /// <param name="resourceId">The id of the deployment resource</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeploymentResourceDto)</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<DeploymentResourceDto>> GetDeploymentResourceWithHttpInfoAsync(string id, string resourceId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling DeploymentApi->GetDeploymentResource");

            // verify the required parameter 'resourceId' is set
            if (resourceId == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'resourceId' when calling DeploymentApi->GetDeploymentResource");


            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("resourceId", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(resourceId)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<DeploymentResourceDto>("/deployment/{id}/resources/{resourceId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDeploymentResource", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Retrieves the binary content of a deployment resource for the given deployment by id.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the deployment.</param>
        /// <param name="resourceId">The id of the deployment resource.</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetDeploymentResourceData(string id, string resourceId)
        {
            Camunda.OpenApi.Client.Client.ApiResponse<System.IO.Stream> localVarResponse = GetDeploymentResourceDataWithHttpInfo(id, resourceId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves the binary content of a deployment resource for the given deployment by id.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the deployment.</param>
        /// <param name="resourceId">The id of the deployment resource.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<System.IO.Stream> GetDeploymentResourceDataWithHttpInfo(string id, string resourceId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling DeploymentApi->GetDeploymentResourceData");

            // verify the required parameter 'resourceId' is set
            if (resourceId == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'resourceId' when calling DeploymentApi->GetDeploymentResourceData");

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/octet-stream",
                "*/*",
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("resourceId", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(resourceId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<System.IO.Stream>("/deployment/{id}/resources/{resourceId}/data", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDeploymentResourceData", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Retrieves the binary content of a deployment resource for the given deployment by id.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the deployment.</param>
        /// <param name="resourceId">The id of the deployment resource.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetDeploymentResourceDataAsync(string id, string resourceId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<System.IO.Stream> localVarResponse = await GetDeploymentResourceDataWithHttpInfoAsync(id, resourceId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves the binary content of a deployment resource for the given deployment by id.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the deployment.</param>
        /// <param name="resourceId">The id of the deployment resource.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<System.IO.Stream>> GetDeploymentResourceDataWithHttpInfoAsync(string id, string resourceId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling DeploymentApi->GetDeploymentResourceData");

            // verify the required parameter 'resourceId' is set
            if (resourceId == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'resourceId' when calling DeploymentApi->GetDeploymentResourceData");


            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/octet-stream",
                "*/*",
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("resourceId", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(resourceId)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<System.IO.Stream>("/deployment/{id}/resources/{resourceId}/data", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDeploymentResourceData", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Retrieves all deployment resources of a given deployment.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the deployment to retrieve the deployment resources for.</param>
        /// <returns>List&lt;DeploymentResourceDto&gt;</returns>
        public List<DeploymentResourceDto> GetDeploymentResources(string id)
        {
            Camunda.OpenApi.Client.Client.ApiResponse<List<DeploymentResourceDto>> localVarResponse = GetDeploymentResourcesWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves all deployment resources of a given deployment.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the deployment to retrieve the deployment resources for.</param>
        /// <returns>ApiResponse of List&lt;DeploymentResourceDto&gt;</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<List<DeploymentResourceDto>> GetDeploymentResourcesWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling DeploymentApi->GetDeploymentResources");

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<DeploymentResourceDto>>("/deployment/{id}/resources", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDeploymentResources", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Retrieves all deployment resources of a given deployment.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the deployment to retrieve the deployment resources for.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;DeploymentResourceDto&gt;</returns>
        public async System.Threading.Tasks.Task<List<DeploymentResourceDto>> GetDeploymentResourcesAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<List<DeploymentResourceDto>> localVarResponse = await GetDeploymentResourcesWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves all deployment resources of a given deployment.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the deployment to retrieve the deployment resources for.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;DeploymentResourceDto&gt;)</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<List<DeploymentResourceDto>>> GetDeploymentResourcesWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling DeploymentApi->GetDeploymentResources");


            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<DeploymentResourceDto>>("/deployment/{id}/resources", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDeploymentResources", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Queries for deployments that fulfill given parameters. Parameters may be the properties of deployments, such as the id or name or a range of the deployment time. The size of the result set can be retrieved by using the [Get Deployment count](https://docs.camunda.org/manual/7.14/reference/rest/deployment/get-query-count/) method.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Filter by deployment id (optional)</param>
        /// <param name="name">Filter by the deployment name. Exact match. (optional)</param>
        /// <param name="nameLike">Filter by the deployment name that the parameter is a substring of. The parameter can include the wildcard &#x60;%&#x60; to express like-strategy such as: starts with (&#x60;%&#x60;name), ends with (name&#x60;%&#x60;) or contains (&#x60;%&#x60;name&#x60;%&#x60;). (optional)</param>
        /// <param name="source">Filter by the deployment source. (optional)</param>
        /// <param name="withoutSource">Filter by the deployment source whereby source is equal to &#x60;null&#x60;. (optional, default to false)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. A deployment must have one of the given tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include deployments which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="includeDeploymentsWithoutTenantId">Include deployments which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="after">Restricts to all deployments after the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="before">Restricts to all deployments before the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <returns>List&lt;DeploymentDto&gt;</returns>
        public List<DeploymentDto> GetDeployments(string id = default(string), string name = default(string), string nameLike = default(string), string source = default(string), bool? withoutSource = default(bool?), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), bool? includeDeploymentsWithoutTenantId = default(bool?), DateTime? after = default(DateTime?), DateTime? before = default(DateTime?), string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<List<DeploymentDto>> localVarResponse = GetDeploymentsWithHttpInfo(id, name, nameLike, source, withoutSource, tenantIdIn, withoutTenantId, includeDeploymentsWithoutTenantId, after, before, sortBy, sortOrder, firstResult, maxResults);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Queries for deployments that fulfill given parameters. Parameters may be the properties of deployments, such as the id or name or a range of the deployment time. The size of the result set can be retrieved by using the [Get Deployment count](https://docs.camunda.org/manual/7.14/reference/rest/deployment/get-query-count/) method.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Filter by deployment id (optional)</param>
        /// <param name="name">Filter by the deployment name. Exact match. (optional)</param>
        /// <param name="nameLike">Filter by the deployment name that the parameter is a substring of. The parameter can include the wildcard &#x60;%&#x60; to express like-strategy such as: starts with (&#x60;%&#x60;name), ends with (name&#x60;%&#x60;) or contains (&#x60;%&#x60;name&#x60;%&#x60;). (optional)</param>
        /// <param name="source">Filter by the deployment source. (optional)</param>
        /// <param name="withoutSource">Filter by the deployment source whereby source is equal to &#x60;null&#x60;. (optional, default to false)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. A deployment must have one of the given tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include deployments which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="includeDeploymentsWithoutTenantId">Include deployments which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="after">Restricts to all deployments after the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="before">Restricts to all deployments before the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <returns>ApiResponse of List&lt;DeploymentDto&gt;</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<List<DeploymentDto>> GetDeploymentsWithHttpInfo(string id = default(string), string name = default(string), string nameLike = default(string), string source = default(string), bool? withoutSource = default(bool?), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), bool? includeDeploymentsWithoutTenantId = default(bool?), DateTime? after = default(DateTime?), DateTime? before = default(DateTime?), string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?))
        {
            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (nameLike != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "nameLike", nameLike));
            }
            if (source != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "source", source));
            }
            if (withoutSource != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "withoutSource", withoutSource));
            }
            if (tenantIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "tenantIdIn", tenantIdIn));
            }
            if (withoutTenantId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "withoutTenantId", withoutTenantId));
            }
            if (includeDeploymentsWithoutTenantId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "includeDeploymentsWithoutTenantId", includeDeploymentsWithoutTenantId));
            }
            if (after != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "after", after));
            }
            if (before != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "before", before));
            }
            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "sortBy", sortBy));
            }
            if (sortOrder != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "sortOrder", sortOrder));
            }
            if (firstResult != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "firstResult", firstResult));
            }
            if (maxResults != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "maxResults", maxResults));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<DeploymentDto>>("/deployment", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDeployments", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Queries for deployments that fulfill given parameters. Parameters may be the properties of deployments, such as the id or name or a range of the deployment time. The size of the result set can be retrieved by using the [Get Deployment count](https://docs.camunda.org/manual/7.14/reference/rest/deployment/get-query-count/) method.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Filter by deployment id (optional)</param>
        /// <param name="name">Filter by the deployment name. Exact match. (optional)</param>
        /// <param name="nameLike">Filter by the deployment name that the parameter is a substring of. The parameter can include the wildcard &#x60;%&#x60; to express like-strategy such as: starts with (&#x60;%&#x60;name), ends with (name&#x60;%&#x60;) or contains (&#x60;%&#x60;name&#x60;%&#x60;). (optional)</param>
        /// <param name="source">Filter by the deployment source. (optional)</param>
        /// <param name="withoutSource">Filter by the deployment source whereby source is equal to &#x60;null&#x60;. (optional, default to false)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. A deployment must have one of the given tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include deployments which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="includeDeploymentsWithoutTenantId">Include deployments which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="after">Restricts to all deployments after the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="before">Restricts to all deployments before the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;DeploymentDto&gt;</returns>
        public async System.Threading.Tasks.Task<List<DeploymentDto>> GetDeploymentsAsync(string id = default(string), string name = default(string), string nameLike = default(string), string source = default(string), bool? withoutSource = default(bool?), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), bool? includeDeploymentsWithoutTenantId = default(bool?), DateTime? after = default(DateTime?), DateTime? before = default(DateTime?), string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<List<DeploymentDto>> localVarResponse = await GetDeploymentsWithHttpInfoAsync(id, name, nameLike, source, withoutSource, tenantIdIn, withoutTenantId, includeDeploymentsWithoutTenantId, after, before, sortBy, sortOrder, firstResult, maxResults, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Queries for deployments that fulfill given parameters. Parameters may be the properties of deployments, such as the id or name or a range of the deployment time. The size of the result set can be retrieved by using the [Get Deployment count](https://docs.camunda.org/manual/7.14/reference/rest/deployment/get-query-count/) method.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Filter by deployment id (optional)</param>
        /// <param name="name">Filter by the deployment name. Exact match. (optional)</param>
        /// <param name="nameLike">Filter by the deployment name that the parameter is a substring of. The parameter can include the wildcard &#x60;%&#x60; to express like-strategy such as: starts with (&#x60;%&#x60;name), ends with (name&#x60;%&#x60;) or contains (&#x60;%&#x60;name&#x60;%&#x60;). (optional)</param>
        /// <param name="source">Filter by the deployment source. (optional)</param>
        /// <param name="withoutSource">Filter by the deployment source whereby source is equal to &#x60;null&#x60;. (optional, default to false)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. A deployment must have one of the given tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include deployments which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="includeDeploymentsWithoutTenantId">Include deployments which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="after">Restricts to all deployments after the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="before">Restricts to all deployments before the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;DeploymentDto&gt;)</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<List<DeploymentDto>>> GetDeploymentsWithHttpInfoAsync(string id = default(string), string name = default(string), string nameLike = default(string), string source = default(string), bool? withoutSource = default(bool?), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), bool? includeDeploymentsWithoutTenantId = default(bool?), DateTime? after = default(DateTime?), DateTime? before = default(DateTime?), string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (nameLike != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "nameLike", nameLike));
            }
            if (source != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "source", source));
            }
            if (withoutSource != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "withoutSource", withoutSource));
            }
            if (tenantIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "tenantIdIn", tenantIdIn));
            }
            if (withoutTenantId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "withoutTenantId", withoutTenantId));
            }
            if (includeDeploymentsWithoutTenantId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "includeDeploymentsWithoutTenantId", includeDeploymentsWithoutTenantId));
            }
            if (after != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "after", after));
            }
            if (before != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "before", before));
            }
            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "sortBy", sortBy));
            }
            if (sortOrder != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "sortOrder", sortOrder));
            }
            if (firstResult != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "firstResult", firstResult));
            }
            if (maxResults != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "maxResults", maxResults));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<DeploymentDto>>("/deployment", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDeployments", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Queries for the number of deployments that fulfill given parameters. Takes the same parameters as the [Get Deployments](https://docs.camunda.org/manual/7.14/reference/rest/deployment/get-query/) method.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Filter by deployment id (optional)</param>
        /// <param name="name">Filter by the deployment name. Exact match. (optional)</param>
        /// <param name="nameLike">Filter by the deployment name that the parameter is a substring of. The parameter can include the wildcard &#x60;%&#x60; to express like-strategy such as: starts with (&#x60;%&#x60;name), ends with (name&#x60;%&#x60;) or contains (&#x60;%&#x60;name&#x60;%&#x60;). (optional)</param>
        /// <param name="source">Filter by the deployment source. (optional)</param>
        /// <param name="withoutSource">Filter by the deployment source whereby source is equal to &#x60;null&#x60;. (optional, default to false)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. A deployment must have one of the given tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include deployments which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="includeDeploymentsWithoutTenantId">Include deployments which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="after">Restricts to all deployments after the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="before">Restricts to all deployments before the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <returns>CountResultDto</returns>
        public CountResultDto GetDeploymentsCount(string id = default(string), string name = default(string), string nameLike = default(string), string source = default(string), bool? withoutSource = default(bool?), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), bool? includeDeploymentsWithoutTenantId = default(bool?), DateTime? after = default(DateTime?), DateTime? before = default(DateTime?))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<CountResultDto> localVarResponse = GetDeploymentsCountWithHttpInfo(id, name, nameLike, source, withoutSource, tenantIdIn, withoutTenantId, includeDeploymentsWithoutTenantId, after, before);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Queries for the number of deployments that fulfill given parameters. Takes the same parameters as the [Get Deployments](https://docs.camunda.org/manual/7.14/reference/rest/deployment/get-query/) method.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Filter by deployment id (optional)</param>
        /// <param name="name">Filter by the deployment name. Exact match. (optional)</param>
        /// <param name="nameLike">Filter by the deployment name that the parameter is a substring of. The parameter can include the wildcard &#x60;%&#x60; to express like-strategy such as: starts with (&#x60;%&#x60;name), ends with (name&#x60;%&#x60;) or contains (&#x60;%&#x60;name&#x60;%&#x60;). (optional)</param>
        /// <param name="source">Filter by the deployment source. (optional)</param>
        /// <param name="withoutSource">Filter by the deployment source whereby source is equal to &#x60;null&#x60;. (optional, default to false)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. A deployment must have one of the given tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include deployments which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="includeDeploymentsWithoutTenantId">Include deployments which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="after">Restricts to all deployments after the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="before">Restricts to all deployments before the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <returns>ApiResponse of CountResultDto</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<CountResultDto> GetDeploymentsCountWithHttpInfo(string id = default(string), string name = default(string), string nameLike = default(string), string source = default(string), bool? withoutSource = default(bool?), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), bool? includeDeploymentsWithoutTenantId = default(bool?), DateTime? after = default(DateTime?), DateTime? before = default(DateTime?))
        {
            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (nameLike != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "nameLike", nameLike));
            }
            if (source != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "source", source));
            }
            if (withoutSource != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "withoutSource", withoutSource));
            }
            if (tenantIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "tenantIdIn", tenantIdIn));
            }
            if (withoutTenantId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "withoutTenantId", withoutTenantId));
            }
            if (includeDeploymentsWithoutTenantId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "includeDeploymentsWithoutTenantId", includeDeploymentsWithoutTenantId));
            }
            if (after != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "after", after));
            }
            if (before != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "before", before));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<CountResultDto>("/deployment/count", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDeploymentsCount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Queries for the number of deployments that fulfill given parameters. Takes the same parameters as the [Get Deployments](https://docs.camunda.org/manual/7.14/reference/rest/deployment/get-query/) method.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Filter by deployment id (optional)</param>
        /// <param name="name">Filter by the deployment name. Exact match. (optional)</param>
        /// <param name="nameLike">Filter by the deployment name that the parameter is a substring of. The parameter can include the wildcard &#x60;%&#x60; to express like-strategy such as: starts with (&#x60;%&#x60;name), ends with (name&#x60;%&#x60;) or contains (&#x60;%&#x60;name&#x60;%&#x60;). (optional)</param>
        /// <param name="source">Filter by the deployment source. (optional)</param>
        /// <param name="withoutSource">Filter by the deployment source whereby source is equal to &#x60;null&#x60;. (optional, default to false)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. A deployment must have one of the given tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include deployments which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="includeDeploymentsWithoutTenantId">Include deployments which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="after">Restricts to all deployments after the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="before">Restricts to all deployments before the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CountResultDto</returns>
        public async System.Threading.Tasks.Task<CountResultDto> GetDeploymentsCountAsync(string id = default(string), string name = default(string), string nameLike = default(string), string source = default(string), bool? withoutSource = default(bool?), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), bool? includeDeploymentsWithoutTenantId = default(bool?), DateTime? after = default(DateTime?), DateTime? before = default(DateTime?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<CountResultDto> localVarResponse = await GetDeploymentsCountWithHttpInfoAsync(id, name, nameLike, source, withoutSource, tenantIdIn, withoutTenantId, includeDeploymentsWithoutTenantId, after, before, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Queries for the number of deployments that fulfill given parameters. Takes the same parameters as the [Get Deployments](https://docs.camunda.org/manual/7.14/reference/rest/deployment/get-query/) method.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Filter by deployment id (optional)</param>
        /// <param name="name">Filter by the deployment name. Exact match. (optional)</param>
        /// <param name="nameLike">Filter by the deployment name that the parameter is a substring of. The parameter can include the wildcard &#x60;%&#x60; to express like-strategy such as: starts with (&#x60;%&#x60;name), ends with (name&#x60;%&#x60;) or contains (&#x60;%&#x60;name&#x60;%&#x60;). (optional)</param>
        /// <param name="source">Filter by the deployment source. (optional)</param>
        /// <param name="withoutSource">Filter by the deployment source whereby source is equal to &#x60;null&#x60;. (optional, default to false)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. A deployment must have one of the given tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include deployments which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="includeDeploymentsWithoutTenantId">Include deployments which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="after">Restricts to all deployments after the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="before">Restricts to all deployments before the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CountResultDto)</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<CountResultDto>> GetDeploymentsCountWithHttpInfoAsync(string id = default(string), string name = default(string), string nameLike = default(string), string source = default(string), bool? withoutSource = default(bool?), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), bool? includeDeploymentsWithoutTenantId = default(bool?), DateTime? after = default(DateTime?), DateTime? before = default(DateTime?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (nameLike != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "nameLike", nameLike));
            }
            if (source != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "source", source));
            }
            if (withoutSource != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "withoutSource", withoutSource));
            }
            if (tenantIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "tenantIdIn", tenantIdIn));
            }
            if (withoutTenantId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "withoutTenantId", withoutTenantId));
            }
            if (includeDeploymentsWithoutTenantId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "includeDeploymentsWithoutTenantId", includeDeploymentsWithoutTenantId));
            }
            if (after != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "after", after));
            }
            if (before != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "before", before));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<CountResultDto>("/deployment/count", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDeploymentsCount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Re-deploys an existing deployment.  The deployment resources to re-deploy can be restricted by using the properties &#x60;resourceIds&#x60; or &#x60;resourceNames&#x60;. If no deployment resources to re-deploy are passed then all existing resources of the given deployment are re-deployed.  **Warning**: Deployments can contain custom code in form of scripts or EL expressions to customize process behavior. This may be abused for remote execution of arbitrary code. See the section on [security considerations for custom code](https://docs.camunda.org/manual/7.14/user-guide/process-engine/securing-custom-code/) in the user guide for details.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the deployment to re-deploy.</param>
        /// <param name="redeploymentDto"> (optional)</param>
        /// <returns>DeploymentWithDefinitionsDto</returns>
        public DeploymentWithDefinitionsDto Redeploy(string id, RedeploymentDto redeploymentDto = default(RedeploymentDto))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<DeploymentWithDefinitionsDto> localVarResponse = RedeployWithHttpInfo(id, redeploymentDto);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Re-deploys an existing deployment.  The deployment resources to re-deploy can be restricted by using the properties &#x60;resourceIds&#x60; or &#x60;resourceNames&#x60;. If no deployment resources to re-deploy are passed then all existing resources of the given deployment are re-deployed.  **Warning**: Deployments can contain custom code in form of scripts or EL expressions to customize process behavior. This may be abused for remote execution of arbitrary code. See the section on [security considerations for custom code](https://docs.camunda.org/manual/7.14/user-guide/process-engine/securing-custom-code/) in the user guide for details.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the deployment to re-deploy.</param>
        /// <param name="redeploymentDto"> (optional)</param>
        /// <returns>ApiResponse of DeploymentWithDefinitionsDto</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<DeploymentWithDefinitionsDto> RedeployWithHttpInfo(string id, RedeploymentDto redeploymentDto = default(RedeploymentDto))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling DeploymentApi->Redeploy");

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = redeploymentDto;


            // make the HTTP request
            var localVarResponse = this.Client.Post<DeploymentWithDefinitionsDto>("/deployment/{id}/redeploy", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Redeploy", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Re-deploys an existing deployment.  The deployment resources to re-deploy can be restricted by using the properties &#x60;resourceIds&#x60; or &#x60;resourceNames&#x60;. If no deployment resources to re-deploy are passed then all existing resources of the given deployment are re-deployed.  **Warning**: Deployments can contain custom code in form of scripts or EL expressions to customize process behavior. This may be abused for remote execution of arbitrary code. See the section on [security considerations for custom code](https://docs.camunda.org/manual/7.14/user-guide/process-engine/securing-custom-code/) in the user guide for details.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the deployment to re-deploy.</param>
        /// <param name="redeploymentDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeploymentWithDefinitionsDto</returns>
        public async System.Threading.Tasks.Task<DeploymentWithDefinitionsDto> RedeployAsync(string id, RedeploymentDto redeploymentDto = default(RedeploymentDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<DeploymentWithDefinitionsDto> localVarResponse = await RedeployWithHttpInfoAsync(id, redeploymentDto, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Re-deploys an existing deployment.  The deployment resources to re-deploy can be restricted by using the properties &#x60;resourceIds&#x60; or &#x60;resourceNames&#x60;. If no deployment resources to re-deploy are passed then all existing resources of the given deployment are re-deployed.  **Warning**: Deployments can contain custom code in form of scripts or EL expressions to customize process behavior. This may be abused for remote execution of arbitrary code. See the section on [security considerations for custom code](https://docs.camunda.org/manual/7.14/user-guide/process-engine/securing-custom-code/) in the user guide for details.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the deployment to re-deploy.</param>
        /// <param name="redeploymentDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeploymentWithDefinitionsDto)</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<DeploymentWithDefinitionsDto>> RedeployWithHttpInfoAsync(string id, RedeploymentDto redeploymentDto = default(RedeploymentDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling DeploymentApi->Redeploy");


            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = redeploymentDto;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<DeploymentWithDefinitionsDto>("/deployment/{id}/redeploy", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Redeploy", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
