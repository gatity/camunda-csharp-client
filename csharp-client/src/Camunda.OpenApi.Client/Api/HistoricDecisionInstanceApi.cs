/*
 * Camunda Platform REST API
 *
 * OpenApi Spec for Camunda Platform REST API.
 *
 * The version of the OpenAPI document: 7.16.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Camunda.OpenApi.Client.Client;
using Camunda.OpenApi.Client.Model;

namespace Camunda.OpenApi.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IHistoricDecisionInstanceApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete Async (POST)
        /// </summary>
        /// <remarks>
        /// Delete multiple historic decision instances asynchronously (batch). At least &#x60;historicDecisionInstanceIds&#x60; or &#x60;historicDecisionInstanceQuery&#x60;  has to be provided. If both are provided then all instances matching query  criterion and instances from the list will be deleted.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteHistoricDecisionInstancesDto"> (optional)</param>
        /// <returns>BatchDto</returns>
        BatchDto DeleteAsync(DeleteHistoricDecisionInstancesDto deleteHistoricDecisionInstancesDto = default(DeleteHistoricDecisionInstancesDto));

        /// <summary>
        /// Delete Async (POST)
        /// </summary>
        /// <remarks>
        /// Delete multiple historic decision instances asynchronously (batch). At least &#x60;historicDecisionInstanceIds&#x60; or &#x60;historicDecisionInstanceQuery&#x60;  has to be provided. If both are provided then all instances matching query  criterion and instances from the list will be deleted.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteHistoricDecisionInstancesDto"> (optional)</param>
        /// <returns>ApiResponse of BatchDto</returns>
        ApiResponse<BatchDto> DeleteAsyncWithHttpInfo(DeleteHistoricDecisionInstancesDto deleteHistoricDecisionInstancesDto = default(DeleteHistoricDecisionInstancesDto));
        /// <summary>
        /// Get Historic Decision Instance
        /// </summary>
        /// <remarks>
        /// Retrieves a historic decision instance by id, according to the  &#x60;HistoricDecisionInstance&#x60; interface in the engine.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the historic decision instance to be retrieved.</param>
        /// <param name="includeInputs">Include input values in the result. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="includeOutputs">Include output values in the result. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="disableBinaryFetching">Disables fetching of byte array input and output values. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="disableCustomObjectDeserialization">Disables deserialization of input and output values that are custom objects. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <returns>HistoricDecisionInstanceDto</returns>
        HistoricDecisionInstanceDto GetHistoricDecisionInstance(string id, bool? includeInputs = default(bool?), bool? includeOutputs = default(bool?), bool? disableBinaryFetching = default(bool?), bool? disableCustomObjectDeserialization = default(bool?));

        /// <summary>
        /// Get Historic Decision Instance
        /// </summary>
        /// <remarks>
        /// Retrieves a historic decision instance by id, according to the  &#x60;HistoricDecisionInstance&#x60; interface in the engine.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the historic decision instance to be retrieved.</param>
        /// <param name="includeInputs">Include input values in the result. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="includeOutputs">Include output values in the result. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="disableBinaryFetching">Disables fetching of byte array input and output values. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="disableCustomObjectDeserialization">Disables deserialization of input and output values that are custom objects. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <returns>ApiResponse of HistoricDecisionInstanceDto</returns>
        ApiResponse<HistoricDecisionInstanceDto> GetHistoricDecisionInstanceWithHttpInfo(string id, bool? includeInputs = default(bool?), bool? includeOutputs = default(bool?), bool? disableBinaryFetching = default(bool?), bool? disableCustomObjectDeserialization = default(bool?));
        /// <summary>
        /// Get Historic Decision Instances
        /// </summary>
        /// <remarks>
        /// Queries for historic decision instances that fulfill the given parameters.  The size of the result set can be retrieved by using the  [Get Historic Decision Instance Count](https://docs.camunda.org/manual/7.16/reference/rest/history/decision-instance/get-decision-instance-query-count/)  method.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="decisionInstanceId">Filter by decision instance id. (optional)</param>
        /// <param name="decisionInstanceIdIn">Filter by decision instance ids. Must be a comma-separated list of decision instance ids. (optional)</param>
        /// <param name="decisionDefinitionId">Filter by the decision definition the instances belongs to. (optional)</param>
        /// <param name="decisionDefinitionIdIn">Filter by the decision definitions the instances belongs to. Must be a comma-separated list of decision definition ids. (optional)</param>
        /// <param name="decisionDefinitionKey">Filter by the key of the decision definition the instances belongs to. (optional)</param>
        /// <param name="decisionDefinitionKeyIn">Filter by the keys of the decision definition the instances belongs to. Must be a comma- separated list of decision definition keys. (optional)</param>
        /// <param name="decisionDefinitionName">Filter by the name of the decision definition the instances belongs to. (optional)</param>
        /// <param name="decisionDefinitionNameLike">Filter by the name of the decision definition the instances belongs to, that the parameter is a substring of. (optional)</param>
        /// <param name="processDefinitionId">Filter by the process definition the instances belongs to. (optional)</param>
        /// <param name="processDefinitionKey">Filter by the key of the process definition the instances belongs to. (optional)</param>
        /// <param name="processInstanceId">Filter by the process instance the instances belongs to. (optional)</param>
        /// <param name="caseDefinitionId">Filter by the case definition the instances belongs to. (optional)</param>
        /// <param name="caseDefinitionKey">Filter by the key of the case definition the instances belongs to. (optional)</param>
        /// <param name="caseInstanceId">Filter by the case instance the instances belongs to. (optional)</param>
        /// <param name="activityIdIn">Filter by the activity ids the instances belongs to. Must be a comma-separated list of acitvity ids. (optional)</param>
        /// <param name="activityInstanceIdIn">Filter by the activity instance ids the instances belongs to. Must be a comma-separated list of acitvity instance ids. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. A historic decision instance must have one of the given tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include historic decision instances that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="evaluatedBefore">Restrict to instances that were evaluated before the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM- dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="evaluatedAfter">Restrict to instances that were evaluated after the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM- dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="userId">Restrict to instances that were evaluated by the given user. (optional)</param>
        /// <param name="rootDecisionInstanceId">Restrict to instances that have a given root decision instance id. This also includes the decision instance with the given id. (optional)</param>
        /// <param name="rootDecisionInstancesOnly">Restrict to instances those are the root decision instance of an evaluation. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="decisionRequirementsDefinitionId">Filter by the decision requirements definition the instances belongs to. (optional)</param>
        /// <param name="decisionRequirementsDefinitionKey">Filter by the key of the decision requirements definition the instances belongs to. (optional)</param>
        /// <param name="includeInputs">Include input values in the result. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="includeOutputs">Include output values in the result. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="disableBinaryFetching">Disables fetching of byte array input and output values. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="disableCustomObjectDeserialization">Disables deserialization of input and output values that are custom objects. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <returns>List&lt;HistoricDecisionInstanceDto&gt;</returns>
        List<HistoricDecisionInstanceDto> GetHistoricDecisionInstances(string decisionInstanceId = default(string), string decisionInstanceIdIn = default(string), string decisionDefinitionId = default(string), string decisionDefinitionIdIn = default(string), string decisionDefinitionKey = default(string), string decisionDefinitionKeyIn = default(string), string decisionDefinitionName = default(string), string decisionDefinitionNameLike = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string processInstanceId = default(string), string caseDefinitionId = default(string), string caseDefinitionKey = default(string), string caseInstanceId = default(string), string activityIdIn = default(string), string activityInstanceIdIn = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), DateTime? evaluatedBefore = default(DateTime?), DateTime? evaluatedAfter = default(DateTime?), string userId = default(string), string rootDecisionInstanceId = default(string), bool? rootDecisionInstancesOnly = default(bool?), string decisionRequirementsDefinitionId = default(string), string decisionRequirementsDefinitionKey = default(string), bool? includeInputs = default(bool?), bool? includeOutputs = default(bool?), bool? disableBinaryFetching = default(bool?), bool? disableCustomObjectDeserialization = default(bool?), string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?));

        /// <summary>
        /// Get Historic Decision Instances
        /// </summary>
        /// <remarks>
        /// Queries for historic decision instances that fulfill the given parameters.  The size of the result set can be retrieved by using the  [Get Historic Decision Instance Count](https://docs.camunda.org/manual/7.16/reference/rest/history/decision-instance/get-decision-instance-query-count/)  method.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="decisionInstanceId">Filter by decision instance id. (optional)</param>
        /// <param name="decisionInstanceIdIn">Filter by decision instance ids. Must be a comma-separated list of decision instance ids. (optional)</param>
        /// <param name="decisionDefinitionId">Filter by the decision definition the instances belongs to. (optional)</param>
        /// <param name="decisionDefinitionIdIn">Filter by the decision definitions the instances belongs to. Must be a comma-separated list of decision definition ids. (optional)</param>
        /// <param name="decisionDefinitionKey">Filter by the key of the decision definition the instances belongs to. (optional)</param>
        /// <param name="decisionDefinitionKeyIn">Filter by the keys of the decision definition the instances belongs to. Must be a comma- separated list of decision definition keys. (optional)</param>
        /// <param name="decisionDefinitionName">Filter by the name of the decision definition the instances belongs to. (optional)</param>
        /// <param name="decisionDefinitionNameLike">Filter by the name of the decision definition the instances belongs to, that the parameter is a substring of. (optional)</param>
        /// <param name="processDefinitionId">Filter by the process definition the instances belongs to. (optional)</param>
        /// <param name="processDefinitionKey">Filter by the key of the process definition the instances belongs to. (optional)</param>
        /// <param name="processInstanceId">Filter by the process instance the instances belongs to. (optional)</param>
        /// <param name="caseDefinitionId">Filter by the case definition the instances belongs to. (optional)</param>
        /// <param name="caseDefinitionKey">Filter by the key of the case definition the instances belongs to. (optional)</param>
        /// <param name="caseInstanceId">Filter by the case instance the instances belongs to. (optional)</param>
        /// <param name="activityIdIn">Filter by the activity ids the instances belongs to. Must be a comma-separated list of acitvity ids. (optional)</param>
        /// <param name="activityInstanceIdIn">Filter by the activity instance ids the instances belongs to. Must be a comma-separated list of acitvity instance ids. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. A historic decision instance must have one of the given tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include historic decision instances that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="evaluatedBefore">Restrict to instances that were evaluated before the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM- dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="evaluatedAfter">Restrict to instances that were evaluated after the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM- dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="userId">Restrict to instances that were evaluated by the given user. (optional)</param>
        /// <param name="rootDecisionInstanceId">Restrict to instances that have a given root decision instance id. This also includes the decision instance with the given id. (optional)</param>
        /// <param name="rootDecisionInstancesOnly">Restrict to instances those are the root decision instance of an evaluation. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="decisionRequirementsDefinitionId">Filter by the decision requirements definition the instances belongs to. (optional)</param>
        /// <param name="decisionRequirementsDefinitionKey">Filter by the key of the decision requirements definition the instances belongs to. (optional)</param>
        /// <param name="includeInputs">Include input values in the result. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="includeOutputs">Include output values in the result. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="disableBinaryFetching">Disables fetching of byte array input and output values. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="disableCustomObjectDeserialization">Disables deserialization of input and output values that are custom objects. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <returns>ApiResponse of List&lt;HistoricDecisionInstanceDto&gt;</returns>
        ApiResponse<List<HistoricDecisionInstanceDto>> GetHistoricDecisionInstancesWithHttpInfo(string decisionInstanceId = default(string), string decisionInstanceIdIn = default(string), string decisionDefinitionId = default(string), string decisionDefinitionIdIn = default(string), string decisionDefinitionKey = default(string), string decisionDefinitionKeyIn = default(string), string decisionDefinitionName = default(string), string decisionDefinitionNameLike = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string processInstanceId = default(string), string caseDefinitionId = default(string), string caseDefinitionKey = default(string), string caseInstanceId = default(string), string activityIdIn = default(string), string activityInstanceIdIn = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), DateTime? evaluatedBefore = default(DateTime?), DateTime? evaluatedAfter = default(DateTime?), string userId = default(string), string rootDecisionInstanceId = default(string), bool? rootDecisionInstancesOnly = default(bool?), string decisionRequirementsDefinitionId = default(string), string decisionRequirementsDefinitionKey = default(string), bool? includeInputs = default(bool?), bool? includeOutputs = default(bool?), bool? disableBinaryFetching = default(bool?), bool? disableCustomObjectDeserialization = default(bool?), string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?));
        /// <summary>
        /// Get Historic Decision Instance Count
        /// </summary>
        /// <remarks>
        /// Queries for the number of historic decision instances that fulfill the given parameters.  Takes the same parameters as the  [Get Historic Decision Instances](https://docs.camunda.org/manual/7.16/reference/rest/history/decision-instance/get-decision-instance-query/)  method.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="decisionInstanceId">Filter by decision instance id. (optional)</param>
        /// <param name="decisionInstanceIdIn">Filter by decision instance ids. Must be a comma-separated list of decision instance ids. (optional)</param>
        /// <param name="decisionDefinitionId">Filter by the decision definition the instances belongs to. (optional)</param>
        /// <param name="decisionDefinitionIdIn">Filter by the decision definitions the instances belongs to. Must be a comma-separated list of decision definition ids. (optional)</param>
        /// <param name="decisionDefinitionKey">Filter by the key of the decision definition the instances belongs to. (optional)</param>
        /// <param name="decisionDefinitionKeyIn">Filter by the keys of the decision definition the instances belongs to. Must be a comma- separated list of decision definition keys. (optional)</param>
        /// <param name="decisionDefinitionName">Filter by the name of the decision definition the instances belongs to. (optional)</param>
        /// <param name="decisionDefinitionNameLike">Filter by the name of the decision definition the instances belongs to, that the parameter is a substring of. (optional)</param>
        /// <param name="processDefinitionId">Filter by the process definition the instances belongs to. (optional)</param>
        /// <param name="processDefinitionKey">Filter by the key of the process definition the instances belongs to. (optional)</param>
        /// <param name="processInstanceId">Filter by the process instance the instances belongs to. (optional)</param>
        /// <param name="caseDefinitionId">Filter by the case definition the instances belongs to. (optional)</param>
        /// <param name="caseDefinitionKey">Filter by the key of the case definition the instances belongs to. (optional)</param>
        /// <param name="caseInstanceId">Filter by the case instance the instances belongs to. (optional)</param>
        /// <param name="activityIdIn">Filter by the activity ids the instances belongs to. Must be a comma-separated list of acitvity ids. (optional)</param>
        /// <param name="activityInstanceIdIn">Filter by the activity instance ids the instances belongs to. Must be a comma-separated list of acitvity instance ids. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. A historic decision instance must have one of the given tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include historic decision instances that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="evaluatedBefore">Restrict to instances that were evaluated before the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM- dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="evaluatedAfter">Restrict to instances that were evaluated after the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM- dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="userId">Restrict to instances that were evaluated by the given user. (optional)</param>
        /// <param name="rootDecisionInstanceId">Restrict to instances that have a given root decision instance id. This also includes the decision instance with the given id. (optional)</param>
        /// <param name="rootDecisionInstancesOnly">Restrict to instances those are the root decision instance of an evaluation. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="decisionRequirementsDefinitionId">Filter by the decision requirements definition the instances belongs to. (optional)</param>
        /// <param name="decisionRequirementsDefinitionKey">Filter by the key of the decision requirements definition the instances belongs to. (optional)</param>
        /// <returns>CountResultDto</returns>
        CountResultDto GetHistoricDecisionInstancesCount(string decisionInstanceId = default(string), string decisionInstanceIdIn = default(string), string decisionDefinitionId = default(string), string decisionDefinitionIdIn = default(string), string decisionDefinitionKey = default(string), string decisionDefinitionKeyIn = default(string), string decisionDefinitionName = default(string), string decisionDefinitionNameLike = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string processInstanceId = default(string), string caseDefinitionId = default(string), string caseDefinitionKey = default(string), string caseInstanceId = default(string), string activityIdIn = default(string), string activityInstanceIdIn = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), DateTime? evaluatedBefore = default(DateTime?), DateTime? evaluatedAfter = default(DateTime?), string userId = default(string), string rootDecisionInstanceId = default(string), bool? rootDecisionInstancesOnly = default(bool?), string decisionRequirementsDefinitionId = default(string), string decisionRequirementsDefinitionKey = default(string));

        /// <summary>
        /// Get Historic Decision Instance Count
        /// </summary>
        /// <remarks>
        /// Queries for the number of historic decision instances that fulfill the given parameters.  Takes the same parameters as the  [Get Historic Decision Instances](https://docs.camunda.org/manual/7.16/reference/rest/history/decision-instance/get-decision-instance-query/)  method.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="decisionInstanceId">Filter by decision instance id. (optional)</param>
        /// <param name="decisionInstanceIdIn">Filter by decision instance ids. Must be a comma-separated list of decision instance ids. (optional)</param>
        /// <param name="decisionDefinitionId">Filter by the decision definition the instances belongs to. (optional)</param>
        /// <param name="decisionDefinitionIdIn">Filter by the decision definitions the instances belongs to. Must be a comma-separated list of decision definition ids. (optional)</param>
        /// <param name="decisionDefinitionKey">Filter by the key of the decision definition the instances belongs to. (optional)</param>
        /// <param name="decisionDefinitionKeyIn">Filter by the keys of the decision definition the instances belongs to. Must be a comma- separated list of decision definition keys. (optional)</param>
        /// <param name="decisionDefinitionName">Filter by the name of the decision definition the instances belongs to. (optional)</param>
        /// <param name="decisionDefinitionNameLike">Filter by the name of the decision definition the instances belongs to, that the parameter is a substring of. (optional)</param>
        /// <param name="processDefinitionId">Filter by the process definition the instances belongs to. (optional)</param>
        /// <param name="processDefinitionKey">Filter by the key of the process definition the instances belongs to. (optional)</param>
        /// <param name="processInstanceId">Filter by the process instance the instances belongs to. (optional)</param>
        /// <param name="caseDefinitionId">Filter by the case definition the instances belongs to. (optional)</param>
        /// <param name="caseDefinitionKey">Filter by the key of the case definition the instances belongs to. (optional)</param>
        /// <param name="caseInstanceId">Filter by the case instance the instances belongs to. (optional)</param>
        /// <param name="activityIdIn">Filter by the activity ids the instances belongs to. Must be a comma-separated list of acitvity ids. (optional)</param>
        /// <param name="activityInstanceIdIn">Filter by the activity instance ids the instances belongs to. Must be a comma-separated list of acitvity instance ids. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. A historic decision instance must have one of the given tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include historic decision instances that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="evaluatedBefore">Restrict to instances that were evaluated before the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM- dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="evaluatedAfter">Restrict to instances that were evaluated after the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM- dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="userId">Restrict to instances that were evaluated by the given user. (optional)</param>
        /// <param name="rootDecisionInstanceId">Restrict to instances that have a given root decision instance id. This also includes the decision instance with the given id. (optional)</param>
        /// <param name="rootDecisionInstancesOnly">Restrict to instances those are the root decision instance of an evaluation. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="decisionRequirementsDefinitionId">Filter by the decision requirements definition the instances belongs to. (optional)</param>
        /// <param name="decisionRequirementsDefinitionKey">Filter by the key of the decision requirements definition the instances belongs to. (optional)</param>
        /// <returns>ApiResponse of CountResultDto</returns>
        ApiResponse<CountResultDto> GetHistoricDecisionInstancesCountWithHttpInfo(string decisionInstanceId = default(string), string decisionInstanceIdIn = default(string), string decisionDefinitionId = default(string), string decisionDefinitionIdIn = default(string), string decisionDefinitionKey = default(string), string decisionDefinitionKeyIn = default(string), string decisionDefinitionName = default(string), string decisionDefinitionNameLike = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string processInstanceId = default(string), string caseDefinitionId = default(string), string caseDefinitionKey = default(string), string caseInstanceId = default(string), string activityIdIn = default(string), string activityInstanceIdIn = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), DateTime? evaluatedBefore = default(DateTime?), DateTime? evaluatedAfter = default(DateTime?), string userId = default(string), string rootDecisionInstanceId = default(string), bool? rootDecisionInstancesOnly = default(bool?), string decisionRequirementsDefinitionId = default(string), string decisionRequirementsDefinitionKey = default(string));
        /// <summary>
        /// Set Removal Time Async (POST)
        /// </summary>
        /// <remarks>
        /// Sets the removal time to multiple historic decision instances asynchronously (batch).  At least &#x60;historicDecisionInstanceIds&#x60; or &#x60;historicDecisionInstanceQuery&#x60; has to be provided. If both are provided, all instances matching query criterion and instances from the list will be updated with a removal time.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setRemovalTimeToHistoricDecisionInstancesDto"> (optional)</param>
        /// <returns>BatchDto</returns>
        BatchDto SetRemovalTimeAsyncHistoricDecisionInstance(SetRemovalTimeToHistoricDecisionInstancesDto setRemovalTimeToHistoricDecisionInstancesDto = default(SetRemovalTimeToHistoricDecisionInstancesDto));

        /// <summary>
        /// Set Removal Time Async (POST)
        /// </summary>
        /// <remarks>
        /// Sets the removal time to multiple historic decision instances asynchronously (batch).  At least &#x60;historicDecisionInstanceIds&#x60; or &#x60;historicDecisionInstanceQuery&#x60; has to be provided. If both are provided, all instances matching query criterion and instances from the list will be updated with a removal time.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setRemovalTimeToHistoricDecisionInstancesDto"> (optional)</param>
        /// <returns>ApiResponse of BatchDto</returns>
        ApiResponse<BatchDto> SetRemovalTimeAsyncHistoricDecisionInstanceWithHttpInfo(SetRemovalTimeToHistoricDecisionInstancesDto setRemovalTimeToHistoricDecisionInstancesDto = default(SetRemovalTimeToHistoricDecisionInstancesDto));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IHistoricDecisionInstanceApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Delete Async (POST)
        /// </summary>
        /// <remarks>
        /// Delete multiple historic decision instances asynchronously (batch). At least &#x60;historicDecisionInstanceIds&#x60; or &#x60;historicDecisionInstanceQuery&#x60;  has to be provided. If both are provided then all instances matching query  criterion and instances from the list will be deleted.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteHistoricDecisionInstancesDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchDto</returns>
        System.Threading.Tasks.Task<BatchDto> DeleteAsyncAsync(DeleteHistoricDecisionInstancesDto deleteHistoricDecisionInstancesDto = default(DeleteHistoricDecisionInstancesDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Async (POST)
        /// </summary>
        /// <remarks>
        /// Delete multiple historic decision instances asynchronously (batch). At least &#x60;historicDecisionInstanceIds&#x60; or &#x60;historicDecisionInstanceQuery&#x60;  has to be provided. If both are provided then all instances matching query  criterion and instances from the list will be deleted.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteHistoricDecisionInstancesDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<BatchDto>> DeleteAsyncWithHttpInfoAsync(DeleteHistoricDecisionInstancesDto deleteHistoricDecisionInstancesDto = default(DeleteHistoricDecisionInstancesDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Historic Decision Instance
        /// </summary>
        /// <remarks>
        /// Retrieves a historic decision instance by id, according to the  &#x60;HistoricDecisionInstance&#x60; interface in the engine.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the historic decision instance to be retrieved.</param>
        /// <param name="includeInputs">Include input values in the result. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="includeOutputs">Include output values in the result. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="disableBinaryFetching">Disables fetching of byte array input and output values. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="disableCustomObjectDeserialization">Disables deserialization of input and output values that are custom objects. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HistoricDecisionInstanceDto</returns>
        System.Threading.Tasks.Task<HistoricDecisionInstanceDto> GetHistoricDecisionInstanceAsync(string id, bool? includeInputs = default(bool?), bool? includeOutputs = default(bool?), bool? disableBinaryFetching = default(bool?), bool? disableCustomObjectDeserialization = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Historic Decision Instance
        /// </summary>
        /// <remarks>
        /// Retrieves a historic decision instance by id, according to the  &#x60;HistoricDecisionInstance&#x60; interface in the engine.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the historic decision instance to be retrieved.</param>
        /// <param name="includeInputs">Include input values in the result. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="includeOutputs">Include output values in the result. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="disableBinaryFetching">Disables fetching of byte array input and output values. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="disableCustomObjectDeserialization">Disables deserialization of input and output values that are custom objects. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HistoricDecisionInstanceDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<HistoricDecisionInstanceDto>> GetHistoricDecisionInstanceWithHttpInfoAsync(string id, bool? includeInputs = default(bool?), bool? includeOutputs = default(bool?), bool? disableBinaryFetching = default(bool?), bool? disableCustomObjectDeserialization = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Historic Decision Instances
        /// </summary>
        /// <remarks>
        /// Queries for historic decision instances that fulfill the given parameters.  The size of the result set can be retrieved by using the  [Get Historic Decision Instance Count](https://docs.camunda.org/manual/7.16/reference/rest/history/decision-instance/get-decision-instance-query-count/)  method.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="decisionInstanceId">Filter by decision instance id. (optional)</param>
        /// <param name="decisionInstanceIdIn">Filter by decision instance ids. Must be a comma-separated list of decision instance ids. (optional)</param>
        /// <param name="decisionDefinitionId">Filter by the decision definition the instances belongs to. (optional)</param>
        /// <param name="decisionDefinitionIdIn">Filter by the decision definitions the instances belongs to. Must be a comma-separated list of decision definition ids. (optional)</param>
        /// <param name="decisionDefinitionKey">Filter by the key of the decision definition the instances belongs to. (optional)</param>
        /// <param name="decisionDefinitionKeyIn">Filter by the keys of the decision definition the instances belongs to. Must be a comma- separated list of decision definition keys. (optional)</param>
        /// <param name="decisionDefinitionName">Filter by the name of the decision definition the instances belongs to. (optional)</param>
        /// <param name="decisionDefinitionNameLike">Filter by the name of the decision definition the instances belongs to, that the parameter is a substring of. (optional)</param>
        /// <param name="processDefinitionId">Filter by the process definition the instances belongs to. (optional)</param>
        /// <param name="processDefinitionKey">Filter by the key of the process definition the instances belongs to. (optional)</param>
        /// <param name="processInstanceId">Filter by the process instance the instances belongs to. (optional)</param>
        /// <param name="caseDefinitionId">Filter by the case definition the instances belongs to. (optional)</param>
        /// <param name="caseDefinitionKey">Filter by the key of the case definition the instances belongs to. (optional)</param>
        /// <param name="caseInstanceId">Filter by the case instance the instances belongs to. (optional)</param>
        /// <param name="activityIdIn">Filter by the activity ids the instances belongs to. Must be a comma-separated list of acitvity ids. (optional)</param>
        /// <param name="activityInstanceIdIn">Filter by the activity instance ids the instances belongs to. Must be a comma-separated list of acitvity instance ids. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. A historic decision instance must have one of the given tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include historic decision instances that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="evaluatedBefore">Restrict to instances that were evaluated before the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM- dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="evaluatedAfter">Restrict to instances that were evaluated after the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM- dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="userId">Restrict to instances that were evaluated by the given user. (optional)</param>
        /// <param name="rootDecisionInstanceId">Restrict to instances that have a given root decision instance id. This also includes the decision instance with the given id. (optional)</param>
        /// <param name="rootDecisionInstancesOnly">Restrict to instances those are the root decision instance of an evaluation. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="decisionRequirementsDefinitionId">Filter by the decision requirements definition the instances belongs to. (optional)</param>
        /// <param name="decisionRequirementsDefinitionKey">Filter by the key of the decision requirements definition the instances belongs to. (optional)</param>
        /// <param name="includeInputs">Include input values in the result. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="includeOutputs">Include output values in the result. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="disableBinaryFetching">Disables fetching of byte array input and output values. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="disableCustomObjectDeserialization">Disables deserialization of input and output values that are custom objects. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;HistoricDecisionInstanceDto&gt;</returns>
        System.Threading.Tasks.Task<List<HistoricDecisionInstanceDto>> GetHistoricDecisionInstancesAsync(string decisionInstanceId = default(string), string decisionInstanceIdIn = default(string), string decisionDefinitionId = default(string), string decisionDefinitionIdIn = default(string), string decisionDefinitionKey = default(string), string decisionDefinitionKeyIn = default(string), string decisionDefinitionName = default(string), string decisionDefinitionNameLike = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string processInstanceId = default(string), string caseDefinitionId = default(string), string caseDefinitionKey = default(string), string caseInstanceId = default(string), string activityIdIn = default(string), string activityInstanceIdIn = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), DateTime? evaluatedBefore = default(DateTime?), DateTime? evaluatedAfter = default(DateTime?), string userId = default(string), string rootDecisionInstanceId = default(string), bool? rootDecisionInstancesOnly = default(bool?), string decisionRequirementsDefinitionId = default(string), string decisionRequirementsDefinitionKey = default(string), bool? includeInputs = default(bool?), bool? includeOutputs = default(bool?), bool? disableBinaryFetching = default(bool?), bool? disableCustomObjectDeserialization = default(bool?), string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Historic Decision Instances
        /// </summary>
        /// <remarks>
        /// Queries for historic decision instances that fulfill the given parameters.  The size of the result set can be retrieved by using the  [Get Historic Decision Instance Count](https://docs.camunda.org/manual/7.16/reference/rest/history/decision-instance/get-decision-instance-query-count/)  method.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="decisionInstanceId">Filter by decision instance id. (optional)</param>
        /// <param name="decisionInstanceIdIn">Filter by decision instance ids. Must be a comma-separated list of decision instance ids. (optional)</param>
        /// <param name="decisionDefinitionId">Filter by the decision definition the instances belongs to. (optional)</param>
        /// <param name="decisionDefinitionIdIn">Filter by the decision definitions the instances belongs to. Must be a comma-separated list of decision definition ids. (optional)</param>
        /// <param name="decisionDefinitionKey">Filter by the key of the decision definition the instances belongs to. (optional)</param>
        /// <param name="decisionDefinitionKeyIn">Filter by the keys of the decision definition the instances belongs to. Must be a comma- separated list of decision definition keys. (optional)</param>
        /// <param name="decisionDefinitionName">Filter by the name of the decision definition the instances belongs to. (optional)</param>
        /// <param name="decisionDefinitionNameLike">Filter by the name of the decision definition the instances belongs to, that the parameter is a substring of. (optional)</param>
        /// <param name="processDefinitionId">Filter by the process definition the instances belongs to. (optional)</param>
        /// <param name="processDefinitionKey">Filter by the key of the process definition the instances belongs to. (optional)</param>
        /// <param name="processInstanceId">Filter by the process instance the instances belongs to. (optional)</param>
        /// <param name="caseDefinitionId">Filter by the case definition the instances belongs to. (optional)</param>
        /// <param name="caseDefinitionKey">Filter by the key of the case definition the instances belongs to. (optional)</param>
        /// <param name="caseInstanceId">Filter by the case instance the instances belongs to. (optional)</param>
        /// <param name="activityIdIn">Filter by the activity ids the instances belongs to. Must be a comma-separated list of acitvity ids. (optional)</param>
        /// <param name="activityInstanceIdIn">Filter by the activity instance ids the instances belongs to. Must be a comma-separated list of acitvity instance ids. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. A historic decision instance must have one of the given tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include historic decision instances that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="evaluatedBefore">Restrict to instances that were evaluated before the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM- dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="evaluatedAfter">Restrict to instances that were evaluated after the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM- dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="userId">Restrict to instances that were evaluated by the given user. (optional)</param>
        /// <param name="rootDecisionInstanceId">Restrict to instances that have a given root decision instance id. This also includes the decision instance with the given id. (optional)</param>
        /// <param name="rootDecisionInstancesOnly">Restrict to instances those are the root decision instance of an evaluation. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="decisionRequirementsDefinitionId">Filter by the decision requirements definition the instances belongs to. (optional)</param>
        /// <param name="decisionRequirementsDefinitionKey">Filter by the key of the decision requirements definition the instances belongs to. (optional)</param>
        /// <param name="includeInputs">Include input values in the result. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="includeOutputs">Include output values in the result. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="disableBinaryFetching">Disables fetching of byte array input and output values. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="disableCustomObjectDeserialization">Disables deserialization of input and output values that are custom objects. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;HistoricDecisionInstanceDto&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<HistoricDecisionInstanceDto>>> GetHistoricDecisionInstancesWithHttpInfoAsync(string decisionInstanceId = default(string), string decisionInstanceIdIn = default(string), string decisionDefinitionId = default(string), string decisionDefinitionIdIn = default(string), string decisionDefinitionKey = default(string), string decisionDefinitionKeyIn = default(string), string decisionDefinitionName = default(string), string decisionDefinitionNameLike = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string processInstanceId = default(string), string caseDefinitionId = default(string), string caseDefinitionKey = default(string), string caseInstanceId = default(string), string activityIdIn = default(string), string activityInstanceIdIn = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), DateTime? evaluatedBefore = default(DateTime?), DateTime? evaluatedAfter = default(DateTime?), string userId = default(string), string rootDecisionInstanceId = default(string), bool? rootDecisionInstancesOnly = default(bool?), string decisionRequirementsDefinitionId = default(string), string decisionRequirementsDefinitionKey = default(string), bool? includeInputs = default(bool?), bool? includeOutputs = default(bool?), bool? disableBinaryFetching = default(bool?), bool? disableCustomObjectDeserialization = default(bool?), string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Historic Decision Instance Count
        /// </summary>
        /// <remarks>
        /// Queries for the number of historic decision instances that fulfill the given parameters.  Takes the same parameters as the  [Get Historic Decision Instances](https://docs.camunda.org/manual/7.16/reference/rest/history/decision-instance/get-decision-instance-query/)  method.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="decisionInstanceId">Filter by decision instance id. (optional)</param>
        /// <param name="decisionInstanceIdIn">Filter by decision instance ids. Must be a comma-separated list of decision instance ids. (optional)</param>
        /// <param name="decisionDefinitionId">Filter by the decision definition the instances belongs to. (optional)</param>
        /// <param name="decisionDefinitionIdIn">Filter by the decision definitions the instances belongs to. Must be a comma-separated list of decision definition ids. (optional)</param>
        /// <param name="decisionDefinitionKey">Filter by the key of the decision definition the instances belongs to. (optional)</param>
        /// <param name="decisionDefinitionKeyIn">Filter by the keys of the decision definition the instances belongs to. Must be a comma- separated list of decision definition keys. (optional)</param>
        /// <param name="decisionDefinitionName">Filter by the name of the decision definition the instances belongs to. (optional)</param>
        /// <param name="decisionDefinitionNameLike">Filter by the name of the decision definition the instances belongs to, that the parameter is a substring of. (optional)</param>
        /// <param name="processDefinitionId">Filter by the process definition the instances belongs to. (optional)</param>
        /// <param name="processDefinitionKey">Filter by the key of the process definition the instances belongs to. (optional)</param>
        /// <param name="processInstanceId">Filter by the process instance the instances belongs to. (optional)</param>
        /// <param name="caseDefinitionId">Filter by the case definition the instances belongs to. (optional)</param>
        /// <param name="caseDefinitionKey">Filter by the key of the case definition the instances belongs to. (optional)</param>
        /// <param name="caseInstanceId">Filter by the case instance the instances belongs to. (optional)</param>
        /// <param name="activityIdIn">Filter by the activity ids the instances belongs to. Must be a comma-separated list of acitvity ids. (optional)</param>
        /// <param name="activityInstanceIdIn">Filter by the activity instance ids the instances belongs to. Must be a comma-separated list of acitvity instance ids. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. A historic decision instance must have one of the given tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include historic decision instances that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="evaluatedBefore">Restrict to instances that were evaluated before the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM- dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="evaluatedAfter">Restrict to instances that were evaluated after the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM- dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="userId">Restrict to instances that were evaluated by the given user. (optional)</param>
        /// <param name="rootDecisionInstanceId">Restrict to instances that have a given root decision instance id. This also includes the decision instance with the given id. (optional)</param>
        /// <param name="rootDecisionInstancesOnly">Restrict to instances those are the root decision instance of an evaluation. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="decisionRequirementsDefinitionId">Filter by the decision requirements definition the instances belongs to. (optional)</param>
        /// <param name="decisionRequirementsDefinitionKey">Filter by the key of the decision requirements definition the instances belongs to. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CountResultDto</returns>
        System.Threading.Tasks.Task<CountResultDto> GetHistoricDecisionInstancesCountAsync(string decisionInstanceId = default(string), string decisionInstanceIdIn = default(string), string decisionDefinitionId = default(string), string decisionDefinitionIdIn = default(string), string decisionDefinitionKey = default(string), string decisionDefinitionKeyIn = default(string), string decisionDefinitionName = default(string), string decisionDefinitionNameLike = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string processInstanceId = default(string), string caseDefinitionId = default(string), string caseDefinitionKey = default(string), string caseInstanceId = default(string), string activityIdIn = default(string), string activityInstanceIdIn = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), DateTime? evaluatedBefore = default(DateTime?), DateTime? evaluatedAfter = default(DateTime?), string userId = default(string), string rootDecisionInstanceId = default(string), bool? rootDecisionInstancesOnly = default(bool?), string decisionRequirementsDefinitionId = default(string), string decisionRequirementsDefinitionKey = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Historic Decision Instance Count
        /// </summary>
        /// <remarks>
        /// Queries for the number of historic decision instances that fulfill the given parameters.  Takes the same parameters as the  [Get Historic Decision Instances](https://docs.camunda.org/manual/7.16/reference/rest/history/decision-instance/get-decision-instance-query/)  method.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="decisionInstanceId">Filter by decision instance id. (optional)</param>
        /// <param name="decisionInstanceIdIn">Filter by decision instance ids. Must be a comma-separated list of decision instance ids. (optional)</param>
        /// <param name="decisionDefinitionId">Filter by the decision definition the instances belongs to. (optional)</param>
        /// <param name="decisionDefinitionIdIn">Filter by the decision definitions the instances belongs to. Must be a comma-separated list of decision definition ids. (optional)</param>
        /// <param name="decisionDefinitionKey">Filter by the key of the decision definition the instances belongs to. (optional)</param>
        /// <param name="decisionDefinitionKeyIn">Filter by the keys of the decision definition the instances belongs to. Must be a comma- separated list of decision definition keys. (optional)</param>
        /// <param name="decisionDefinitionName">Filter by the name of the decision definition the instances belongs to. (optional)</param>
        /// <param name="decisionDefinitionNameLike">Filter by the name of the decision definition the instances belongs to, that the parameter is a substring of. (optional)</param>
        /// <param name="processDefinitionId">Filter by the process definition the instances belongs to. (optional)</param>
        /// <param name="processDefinitionKey">Filter by the key of the process definition the instances belongs to. (optional)</param>
        /// <param name="processInstanceId">Filter by the process instance the instances belongs to. (optional)</param>
        /// <param name="caseDefinitionId">Filter by the case definition the instances belongs to. (optional)</param>
        /// <param name="caseDefinitionKey">Filter by the key of the case definition the instances belongs to. (optional)</param>
        /// <param name="caseInstanceId">Filter by the case instance the instances belongs to. (optional)</param>
        /// <param name="activityIdIn">Filter by the activity ids the instances belongs to. Must be a comma-separated list of acitvity ids. (optional)</param>
        /// <param name="activityInstanceIdIn">Filter by the activity instance ids the instances belongs to. Must be a comma-separated list of acitvity instance ids. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. A historic decision instance must have one of the given tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include historic decision instances that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="evaluatedBefore">Restrict to instances that were evaluated before the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM- dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="evaluatedAfter">Restrict to instances that were evaluated after the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM- dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="userId">Restrict to instances that were evaluated by the given user. (optional)</param>
        /// <param name="rootDecisionInstanceId">Restrict to instances that have a given root decision instance id. This also includes the decision instance with the given id. (optional)</param>
        /// <param name="rootDecisionInstancesOnly">Restrict to instances those are the root decision instance of an evaluation. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="decisionRequirementsDefinitionId">Filter by the decision requirements definition the instances belongs to. (optional)</param>
        /// <param name="decisionRequirementsDefinitionKey">Filter by the key of the decision requirements definition the instances belongs to. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CountResultDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<CountResultDto>> GetHistoricDecisionInstancesCountWithHttpInfoAsync(string decisionInstanceId = default(string), string decisionInstanceIdIn = default(string), string decisionDefinitionId = default(string), string decisionDefinitionIdIn = default(string), string decisionDefinitionKey = default(string), string decisionDefinitionKeyIn = default(string), string decisionDefinitionName = default(string), string decisionDefinitionNameLike = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string processInstanceId = default(string), string caseDefinitionId = default(string), string caseDefinitionKey = default(string), string caseInstanceId = default(string), string activityIdIn = default(string), string activityInstanceIdIn = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), DateTime? evaluatedBefore = default(DateTime?), DateTime? evaluatedAfter = default(DateTime?), string userId = default(string), string rootDecisionInstanceId = default(string), bool? rootDecisionInstancesOnly = default(bool?), string decisionRequirementsDefinitionId = default(string), string decisionRequirementsDefinitionKey = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Set Removal Time Async (POST)
        /// </summary>
        /// <remarks>
        /// Sets the removal time to multiple historic decision instances asynchronously (batch).  At least &#x60;historicDecisionInstanceIds&#x60; or &#x60;historicDecisionInstanceQuery&#x60; has to be provided. If both are provided, all instances matching query criterion and instances from the list will be updated with a removal time.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setRemovalTimeToHistoricDecisionInstancesDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchDto</returns>
        System.Threading.Tasks.Task<BatchDto> SetRemovalTimeAsyncHistoricDecisionInstanceAsync(SetRemovalTimeToHistoricDecisionInstancesDto setRemovalTimeToHistoricDecisionInstancesDto = default(SetRemovalTimeToHistoricDecisionInstancesDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Set Removal Time Async (POST)
        /// </summary>
        /// <remarks>
        /// Sets the removal time to multiple historic decision instances asynchronously (batch).  At least &#x60;historicDecisionInstanceIds&#x60; or &#x60;historicDecisionInstanceQuery&#x60; has to be provided. If both are provided, all instances matching query criterion and instances from the list will be updated with a removal time.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setRemovalTimeToHistoricDecisionInstancesDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<BatchDto>> SetRemovalTimeAsyncHistoricDecisionInstanceWithHttpInfoAsync(SetRemovalTimeToHistoricDecisionInstancesDto setRemovalTimeToHistoricDecisionInstancesDto = default(SetRemovalTimeToHistoricDecisionInstancesDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IHistoricDecisionInstanceApi : IHistoricDecisionInstanceApiSync, IHistoricDecisionInstanceApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class HistoricDecisionInstanceApi : IHistoricDecisionInstanceApi
    {
        private Camunda.OpenApi.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="HistoricDecisionInstanceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public HistoricDecisionInstanceApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="HistoricDecisionInstanceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public HistoricDecisionInstanceApi(String basePath)
        {
            this.Configuration = Camunda.OpenApi.Client.Client.Configuration.MergeConfigurations(
                Camunda.OpenApi.Client.Client.GlobalConfiguration.Instance,
                new Camunda.OpenApi.Client.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Camunda.OpenApi.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Camunda.OpenApi.Client.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Camunda.OpenApi.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="HistoricDecisionInstanceApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public HistoricDecisionInstanceApi(Camunda.OpenApi.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Camunda.OpenApi.Client.Client.Configuration.MergeConfigurations(
                Camunda.OpenApi.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Camunda.OpenApi.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Camunda.OpenApi.Client.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Camunda.OpenApi.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="HistoricDecisionInstanceApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public HistoricDecisionInstanceApi(Camunda.OpenApi.Client.Client.ISynchronousClient client, Camunda.OpenApi.Client.Client.IAsynchronousClient asyncClient, Camunda.OpenApi.Client.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Camunda.OpenApi.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Camunda.OpenApi.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Camunda.OpenApi.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Camunda.OpenApi.Client.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Camunda.OpenApi.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Delete Async (POST) Delete multiple historic decision instances asynchronously (batch). At least &#x60;historicDecisionInstanceIds&#x60; or &#x60;historicDecisionInstanceQuery&#x60;  has to be provided. If both are provided then all instances matching query  criterion and instances from the list will be deleted.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteHistoricDecisionInstancesDto"> (optional)</param>
        /// <returns>BatchDto</returns>
        public BatchDto DeleteAsync(DeleteHistoricDecisionInstancesDto deleteHistoricDecisionInstancesDto = default(DeleteHistoricDecisionInstancesDto))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<BatchDto> localVarResponse = DeleteAsyncWithHttpInfo(deleteHistoricDecisionInstancesDto);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Async (POST) Delete multiple historic decision instances asynchronously (batch). At least &#x60;historicDecisionInstanceIds&#x60; or &#x60;historicDecisionInstanceQuery&#x60;  has to be provided. If both are provided then all instances matching query  criterion and instances from the list will be deleted.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteHistoricDecisionInstancesDto"> (optional)</param>
        /// <returns>ApiResponse of BatchDto</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<BatchDto> DeleteAsyncWithHttpInfo(DeleteHistoricDecisionInstancesDto deleteHistoricDecisionInstancesDto = default(DeleteHistoricDecisionInstancesDto))
        {
            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = deleteHistoricDecisionInstancesDto;


            // make the HTTP request
            var localVarResponse = this.Client.Post<BatchDto>("/history/decision-instance/delete", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAsync", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Async (POST) Delete multiple historic decision instances asynchronously (batch). At least &#x60;historicDecisionInstanceIds&#x60; or &#x60;historicDecisionInstanceQuery&#x60;  has to be provided. If both are provided then all instances matching query  criterion and instances from the list will be deleted.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteHistoricDecisionInstancesDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchDto</returns>
        public async System.Threading.Tasks.Task<BatchDto> DeleteAsyncAsync(DeleteHistoricDecisionInstancesDto deleteHistoricDecisionInstancesDto = default(DeleteHistoricDecisionInstancesDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<BatchDto> localVarResponse = await DeleteAsyncWithHttpInfoAsync(deleteHistoricDecisionInstancesDto, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Async (POST) Delete multiple historic decision instances asynchronously (batch). At least &#x60;historicDecisionInstanceIds&#x60; or &#x60;historicDecisionInstanceQuery&#x60;  has to be provided. If both are provided then all instances matching query  criterion and instances from the list will be deleted.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteHistoricDecisionInstancesDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchDto)</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<BatchDto>> DeleteAsyncWithHttpInfoAsync(DeleteHistoricDecisionInstancesDto deleteHistoricDecisionInstancesDto = default(DeleteHistoricDecisionInstancesDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = deleteHistoricDecisionInstancesDto;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<BatchDto>("/history/decision-instance/delete", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAsync", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Historic Decision Instance Retrieves a historic decision instance by id, according to the  &#x60;HistoricDecisionInstance&#x60; interface in the engine.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the historic decision instance to be retrieved.</param>
        /// <param name="includeInputs">Include input values in the result. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="includeOutputs">Include output values in the result. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="disableBinaryFetching">Disables fetching of byte array input and output values. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="disableCustomObjectDeserialization">Disables deserialization of input and output values that are custom objects. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <returns>HistoricDecisionInstanceDto</returns>
        public HistoricDecisionInstanceDto GetHistoricDecisionInstance(string id, bool? includeInputs = default(bool?), bool? includeOutputs = default(bool?), bool? disableBinaryFetching = default(bool?), bool? disableCustomObjectDeserialization = default(bool?))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<HistoricDecisionInstanceDto> localVarResponse = GetHistoricDecisionInstanceWithHttpInfo(id, includeInputs, includeOutputs, disableBinaryFetching, disableCustomObjectDeserialization);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Historic Decision Instance Retrieves a historic decision instance by id, according to the  &#x60;HistoricDecisionInstance&#x60; interface in the engine.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the historic decision instance to be retrieved.</param>
        /// <param name="includeInputs">Include input values in the result. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="includeOutputs">Include output values in the result. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="disableBinaryFetching">Disables fetching of byte array input and output values. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="disableCustomObjectDeserialization">Disables deserialization of input and output values that are custom objects. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <returns>ApiResponse of HistoricDecisionInstanceDto</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<HistoricDecisionInstanceDto> GetHistoricDecisionInstanceWithHttpInfo(string id, bool? includeInputs = default(bool?), bool? includeOutputs = default(bool?), bool? disableBinaryFetching = default(bool?), bool? disableCustomObjectDeserialization = default(bool?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling HistoricDecisionInstanceApi->GetHistoricDecisionInstance");

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (includeInputs != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "includeInputs", includeInputs));
            }
            if (includeOutputs != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "includeOutputs", includeOutputs));
            }
            if (disableBinaryFetching != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "disableBinaryFetching", disableBinaryFetching));
            }
            if (disableCustomObjectDeserialization != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "disableCustomObjectDeserialization", disableCustomObjectDeserialization));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<HistoricDecisionInstanceDto>("/history/decision-instance/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetHistoricDecisionInstance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Historic Decision Instance Retrieves a historic decision instance by id, according to the  &#x60;HistoricDecisionInstance&#x60; interface in the engine.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the historic decision instance to be retrieved.</param>
        /// <param name="includeInputs">Include input values in the result. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="includeOutputs">Include output values in the result. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="disableBinaryFetching">Disables fetching of byte array input and output values. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="disableCustomObjectDeserialization">Disables deserialization of input and output values that are custom objects. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HistoricDecisionInstanceDto</returns>
        public async System.Threading.Tasks.Task<HistoricDecisionInstanceDto> GetHistoricDecisionInstanceAsync(string id, bool? includeInputs = default(bool?), bool? includeOutputs = default(bool?), bool? disableBinaryFetching = default(bool?), bool? disableCustomObjectDeserialization = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<HistoricDecisionInstanceDto> localVarResponse = await GetHistoricDecisionInstanceWithHttpInfoAsync(id, includeInputs, includeOutputs, disableBinaryFetching, disableCustomObjectDeserialization, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Historic Decision Instance Retrieves a historic decision instance by id, according to the  &#x60;HistoricDecisionInstance&#x60; interface in the engine.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the historic decision instance to be retrieved.</param>
        /// <param name="includeInputs">Include input values in the result. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="includeOutputs">Include output values in the result. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="disableBinaryFetching">Disables fetching of byte array input and output values. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="disableCustomObjectDeserialization">Disables deserialization of input and output values that are custom objects. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HistoricDecisionInstanceDto)</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<HistoricDecisionInstanceDto>> GetHistoricDecisionInstanceWithHttpInfoAsync(string id, bool? includeInputs = default(bool?), bool? includeOutputs = default(bool?), bool? disableBinaryFetching = default(bool?), bool? disableCustomObjectDeserialization = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling HistoricDecisionInstanceApi->GetHistoricDecisionInstance");


            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (includeInputs != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "includeInputs", includeInputs));
            }
            if (includeOutputs != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "includeOutputs", includeOutputs));
            }
            if (disableBinaryFetching != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "disableBinaryFetching", disableBinaryFetching));
            }
            if (disableCustomObjectDeserialization != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "disableCustomObjectDeserialization", disableCustomObjectDeserialization));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<HistoricDecisionInstanceDto>("/history/decision-instance/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetHistoricDecisionInstance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Historic Decision Instances Queries for historic decision instances that fulfill the given parameters.  The size of the result set can be retrieved by using the  [Get Historic Decision Instance Count](https://docs.camunda.org/manual/7.16/reference/rest/history/decision-instance/get-decision-instance-query-count/)  method.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="decisionInstanceId">Filter by decision instance id. (optional)</param>
        /// <param name="decisionInstanceIdIn">Filter by decision instance ids. Must be a comma-separated list of decision instance ids. (optional)</param>
        /// <param name="decisionDefinitionId">Filter by the decision definition the instances belongs to. (optional)</param>
        /// <param name="decisionDefinitionIdIn">Filter by the decision definitions the instances belongs to. Must be a comma-separated list of decision definition ids. (optional)</param>
        /// <param name="decisionDefinitionKey">Filter by the key of the decision definition the instances belongs to. (optional)</param>
        /// <param name="decisionDefinitionKeyIn">Filter by the keys of the decision definition the instances belongs to. Must be a comma- separated list of decision definition keys. (optional)</param>
        /// <param name="decisionDefinitionName">Filter by the name of the decision definition the instances belongs to. (optional)</param>
        /// <param name="decisionDefinitionNameLike">Filter by the name of the decision definition the instances belongs to, that the parameter is a substring of. (optional)</param>
        /// <param name="processDefinitionId">Filter by the process definition the instances belongs to. (optional)</param>
        /// <param name="processDefinitionKey">Filter by the key of the process definition the instances belongs to. (optional)</param>
        /// <param name="processInstanceId">Filter by the process instance the instances belongs to. (optional)</param>
        /// <param name="caseDefinitionId">Filter by the case definition the instances belongs to. (optional)</param>
        /// <param name="caseDefinitionKey">Filter by the key of the case definition the instances belongs to. (optional)</param>
        /// <param name="caseInstanceId">Filter by the case instance the instances belongs to. (optional)</param>
        /// <param name="activityIdIn">Filter by the activity ids the instances belongs to. Must be a comma-separated list of acitvity ids. (optional)</param>
        /// <param name="activityInstanceIdIn">Filter by the activity instance ids the instances belongs to. Must be a comma-separated list of acitvity instance ids. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. A historic decision instance must have one of the given tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include historic decision instances that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="evaluatedBefore">Restrict to instances that were evaluated before the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM- dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="evaluatedAfter">Restrict to instances that were evaluated after the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM- dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="userId">Restrict to instances that were evaluated by the given user. (optional)</param>
        /// <param name="rootDecisionInstanceId">Restrict to instances that have a given root decision instance id. This also includes the decision instance with the given id. (optional)</param>
        /// <param name="rootDecisionInstancesOnly">Restrict to instances those are the root decision instance of an evaluation. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="decisionRequirementsDefinitionId">Filter by the decision requirements definition the instances belongs to. (optional)</param>
        /// <param name="decisionRequirementsDefinitionKey">Filter by the key of the decision requirements definition the instances belongs to. (optional)</param>
        /// <param name="includeInputs">Include input values in the result. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="includeOutputs">Include output values in the result. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="disableBinaryFetching">Disables fetching of byte array input and output values. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="disableCustomObjectDeserialization">Disables deserialization of input and output values that are custom objects. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <returns>List&lt;HistoricDecisionInstanceDto&gt;</returns>
        public List<HistoricDecisionInstanceDto> GetHistoricDecisionInstances(string decisionInstanceId = default(string), string decisionInstanceIdIn = default(string), string decisionDefinitionId = default(string), string decisionDefinitionIdIn = default(string), string decisionDefinitionKey = default(string), string decisionDefinitionKeyIn = default(string), string decisionDefinitionName = default(string), string decisionDefinitionNameLike = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string processInstanceId = default(string), string caseDefinitionId = default(string), string caseDefinitionKey = default(string), string caseInstanceId = default(string), string activityIdIn = default(string), string activityInstanceIdIn = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), DateTime? evaluatedBefore = default(DateTime?), DateTime? evaluatedAfter = default(DateTime?), string userId = default(string), string rootDecisionInstanceId = default(string), bool? rootDecisionInstancesOnly = default(bool?), string decisionRequirementsDefinitionId = default(string), string decisionRequirementsDefinitionKey = default(string), bool? includeInputs = default(bool?), bool? includeOutputs = default(bool?), bool? disableBinaryFetching = default(bool?), bool? disableCustomObjectDeserialization = default(bool?), string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<List<HistoricDecisionInstanceDto>> localVarResponse = GetHistoricDecisionInstancesWithHttpInfo(decisionInstanceId, decisionInstanceIdIn, decisionDefinitionId, decisionDefinitionIdIn, decisionDefinitionKey, decisionDefinitionKeyIn, decisionDefinitionName, decisionDefinitionNameLike, processDefinitionId, processDefinitionKey, processInstanceId, caseDefinitionId, caseDefinitionKey, caseInstanceId, activityIdIn, activityInstanceIdIn, tenantIdIn, withoutTenantId, evaluatedBefore, evaluatedAfter, userId, rootDecisionInstanceId, rootDecisionInstancesOnly, decisionRequirementsDefinitionId, decisionRequirementsDefinitionKey, includeInputs, includeOutputs, disableBinaryFetching, disableCustomObjectDeserialization, sortBy, sortOrder, firstResult, maxResults);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Historic Decision Instances Queries for historic decision instances that fulfill the given parameters.  The size of the result set can be retrieved by using the  [Get Historic Decision Instance Count](https://docs.camunda.org/manual/7.16/reference/rest/history/decision-instance/get-decision-instance-query-count/)  method.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="decisionInstanceId">Filter by decision instance id. (optional)</param>
        /// <param name="decisionInstanceIdIn">Filter by decision instance ids. Must be a comma-separated list of decision instance ids. (optional)</param>
        /// <param name="decisionDefinitionId">Filter by the decision definition the instances belongs to. (optional)</param>
        /// <param name="decisionDefinitionIdIn">Filter by the decision definitions the instances belongs to. Must be a comma-separated list of decision definition ids. (optional)</param>
        /// <param name="decisionDefinitionKey">Filter by the key of the decision definition the instances belongs to. (optional)</param>
        /// <param name="decisionDefinitionKeyIn">Filter by the keys of the decision definition the instances belongs to. Must be a comma- separated list of decision definition keys. (optional)</param>
        /// <param name="decisionDefinitionName">Filter by the name of the decision definition the instances belongs to. (optional)</param>
        /// <param name="decisionDefinitionNameLike">Filter by the name of the decision definition the instances belongs to, that the parameter is a substring of. (optional)</param>
        /// <param name="processDefinitionId">Filter by the process definition the instances belongs to. (optional)</param>
        /// <param name="processDefinitionKey">Filter by the key of the process definition the instances belongs to. (optional)</param>
        /// <param name="processInstanceId">Filter by the process instance the instances belongs to. (optional)</param>
        /// <param name="caseDefinitionId">Filter by the case definition the instances belongs to. (optional)</param>
        /// <param name="caseDefinitionKey">Filter by the key of the case definition the instances belongs to. (optional)</param>
        /// <param name="caseInstanceId">Filter by the case instance the instances belongs to. (optional)</param>
        /// <param name="activityIdIn">Filter by the activity ids the instances belongs to. Must be a comma-separated list of acitvity ids. (optional)</param>
        /// <param name="activityInstanceIdIn">Filter by the activity instance ids the instances belongs to. Must be a comma-separated list of acitvity instance ids. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. A historic decision instance must have one of the given tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include historic decision instances that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="evaluatedBefore">Restrict to instances that were evaluated before the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM- dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="evaluatedAfter">Restrict to instances that were evaluated after the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM- dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="userId">Restrict to instances that were evaluated by the given user. (optional)</param>
        /// <param name="rootDecisionInstanceId">Restrict to instances that have a given root decision instance id. This also includes the decision instance with the given id. (optional)</param>
        /// <param name="rootDecisionInstancesOnly">Restrict to instances those are the root decision instance of an evaluation. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="decisionRequirementsDefinitionId">Filter by the decision requirements definition the instances belongs to. (optional)</param>
        /// <param name="decisionRequirementsDefinitionKey">Filter by the key of the decision requirements definition the instances belongs to. (optional)</param>
        /// <param name="includeInputs">Include input values in the result. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="includeOutputs">Include output values in the result. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="disableBinaryFetching">Disables fetching of byte array input and output values. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="disableCustomObjectDeserialization">Disables deserialization of input and output values that are custom objects. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <returns>ApiResponse of List&lt;HistoricDecisionInstanceDto&gt;</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<List<HistoricDecisionInstanceDto>> GetHistoricDecisionInstancesWithHttpInfo(string decisionInstanceId = default(string), string decisionInstanceIdIn = default(string), string decisionDefinitionId = default(string), string decisionDefinitionIdIn = default(string), string decisionDefinitionKey = default(string), string decisionDefinitionKeyIn = default(string), string decisionDefinitionName = default(string), string decisionDefinitionNameLike = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string processInstanceId = default(string), string caseDefinitionId = default(string), string caseDefinitionKey = default(string), string caseInstanceId = default(string), string activityIdIn = default(string), string activityInstanceIdIn = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), DateTime? evaluatedBefore = default(DateTime?), DateTime? evaluatedAfter = default(DateTime?), string userId = default(string), string rootDecisionInstanceId = default(string), bool? rootDecisionInstancesOnly = default(bool?), string decisionRequirementsDefinitionId = default(string), string decisionRequirementsDefinitionKey = default(string), bool? includeInputs = default(bool?), bool? includeOutputs = default(bool?), bool? disableBinaryFetching = default(bool?), bool? disableCustomObjectDeserialization = default(bool?), string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?))
        {
            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (decisionInstanceId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "decisionInstanceId", decisionInstanceId));
            }
            if (decisionInstanceIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "decisionInstanceIdIn", decisionInstanceIdIn));
            }
            if (decisionDefinitionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "decisionDefinitionId", decisionDefinitionId));
            }
            if (decisionDefinitionIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "decisionDefinitionIdIn", decisionDefinitionIdIn));
            }
            if (decisionDefinitionKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "decisionDefinitionKey", decisionDefinitionKey));
            }
            if (decisionDefinitionKeyIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "decisionDefinitionKeyIn", decisionDefinitionKeyIn));
            }
            if (decisionDefinitionName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "decisionDefinitionName", decisionDefinitionName));
            }
            if (decisionDefinitionNameLike != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "decisionDefinitionNameLike", decisionDefinitionNameLike));
            }
            if (processDefinitionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processDefinitionId", processDefinitionId));
            }
            if (processDefinitionKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processDefinitionKey", processDefinitionKey));
            }
            if (processInstanceId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processInstanceId", processInstanceId));
            }
            if (caseDefinitionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "caseDefinitionId", caseDefinitionId));
            }
            if (caseDefinitionKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "caseDefinitionKey", caseDefinitionKey));
            }
            if (caseInstanceId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "caseInstanceId", caseInstanceId));
            }
            if (activityIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "activityIdIn", activityIdIn));
            }
            if (activityInstanceIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "activityInstanceIdIn", activityInstanceIdIn));
            }
            if (tenantIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "tenantIdIn", tenantIdIn));
            }
            if (withoutTenantId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "withoutTenantId", withoutTenantId));
            }
            if (evaluatedBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "evaluatedBefore", evaluatedBefore));
            }
            if (evaluatedAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "evaluatedAfter", evaluatedAfter));
            }
            if (userId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "userId", userId));
            }
            if (rootDecisionInstanceId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "rootDecisionInstanceId", rootDecisionInstanceId));
            }
            if (rootDecisionInstancesOnly != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "rootDecisionInstancesOnly", rootDecisionInstancesOnly));
            }
            if (decisionRequirementsDefinitionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "decisionRequirementsDefinitionId", decisionRequirementsDefinitionId));
            }
            if (decisionRequirementsDefinitionKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "decisionRequirementsDefinitionKey", decisionRequirementsDefinitionKey));
            }
            if (includeInputs != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "includeInputs", includeInputs));
            }
            if (includeOutputs != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "includeOutputs", includeOutputs));
            }
            if (disableBinaryFetching != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "disableBinaryFetching", disableBinaryFetching));
            }
            if (disableCustomObjectDeserialization != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "disableCustomObjectDeserialization", disableCustomObjectDeserialization));
            }
            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "sortBy", sortBy));
            }
            if (sortOrder != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "sortOrder", sortOrder));
            }
            if (firstResult != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "firstResult", firstResult));
            }
            if (maxResults != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "maxResults", maxResults));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<HistoricDecisionInstanceDto>>("/history/decision-instance", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetHistoricDecisionInstances", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Historic Decision Instances Queries for historic decision instances that fulfill the given parameters.  The size of the result set can be retrieved by using the  [Get Historic Decision Instance Count](https://docs.camunda.org/manual/7.16/reference/rest/history/decision-instance/get-decision-instance-query-count/)  method.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="decisionInstanceId">Filter by decision instance id. (optional)</param>
        /// <param name="decisionInstanceIdIn">Filter by decision instance ids. Must be a comma-separated list of decision instance ids. (optional)</param>
        /// <param name="decisionDefinitionId">Filter by the decision definition the instances belongs to. (optional)</param>
        /// <param name="decisionDefinitionIdIn">Filter by the decision definitions the instances belongs to. Must be a comma-separated list of decision definition ids. (optional)</param>
        /// <param name="decisionDefinitionKey">Filter by the key of the decision definition the instances belongs to. (optional)</param>
        /// <param name="decisionDefinitionKeyIn">Filter by the keys of the decision definition the instances belongs to. Must be a comma- separated list of decision definition keys. (optional)</param>
        /// <param name="decisionDefinitionName">Filter by the name of the decision definition the instances belongs to. (optional)</param>
        /// <param name="decisionDefinitionNameLike">Filter by the name of the decision definition the instances belongs to, that the parameter is a substring of. (optional)</param>
        /// <param name="processDefinitionId">Filter by the process definition the instances belongs to. (optional)</param>
        /// <param name="processDefinitionKey">Filter by the key of the process definition the instances belongs to. (optional)</param>
        /// <param name="processInstanceId">Filter by the process instance the instances belongs to. (optional)</param>
        /// <param name="caseDefinitionId">Filter by the case definition the instances belongs to. (optional)</param>
        /// <param name="caseDefinitionKey">Filter by the key of the case definition the instances belongs to. (optional)</param>
        /// <param name="caseInstanceId">Filter by the case instance the instances belongs to. (optional)</param>
        /// <param name="activityIdIn">Filter by the activity ids the instances belongs to. Must be a comma-separated list of acitvity ids. (optional)</param>
        /// <param name="activityInstanceIdIn">Filter by the activity instance ids the instances belongs to. Must be a comma-separated list of acitvity instance ids. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. A historic decision instance must have one of the given tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include historic decision instances that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="evaluatedBefore">Restrict to instances that were evaluated before the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM- dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="evaluatedAfter">Restrict to instances that were evaluated after the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM- dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="userId">Restrict to instances that were evaluated by the given user. (optional)</param>
        /// <param name="rootDecisionInstanceId">Restrict to instances that have a given root decision instance id. This also includes the decision instance with the given id. (optional)</param>
        /// <param name="rootDecisionInstancesOnly">Restrict to instances those are the root decision instance of an evaluation. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="decisionRequirementsDefinitionId">Filter by the decision requirements definition the instances belongs to. (optional)</param>
        /// <param name="decisionRequirementsDefinitionKey">Filter by the key of the decision requirements definition the instances belongs to. (optional)</param>
        /// <param name="includeInputs">Include input values in the result. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="includeOutputs">Include output values in the result. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="disableBinaryFetching">Disables fetching of byte array input and output values. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="disableCustomObjectDeserialization">Disables deserialization of input and output values that are custom objects. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;HistoricDecisionInstanceDto&gt;</returns>
        public async System.Threading.Tasks.Task<List<HistoricDecisionInstanceDto>> GetHistoricDecisionInstancesAsync(string decisionInstanceId = default(string), string decisionInstanceIdIn = default(string), string decisionDefinitionId = default(string), string decisionDefinitionIdIn = default(string), string decisionDefinitionKey = default(string), string decisionDefinitionKeyIn = default(string), string decisionDefinitionName = default(string), string decisionDefinitionNameLike = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string processInstanceId = default(string), string caseDefinitionId = default(string), string caseDefinitionKey = default(string), string caseInstanceId = default(string), string activityIdIn = default(string), string activityInstanceIdIn = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), DateTime? evaluatedBefore = default(DateTime?), DateTime? evaluatedAfter = default(DateTime?), string userId = default(string), string rootDecisionInstanceId = default(string), bool? rootDecisionInstancesOnly = default(bool?), string decisionRequirementsDefinitionId = default(string), string decisionRequirementsDefinitionKey = default(string), bool? includeInputs = default(bool?), bool? includeOutputs = default(bool?), bool? disableBinaryFetching = default(bool?), bool? disableCustomObjectDeserialization = default(bool?), string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<List<HistoricDecisionInstanceDto>> localVarResponse = await GetHistoricDecisionInstancesWithHttpInfoAsync(decisionInstanceId, decisionInstanceIdIn, decisionDefinitionId, decisionDefinitionIdIn, decisionDefinitionKey, decisionDefinitionKeyIn, decisionDefinitionName, decisionDefinitionNameLike, processDefinitionId, processDefinitionKey, processInstanceId, caseDefinitionId, caseDefinitionKey, caseInstanceId, activityIdIn, activityInstanceIdIn, tenantIdIn, withoutTenantId, evaluatedBefore, evaluatedAfter, userId, rootDecisionInstanceId, rootDecisionInstancesOnly, decisionRequirementsDefinitionId, decisionRequirementsDefinitionKey, includeInputs, includeOutputs, disableBinaryFetching, disableCustomObjectDeserialization, sortBy, sortOrder, firstResult, maxResults, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Historic Decision Instances Queries for historic decision instances that fulfill the given parameters.  The size of the result set can be retrieved by using the  [Get Historic Decision Instance Count](https://docs.camunda.org/manual/7.16/reference/rest/history/decision-instance/get-decision-instance-query-count/)  method.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="decisionInstanceId">Filter by decision instance id. (optional)</param>
        /// <param name="decisionInstanceIdIn">Filter by decision instance ids. Must be a comma-separated list of decision instance ids. (optional)</param>
        /// <param name="decisionDefinitionId">Filter by the decision definition the instances belongs to. (optional)</param>
        /// <param name="decisionDefinitionIdIn">Filter by the decision definitions the instances belongs to. Must be a comma-separated list of decision definition ids. (optional)</param>
        /// <param name="decisionDefinitionKey">Filter by the key of the decision definition the instances belongs to. (optional)</param>
        /// <param name="decisionDefinitionKeyIn">Filter by the keys of the decision definition the instances belongs to. Must be a comma- separated list of decision definition keys. (optional)</param>
        /// <param name="decisionDefinitionName">Filter by the name of the decision definition the instances belongs to. (optional)</param>
        /// <param name="decisionDefinitionNameLike">Filter by the name of the decision definition the instances belongs to, that the parameter is a substring of. (optional)</param>
        /// <param name="processDefinitionId">Filter by the process definition the instances belongs to. (optional)</param>
        /// <param name="processDefinitionKey">Filter by the key of the process definition the instances belongs to. (optional)</param>
        /// <param name="processInstanceId">Filter by the process instance the instances belongs to. (optional)</param>
        /// <param name="caseDefinitionId">Filter by the case definition the instances belongs to. (optional)</param>
        /// <param name="caseDefinitionKey">Filter by the key of the case definition the instances belongs to. (optional)</param>
        /// <param name="caseInstanceId">Filter by the case instance the instances belongs to. (optional)</param>
        /// <param name="activityIdIn">Filter by the activity ids the instances belongs to. Must be a comma-separated list of acitvity ids. (optional)</param>
        /// <param name="activityInstanceIdIn">Filter by the activity instance ids the instances belongs to. Must be a comma-separated list of acitvity instance ids. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. A historic decision instance must have one of the given tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include historic decision instances that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="evaluatedBefore">Restrict to instances that were evaluated before the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM- dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="evaluatedAfter">Restrict to instances that were evaluated after the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM- dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="userId">Restrict to instances that were evaluated by the given user. (optional)</param>
        /// <param name="rootDecisionInstanceId">Restrict to instances that have a given root decision instance id. This also includes the decision instance with the given id. (optional)</param>
        /// <param name="rootDecisionInstancesOnly">Restrict to instances those are the root decision instance of an evaluation. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="decisionRequirementsDefinitionId">Filter by the decision requirements definition the instances belongs to. (optional)</param>
        /// <param name="decisionRequirementsDefinitionKey">Filter by the key of the decision requirements definition the instances belongs to. (optional)</param>
        /// <param name="includeInputs">Include input values in the result. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="includeOutputs">Include output values in the result. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="disableBinaryFetching">Disables fetching of byte array input and output values. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="disableCustomObjectDeserialization">Disables deserialization of input and output values that are custom objects. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;HistoricDecisionInstanceDto&gt;)</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<List<HistoricDecisionInstanceDto>>> GetHistoricDecisionInstancesWithHttpInfoAsync(string decisionInstanceId = default(string), string decisionInstanceIdIn = default(string), string decisionDefinitionId = default(string), string decisionDefinitionIdIn = default(string), string decisionDefinitionKey = default(string), string decisionDefinitionKeyIn = default(string), string decisionDefinitionName = default(string), string decisionDefinitionNameLike = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string processInstanceId = default(string), string caseDefinitionId = default(string), string caseDefinitionKey = default(string), string caseInstanceId = default(string), string activityIdIn = default(string), string activityInstanceIdIn = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), DateTime? evaluatedBefore = default(DateTime?), DateTime? evaluatedAfter = default(DateTime?), string userId = default(string), string rootDecisionInstanceId = default(string), bool? rootDecisionInstancesOnly = default(bool?), string decisionRequirementsDefinitionId = default(string), string decisionRequirementsDefinitionKey = default(string), bool? includeInputs = default(bool?), bool? includeOutputs = default(bool?), bool? disableBinaryFetching = default(bool?), bool? disableCustomObjectDeserialization = default(bool?), string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (decisionInstanceId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "decisionInstanceId", decisionInstanceId));
            }
            if (decisionInstanceIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "decisionInstanceIdIn", decisionInstanceIdIn));
            }
            if (decisionDefinitionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "decisionDefinitionId", decisionDefinitionId));
            }
            if (decisionDefinitionIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "decisionDefinitionIdIn", decisionDefinitionIdIn));
            }
            if (decisionDefinitionKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "decisionDefinitionKey", decisionDefinitionKey));
            }
            if (decisionDefinitionKeyIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "decisionDefinitionKeyIn", decisionDefinitionKeyIn));
            }
            if (decisionDefinitionName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "decisionDefinitionName", decisionDefinitionName));
            }
            if (decisionDefinitionNameLike != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "decisionDefinitionNameLike", decisionDefinitionNameLike));
            }
            if (processDefinitionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processDefinitionId", processDefinitionId));
            }
            if (processDefinitionKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processDefinitionKey", processDefinitionKey));
            }
            if (processInstanceId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processInstanceId", processInstanceId));
            }
            if (caseDefinitionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "caseDefinitionId", caseDefinitionId));
            }
            if (caseDefinitionKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "caseDefinitionKey", caseDefinitionKey));
            }
            if (caseInstanceId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "caseInstanceId", caseInstanceId));
            }
            if (activityIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "activityIdIn", activityIdIn));
            }
            if (activityInstanceIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "activityInstanceIdIn", activityInstanceIdIn));
            }
            if (tenantIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "tenantIdIn", tenantIdIn));
            }
            if (withoutTenantId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "withoutTenantId", withoutTenantId));
            }
            if (evaluatedBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "evaluatedBefore", evaluatedBefore));
            }
            if (evaluatedAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "evaluatedAfter", evaluatedAfter));
            }
            if (userId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "userId", userId));
            }
            if (rootDecisionInstanceId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "rootDecisionInstanceId", rootDecisionInstanceId));
            }
            if (rootDecisionInstancesOnly != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "rootDecisionInstancesOnly", rootDecisionInstancesOnly));
            }
            if (decisionRequirementsDefinitionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "decisionRequirementsDefinitionId", decisionRequirementsDefinitionId));
            }
            if (decisionRequirementsDefinitionKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "decisionRequirementsDefinitionKey", decisionRequirementsDefinitionKey));
            }
            if (includeInputs != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "includeInputs", includeInputs));
            }
            if (includeOutputs != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "includeOutputs", includeOutputs));
            }
            if (disableBinaryFetching != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "disableBinaryFetching", disableBinaryFetching));
            }
            if (disableCustomObjectDeserialization != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "disableCustomObjectDeserialization", disableCustomObjectDeserialization));
            }
            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "sortBy", sortBy));
            }
            if (sortOrder != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "sortOrder", sortOrder));
            }
            if (firstResult != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "firstResult", firstResult));
            }
            if (maxResults != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "maxResults", maxResults));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<HistoricDecisionInstanceDto>>("/history/decision-instance", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetHistoricDecisionInstances", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Historic Decision Instance Count Queries for the number of historic decision instances that fulfill the given parameters.  Takes the same parameters as the  [Get Historic Decision Instances](https://docs.camunda.org/manual/7.16/reference/rest/history/decision-instance/get-decision-instance-query/)  method.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="decisionInstanceId">Filter by decision instance id. (optional)</param>
        /// <param name="decisionInstanceIdIn">Filter by decision instance ids. Must be a comma-separated list of decision instance ids. (optional)</param>
        /// <param name="decisionDefinitionId">Filter by the decision definition the instances belongs to. (optional)</param>
        /// <param name="decisionDefinitionIdIn">Filter by the decision definitions the instances belongs to. Must be a comma-separated list of decision definition ids. (optional)</param>
        /// <param name="decisionDefinitionKey">Filter by the key of the decision definition the instances belongs to. (optional)</param>
        /// <param name="decisionDefinitionKeyIn">Filter by the keys of the decision definition the instances belongs to. Must be a comma- separated list of decision definition keys. (optional)</param>
        /// <param name="decisionDefinitionName">Filter by the name of the decision definition the instances belongs to. (optional)</param>
        /// <param name="decisionDefinitionNameLike">Filter by the name of the decision definition the instances belongs to, that the parameter is a substring of. (optional)</param>
        /// <param name="processDefinitionId">Filter by the process definition the instances belongs to. (optional)</param>
        /// <param name="processDefinitionKey">Filter by the key of the process definition the instances belongs to. (optional)</param>
        /// <param name="processInstanceId">Filter by the process instance the instances belongs to. (optional)</param>
        /// <param name="caseDefinitionId">Filter by the case definition the instances belongs to. (optional)</param>
        /// <param name="caseDefinitionKey">Filter by the key of the case definition the instances belongs to. (optional)</param>
        /// <param name="caseInstanceId">Filter by the case instance the instances belongs to. (optional)</param>
        /// <param name="activityIdIn">Filter by the activity ids the instances belongs to. Must be a comma-separated list of acitvity ids. (optional)</param>
        /// <param name="activityInstanceIdIn">Filter by the activity instance ids the instances belongs to. Must be a comma-separated list of acitvity instance ids. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. A historic decision instance must have one of the given tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include historic decision instances that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="evaluatedBefore">Restrict to instances that were evaluated before the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM- dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="evaluatedAfter">Restrict to instances that were evaluated after the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM- dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="userId">Restrict to instances that were evaluated by the given user. (optional)</param>
        /// <param name="rootDecisionInstanceId">Restrict to instances that have a given root decision instance id. This also includes the decision instance with the given id. (optional)</param>
        /// <param name="rootDecisionInstancesOnly">Restrict to instances those are the root decision instance of an evaluation. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="decisionRequirementsDefinitionId">Filter by the decision requirements definition the instances belongs to. (optional)</param>
        /// <param name="decisionRequirementsDefinitionKey">Filter by the key of the decision requirements definition the instances belongs to. (optional)</param>
        /// <returns>CountResultDto</returns>
        public CountResultDto GetHistoricDecisionInstancesCount(string decisionInstanceId = default(string), string decisionInstanceIdIn = default(string), string decisionDefinitionId = default(string), string decisionDefinitionIdIn = default(string), string decisionDefinitionKey = default(string), string decisionDefinitionKeyIn = default(string), string decisionDefinitionName = default(string), string decisionDefinitionNameLike = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string processInstanceId = default(string), string caseDefinitionId = default(string), string caseDefinitionKey = default(string), string caseInstanceId = default(string), string activityIdIn = default(string), string activityInstanceIdIn = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), DateTime? evaluatedBefore = default(DateTime?), DateTime? evaluatedAfter = default(DateTime?), string userId = default(string), string rootDecisionInstanceId = default(string), bool? rootDecisionInstancesOnly = default(bool?), string decisionRequirementsDefinitionId = default(string), string decisionRequirementsDefinitionKey = default(string))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<CountResultDto> localVarResponse = GetHistoricDecisionInstancesCountWithHttpInfo(decisionInstanceId, decisionInstanceIdIn, decisionDefinitionId, decisionDefinitionIdIn, decisionDefinitionKey, decisionDefinitionKeyIn, decisionDefinitionName, decisionDefinitionNameLike, processDefinitionId, processDefinitionKey, processInstanceId, caseDefinitionId, caseDefinitionKey, caseInstanceId, activityIdIn, activityInstanceIdIn, tenantIdIn, withoutTenantId, evaluatedBefore, evaluatedAfter, userId, rootDecisionInstanceId, rootDecisionInstancesOnly, decisionRequirementsDefinitionId, decisionRequirementsDefinitionKey);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Historic Decision Instance Count Queries for the number of historic decision instances that fulfill the given parameters.  Takes the same parameters as the  [Get Historic Decision Instances](https://docs.camunda.org/manual/7.16/reference/rest/history/decision-instance/get-decision-instance-query/)  method.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="decisionInstanceId">Filter by decision instance id. (optional)</param>
        /// <param name="decisionInstanceIdIn">Filter by decision instance ids. Must be a comma-separated list of decision instance ids. (optional)</param>
        /// <param name="decisionDefinitionId">Filter by the decision definition the instances belongs to. (optional)</param>
        /// <param name="decisionDefinitionIdIn">Filter by the decision definitions the instances belongs to. Must be a comma-separated list of decision definition ids. (optional)</param>
        /// <param name="decisionDefinitionKey">Filter by the key of the decision definition the instances belongs to. (optional)</param>
        /// <param name="decisionDefinitionKeyIn">Filter by the keys of the decision definition the instances belongs to. Must be a comma- separated list of decision definition keys. (optional)</param>
        /// <param name="decisionDefinitionName">Filter by the name of the decision definition the instances belongs to. (optional)</param>
        /// <param name="decisionDefinitionNameLike">Filter by the name of the decision definition the instances belongs to, that the parameter is a substring of. (optional)</param>
        /// <param name="processDefinitionId">Filter by the process definition the instances belongs to. (optional)</param>
        /// <param name="processDefinitionKey">Filter by the key of the process definition the instances belongs to. (optional)</param>
        /// <param name="processInstanceId">Filter by the process instance the instances belongs to. (optional)</param>
        /// <param name="caseDefinitionId">Filter by the case definition the instances belongs to. (optional)</param>
        /// <param name="caseDefinitionKey">Filter by the key of the case definition the instances belongs to. (optional)</param>
        /// <param name="caseInstanceId">Filter by the case instance the instances belongs to. (optional)</param>
        /// <param name="activityIdIn">Filter by the activity ids the instances belongs to. Must be a comma-separated list of acitvity ids. (optional)</param>
        /// <param name="activityInstanceIdIn">Filter by the activity instance ids the instances belongs to. Must be a comma-separated list of acitvity instance ids. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. A historic decision instance must have one of the given tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include historic decision instances that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="evaluatedBefore">Restrict to instances that were evaluated before the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM- dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="evaluatedAfter">Restrict to instances that were evaluated after the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM- dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="userId">Restrict to instances that were evaluated by the given user. (optional)</param>
        /// <param name="rootDecisionInstanceId">Restrict to instances that have a given root decision instance id. This also includes the decision instance with the given id. (optional)</param>
        /// <param name="rootDecisionInstancesOnly">Restrict to instances those are the root decision instance of an evaluation. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="decisionRequirementsDefinitionId">Filter by the decision requirements definition the instances belongs to. (optional)</param>
        /// <param name="decisionRequirementsDefinitionKey">Filter by the key of the decision requirements definition the instances belongs to. (optional)</param>
        /// <returns>ApiResponse of CountResultDto</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<CountResultDto> GetHistoricDecisionInstancesCountWithHttpInfo(string decisionInstanceId = default(string), string decisionInstanceIdIn = default(string), string decisionDefinitionId = default(string), string decisionDefinitionIdIn = default(string), string decisionDefinitionKey = default(string), string decisionDefinitionKeyIn = default(string), string decisionDefinitionName = default(string), string decisionDefinitionNameLike = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string processInstanceId = default(string), string caseDefinitionId = default(string), string caseDefinitionKey = default(string), string caseInstanceId = default(string), string activityIdIn = default(string), string activityInstanceIdIn = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), DateTime? evaluatedBefore = default(DateTime?), DateTime? evaluatedAfter = default(DateTime?), string userId = default(string), string rootDecisionInstanceId = default(string), bool? rootDecisionInstancesOnly = default(bool?), string decisionRequirementsDefinitionId = default(string), string decisionRequirementsDefinitionKey = default(string))
        {
            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (decisionInstanceId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "decisionInstanceId", decisionInstanceId));
            }
            if (decisionInstanceIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "decisionInstanceIdIn", decisionInstanceIdIn));
            }
            if (decisionDefinitionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "decisionDefinitionId", decisionDefinitionId));
            }
            if (decisionDefinitionIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "decisionDefinitionIdIn", decisionDefinitionIdIn));
            }
            if (decisionDefinitionKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "decisionDefinitionKey", decisionDefinitionKey));
            }
            if (decisionDefinitionKeyIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "decisionDefinitionKeyIn", decisionDefinitionKeyIn));
            }
            if (decisionDefinitionName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "decisionDefinitionName", decisionDefinitionName));
            }
            if (decisionDefinitionNameLike != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "decisionDefinitionNameLike", decisionDefinitionNameLike));
            }
            if (processDefinitionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processDefinitionId", processDefinitionId));
            }
            if (processDefinitionKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processDefinitionKey", processDefinitionKey));
            }
            if (processInstanceId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processInstanceId", processInstanceId));
            }
            if (caseDefinitionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "caseDefinitionId", caseDefinitionId));
            }
            if (caseDefinitionKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "caseDefinitionKey", caseDefinitionKey));
            }
            if (caseInstanceId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "caseInstanceId", caseInstanceId));
            }
            if (activityIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "activityIdIn", activityIdIn));
            }
            if (activityInstanceIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "activityInstanceIdIn", activityInstanceIdIn));
            }
            if (tenantIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "tenantIdIn", tenantIdIn));
            }
            if (withoutTenantId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "withoutTenantId", withoutTenantId));
            }
            if (evaluatedBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "evaluatedBefore", evaluatedBefore));
            }
            if (evaluatedAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "evaluatedAfter", evaluatedAfter));
            }
            if (userId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "userId", userId));
            }
            if (rootDecisionInstanceId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "rootDecisionInstanceId", rootDecisionInstanceId));
            }
            if (rootDecisionInstancesOnly != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "rootDecisionInstancesOnly", rootDecisionInstancesOnly));
            }
            if (decisionRequirementsDefinitionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "decisionRequirementsDefinitionId", decisionRequirementsDefinitionId));
            }
            if (decisionRequirementsDefinitionKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "decisionRequirementsDefinitionKey", decisionRequirementsDefinitionKey));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<CountResultDto>("/history/decision-instance/count", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetHistoricDecisionInstancesCount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Historic Decision Instance Count Queries for the number of historic decision instances that fulfill the given parameters.  Takes the same parameters as the  [Get Historic Decision Instances](https://docs.camunda.org/manual/7.16/reference/rest/history/decision-instance/get-decision-instance-query/)  method.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="decisionInstanceId">Filter by decision instance id. (optional)</param>
        /// <param name="decisionInstanceIdIn">Filter by decision instance ids. Must be a comma-separated list of decision instance ids. (optional)</param>
        /// <param name="decisionDefinitionId">Filter by the decision definition the instances belongs to. (optional)</param>
        /// <param name="decisionDefinitionIdIn">Filter by the decision definitions the instances belongs to. Must be a comma-separated list of decision definition ids. (optional)</param>
        /// <param name="decisionDefinitionKey">Filter by the key of the decision definition the instances belongs to. (optional)</param>
        /// <param name="decisionDefinitionKeyIn">Filter by the keys of the decision definition the instances belongs to. Must be a comma- separated list of decision definition keys. (optional)</param>
        /// <param name="decisionDefinitionName">Filter by the name of the decision definition the instances belongs to. (optional)</param>
        /// <param name="decisionDefinitionNameLike">Filter by the name of the decision definition the instances belongs to, that the parameter is a substring of. (optional)</param>
        /// <param name="processDefinitionId">Filter by the process definition the instances belongs to. (optional)</param>
        /// <param name="processDefinitionKey">Filter by the key of the process definition the instances belongs to. (optional)</param>
        /// <param name="processInstanceId">Filter by the process instance the instances belongs to. (optional)</param>
        /// <param name="caseDefinitionId">Filter by the case definition the instances belongs to. (optional)</param>
        /// <param name="caseDefinitionKey">Filter by the key of the case definition the instances belongs to. (optional)</param>
        /// <param name="caseInstanceId">Filter by the case instance the instances belongs to. (optional)</param>
        /// <param name="activityIdIn">Filter by the activity ids the instances belongs to. Must be a comma-separated list of acitvity ids. (optional)</param>
        /// <param name="activityInstanceIdIn">Filter by the activity instance ids the instances belongs to. Must be a comma-separated list of acitvity instance ids. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. A historic decision instance must have one of the given tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include historic decision instances that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="evaluatedBefore">Restrict to instances that were evaluated before the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM- dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="evaluatedAfter">Restrict to instances that were evaluated after the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM- dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="userId">Restrict to instances that were evaluated by the given user. (optional)</param>
        /// <param name="rootDecisionInstanceId">Restrict to instances that have a given root decision instance id. This also includes the decision instance with the given id. (optional)</param>
        /// <param name="rootDecisionInstancesOnly">Restrict to instances those are the root decision instance of an evaluation. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="decisionRequirementsDefinitionId">Filter by the decision requirements definition the instances belongs to. (optional)</param>
        /// <param name="decisionRequirementsDefinitionKey">Filter by the key of the decision requirements definition the instances belongs to. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CountResultDto</returns>
        public async System.Threading.Tasks.Task<CountResultDto> GetHistoricDecisionInstancesCountAsync(string decisionInstanceId = default(string), string decisionInstanceIdIn = default(string), string decisionDefinitionId = default(string), string decisionDefinitionIdIn = default(string), string decisionDefinitionKey = default(string), string decisionDefinitionKeyIn = default(string), string decisionDefinitionName = default(string), string decisionDefinitionNameLike = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string processInstanceId = default(string), string caseDefinitionId = default(string), string caseDefinitionKey = default(string), string caseInstanceId = default(string), string activityIdIn = default(string), string activityInstanceIdIn = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), DateTime? evaluatedBefore = default(DateTime?), DateTime? evaluatedAfter = default(DateTime?), string userId = default(string), string rootDecisionInstanceId = default(string), bool? rootDecisionInstancesOnly = default(bool?), string decisionRequirementsDefinitionId = default(string), string decisionRequirementsDefinitionKey = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<CountResultDto> localVarResponse = await GetHistoricDecisionInstancesCountWithHttpInfoAsync(decisionInstanceId, decisionInstanceIdIn, decisionDefinitionId, decisionDefinitionIdIn, decisionDefinitionKey, decisionDefinitionKeyIn, decisionDefinitionName, decisionDefinitionNameLike, processDefinitionId, processDefinitionKey, processInstanceId, caseDefinitionId, caseDefinitionKey, caseInstanceId, activityIdIn, activityInstanceIdIn, tenantIdIn, withoutTenantId, evaluatedBefore, evaluatedAfter, userId, rootDecisionInstanceId, rootDecisionInstancesOnly, decisionRequirementsDefinitionId, decisionRequirementsDefinitionKey, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Historic Decision Instance Count Queries for the number of historic decision instances that fulfill the given parameters.  Takes the same parameters as the  [Get Historic Decision Instances](https://docs.camunda.org/manual/7.16/reference/rest/history/decision-instance/get-decision-instance-query/)  method.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="decisionInstanceId">Filter by decision instance id. (optional)</param>
        /// <param name="decisionInstanceIdIn">Filter by decision instance ids. Must be a comma-separated list of decision instance ids. (optional)</param>
        /// <param name="decisionDefinitionId">Filter by the decision definition the instances belongs to. (optional)</param>
        /// <param name="decisionDefinitionIdIn">Filter by the decision definitions the instances belongs to. Must be a comma-separated list of decision definition ids. (optional)</param>
        /// <param name="decisionDefinitionKey">Filter by the key of the decision definition the instances belongs to. (optional)</param>
        /// <param name="decisionDefinitionKeyIn">Filter by the keys of the decision definition the instances belongs to. Must be a comma- separated list of decision definition keys. (optional)</param>
        /// <param name="decisionDefinitionName">Filter by the name of the decision definition the instances belongs to. (optional)</param>
        /// <param name="decisionDefinitionNameLike">Filter by the name of the decision definition the instances belongs to, that the parameter is a substring of. (optional)</param>
        /// <param name="processDefinitionId">Filter by the process definition the instances belongs to. (optional)</param>
        /// <param name="processDefinitionKey">Filter by the key of the process definition the instances belongs to. (optional)</param>
        /// <param name="processInstanceId">Filter by the process instance the instances belongs to. (optional)</param>
        /// <param name="caseDefinitionId">Filter by the case definition the instances belongs to. (optional)</param>
        /// <param name="caseDefinitionKey">Filter by the key of the case definition the instances belongs to. (optional)</param>
        /// <param name="caseInstanceId">Filter by the case instance the instances belongs to. (optional)</param>
        /// <param name="activityIdIn">Filter by the activity ids the instances belongs to. Must be a comma-separated list of acitvity ids. (optional)</param>
        /// <param name="activityInstanceIdIn">Filter by the activity instance ids the instances belongs to. Must be a comma-separated list of acitvity instance ids. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. A historic decision instance must have one of the given tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include historic decision instances that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="evaluatedBefore">Restrict to instances that were evaluated before the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM- dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="evaluatedAfter">Restrict to instances that were evaluated after the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM- dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="userId">Restrict to instances that were evaluated by the given user. (optional)</param>
        /// <param name="rootDecisionInstanceId">Restrict to instances that have a given root decision instance id. This also includes the decision instance with the given id. (optional)</param>
        /// <param name="rootDecisionInstancesOnly">Restrict to instances those are the root decision instance of an evaluation. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="decisionRequirementsDefinitionId">Filter by the decision requirements definition the instances belongs to. (optional)</param>
        /// <param name="decisionRequirementsDefinitionKey">Filter by the key of the decision requirements definition the instances belongs to. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CountResultDto)</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<CountResultDto>> GetHistoricDecisionInstancesCountWithHttpInfoAsync(string decisionInstanceId = default(string), string decisionInstanceIdIn = default(string), string decisionDefinitionId = default(string), string decisionDefinitionIdIn = default(string), string decisionDefinitionKey = default(string), string decisionDefinitionKeyIn = default(string), string decisionDefinitionName = default(string), string decisionDefinitionNameLike = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string processInstanceId = default(string), string caseDefinitionId = default(string), string caseDefinitionKey = default(string), string caseInstanceId = default(string), string activityIdIn = default(string), string activityInstanceIdIn = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), DateTime? evaluatedBefore = default(DateTime?), DateTime? evaluatedAfter = default(DateTime?), string userId = default(string), string rootDecisionInstanceId = default(string), bool? rootDecisionInstancesOnly = default(bool?), string decisionRequirementsDefinitionId = default(string), string decisionRequirementsDefinitionKey = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (decisionInstanceId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "decisionInstanceId", decisionInstanceId));
            }
            if (decisionInstanceIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "decisionInstanceIdIn", decisionInstanceIdIn));
            }
            if (decisionDefinitionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "decisionDefinitionId", decisionDefinitionId));
            }
            if (decisionDefinitionIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "decisionDefinitionIdIn", decisionDefinitionIdIn));
            }
            if (decisionDefinitionKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "decisionDefinitionKey", decisionDefinitionKey));
            }
            if (decisionDefinitionKeyIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "decisionDefinitionKeyIn", decisionDefinitionKeyIn));
            }
            if (decisionDefinitionName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "decisionDefinitionName", decisionDefinitionName));
            }
            if (decisionDefinitionNameLike != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "decisionDefinitionNameLike", decisionDefinitionNameLike));
            }
            if (processDefinitionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processDefinitionId", processDefinitionId));
            }
            if (processDefinitionKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processDefinitionKey", processDefinitionKey));
            }
            if (processInstanceId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processInstanceId", processInstanceId));
            }
            if (caseDefinitionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "caseDefinitionId", caseDefinitionId));
            }
            if (caseDefinitionKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "caseDefinitionKey", caseDefinitionKey));
            }
            if (caseInstanceId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "caseInstanceId", caseInstanceId));
            }
            if (activityIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "activityIdIn", activityIdIn));
            }
            if (activityInstanceIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "activityInstanceIdIn", activityInstanceIdIn));
            }
            if (tenantIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "tenantIdIn", tenantIdIn));
            }
            if (withoutTenantId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "withoutTenantId", withoutTenantId));
            }
            if (evaluatedBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "evaluatedBefore", evaluatedBefore));
            }
            if (evaluatedAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "evaluatedAfter", evaluatedAfter));
            }
            if (userId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "userId", userId));
            }
            if (rootDecisionInstanceId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "rootDecisionInstanceId", rootDecisionInstanceId));
            }
            if (rootDecisionInstancesOnly != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "rootDecisionInstancesOnly", rootDecisionInstancesOnly));
            }
            if (decisionRequirementsDefinitionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "decisionRequirementsDefinitionId", decisionRequirementsDefinitionId));
            }
            if (decisionRequirementsDefinitionKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "decisionRequirementsDefinitionKey", decisionRequirementsDefinitionKey));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<CountResultDto>("/history/decision-instance/count", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetHistoricDecisionInstancesCount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set Removal Time Async (POST) Sets the removal time to multiple historic decision instances asynchronously (batch).  At least &#x60;historicDecisionInstanceIds&#x60; or &#x60;historicDecisionInstanceQuery&#x60; has to be provided. If both are provided, all instances matching query criterion and instances from the list will be updated with a removal time.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setRemovalTimeToHistoricDecisionInstancesDto"> (optional)</param>
        /// <returns>BatchDto</returns>
        public BatchDto SetRemovalTimeAsyncHistoricDecisionInstance(SetRemovalTimeToHistoricDecisionInstancesDto setRemovalTimeToHistoricDecisionInstancesDto = default(SetRemovalTimeToHistoricDecisionInstancesDto))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<BatchDto> localVarResponse = SetRemovalTimeAsyncHistoricDecisionInstanceWithHttpInfo(setRemovalTimeToHistoricDecisionInstancesDto);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Set Removal Time Async (POST) Sets the removal time to multiple historic decision instances asynchronously (batch).  At least &#x60;historicDecisionInstanceIds&#x60; or &#x60;historicDecisionInstanceQuery&#x60; has to be provided. If both are provided, all instances matching query criterion and instances from the list will be updated with a removal time.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setRemovalTimeToHistoricDecisionInstancesDto"> (optional)</param>
        /// <returns>ApiResponse of BatchDto</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<BatchDto> SetRemovalTimeAsyncHistoricDecisionInstanceWithHttpInfo(SetRemovalTimeToHistoricDecisionInstancesDto setRemovalTimeToHistoricDecisionInstancesDto = default(SetRemovalTimeToHistoricDecisionInstancesDto))
        {
            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = setRemovalTimeToHistoricDecisionInstancesDto;


            // make the HTTP request
            var localVarResponse = this.Client.Post<BatchDto>("/history/decision-instance/set-removal-time", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetRemovalTimeAsyncHistoricDecisionInstance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set Removal Time Async (POST) Sets the removal time to multiple historic decision instances asynchronously (batch).  At least &#x60;historicDecisionInstanceIds&#x60; or &#x60;historicDecisionInstanceQuery&#x60; has to be provided. If both are provided, all instances matching query criterion and instances from the list will be updated with a removal time.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setRemovalTimeToHistoricDecisionInstancesDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchDto</returns>
        public async System.Threading.Tasks.Task<BatchDto> SetRemovalTimeAsyncHistoricDecisionInstanceAsync(SetRemovalTimeToHistoricDecisionInstancesDto setRemovalTimeToHistoricDecisionInstancesDto = default(SetRemovalTimeToHistoricDecisionInstancesDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<BatchDto> localVarResponse = await SetRemovalTimeAsyncHistoricDecisionInstanceWithHttpInfoAsync(setRemovalTimeToHistoricDecisionInstancesDto, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Set Removal Time Async (POST) Sets the removal time to multiple historic decision instances asynchronously (batch).  At least &#x60;historicDecisionInstanceIds&#x60; or &#x60;historicDecisionInstanceQuery&#x60; has to be provided. If both are provided, all instances matching query criterion and instances from the list will be updated with a removal time.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setRemovalTimeToHistoricDecisionInstancesDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchDto)</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<BatchDto>> SetRemovalTimeAsyncHistoricDecisionInstanceWithHttpInfoAsync(SetRemovalTimeToHistoricDecisionInstancesDto setRemovalTimeToHistoricDecisionInstancesDto = default(SetRemovalTimeToHistoricDecisionInstancesDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = setRemovalTimeToHistoricDecisionInstancesDto;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<BatchDto>("/history/decision-instance/set-removal-time", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetRemovalTimeAsyncHistoricDecisionInstance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
