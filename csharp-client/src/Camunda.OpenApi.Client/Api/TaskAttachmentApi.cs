/*
 * Camunda Platform REST API
 *
 * OpenApi Spec for Camunda Platform REST API.
 *
 * The version of the OpenAPI document: 7.15.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Camunda.OpenApi.Client.Client;
using Camunda.OpenApi.Client.Model;

namespace Camunda.OpenApi.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITaskAttachmentApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create
        /// </summary>
        /// <remarks>
        /// Creates an attachment for a task.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to add the attachment to.</param>
        /// <param name="attachmentName">The name of the attachment. (optional)</param>
        /// <param name="attachmentDescription">The description of the attachment. (optional)</param>
        /// <param name="attachmentType">The type of the attachment. (optional)</param>
        /// <param name="url">The url to the remote content of the attachment. (optional)</param>
        /// <param name="content">The content of the attachment. (optional)</param>
        /// <returns>AttachmentDto</returns>
        AttachmentDto AddAttachment(string id, string attachmentName = default(string), string attachmentDescription = default(string), string attachmentType = default(string), string url = default(string), System.IO.Stream content = default(System.IO.Stream));

        /// <summary>
        /// Create
        /// </summary>
        /// <remarks>
        /// Creates an attachment for a task.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to add the attachment to.</param>
        /// <param name="attachmentName">The name of the attachment. (optional)</param>
        /// <param name="attachmentDescription">The description of the attachment. (optional)</param>
        /// <param name="attachmentType">The type of the attachment. (optional)</param>
        /// <param name="url">The url to the remote content of the attachment. (optional)</param>
        /// <param name="content">The content of the attachment. (optional)</param>
        /// <returns>ApiResponse of AttachmentDto</returns>
        ApiResponse<AttachmentDto> AddAttachmentWithHttpInfo(string id, string attachmentName = default(string), string attachmentDescription = default(string), string attachmentType = default(string), string url = default(string), System.IO.Stream content = default(System.IO.Stream));
        /// <summary>
        /// Delete
        /// </summary>
        /// <remarks>
        /// Removes an attachment from a task by id.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task.</param>
        /// <param name="attachmentId">The id of the attachment to be removed.</param>
        /// <returns></returns>
        void DeleteAttachment(string id, string attachmentId);

        /// <summary>
        /// Delete
        /// </summary>
        /// <remarks>
        /// Removes an attachment from a task by id.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task.</param>
        /// <param name="attachmentId">The id of the attachment to be removed.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAttachmentWithHttpInfo(string id, string attachmentId);
        /// <summary>
        /// Get
        /// </summary>
        /// <remarks>
        /// Retrieves a task attachment by task id and attachment id.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task.</param>
        /// <param name="attachmentId">The id of the attachment to be retrieved.</param>
        /// <returns>AttachmentDto</returns>
        AttachmentDto GetAttachment(string id, string attachmentId);

        /// <summary>
        /// Get
        /// </summary>
        /// <remarks>
        /// Retrieves a task attachment by task id and attachment id.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task.</param>
        /// <param name="attachmentId">The id of the attachment to be retrieved.</param>
        /// <returns>ApiResponse of AttachmentDto</returns>
        ApiResponse<AttachmentDto> GetAttachmentWithHttpInfo(string id, string attachmentId);
        /// <summary>
        /// Get (Binary)
        /// </summary>
        /// <remarks>
        /// Retrieves the binary content of a task attachment by task id and attachment id.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task.</param>
        /// <param name="attachmentId">The id of the attachment to be retrieved.</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetAttachmentData(string id, string attachmentId);

        /// <summary>
        /// Get (Binary)
        /// </summary>
        /// <remarks>
        /// Retrieves the binary content of a task attachment by task id and attachment id.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task.</param>
        /// <param name="attachmentId">The id of the attachment to be retrieved.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetAttachmentDataWithHttpInfo(string id, string attachmentId);
        /// <summary>
        /// Get List
        /// </summary>
        /// <remarks>
        /// Gets the attachments for a task.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to retrieve the attachments for.</param>
        /// <returns>List&lt;AttachmentDto&gt;</returns>
        List<AttachmentDto> GetAttachments(string id);

        /// <summary>
        /// Get List
        /// </summary>
        /// <remarks>
        /// Gets the attachments for a task.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to retrieve the attachments for.</param>
        /// <returns>ApiResponse of List&lt;AttachmentDto&gt;</returns>
        ApiResponse<List<AttachmentDto>> GetAttachmentsWithHttpInfo(string id);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITaskAttachmentApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create
        /// </summary>
        /// <remarks>
        /// Creates an attachment for a task.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to add the attachment to.</param>
        /// <param name="attachmentName">The name of the attachment. (optional)</param>
        /// <param name="attachmentDescription">The description of the attachment. (optional)</param>
        /// <param name="attachmentType">The type of the attachment. (optional)</param>
        /// <param name="url">The url to the remote content of the attachment. (optional)</param>
        /// <param name="content">The content of the attachment. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AttachmentDto</returns>
        System.Threading.Tasks.Task<AttachmentDto> AddAttachmentAsync(string id, string attachmentName = default(string), string attachmentDescription = default(string), string attachmentType = default(string), string url = default(string), System.IO.Stream content = default(System.IO.Stream), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create
        /// </summary>
        /// <remarks>
        /// Creates an attachment for a task.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to add the attachment to.</param>
        /// <param name="attachmentName">The name of the attachment. (optional)</param>
        /// <param name="attachmentDescription">The description of the attachment. (optional)</param>
        /// <param name="attachmentType">The type of the attachment. (optional)</param>
        /// <param name="url">The url to the remote content of the attachment. (optional)</param>
        /// <param name="content">The content of the attachment. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AttachmentDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<AttachmentDto>> AddAttachmentWithHttpInfoAsync(string id, string attachmentName = default(string), string attachmentDescription = default(string), string attachmentType = default(string), string url = default(string), System.IO.Stream content = default(System.IO.Stream), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete
        /// </summary>
        /// <remarks>
        /// Removes an attachment from a task by id.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task.</param>
        /// <param name="attachmentId">The id of the attachment to be removed.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAttachmentAsync(string id, string attachmentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete
        /// </summary>
        /// <remarks>
        /// Removes an attachment from a task by id.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task.</param>
        /// <param name="attachmentId">The id of the attachment to be removed.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAttachmentWithHttpInfoAsync(string id, string attachmentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get
        /// </summary>
        /// <remarks>
        /// Retrieves a task attachment by task id and attachment id.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task.</param>
        /// <param name="attachmentId">The id of the attachment to be retrieved.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AttachmentDto</returns>
        System.Threading.Tasks.Task<AttachmentDto> GetAttachmentAsync(string id, string attachmentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get
        /// </summary>
        /// <remarks>
        /// Retrieves a task attachment by task id and attachment id.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task.</param>
        /// <param name="attachmentId">The id of the attachment to be retrieved.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AttachmentDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<AttachmentDto>> GetAttachmentWithHttpInfoAsync(string id, string attachmentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get (Binary)
        /// </summary>
        /// <remarks>
        /// Retrieves the binary content of a task attachment by task id and attachment id.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task.</param>
        /// <param name="attachmentId">The id of the attachment to be retrieved.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetAttachmentDataAsync(string id, string attachmentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get (Binary)
        /// </summary>
        /// <remarks>
        /// Retrieves the binary content of a task attachment by task id and attachment id.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task.</param>
        /// <param name="attachmentId">The id of the attachment to be retrieved.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetAttachmentDataWithHttpInfoAsync(string id, string attachmentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get List
        /// </summary>
        /// <remarks>
        /// Gets the attachments for a task.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to retrieve the attachments for.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;AttachmentDto&gt;</returns>
        System.Threading.Tasks.Task<List<AttachmentDto>> GetAttachmentsAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get List
        /// </summary>
        /// <remarks>
        /// Gets the attachments for a task.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to retrieve the attachments for.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;AttachmentDto&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<AttachmentDto>>> GetAttachmentsWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITaskAttachmentApi : ITaskAttachmentApiSync, ITaskAttachmentApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TaskAttachmentApi : ITaskAttachmentApi
    {
        private Camunda.OpenApi.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TaskAttachmentApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TaskAttachmentApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TaskAttachmentApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TaskAttachmentApi(String basePath)
        {
            this.Configuration = Camunda.OpenApi.Client.Client.Configuration.MergeConfigurations(
                Camunda.OpenApi.Client.Client.GlobalConfiguration.Instance,
                new Camunda.OpenApi.Client.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Camunda.OpenApi.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Camunda.OpenApi.Client.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Camunda.OpenApi.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TaskAttachmentApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TaskAttachmentApi(Camunda.OpenApi.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Camunda.OpenApi.Client.Client.Configuration.MergeConfigurations(
                Camunda.OpenApi.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Camunda.OpenApi.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Camunda.OpenApi.Client.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Camunda.OpenApi.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TaskAttachmentApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public TaskAttachmentApi(Camunda.OpenApi.Client.Client.ISynchronousClient client, Camunda.OpenApi.Client.Client.IAsynchronousClient asyncClient, Camunda.OpenApi.Client.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Camunda.OpenApi.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Camunda.OpenApi.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Camunda.OpenApi.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Camunda.OpenApi.Client.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Camunda.OpenApi.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create Creates an attachment for a task.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to add the attachment to.</param>
        /// <param name="attachmentName">The name of the attachment. (optional)</param>
        /// <param name="attachmentDescription">The description of the attachment. (optional)</param>
        /// <param name="attachmentType">The type of the attachment. (optional)</param>
        /// <param name="url">The url to the remote content of the attachment. (optional)</param>
        /// <param name="content">The content of the attachment. (optional)</param>
        /// <returns>AttachmentDto</returns>
        public AttachmentDto AddAttachment(string id, string attachmentName = default(string), string attachmentDescription = default(string), string attachmentType = default(string), string url = default(string), System.IO.Stream content = default(System.IO.Stream))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<AttachmentDto> localVarResponse = AddAttachmentWithHttpInfo(id, attachmentName, attachmentDescription, attachmentType, url, content);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Creates an attachment for a task.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to add the attachment to.</param>
        /// <param name="attachmentName">The name of the attachment. (optional)</param>
        /// <param name="attachmentDescription">The description of the attachment. (optional)</param>
        /// <param name="attachmentType">The type of the attachment. (optional)</param>
        /// <param name="url">The url to the remote content of the attachment. (optional)</param>
        /// <param name="content">The content of the attachment. (optional)</param>
        /// <returns>ApiResponse of AttachmentDto</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<AttachmentDto> AddAttachmentWithHttpInfo(string id, string attachmentName = default(string), string attachmentDescription = default(string), string attachmentType = default(string), string url = default(string), System.IO.Stream content = default(System.IO.Stream))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling TaskAttachmentApi->AddAttachment");

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (attachmentName != null)
            {
                localVarRequestOptions.FormParameters.Add("attachment-name", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(attachmentName)); // form parameter
            }
            if (attachmentDescription != null)
            {
                localVarRequestOptions.FormParameters.Add("attachment-description", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(attachmentDescription)); // form parameter
            }
            if (attachmentType != null)
            {
                localVarRequestOptions.FormParameters.Add("attachment-type", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(attachmentType)); // form parameter
            }
            if (url != null)
            {
                localVarRequestOptions.FormParameters.Add("url", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(url)); // form parameter
            }
            if (content != null)
            {
                localVarRequestOptions.FileParameters.Add("content", content);
            }


            // make the HTTP request
            var localVarResponse = this.Client.Post<AttachmentDto>("/task/{id}/attachment/create", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddAttachment", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Creates an attachment for a task.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to add the attachment to.</param>
        /// <param name="attachmentName">The name of the attachment. (optional)</param>
        /// <param name="attachmentDescription">The description of the attachment. (optional)</param>
        /// <param name="attachmentType">The type of the attachment. (optional)</param>
        /// <param name="url">The url to the remote content of the attachment. (optional)</param>
        /// <param name="content">The content of the attachment. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AttachmentDto</returns>
        public async System.Threading.Tasks.Task<AttachmentDto> AddAttachmentAsync(string id, string attachmentName = default(string), string attachmentDescription = default(string), string attachmentType = default(string), string url = default(string), System.IO.Stream content = default(System.IO.Stream), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<AttachmentDto> localVarResponse = await AddAttachmentWithHttpInfoAsync(id, attachmentName, attachmentDescription, attachmentType, url, content, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Creates an attachment for a task.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to add the attachment to.</param>
        /// <param name="attachmentName">The name of the attachment. (optional)</param>
        /// <param name="attachmentDescription">The description of the attachment. (optional)</param>
        /// <param name="attachmentType">The type of the attachment. (optional)</param>
        /// <param name="url">The url to the remote content of the attachment. (optional)</param>
        /// <param name="content">The content of the attachment. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AttachmentDto)</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<AttachmentDto>> AddAttachmentWithHttpInfoAsync(string id, string attachmentName = default(string), string attachmentDescription = default(string), string attachmentType = default(string), string url = default(string), System.IO.Stream content = default(System.IO.Stream), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling TaskAttachmentApi->AddAttachment");


            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (attachmentName != null)
            {
                localVarRequestOptions.FormParameters.Add("attachment-name", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(attachmentName)); // form parameter
            }
            if (attachmentDescription != null)
            {
                localVarRequestOptions.FormParameters.Add("attachment-description", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(attachmentDescription)); // form parameter
            }
            if (attachmentType != null)
            {
                localVarRequestOptions.FormParameters.Add("attachment-type", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(attachmentType)); // form parameter
            }
            if (url != null)
            {
                localVarRequestOptions.FormParameters.Add("url", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(url)); // form parameter
            }
            if (content != null)
            {
                localVarRequestOptions.FileParameters.Add("content", content);
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<AttachmentDto>("/task/{id}/attachment/create", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddAttachment", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Removes an attachment from a task by id.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task.</param>
        /// <param name="attachmentId">The id of the attachment to be removed.</param>
        /// <returns></returns>
        public void DeleteAttachment(string id, string attachmentId)
        {
            DeleteAttachmentWithHttpInfo(id, attachmentId);
        }

        /// <summary>
        /// Delete Removes an attachment from a task by id.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task.</param>
        /// <param name="attachmentId">The id of the attachment to be removed.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<Object> DeleteAttachmentWithHttpInfo(string id, string attachmentId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling TaskAttachmentApi->DeleteAttachment");

            // verify the required parameter 'attachmentId' is set
            if (attachmentId == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'attachmentId' when calling TaskAttachmentApi->DeleteAttachment");

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("attachmentId", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(attachmentId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/task/{id}/attachment/{attachmentId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAttachment", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Removes an attachment from a task by id.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task.</param>
        /// <param name="attachmentId">The id of the attachment to be removed.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAttachmentAsync(string id, string attachmentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteAttachmentWithHttpInfoAsync(id, attachmentId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete Removes an attachment from a task by id.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task.</param>
        /// <param name="attachmentId">The id of the attachment to be removed.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<Object>> DeleteAttachmentWithHttpInfoAsync(string id, string attachmentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling TaskAttachmentApi->DeleteAttachment");

            // verify the required parameter 'attachmentId' is set
            if (attachmentId == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'attachmentId' when calling TaskAttachmentApi->DeleteAttachment");


            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("attachmentId", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(attachmentId)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/task/{id}/attachment/{attachmentId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAttachment", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Retrieves a task attachment by task id and attachment id.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task.</param>
        /// <param name="attachmentId">The id of the attachment to be retrieved.</param>
        /// <returns>AttachmentDto</returns>
        public AttachmentDto GetAttachment(string id, string attachmentId)
        {
            Camunda.OpenApi.Client.Client.ApiResponse<AttachmentDto> localVarResponse = GetAttachmentWithHttpInfo(id, attachmentId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Retrieves a task attachment by task id and attachment id.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task.</param>
        /// <param name="attachmentId">The id of the attachment to be retrieved.</param>
        /// <returns>ApiResponse of AttachmentDto</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<AttachmentDto> GetAttachmentWithHttpInfo(string id, string attachmentId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling TaskAttachmentApi->GetAttachment");

            // verify the required parameter 'attachmentId' is set
            if (attachmentId == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'attachmentId' when calling TaskAttachmentApi->GetAttachment");

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("attachmentId", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(attachmentId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<AttachmentDto>("/task/{id}/attachment/{attachmentId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAttachment", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Retrieves a task attachment by task id and attachment id.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task.</param>
        /// <param name="attachmentId">The id of the attachment to be retrieved.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AttachmentDto</returns>
        public async System.Threading.Tasks.Task<AttachmentDto> GetAttachmentAsync(string id, string attachmentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<AttachmentDto> localVarResponse = await GetAttachmentWithHttpInfoAsync(id, attachmentId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Retrieves a task attachment by task id and attachment id.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task.</param>
        /// <param name="attachmentId">The id of the attachment to be retrieved.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AttachmentDto)</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<AttachmentDto>> GetAttachmentWithHttpInfoAsync(string id, string attachmentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling TaskAttachmentApi->GetAttachment");

            // verify the required parameter 'attachmentId' is set
            if (attachmentId == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'attachmentId' when calling TaskAttachmentApi->GetAttachment");


            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("attachmentId", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(attachmentId)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<AttachmentDto>("/task/{id}/attachment/{attachmentId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAttachment", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get (Binary) Retrieves the binary content of a task attachment by task id and attachment id.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task.</param>
        /// <param name="attachmentId">The id of the attachment to be retrieved.</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetAttachmentData(string id, string attachmentId)
        {
            Camunda.OpenApi.Client.Client.ApiResponse<System.IO.Stream> localVarResponse = GetAttachmentDataWithHttpInfo(id, attachmentId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get (Binary) Retrieves the binary content of a task attachment by task id and attachment id.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task.</param>
        /// <param name="attachmentId">The id of the attachment to be retrieved.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<System.IO.Stream> GetAttachmentDataWithHttpInfo(string id, string attachmentId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling TaskAttachmentApi->GetAttachmentData");

            // verify the required parameter 'attachmentId' is set
            if (attachmentId == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'attachmentId' when calling TaskAttachmentApi->GetAttachmentData");

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/octet-stream",
                "text/plain",
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("attachmentId", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(attachmentId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<System.IO.Stream>("/task/{id}/attachment/{attachmentId}/data", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAttachmentData", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get (Binary) Retrieves the binary content of a task attachment by task id and attachment id.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task.</param>
        /// <param name="attachmentId">The id of the attachment to be retrieved.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetAttachmentDataAsync(string id, string attachmentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<System.IO.Stream> localVarResponse = await GetAttachmentDataWithHttpInfoAsync(id, attachmentId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get (Binary) Retrieves the binary content of a task attachment by task id and attachment id.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task.</param>
        /// <param name="attachmentId">The id of the attachment to be retrieved.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<System.IO.Stream>> GetAttachmentDataWithHttpInfoAsync(string id, string attachmentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling TaskAttachmentApi->GetAttachmentData");

            // verify the required parameter 'attachmentId' is set
            if (attachmentId == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'attachmentId' when calling TaskAttachmentApi->GetAttachmentData");


            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/octet-stream",
                "text/plain",
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("attachmentId", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(attachmentId)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<System.IO.Stream>("/task/{id}/attachment/{attachmentId}/data", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAttachmentData", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get List Gets the attachments for a task.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to retrieve the attachments for.</param>
        /// <returns>List&lt;AttachmentDto&gt;</returns>
        public List<AttachmentDto> GetAttachments(string id)
        {
            Camunda.OpenApi.Client.Client.ApiResponse<List<AttachmentDto>> localVarResponse = GetAttachmentsWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get List Gets the attachments for a task.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to retrieve the attachments for.</param>
        /// <returns>ApiResponse of List&lt;AttachmentDto&gt;</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<List<AttachmentDto>> GetAttachmentsWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling TaskAttachmentApi->GetAttachments");

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<AttachmentDto>>("/task/{id}/attachment", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAttachments", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get List Gets the attachments for a task.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to retrieve the attachments for.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;AttachmentDto&gt;</returns>
        public async System.Threading.Tasks.Task<List<AttachmentDto>> GetAttachmentsAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<List<AttachmentDto>> localVarResponse = await GetAttachmentsWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get List Gets the attachments for a task.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to retrieve the attachments for.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;AttachmentDto&gt;)</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<List<AttachmentDto>>> GetAttachmentsWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling TaskAttachmentApi->GetAttachments");


            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<AttachmentDto>>("/task/{id}/attachment", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAttachments", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
