/*
 * Camunda Platform REST API
 *
 * OpenApi Spec for Camunda Platform REST API.
 *
 * The version of the OpenAPI document: 7.15.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Camunda.OpenApi.Client.Client;
using Camunda.OpenApi.Client.Model;

namespace Camunda.OpenApi.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUserApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Options
        /// </summary>
        /// <remarks>
        /// The &#x60;/user&#x60; resource supports two custom &#x60;OPTIONS&#x60; requests, one for the resource as such and one for individual user instances. The &#x60;OPTIONS&#x60; request allows checking for the set of available operations that the currently authenticated user can perform on the /user resource. If the user can perform an operation or not may depend on various things, including the user&#39;s authorizations to interact with this resource and the internal configuration of the process engine. &#x60;OPTIONS /user&#x60; returns available interactions on the resource.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ResourceOptionsDto</returns>
        ResourceOptionsDto AvailableOperations();

        /// <summary>
        /// Options
        /// </summary>
        /// <remarks>
        /// The &#x60;/user&#x60; resource supports two custom &#x60;OPTIONS&#x60; requests, one for the resource as such and one for individual user instances. The &#x60;OPTIONS&#x60; request allows checking for the set of available operations that the currently authenticated user can perform on the /user resource. If the user can perform an operation or not may depend on various things, including the user&#39;s authorizations to interact with this resource and the internal configuration of the process engine. &#x60;OPTIONS /user&#x60; returns available interactions on the resource.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ResourceOptionsDto</returns>
        ApiResponse<ResourceOptionsDto> AvailableOperationsWithHttpInfo();
        /// <summary>
        /// Options
        /// </summary>
        /// <remarks>
        /// The &#x60;/user&#x60; resource supports two custom &#x60;OPTIONS&#x60; requests, one for the resource as such and one for individual user instances. The &#x60;OPTIONS&#x60; request allows checking for the set of available operations that the currently authenticated user can perform on the /user resource. If the user can perform an operation or not may depend on various things, including the user&#39;s authorizations to interact with this resource and the internal configuration of the process engine. &#x60;OPTIONS /user/{id}&#x60; returns available interactions on a resource instance.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the user to be deleted.</param>
        /// <returns>ResourceOptionsDto</returns>
        ResourceOptionsDto AvailableUserOperations(string id);

        /// <summary>
        /// Options
        /// </summary>
        /// <remarks>
        /// The &#x60;/user&#x60; resource supports two custom &#x60;OPTIONS&#x60; requests, one for the resource as such and one for individual user instances. The &#x60;OPTIONS&#x60; request allows checking for the set of available operations that the currently authenticated user can perform on the /user resource. If the user can perform an operation or not may depend on various things, including the user&#39;s authorizations to interact with this resource and the internal configuration of the process engine. &#x60;OPTIONS /user/{id}&#x60; returns available interactions on a resource instance.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the user to be deleted.</param>
        /// <returns>ApiResponse of ResourceOptionsDto</returns>
        ApiResponse<ResourceOptionsDto> AvailableUserOperationsWithHttpInfo(string id);
        /// <summary>
        /// Create
        /// </summary>
        /// <remarks>
        /// Create a new user.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userDto"> (optional)</param>
        /// <returns></returns>
        void CreateUser(UserDto userDto = default(UserDto));

        /// <summary>
        /// Create
        /// </summary>
        /// <remarks>
        /// Create a new user.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userDto"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CreateUserWithHttpInfo(UserDto userDto = default(UserDto));
        /// <summary>
        /// Delete
        /// </summary>
        /// <remarks>
        /// Deletes a user by id.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the user to be deleted.</param>
        /// <returns></returns>
        void DeleteUser(string id);

        /// <summary>
        /// Delete
        /// </summary>
        /// <remarks>
        /// Deletes a user by id.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the user to be deleted.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteUserWithHttpInfo(string id);
        /// <summary>
        /// Get List Count
        /// </summary>
        /// <remarks>
        /// Queries for the number of deployments that fulfill given parameters. Takes the same parameters as the [Get Users](https://docs.camunda.org/manual/7.15/reference/rest/user/get-query/) method.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Filter by user id (optional)</param>
        /// <param name="idIn">Filter by a comma-separated list of user ids. (optional)</param>
        /// <param name="firstName">Filter by the first name of the user. Exact match. (optional)</param>
        /// <param name="firstNameLike">Filter by the first name that the parameter is a substring of. (optional)</param>
        /// <param name="lastName">Filter by the last name of the user. Exact match. (optional)</param>
        /// <param name="lastNameLike">Filter by the last name that the parameter is a substring of. (optional)</param>
        /// <param name="email">Filter by the email of the user. Exact match. (optional)</param>
        /// <param name="emailLike">Filter by the email that the parameter is a substring of. (optional)</param>
        /// <param name="memberOfGroup">Filter for users which are members of the given group. (optional)</param>
        /// <param name="memberOfTenant">Filter for users which are members of the given tenant. (optional)</param>
        /// <param name="potentialStarter">Only select Users that are potential starter for the given process definition. (optional)</param>
        /// <returns>CountResultDto</returns>
        CountResultDto GetUserCount(string id = default(string), string idIn = default(string), string firstName = default(string), string firstNameLike = default(string), string lastName = default(string), string lastNameLike = default(string), string email = default(string), string emailLike = default(string), string memberOfGroup = default(string), string memberOfTenant = default(string), string potentialStarter = default(string));

        /// <summary>
        /// Get List Count
        /// </summary>
        /// <remarks>
        /// Queries for the number of deployments that fulfill given parameters. Takes the same parameters as the [Get Users](https://docs.camunda.org/manual/7.15/reference/rest/user/get-query/) method.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Filter by user id (optional)</param>
        /// <param name="idIn">Filter by a comma-separated list of user ids. (optional)</param>
        /// <param name="firstName">Filter by the first name of the user. Exact match. (optional)</param>
        /// <param name="firstNameLike">Filter by the first name that the parameter is a substring of. (optional)</param>
        /// <param name="lastName">Filter by the last name of the user. Exact match. (optional)</param>
        /// <param name="lastNameLike">Filter by the last name that the parameter is a substring of. (optional)</param>
        /// <param name="email">Filter by the email of the user. Exact match. (optional)</param>
        /// <param name="emailLike">Filter by the email that the parameter is a substring of. (optional)</param>
        /// <param name="memberOfGroup">Filter for users which are members of the given group. (optional)</param>
        /// <param name="memberOfTenant">Filter for users which are members of the given tenant. (optional)</param>
        /// <param name="potentialStarter">Only select Users that are potential starter for the given process definition. (optional)</param>
        /// <returns>ApiResponse of CountResultDto</returns>
        ApiResponse<CountResultDto> GetUserCountWithHttpInfo(string id = default(string), string idIn = default(string), string firstName = default(string), string firstNameLike = default(string), string lastName = default(string), string lastNameLike = default(string), string email = default(string), string emailLike = default(string), string memberOfGroup = default(string), string memberOfTenant = default(string), string potentialStarter = default(string));
        /// <summary>
        /// Get Profile
        /// </summary>
        /// <remarks>
        /// Retrieves a user&#39;s profile.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the user to retrieve.</param>
        /// <returns>UserProfileDto</returns>
        UserProfileDto GetUserProfile(string id);

        /// <summary>
        /// Get Profile
        /// </summary>
        /// <remarks>
        /// Retrieves a user&#39;s profile.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the user to retrieve.</param>
        /// <returns>ApiResponse of UserProfileDto</returns>
        ApiResponse<UserProfileDto> GetUserProfileWithHttpInfo(string id);
        /// <summary>
        /// Get List
        /// </summary>
        /// <remarks>
        /// Query for a list of users using a list of parameters. The size of the result set can be retrieved by using the Get User Count method. [Get User Count](https://docs.camunda.org/manual/7.15/reference/rest/user/get-query-count/) method.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Filter by user id (optional)</param>
        /// <param name="idIn">Filter by a comma-separated list of user ids. (optional)</param>
        /// <param name="firstName">Filter by the first name of the user. Exact match. (optional)</param>
        /// <param name="firstNameLike">Filter by the first name that the parameter is a substring of. (optional)</param>
        /// <param name="lastName">Filter by the last name of the user. Exact match. (optional)</param>
        /// <param name="lastNameLike">Filter by the last name that the parameter is a substring of. (optional)</param>
        /// <param name="email">Filter by the email of the user. Exact match. (optional)</param>
        /// <param name="emailLike">Filter by the email that the parameter is a substring of. (optional)</param>
        /// <param name="memberOfGroup">Filter for users which are members of the given group. (optional)</param>
        /// <param name="memberOfTenant">Filter for users which are members of the given tenant. (optional)</param>
        /// <param name="potentialStarter">Only select Users that are potential starter for the given process definition. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <returns>List&lt;UserProfileDto&gt;</returns>
        List<UserProfileDto> GetUsers(string id = default(string), string idIn = default(string), string firstName = default(string), string firstNameLike = default(string), string lastName = default(string), string lastNameLike = default(string), string email = default(string), string emailLike = default(string), string memberOfGroup = default(string), string memberOfTenant = default(string), string potentialStarter = default(string), string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?));

        /// <summary>
        /// Get List
        /// </summary>
        /// <remarks>
        /// Query for a list of users using a list of parameters. The size of the result set can be retrieved by using the Get User Count method. [Get User Count](https://docs.camunda.org/manual/7.15/reference/rest/user/get-query-count/) method.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Filter by user id (optional)</param>
        /// <param name="idIn">Filter by a comma-separated list of user ids. (optional)</param>
        /// <param name="firstName">Filter by the first name of the user. Exact match. (optional)</param>
        /// <param name="firstNameLike">Filter by the first name that the parameter is a substring of. (optional)</param>
        /// <param name="lastName">Filter by the last name of the user. Exact match. (optional)</param>
        /// <param name="lastNameLike">Filter by the last name that the parameter is a substring of. (optional)</param>
        /// <param name="email">Filter by the email of the user. Exact match. (optional)</param>
        /// <param name="emailLike">Filter by the email that the parameter is a substring of. (optional)</param>
        /// <param name="memberOfGroup">Filter for users which are members of the given group. (optional)</param>
        /// <param name="memberOfTenant">Filter for users which are members of the given tenant. (optional)</param>
        /// <param name="potentialStarter">Only select Users that are potential starter for the given process definition. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <returns>ApiResponse of List&lt;UserProfileDto&gt;</returns>
        ApiResponse<List<UserProfileDto>> GetUsersWithHttpInfo(string id = default(string), string idIn = default(string), string firstName = default(string), string firstNameLike = default(string), string lastName = default(string), string lastNameLike = default(string), string email = default(string), string emailLike = default(string), string memberOfGroup = default(string), string memberOfTenant = default(string), string potentialStarter = default(string), string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?));
        /// <summary>
        /// Unlock User
        /// </summary>
        /// <remarks>
        /// Unlocks a user by id.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the user to be unlocked.</param>
        /// <returns></returns>
        void UnlockUser(string id);

        /// <summary>
        /// Unlock User
        /// </summary>
        /// <remarks>
        /// Unlocks a user by id.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the user to be unlocked.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UnlockUserWithHttpInfo(string id);
        /// <summary>
        /// Update Credentials
        /// </summary>
        /// <remarks>
        /// Updates a user&#39;s credentials (password)
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the user to be updated.</param>
        /// <param name="password">The users new password.</param>
        /// <param name="authenticatedUserPassword">The password of the authenticated user who changes the password of the user (i.e., the user with passed id as path parameter).</param>
        /// <param name="userCredentialsDto"> (optional)</param>
        /// <returns>Object</returns>
        Object UpdateCredentials(string id, string password, string authenticatedUserPassword, UserCredentialsDto userCredentialsDto = default(UserCredentialsDto));

        /// <summary>
        /// Update Credentials
        /// </summary>
        /// <remarks>
        /// Updates a user&#39;s credentials (password)
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the user to be updated.</param>
        /// <param name="password">The users new password.</param>
        /// <param name="authenticatedUserPassword">The password of the authenticated user who changes the password of the user (i.e., the user with passed id as path parameter).</param>
        /// <param name="userCredentialsDto"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> UpdateCredentialsWithHttpInfo(string id, string password, string authenticatedUserPassword, UserCredentialsDto userCredentialsDto = default(UserCredentialsDto));
        /// <summary>
        /// Update User Profile
        /// </summary>
        /// <remarks>
        /// Updates the profile information of an already existing user.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the user.</param>
        /// <param name="userProfileDto"> (optional)</param>
        /// <returns></returns>
        void UpdateProfile(string id, UserProfileDto userProfileDto = default(UserProfileDto));

        /// <summary>
        /// Update User Profile
        /// </summary>
        /// <remarks>
        /// Updates the profile information of an already existing user.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the user.</param>
        /// <param name="userProfileDto"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateProfileWithHttpInfo(string id, UserProfileDto userProfileDto = default(UserProfileDto));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUserApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Options
        /// </summary>
        /// <remarks>
        /// The &#x60;/user&#x60; resource supports two custom &#x60;OPTIONS&#x60; requests, one for the resource as such and one for individual user instances. The &#x60;OPTIONS&#x60; request allows checking for the set of available operations that the currently authenticated user can perform on the /user resource. If the user can perform an operation or not may depend on various things, including the user&#39;s authorizations to interact with this resource and the internal configuration of the process engine. &#x60;OPTIONS /user&#x60; returns available interactions on the resource.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResourceOptionsDto</returns>
        System.Threading.Tasks.Task<ResourceOptionsDto> AvailableOperationsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Options
        /// </summary>
        /// <remarks>
        /// The &#x60;/user&#x60; resource supports two custom &#x60;OPTIONS&#x60; requests, one for the resource as such and one for individual user instances. The &#x60;OPTIONS&#x60; request allows checking for the set of available operations that the currently authenticated user can perform on the /user resource. If the user can perform an operation or not may depend on various things, including the user&#39;s authorizations to interact with this resource and the internal configuration of the process engine. &#x60;OPTIONS /user&#x60; returns available interactions on the resource.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResourceOptionsDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceOptionsDto>> AvailableOperationsWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Options
        /// </summary>
        /// <remarks>
        /// The &#x60;/user&#x60; resource supports two custom &#x60;OPTIONS&#x60; requests, one for the resource as such and one for individual user instances. The &#x60;OPTIONS&#x60; request allows checking for the set of available operations that the currently authenticated user can perform on the /user resource. If the user can perform an operation or not may depend on various things, including the user&#39;s authorizations to interact with this resource and the internal configuration of the process engine. &#x60;OPTIONS /user/{id}&#x60; returns available interactions on a resource instance.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the user to be deleted.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResourceOptionsDto</returns>
        System.Threading.Tasks.Task<ResourceOptionsDto> AvailableUserOperationsAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Options
        /// </summary>
        /// <remarks>
        /// The &#x60;/user&#x60; resource supports two custom &#x60;OPTIONS&#x60; requests, one for the resource as such and one for individual user instances. The &#x60;OPTIONS&#x60; request allows checking for the set of available operations that the currently authenticated user can perform on the /user resource. If the user can perform an operation or not may depend on various things, including the user&#39;s authorizations to interact with this resource and the internal configuration of the process engine. &#x60;OPTIONS /user/{id}&#x60; returns available interactions on a resource instance.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the user to be deleted.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResourceOptionsDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceOptionsDto>> AvailableUserOperationsWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create
        /// </summary>
        /// <remarks>
        /// Create a new user.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CreateUserAsync(UserDto userDto = default(UserDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create
        /// </summary>
        /// <remarks>
        /// Create a new user.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateUserWithHttpInfoAsync(UserDto userDto = default(UserDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete
        /// </summary>
        /// <remarks>
        /// Deletes a user by id.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the user to be deleted.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteUserAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete
        /// </summary>
        /// <remarks>
        /// Deletes a user by id.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the user to be deleted.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteUserWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get List Count
        /// </summary>
        /// <remarks>
        /// Queries for the number of deployments that fulfill given parameters. Takes the same parameters as the [Get Users](https://docs.camunda.org/manual/7.15/reference/rest/user/get-query/) method.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Filter by user id (optional)</param>
        /// <param name="idIn">Filter by a comma-separated list of user ids. (optional)</param>
        /// <param name="firstName">Filter by the first name of the user. Exact match. (optional)</param>
        /// <param name="firstNameLike">Filter by the first name that the parameter is a substring of. (optional)</param>
        /// <param name="lastName">Filter by the last name of the user. Exact match. (optional)</param>
        /// <param name="lastNameLike">Filter by the last name that the parameter is a substring of. (optional)</param>
        /// <param name="email">Filter by the email of the user. Exact match. (optional)</param>
        /// <param name="emailLike">Filter by the email that the parameter is a substring of. (optional)</param>
        /// <param name="memberOfGroup">Filter for users which are members of the given group. (optional)</param>
        /// <param name="memberOfTenant">Filter for users which are members of the given tenant. (optional)</param>
        /// <param name="potentialStarter">Only select Users that are potential starter for the given process definition. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CountResultDto</returns>
        System.Threading.Tasks.Task<CountResultDto> GetUserCountAsync(string id = default(string), string idIn = default(string), string firstName = default(string), string firstNameLike = default(string), string lastName = default(string), string lastNameLike = default(string), string email = default(string), string emailLike = default(string), string memberOfGroup = default(string), string memberOfTenant = default(string), string potentialStarter = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get List Count
        /// </summary>
        /// <remarks>
        /// Queries for the number of deployments that fulfill given parameters. Takes the same parameters as the [Get Users](https://docs.camunda.org/manual/7.15/reference/rest/user/get-query/) method.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Filter by user id (optional)</param>
        /// <param name="idIn">Filter by a comma-separated list of user ids. (optional)</param>
        /// <param name="firstName">Filter by the first name of the user. Exact match. (optional)</param>
        /// <param name="firstNameLike">Filter by the first name that the parameter is a substring of. (optional)</param>
        /// <param name="lastName">Filter by the last name of the user. Exact match. (optional)</param>
        /// <param name="lastNameLike">Filter by the last name that the parameter is a substring of. (optional)</param>
        /// <param name="email">Filter by the email of the user. Exact match. (optional)</param>
        /// <param name="emailLike">Filter by the email that the parameter is a substring of. (optional)</param>
        /// <param name="memberOfGroup">Filter for users which are members of the given group. (optional)</param>
        /// <param name="memberOfTenant">Filter for users which are members of the given tenant. (optional)</param>
        /// <param name="potentialStarter">Only select Users that are potential starter for the given process definition. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CountResultDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<CountResultDto>> GetUserCountWithHttpInfoAsync(string id = default(string), string idIn = default(string), string firstName = default(string), string firstNameLike = default(string), string lastName = default(string), string lastNameLike = default(string), string email = default(string), string emailLike = default(string), string memberOfGroup = default(string), string memberOfTenant = default(string), string potentialStarter = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Profile
        /// </summary>
        /// <remarks>
        /// Retrieves a user&#39;s profile.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the user to retrieve.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserProfileDto</returns>
        System.Threading.Tasks.Task<UserProfileDto> GetUserProfileAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Profile
        /// </summary>
        /// <remarks>
        /// Retrieves a user&#39;s profile.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the user to retrieve.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserProfileDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserProfileDto>> GetUserProfileWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get List
        /// </summary>
        /// <remarks>
        /// Query for a list of users using a list of parameters. The size of the result set can be retrieved by using the Get User Count method. [Get User Count](https://docs.camunda.org/manual/7.15/reference/rest/user/get-query-count/) method.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Filter by user id (optional)</param>
        /// <param name="idIn">Filter by a comma-separated list of user ids. (optional)</param>
        /// <param name="firstName">Filter by the first name of the user. Exact match. (optional)</param>
        /// <param name="firstNameLike">Filter by the first name that the parameter is a substring of. (optional)</param>
        /// <param name="lastName">Filter by the last name of the user. Exact match. (optional)</param>
        /// <param name="lastNameLike">Filter by the last name that the parameter is a substring of. (optional)</param>
        /// <param name="email">Filter by the email of the user. Exact match. (optional)</param>
        /// <param name="emailLike">Filter by the email that the parameter is a substring of. (optional)</param>
        /// <param name="memberOfGroup">Filter for users which are members of the given group. (optional)</param>
        /// <param name="memberOfTenant">Filter for users which are members of the given tenant. (optional)</param>
        /// <param name="potentialStarter">Only select Users that are potential starter for the given process definition. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;UserProfileDto&gt;</returns>
        System.Threading.Tasks.Task<List<UserProfileDto>> GetUsersAsync(string id = default(string), string idIn = default(string), string firstName = default(string), string firstNameLike = default(string), string lastName = default(string), string lastNameLike = default(string), string email = default(string), string emailLike = default(string), string memberOfGroup = default(string), string memberOfTenant = default(string), string potentialStarter = default(string), string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get List
        /// </summary>
        /// <remarks>
        /// Query for a list of users using a list of parameters. The size of the result set can be retrieved by using the Get User Count method. [Get User Count](https://docs.camunda.org/manual/7.15/reference/rest/user/get-query-count/) method.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Filter by user id (optional)</param>
        /// <param name="idIn">Filter by a comma-separated list of user ids. (optional)</param>
        /// <param name="firstName">Filter by the first name of the user. Exact match. (optional)</param>
        /// <param name="firstNameLike">Filter by the first name that the parameter is a substring of. (optional)</param>
        /// <param name="lastName">Filter by the last name of the user. Exact match. (optional)</param>
        /// <param name="lastNameLike">Filter by the last name that the parameter is a substring of. (optional)</param>
        /// <param name="email">Filter by the email of the user. Exact match. (optional)</param>
        /// <param name="emailLike">Filter by the email that the parameter is a substring of. (optional)</param>
        /// <param name="memberOfGroup">Filter for users which are members of the given group. (optional)</param>
        /// <param name="memberOfTenant">Filter for users which are members of the given tenant. (optional)</param>
        /// <param name="potentialStarter">Only select Users that are potential starter for the given process definition. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;UserProfileDto&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<UserProfileDto>>> GetUsersWithHttpInfoAsync(string id = default(string), string idIn = default(string), string firstName = default(string), string firstNameLike = default(string), string lastName = default(string), string lastNameLike = default(string), string email = default(string), string emailLike = default(string), string memberOfGroup = default(string), string memberOfTenant = default(string), string potentialStarter = default(string), string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Unlock User
        /// </summary>
        /// <remarks>
        /// Unlocks a user by id.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the user to be unlocked.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UnlockUserAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Unlock User
        /// </summary>
        /// <remarks>
        /// Unlocks a user by id.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the user to be unlocked.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UnlockUserWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Credentials
        /// </summary>
        /// <remarks>
        /// Updates a user&#39;s credentials (password)
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the user to be updated.</param>
        /// <param name="password">The users new password.</param>
        /// <param name="authenticatedUserPassword">The password of the authenticated user who changes the password of the user (i.e., the user with passed id as path parameter).</param>
        /// <param name="userCredentialsDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> UpdateCredentialsAsync(string id, string password, string authenticatedUserPassword, UserCredentialsDto userCredentialsDto = default(UserCredentialsDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Credentials
        /// </summary>
        /// <remarks>
        /// Updates a user&#39;s credentials (password)
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the user to be updated.</param>
        /// <param name="password">The users new password.</param>
        /// <param name="authenticatedUserPassword">The password of the authenticated user who changes the password of the user (i.e., the user with passed id as path parameter).</param>
        /// <param name="userCredentialsDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateCredentialsWithHttpInfoAsync(string id, string password, string authenticatedUserPassword, UserCredentialsDto userCredentialsDto = default(UserCredentialsDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update User Profile
        /// </summary>
        /// <remarks>
        /// Updates the profile information of an already existing user.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the user.</param>
        /// <param name="userProfileDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateProfileAsync(string id, UserProfileDto userProfileDto = default(UserProfileDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update User Profile
        /// </summary>
        /// <remarks>
        /// Updates the profile information of an already existing user.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the user.</param>
        /// <param name="userProfileDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateProfileWithHttpInfoAsync(string id, UserProfileDto userProfileDto = default(UserProfileDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUserApi : IUserApiSync, IUserApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class UserApi : IUserApi
    {
        private Camunda.OpenApi.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="UserApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UserApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UserApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UserApi(String basePath)
        {
            this.Configuration = Camunda.OpenApi.Client.Client.Configuration.MergeConfigurations(
                Camunda.OpenApi.Client.Client.GlobalConfiguration.Instance,
                new Camunda.OpenApi.Client.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Camunda.OpenApi.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Camunda.OpenApi.Client.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Camunda.OpenApi.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UserApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public UserApi(Camunda.OpenApi.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Camunda.OpenApi.Client.Client.Configuration.MergeConfigurations(
                Camunda.OpenApi.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Camunda.OpenApi.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Camunda.OpenApi.Client.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Camunda.OpenApi.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UserApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public UserApi(Camunda.OpenApi.Client.Client.ISynchronousClient client, Camunda.OpenApi.Client.Client.IAsynchronousClient asyncClient, Camunda.OpenApi.Client.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Camunda.OpenApi.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Camunda.OpenApi.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Camunda.OpenApi.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Camunda.OpenApi.Client.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Camunda.OpenApi.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Options The &#x60;/user&#x60; resource supports two custom &#x60;OPTIONS&#x60; requests, one for the resource as such and one for individual user instances. The &#x60;OPTIONS&#x60; request allows checking for the set of available operations that the currently authenticated user can perform on the /user resource. If the user can perform an operation or not may depend on various things, including the user&#39;s authorizations to interact with this resource and the internal configuration of the process engine. &#x60;OPTIONS /user&#x60; returns available interactions on the resource.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ResourceOptionsDto</returns>
        public ResourceOptionsDto AvailableOperations()
        {
            Camunda.OpenApi.Client.Client.ApiResponse<ResourceOptionsDto> localVarResponse = AvailableOperationsWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Options The &#x60;/user&#x60; resource supports two custom &#x60;OPTIONS&#x60; requests, one for the resource as such and one for individual user instances. The &#x60;OPTIONS&#x60; request allows checking for the set of available operations that the currently authenticated user can perform on the /user resource. If the user can perform an operation or not may depend on various things, including the user&#39;s authorizations to interact with this resource and the internal configuration of the process engine. &#x60;OPTIONS /user&#x60; returns available interactions on the resource.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ResourceOptionsDto</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<ResourceOptionsDto> AvailableOperationsWithHttpInfo()
        {
            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Options<ResourceOptionsDto>("/user", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AvailableOperations", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Options The &#x60;/user&#x60; resource supports two custom &#x60;OPTIONS&#x60; requests, one for the resource as such and one for individual user instances. The &#x60;OPTIONS&#x60; request allows checking for the set of available operations that the currently authenticated user can perform on the /user resource. If the user can perform an operation or not may depend on various things, including the user&#39;s authorizations to interact with this resource and the internal configuration of the process engine. &#x60;OPTIONS /user&#x60; returns available interactions on the resource.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResourceOptionsDto</returns>
        public async System.Threading.Tasks.Task<ResourceOptionsDto> AvailableOperationsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<ResourceOptionsDto> localVarResponse = await AvailableOperationsWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Options The &#x60;/user&#x60; resource supports two custom &#x60;OPTIONS&#x60; requests, one for the resource as such and one for individual user instances. The &#x60;OPTIONS&#x60; request allows checking for the set of available operations that the currently authenticated user can perform on the /user resource. If the user can perform an operation or not may depend on various things, including the user&#39;s authorizations to interact with this resource and the internal configuration of the process engine. &#x60;OPTIONS /user&#x60; returns available interactions on the resource.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResourceOptionsDto)</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<ResourceOptionsDto>> AvailableOperationsWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.OptionsAsync<ResourceOptionsDto>("/user", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AvailableOperations", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Options The &#x60;/user&#x60; resource supports two custom &#x60;OPTIONS&#x60; requests, one for the resource as such and one for individual user instances. The &#x60;OPTIONS&#x60; request allows checking for the set of available operations that the currently authenticated user can perform on the /user resource. If the user can perform an operation or not may depend on various things, including the user&#39;s authorizations to interact with this resource and the internal configuration of the process engine. &#x60;OPTIONS /user/{id}&#x60; returns available interactions on a resource instance.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the user to be deleted.</param>
        /// <returns>ResourceOptionsDto</returns>
        public ResourceOptionsDto AvailableUserOperations(string id)
        {
            Camunda.OpenApi.Client.Client.ApiResponse<ResourceOptionsDto> localVarResponse = AvailableUserOperationsWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Options The &#x60;/user&#x60; resource supports two custom &#x60;OPTIONS&#x60; requests, one for the resource as such and one for individual user instances. The &#x60;OPTIONS&#x60; request allows checking for the set of available operations that the currently authenticated user can perform on the /user resource. If the user can perform an operation or not may depend on various things, including the user&#39;s authorizations to interact with this resource and the internal configuration of the process engine. &#x60;OPTIONS /user/{id}&#x60; returns available interactions on a resource instance.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the user to be deleted.</param>
        /// <returns>ApiResponse of ResourceOptionsDto</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<ResourceOptionsDto> AvailableUserOperationsWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling UserApi->AvailableUserOperations");

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Options<ResourceOptionsDto>("/user/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AvailableUserOperations", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Options The &#x60;/user&#x60; resource supports two custom &#x60;OPTIONS&#x60; requests, one for the resource as such and one for individual user instances. The &#x60;OPTIONS&#x60; request allows checking for the set of available operations that the currently authenticated user can perform on the /user resource. If the user can perform an operation or not may depend on various things, including the user&#39;s authorizations to interact with this resource and the internal configuration of the process engine. &#x60;OPTIONS /user/{id}&#x60; returns available interactions on a resource instance.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the user to be deleted.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResourceOptionsDto</returns>
        public async System.Threading.Tasks.Task<ResourceOptionsDto> AvailableUserOperationsAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<ResourceOptionsDto> localVarResponse = await AvailableUserOperationsWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Options The &#x60;/user&#x60; resource supports two custom &#x60;OPTIONS&#x60; requests, one for the resource as such and one for individual user instances. The &#x60;OPTIONS&#x60; request allows checking for the set of available operations that the currently authenticated user can perform on the /user resource. If the user can perform an operation or not may depend on various things, including the user&#39;s authorizations to interact with this resource and the internal configuration of the process engine. &#x60;OPTIONS /user/{id}&#x60; returns available interactions on a resource instance.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the user to be deleted.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResourceOptionsDto)</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<ResourceOptionsDto>> AvailableUserOperationsWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling UserApi->AvailableUserOperations");


            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.OptionsAsync<ResourceOptionsDto>("/user/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AvailableUserOperations", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Create a new user.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userDto"> (optional)</param>
        /// <returns></returns>
        public void CreateUser(UserDto userDto = default(UserDto))
        {
            CreateUserWithHttpInfo(userDto);
        }

        /// <summary>
        /// Create Create a new user.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userDto"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<Object> CreateUserWithHttpInfo(UserDto userDto = default(UserDto))
        {
            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = userDto;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/user/create", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateUser", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Create a new user.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CreateUserAsync(UserDto userDto = default(UserDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await CreateUserWithHttpInfoAsync(userDto, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Create Create a new user.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<Object>> CreateUserWithHttpInfoAsync(UserDto userDto = default(UserDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = userDto;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/user/create", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateUser", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Deletes a user by id.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the user to be deleted.</param>
        /// <returns></returns>
        public void DeleteUser(string id)
        {
            DeleteUserWithHttpInfo(id);
        }

        /// <summary>
        /// Delete Deletes a user by id.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the user to be deleted.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<Object> DeleteUserWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling UserApi->DeleteUser");

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/user/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteUser", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Deletes a user by id.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the user to be deleted.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteUserAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteUserWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete Deletes a user by id.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the user to be deleted.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<Object>> DeleteUserWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling UserApi->DeleteUser");


            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/user/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteUser", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get List Count Queries for the number of deployments that fulfill given parameters. Takes the same parameters as the [Get Users](https://docs.camunda.org/manual/7.15/reference/rest/user/get-query/) method.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Filter by user id (optional)</param>
        /// <param name="idIn">Filter by a comma-separated list of user ids. (optional)</param>
        /// <param name="firstName">Filter by the first name of the user. Exact match. (optional)</param>
        /// <param name="firstNameLike">Filter by the first name that the parameter is a substring of. (optional)</param>
        /// <param name="lastName">Filter by the last name of the user. Exact match. (optional)</param>
        /// <param name="lastNameLike">Filter by the last name that the parameter is a substring of. (optional)</param>
        /// <param name="email">Filter by the email of the user. Exact match. (optional)</param>
        /// <param name="emailLike">Filter by the email that the parameter is a substring of. (optional)</param>
        /// <param name="memberOfGroup">Filter for users which are members of the given group. (optional)</param>
        /// <param name="memberOfTenant">Filter for users which are members of the given tenant. (optional)</param>
        /// <param name="potentialStarter">Only select Users that are potential starter for the given process definition. (optional)</param>
        /// <returns>CountResultDto</returns>
        public CountResultDto GetUserCount(string id = default(string), string idIn = default(string), string firstName = default(string), string firstNameLike = default(string), string lastName = default(string), string lastNameLike = default(string), string email = default(string), string emailLike = default(string), string memberOfGroup = default(string), string memberOfTenant = default(string), string potentialStarter = default(string))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<CountResultDto> localVarResponse = GetUserCountWithHttpInfo(id, idIn, firstName, firstNameLike, lastName, lastNameLike, email, emailLike, memberOfGroup, memberOfTenant, potentialStarter);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get List Count Queries for the number of deployments that fulfill given parameters. Takes the same parameters as the [Get Users](https://docs.camunda.org/manual/7.15/reference/rest/user/get-query/) method.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Filter by user id (optional)</param>
        /// <param name="idIn">Filter by a comma-separated list of user ids. (optional)</param>
        /// <param name="firstName">Filter by the first name of the user. Exact match. (optional)</param>
        /// <param name="firstNameLike">Filter by the first name that the parameter is a substring of. (optional)</param>
        /// <param name="lastName">Filter by the last name of the user. Exact match. (optional)</param>
        /// <param name="lastNameLike">Filter by the last name that the parameter is a substring of. (optional)</param>
        /// <param name="email">Filter by the email of the user. Exact match. (optional)</param>
        /// <param name="emailLike">Filter by the email that the parameter is a substring of. (optional)</param>
        /// <param name="memberOfGroup">Filter for users which are members of the given group. (optional)</param>
        /// <param name="memberOfTenant">Filter for users which are members of the given tenant. (optional)</param>
        /// <param name="potentialStarter">Only select Users that are potential starter for the given process definition. (optional)</param>
        /// <returns>ApiResponse of CountResultDto</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<CountResultDto> GetUserCountWithHttpInfo(string id = default(string), string idIn = default(string), string firstName = default(string), string firstNameLike = default(string), string lastName = default(string), string lastNameLike = default(string), string email = default(string), string emailLike = default(string), string memberOfGroup = default(string), string memberOfTenant = default(string), string potentialStarter = default(string))
        {
            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            }
            if (idIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "idIn", idIn));
            }
            if (firstName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "firstName", firstName));
            }
            if (firstNameLike != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "firstNameLike", firstNameLike));
            }
            if (lastName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "lastName", lastName));
            }
            if (lastNameLike != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "lastNameLike", lastNameLike));
            }
            if (email != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "email", email));
            }
            if (emailLike != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "emailLike", emailLike));
            }
            if (memberOfGroup != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "memberOfGroup", memberOfGroup));
            }
            if (memberOfTenant != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "memberOfTenant", memberOfTenant));
            }
            if (potentialStarter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "potentialStarter", potentialStarter));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<CountResultDto>("/user/count", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserCount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get List Count Queries for the number of deployments that fulfill given parameters. Takes the same parameters as the [Get Users](https://docs.camunda.org/manual/7.15/reference/rest/user/get-query/) method.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Filter by user id (optional)</param>
        /// <param name="idIn">Filter by a comma-separated list of user ids. (optional)</param>
        /// <param name="firstName">Filter by the first name of the user. Exact match. (optional)</param>
        /// <param name="firstNameLike">Filter by the first name that the parameter is a substring of. (optional)</param>
        /// <param name="lastName">Filter by the last name of the user. Exact match. (optional)</param>
        /// <param name="lastNameLike">Filter by the last name that the parameter is a substring of. (optional)</param>
        /// <param name="email">Filter by the email of the user. Exact match. (optional)</param>
        /// <param name="emailLike">Filter by the email that the parameter is a substring of. (optional)</param>
        /// <param name="memberOfGroup">Filter for users which are members of the given group. (optional)</param>
        /// <param name="memberOfTenant">Filter for users which are members of the given tenant. (optional)</param>
        /// <param name="potentialStarter">Only select Users that are potential starter for the given process definition. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CountResultDto</returns>
        public async System.Threading.Tasks.Task<CountResultDto> GetUserCountAsync(string id = default(string), string idIn = default(string), string firstName = default(string), string firstNameLike = default(string), string lastName = default(string), string lastNameLike = default(string), string email = default(string), string emailLike = default(string), string memberOfGroup = default(string), string memberOfTenant = default(string), string potentialStarter = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<CountResultDto> localVarResponse = await GetUserCountWithHttpInfoAsync(id, idIn, firstName, firstNameLike, lastName, lastNameLike, email, emailLike, memberOfGroup, memberOfTenant, potentialStarter, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get List Count Queries for the number of deployments that fulfill given parameters. Takes the same parameters as the [Get Users](https://docs.camunda.org/manual/7.15/reference/rest/user/get-query/) method.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Filter by user id (optional)</param>
        /// <param name="idIn">Filter by a comma-separated list of user ids. (optional)</param>
        /// <param name="firstName">Filter by the first name of the user. Exact match. (optional)</param>
        /// <param name="firstNameLike">Filter by the first name that the parameter is a substring of. (optional)</param>
        /// <param name="lastName">Filter by the last name of the user. Exact match. (optional)</param>
        /// <param name="lastNameLike">Filter by the last name that the parameter is a substring of. (optional)</param>
        /// <param name="email">Filter by the email of the user. Exact match. (optional)</param>
        /// <param name="emailLike">Filter by the email that the parameter is a substring of. (optional)</param>
        /// <param name="memberOfGroup">Filter for users which are members of the given group. (optional)</param>
        /// <param name="memberOfTenant">Filter for users which are members of the given tenant. (optional)</param>
        /// <param name="potentialStarter">Only select Users that are potential starter for the given process definition. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CountResultDto)</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<CountResultDto>> GetUserCountWithHttpInfoAsync(string id = default(string), string idIn = default(string), string firstName = default(string), string firstNameLike = default(string), string lastName = default(string), string lastNameLike = default(string), string email = default(string), string emailLike = default(string), string memberOfGroup = default(string), string memberOfTenant = default(string), string potentialStarter = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            }
            if (idIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "idIn", idIn));
            }
            if (firstName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "firstName", firstName));
            }
            if (firstNameLike != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "firstNameLike", firstNameLike));
            }
            if (lastName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "lastName", lastName));
            }
            if (lastNameLike != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "lastNameLike", lastNameLike));
            }
            if (email != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "email", email));
            }
            if (emailLike != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "emailLike", emailLike));
            }
            if (memberOfGroup != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "memberOfGroup", memberOfGroup));
            }
            if (memberOfTenant != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "memberOfTenant", memberOfTenant));
            }
            if (potentialStarter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "potentialStarter", potentialStarter));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<CountResultDto>("/user/count", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserCount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Profile Retrieves a user&#39;s profile.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the user to retrieve.</param>
        /// <returns>UserProfileDto</returns>
        public UserProfileDto GetUserProfile(string id)
        {
            Camunda.OpenApi.Client.Client.ApiResponse<UserProfileDto> localVarResponse = GetUserProfileWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Profile Retrieves a user&#39;s profile.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the user to retrieve.</param>
        /// <returns>ApiResponse of UserProfileDto</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<UserProfileDto> GetUserProfileWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling UserApi->GetUserProfile");

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<UserProfileDto>("/user/{id}/profile", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserProfile", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Profile Retrieves a user&#39;s profile.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the user to retrieve.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserProfileDto</returns>
        public async System.Threading.Tasks.Task<UserProfileDto> GetUserProfileAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<UserProfileDto> localVarResponse = await GetUserProfileWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Profile Retrieves a user&#39;s profile.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the user to retrieve.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserProfileDto)</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<UserProfileDto>> GetUserProfileWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling UserApi->GetUserProfile");


            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<UserProfileDto>("/user/{id}/profile", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserProfile", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get List Query for a list of users using a list of parameters. The size of the result set can be retrieved by using the Get User Count method. [Get User Count](https://docs.camunda.org/manual/7.15/reference/rest/user/get-query-count/) method.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Filter by user id (optional)</param>
        /// <param name="idIn">Filter by a comma-separated list of user ids. (optional)</param>
        /// <param name="firstName">Filter by the first name of the user. Exact match. (optional)</param>
        /// <param name="firstNameLike">Filter by the first name that the parameter is a substring of. (optional)</param>
        /// <param name="lastName">Filter by the last name of the user. Exact match. (optional)</param>
        /// <param name="lastNameLike">Filter by the last name that the parameter is a substring of. (optional)</param>
        /// <param name="email">Filter by the email of the user. Exact match. (optional)</param>
        /// <param name="emailLike">Filter by the email that the parameter is a substring of. (optional)</param>
        /// <param name="memberOfGroup">Filter for users which are members of the given group. (optional)</param>
        /// <param name="memberOfTenant">Filter for users which are members of the given tenant. (optional)</param>
        /// <param name="potentialStarter">Only select Users that are potential starter for the given process definition. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <returns>List&lt;UserProfileDto&gt;</returns>
        public List<UserProfileDto> GetUsers(string id = default(string), string idIn = default(string), string firstName = default(string), string firstNameLike = default(string), string lastName = default(string), string lastNameLike = default(string), string email = default(string), string emailLike = default(string), string memberOfGroup = default(string), string memberOfTenant = default(string), string potentialStarter = default(string), string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<List<UserProfileDto>> localVarResponse = GetUsersWithHttpInfo(id, idIn, firstName, firstNameLike, lastName, lastNameLike, email, emailLike, memberOfGroup, memberOfTenant, potentialStarter, sortBy, sortOrder, firstResult, maxResults);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get List Query for a list of users using a list of parameters. The size of the result set can be retrieved by using the Get User Count method. [Get User Count](https://docs.camunda.org/manual/7.15/reference/rest/user/get-query-count/) method.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Filter by user id (optional)</param>
        /// <param name="idIn">Filter by a comma-separated list of user ids. (optional)</param>
        /// <param name="firstName">Filter by the first name of the user. Exact match. (optional)</param>
        /// <param name="firstNameLike">Filter by the first name that the parameter is a substring of. (optional)</param>
        /// <param name="lastName">Filter by the last name of the user. Exact match. (optional)</param>
        /// <param name="lastNameLike">Filter by the last name that the parameter is a substring of. (optional)</param>
        /// <param name="email">Filter by the email of the user. Exact match. (optional)</param>
        /// <param name="emailLike">Filter by the email that the parameter is a substring of. (optional)</param>
        /// <param name="memberOfGroup">Filter for users which are members of the given group. (optional)</param>
        /// <param name="memberOfTenant">Filter for users which are members of the given tenant. (optional)</param>
        /// <param name="potentialStarter">Only select Users that are potential starter for the given process definition. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <returns>ApiResponse of List&lt;UserProfileDto&gt;</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<List<UserProfileDto>> GetUsersWithHttpInfo(string id = default(string), string idIn = default(string), string firstName = default(string), string firstNameLike = default(string), string lastName = default(string), string lastNameLike = default(string), string email = default(string), string emailLike = default(string), string memberOfGroup = default(string), string memberOfTenant = default(string), string potentialStarter = default(string), string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?))
        {
            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            }
            if (idIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "idIn", idIn));
            }
            if (firstName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "firstName", firstName));
            }
            if (firstNameLike != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "firstNameLike", firstNameLike));
            }
            if (lastName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "lastName", lastName));
            }
            if (lastNameLike != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "lastNameLike", lastNameLike));
            }
            if (email != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "email", email));
            }
            if (emailLike != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "emailLike", emailLike));
            }
            if (memberOfGroup != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "memberOfGroup", memberOfGroup));
            }
            if (memberOfTenant != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "memberOfTenant", memberOfTenant));
            }
            if (potentialStarter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "potentialStarter", potentialStarter));
            }
            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "sortBy", sortBy));
            }
            if (sortOrder != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "sortOrder", sortOrder));
            }
            if (firstResult != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "firstResult", firstResult));
            }
            if (maxResults != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "maxResults", maxResults));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<UserProfileDto>>("/user", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUsers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get List Query for a list of users using a list of parameters. The size of the result set can be retrieved by using the Get User Count method. [Get User Count](https://docs.camunda.org/manual/7.15/reference/rest/user/get-query-count/) method.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Filter by user id (optional)</param>
        /// <param name="idIn">Filter by a comma-separated list of user ids. (optional)</param>
        /// <param name="firstName">Filter by the first name of the user. Exact match. (optional)</param>
        /// <param name="firstNameLike">Filter by the first name that the parameter is a substring of. (optional)</param>
        /// <param name="lastName">Filter by the last name of the user. Exact match. (optional)</param>
        /// <param name="lastNameLike">Filter by the last name that the parameter is a substring of. (optional)</param>
        /// <param name="email">Filter by the email of the user. Exact match. (optional)</param>
        /// <param name="emailLike">Filter by the email that the parameter is a substring of. (optional)</param>
        /// <param name="memberOfGroup">Filter for users which are members of the given group. (optional)</param>
        /// <param name="memberOfTenant">Filter for users which are members of the given tenant. (optional)</param>
        /// <param name="potentialStarter">Only select Users that are potential starter for the given process definition. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;UserProfileDto&gt;</returns>
        public async System.Threading.Tasks.Task<List<UserProfileDto>> GetUsersAsync(string id = default(string), string idIn = default(string), string firstName = default(string), string firstNameLike = default(string), string lastName = default(string), string lastNameLike = default(string), string email = default(string), string emailLike = default(string), string memberOfGroup = default(string), string memberOfTenant = default(string), string potentialStarter = default(string), string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<List<UserProfileDto>> localVarResponse = await GetUsersWithHttpInfoAsync(id, idIn, firstName, firstNameLike, lastName, lastNameLike, email, emailLike, memberOfGroup, memberOfTenant, potentialStarter, sortBy, sortOrder, firstResult, maxResults, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get List Query for a list of users using a list of parameters. The size of the result set can be retrieved by using the Get User Count method. [Get User Count](https://docs.camunda.org/manual/7.15/reference/rest/user/get-query-count/) method.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Filter by user id (optional)</param>
        /// <param name="idIn">Filter by a comma-separated list of user ids. (optional)</param>
        /// <param name="firstName">Filter by the first name of the user. Exact match. (optional)</param>
        /// <param name="firstNameLike">Filter by the first name that the parameter is a substring of. (optional)</param>
        /// <param name="lastName">Filter by the last name of the user. Exact match. (optional)</param>
        /// <param name="lastNameLike">Filter by the last name that the parameter is a substring of. (optional)</param>
        /// <param name="email">Filter by the email of the user. Exact match. (optional)</param>
        /// <param name="emailLike">Filter by the email that the parameter is a substring of. (optional)</param>
        /// <param name="memberOfGroup">Filter for users which are members of the given group. (optional)</param>
        /// <param name="memberOfTenant">Filter for users which are members of the given tenant. (optional)</param>
        /// <param name="potentialStarter">Only select Users that are potential starter for the given process definition. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;UserProfileDto&gt;)</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<List<UserProfileDto>>> GetUsersWithHttpInfoAsync(string id = default(string), string idIn = default(string), string firstName = default(string), string firstNameLike = default(string), string lastName = default(string), string lastNameLike = default(string), string email = default(string), string emailLike = default(string), string memberOfGroup = default(string), string memberOfTenant = default(string), string potentialStarter = default(string), string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            }
            if (idIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "idIn", idIn));
            }
            if (firstName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "firstName", firstName));
            }
            if (firstNameLike != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "firstNameLike", firstNameLike));
            }
            if (lastName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "lastName", lastName));
            }
            if (lastNameLike != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "lastNameLike", lastNameLike));
            }
            if (email != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "email", email));
            }
            if (emailLike != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "emailLike", emailLike));
            }
            if (memberOfGroup != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "memberOfGroup", memberOfGroup));
            }
            if (memberOfTenant != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "memberOfTenant", memberOfTenant));
            }
            if (potentialStarter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "potentialStarter", potentialStarter));
            }
            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "sortBy", sortBy));
            }
            if (sortOrder != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "sortOrder", sortOrder));
            }
            if (firstResult != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "firstResult", firstResult));
            }
            if (maxResults != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "maxResults", maxResults));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<UserProfileDto>>("/user", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUsers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Unlock User Unlocks a user by id.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the user to be unlocked.</param>
        /// <returns></returns>
        public void UnlockUser(string id)
        {
            UnlockUserWithHttpInfo(id);
        }

        /// <summary>
        /// Unlock User Unlocks a user by id.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the user to be unlocked.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<Object> UnlockUserWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling UserApi->UnlockUser");

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/user/{id}/unlock", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UnlockUser", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Unlock User Unlocks a user by id.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the user to be unlocked.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UnlockUserAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await UnlockUserWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Unlock User Unlocks a user by id.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the user to be unlocked.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<Object>> UnlockUserWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling UserApi->UnlockUser");


            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/user/{id}/unlock", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UnlockUser", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Credentials Updates a user&#39;s credentials (password)
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the user to be updated.</param>
        /// <param name="password">The users new password.</param>
        /// <param name="authenticatedUserPassword">The password of the authenticated user who changes the password of the user (i.e., the user with passed id as path parameter).</param>
        /// <param name="userCredentialsDto"> (optional)</param>
        /// <returns>Object</returns>
        public Object UpdateCredentials(string id, string password, string authenticatedUserPassword, UserCredentialsDto userCredentialsDto = default(UserCredentialsDto))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<Object> localVarResponse = UpdateCredentialsWithHttpInfo(id, password, authenticatedUserPassword, userCredentialsDto);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Credentials Updates a user&#39;s credentials (password)
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the user to be updated.</param>
        /// <param name="password">The users new password.</param>
        /// <param name="authenticatedUserPassword">The password of the authenticated user who changes the password of the user (i.e., the user with passed id as path parameter).</param>
        /// <param name="userCredentialsDto"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<Object> UpdateCredentialsWithHttpInfo(string id, string password, string authenticatedUserPassword, UserCredentialsDto userCredentialsDto = default(UserCredentialsDto))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling UserApi->UpdateCredentials");

            // verify the required parameter 'password' is set
            if (password == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'password' when calling UserApi->UpdateCredentials");

            // verify the required parameter 'authenticatedUserPassword' is set
            if (authenticatedUserPassword == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'authenticatedUserPassword' when calling UserApi->UpdateCredentials");

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "password", password));
            localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "authenticatedUserPassword", authenticatedUserPassword));
            localVarRequestOptions.Data = userCredentialsDto;


            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/user/{id}/credentials", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateCredentials", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Credentials Updates a user&#39;s credentials (password)
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the user to be updated.</param>
        /// <param name="password">The users new password.</param>
        /// <param name="authenticatedUserPassword">The password of the authenticated user who changes the password of the user (i.e., the user with passed id as path parameter).</param>
        /// <param name="userCredentialsDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> UpdateCredentialsAsync(string id, string password, string authenticatedUserPassword, UserCredentialsDto userCredentialsDto = default(UserCredentialsDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<Object> localVarResponse = await UpdateCredentialsWithHttpInfoAsync(id, password, authenticatedUserPassword, userCredentialsDto, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Credentials Updates a user&#39;s credentials (password)
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the user to be updated.</param>
        /// <param name="password">The users new password.</param>
        /// <param name="authenticatedUserPassword">The password of the authenticated user who changes the password of the user (i.e., the user with passed id as path parameter).</param>
        /// <param name="userCredentialsDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<Object>> UpdateCredentialsWithHttpInfoAsync(string id, string password, string authenticatedUserPassword, UserCredentialsDto userCredentialsDto = default(UserCredentialsDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling UserApi->UpdateCredentials");

            // verify the required parameter 'password' is set
            if (password == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'password' when calling UserApi->UpdateCredentials");

            // verify the required parameter 'authenticatedUserPassword' is set
            if (authenticatedUserPassword == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'authenticatedUserPassword' when calling UserApi->UpdateCredentials");


            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "password", password));
            localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "authenticatedUserPassword", authenticatedUserPassword));
            localVarRequestOptions.Data = userCredentialsDto;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/user/{id}/credentials", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateCredentials", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update User Profile Updates the profile information of an already existing user.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the user.</param>
        /// <param name="userProfileDto"> (optional)</param>
        /// <returns></returns>
        public void UpdateProfile(string id, UserProfileDto userProfileDto = default(UserProfileDto))
        {
            UpdateProfileWithHttpInfo(id, userProfileDto);
        }

        /// <summary>
        /// Update User Profile Updates the profile information of an already existing user.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the user.</param>
        /// <param name="userProfileDto"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<Object> UpdateProfileWithHttpInfo(string id, UserProfileDto userProfileDto = default(UserProfileDto))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling UserApi->UpdateProfile");

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = userProfileDto;


            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/user/{id}/profile", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateProfile", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update User Profile Updates the profile information of an already existing user.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the user.</param>
        /// <param name="userProfileDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateProfileAsync(string id, UserProfileDto userProfileDto = default(UserProfileDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await UpdateProfileWithHttpInfoAsync(id, userProfileDto, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Update User Profile Updates the profile information of an already existing user.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the user.</param>
        /// <param name="userProfileDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<Object>> UpdateProfileWithHttpInfoAsync(string id, UserProfileDto userProfileDto = default(UserProfileDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling UserApi->UpdateProfile");


            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = userProfileDto;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/user/{id}/profile", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateProfile", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
