/*
 * Camunda Platform REST API
 *
 * OpenApi Spec for Camunda Platform REST API.
 *
 * The version of the OpenAPI document: 7.21.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using Camunda.OpenApi.Client.Client;
using Camunda.OpenApi.Client.Model;

namespace Camunda.OpenApi.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IJobApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete Job
        /// </summary>
        /// <remarks>
        /// Deletes a job by id.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the job to be deleted.</param>
        /// <returns></returns>
        void DeleteJob(string id);

        /// <summary>
        /// Delete Job
        /// </summary>
        /// <remarks>
        /// Deletes a job by id.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the job to be deleted.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteJobWithHttpInfo(string id);
        /// <summary>
        /// Execute Job
        /// </summary>
        /// <remarks>
        /// Executes a job by id. **Note:** The execution of the job happens synchronously in the same thread.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the job to be executed.</param>
        /// <returns></returns>
        void ExecuteJob(string id);

        /// <summary>
        /// Execute Job
        /// </summary>
        /// <remarks>
        /// Executes a job by id. **Note:** The execution of the job happens synchronously in the same thread.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the job to be executed.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ExecuteJobWithHttpInfo(string id);
        /// <summary>
        /// Get Job
        /// </summary>
        /// <remarks>
        /// Retrieves a job by id, according to the &#x60;Job&#x60; interface in the engine.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the job to be retrieved.</param>
        /// <returns>JobDto</returns>
        JobDto GetJob(string id);

        /// <summary>
        /// Get Job
        /// </summary>
        /// <remarks>
        /// Retrieves a job by id, according to the &#x60;Job&#x60; interface in the engine.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the job to be retrieved.</param>
        /// <returns>ApiResponse of JobDto</returns>
        ApiResponse<JobDto> GetJobWithHttpInfo(string id);
        /// <summary>
        /// Get Jobs
        /// </summary>
        /// <remarks>
        /// Queries for jobs that fulfill given parameters. The size of the result set can be retrieved by using the [Get Job Count](https://docs.camunda.org/manual/7.21/reference/rest/job/get-query-count/) method.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">Filter by job id. (optional)</param>
        /// <param name="jobIds">Filter by a comma-separated list of job ids. (optional)</param>
        /// <param name="jobDefinitionId">Only select jobs which exist for the given job definition. (optional)</param>
        /// <param name="processInstanceId">Only select jobs which exist for the given process instance. (optional)</param>
        /// <param name="processInstanceIds">Only select jobs which exist for the given comma-separated list of process instance ids. (optional)</param>
        /// <param name="executionId">Only select jobs which exist for the given execution. (optional)</param>
        /// <param name="processDefinitionId">Filter by the id of the process definition the jobs run on. (optional)</param>
        /// <param name="processDefinitionKey">Filter by the key of the process definition the jobs run on. (optional)</param>
        /// <param name="activityId">Only select jobs which exist for an activity with the given id. (optional)</param>
        /// <param name="withRetriesLeft">Only select jobs which have retries left. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="executable">Only select jobs which are executable, i.e., retries &gt; 0 and due date is &#x60;null&#x60; or due date is in the past. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="timers">Only select jobs that are timers. Cannot be used together with &#x60;messages&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="messages">Only select jobs that are messages. Cannot be used together with &#x60;timers&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="dueDates">Only select jobs where the due date is lower or higher than the given date. Due date expressions are comma-separated and are structured as follows:  A valid condition value has the form &#x60;operator_value&#x60;. &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the date value as string.  Valid operator values are: &#x60;gt&#x60; - greater than; &#x60;lt&#x60; - lower than. &#x60;value&#x60; may not contain underscore or comma characters. (optional)</param>
        /// <param name="createTimes">Only select jobs created before or after the given date.  Create time expressions are comma-separated and are structured as follows:  A valid condition value has the form &#x60;operator_value&#x60;. &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the date value as string.  Valid operator values are: &#x60;gt&#x60; - greater than; &#x60;lt&#x60; - lower than. &#x60;value&#x60; may not contain underscore or comma characters. (optional)</param>
        /// <param name="withException">Only select jobs that failed due to an exception. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="exceptionMessage">Only select jobs that failed due to an exception with the given message. (optional)</param>
        /// <param name="failedActivityId">Only select jobs that failed due to an exception at an activity with the given id. (optional)</param>
        /// <param name="noRetriesLeft">Only select jobs which have no retries left. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="active">Only include active jobs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="suspended">Only include suspended jobs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="priorityLowerThanOrEquals">Only include jobs with a priority lower than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)</param>
        /// <param name="priorityHigherThanOrEquals">Only include jobs with a priority higher than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)</param>
        /// <param name="tenantIdIn">Only include jobs which belong to one of the passed comma-separated tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include jobs which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="includeJobsWithoutTenantId">Include jobs which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <returns>List&lt;JobDto&gt;</returns>
        List<JobDto> GetJobs(string jobId = default(string), string jobIds = default(string), string jobDefinitionId = default(string), string processInstanceId = default(string), string processInstanceIds = default(string), string executionId = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string activityId = default(string), bool? withRetriesLeft = default(bool?), bool? executable = default(bool?), bool? timers = default(bool?), bool? messages = default(bool?), string dueDates = default(string), string createTimes = default(string), bool? withException = default(bool?), string exceptionMessage = default(string), string failedActivityId = default(string), bool? noRetriesLeft = default(bool?), bool? active = default(bool?), bool? suspended = default(bool?), long? priorityLowerThanOrEquals = default(long?), long? priorityHigherThanOrEquals = default(long?), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), bool? includeJobsWithoutTenantId = default(bool?), string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?));

        /// <summary>
        /// Get Jobs
        /// </summary>
        /// <remarks>
        /// Queries for jobs that fulfill given parameters. The size of the result set can be retrieved by using the [Get Job Count](https://docs.camunda.org/manual/7.21/reference/rest/job/get-query-count/) method.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">Filter by job id. (optional)</param>
        /// <param name="jobIds">Filter by a comma-separated list of job ids. (optional)</param>
        /// <param name="jobDefinitionId">Only select jobs which exist for the given job definition. (optional)</param>
        /// <param name="processInstanceId">Only select jobs which exist for the given process instance. (optional)</param>
        /// <param name="processInstanceIds">Only select jobs which exist for the given comma-separated list of process instance ids. (optional)</param>
        /// <param name="executionId">Only select jobs which exist for the given execution. (optional)</param>
        /// <param name="processDefinitionId">Filter by the id of the process definition the jobs run on. (optional)</param>
        /// <param name="processDefinitionKey">Filter by the key of the process definition the jobs run on. (optional)</param>
        /// <param name="activityId">Only select jobs which exist for an activity with the given id. (optional)</param>
        /// <param name="withRetriesLeft">Only select jobs which have retries left. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="executable">Only select jobs which are executable, i.e., retries &gt; 0 and due date is &#x60;null&#x60; or due date is in the past. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="timers">Only select jobs that are timers. Cannot be used together with &#x60;messages&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="messages">Only select jobs that are messages. Cannot be used together with &#x60;timers&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="dueDates">Only select jobs where the due date is lower or higher than the given date. Due date expressions are comma-separated and are structured as follows:  A valid condition value has the form &#x60;operator_value&#x60;. &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the date value as string.  Valid operator values are: &#x60;gt&#x60; - greater than; &#x60;lt&#x60; - lower than. &#x60;value&#x60; may not contain underscore or comma characters. (optional)</param>
        /// <param name="createTimes">Only select jobs created before or after the given date.  Create time expressions are comma-separated and are structured as follows:  A valid condition value has the form &#x60;operator_value&#x60;. &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the date value as string.  Valid operator values are: &#x60;gt&#x60; - greater than; &#x60;lt&#x60; - lower than. &#x60;value&#x60; may not contain underscore or comma characters. (optional)</param>
        /// <param name="withException">Only select jobs that failed due to an exception. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="exceptionMessage">Only select jobs that failed due to an exception with the given message. (optional)</param>
        /// <param name="failedActivityId">Only select jobs that failed due to an exception at an activity with the given id. (optional)</param>
        /// <param name="noRetriesLeft">Only select jobs which have no retries left. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="active">Only include active jobs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="suspended">Only include suspended jobs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="priorityLowerThanOrEquals">Only include jobs with a priority lower than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)</param>
        /// <param name="priorityHigherThanOrEquals">Only include jobs with a priority higher than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)</param>
        /// <param name="tenantIdIn">Only include jobs which belong to one of the passed comma-separated tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include jobs which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="includeJobsWithoutTenantId">Include jobs which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <returns>ApiResponse of List&lt;JobDto&gt;</returns>
        ApiResponse<List<JobDto>> GetJobsWithHttpInfo(string jobId = default(string), string jobIds = default(string), string jobDefinitionId = default(string), string processInstanceId = default(string), string processInstanceIds = default(string), string executionId = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string activityId = default(string), bool? withRetriesLeft = default(bool?), bool? executable = default(bool?), bool? timers = default(bool?), bool? messages = default(bool?), string dueDates = default(string), string createTimes = default(string), bool? withException = default(bool?), string exceptionMessage = default(string), string failedActivityId = default(string), bool? noRetriesLeft = default(bool?), bool? active = default(bool?), bool? suspended = default(bool?), long? priorityLowerThanOrEquals = default(long?), long? priorityHigherThanOrEquals = default(long?), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), bool? includeJobsWithoutTenantId = default(bool?), string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?));
        /// <summary>
        /// Get Job Count
        /// </summary>
        /// <remarks>
        /// Queries for the number of jobs that fulfill given parameters. Takes the same parameters as the [Get Jobs](https://docs.camunda.org/manual/7.21/reference/rest/job/get-query/) method.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">Filter by job id. (optional)</param>
        /// <param name="jobIds">Filter by a comma-separated list of job ids. (optional)</param>
        /// <param name="jobDefinitionId">Only select jobs which exist for the given job definition. (optional)</param>
        /// <param name="processInstanceId">Only select jobs which exist for the given process instance. (optional)</param>
        /// <param name="processInstanceIds">Only select jobs which exist for the given comma-separated list of process instance ids. (optional)</param>
        /// <param name="executionId">Only select jobs which exist for the given execution. (optional)</param>
        /// <param name="processDefinitionId">Filter by the id of the process definition the jobs run on. (optional)</param>
        /// <param name="processDefinitionKey">Filter by the key of the process definition the jobs run on. (optional)</param>
        /// <param name="activityId">Only select jobs which exist for an activity with the given id. (optional)</param>
        /// <param name="withRetriesLeft">Only select jobs which have retries left. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="executable">Only select jobs which are executable, i.e., retries &gt; 0 and due date is &#x60;null&#x60; or due date is in the past. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="timers">Only select jobs that are timers. Cannot be used together with &#x60;messages&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="messages">Only select jobs that are messages. Cannot be used together with &#x60;timers&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="dueDates">Only select jobs where the due date is lower or higher than the given date. Due date expressions are comma-separated and are structured as follows:  A valid condition value has the form &#x60;operator_value&#x60;. &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the date value as string.  Valid operator values are: &#x60;gt&#x60; - greater than; &#x60;lt&#x60; - lower than. &#x60;value&#x60; may not contain underscore or comma characters. (optional)</param>
        /// <param name="createTimes">Only select jobs created before or after the given date.  Create time expressions are comma-separated and are structured as follows:  A valid condition value has the form &#x60;operator_value&#x60;. &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the date value as string.  Valid operator values are: &#x60;gt&#x60; - greater than; &#x60;lt&#x60; - lower than. &#x60;value&#x60; may not contain underscore or comma characters. (optional)</param>
        /// <param name="withException">Only select jobs that failed due to an exception. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="exceptionMessage">Only select jobs that failed due to an exception with the given message. (optional)</param>
        /// <param name="failedActivityId">Only select jobs that failed due to an exception at an activity with the given id. (optional)</param>
        /// <param name="noRetriesLeft">Only select jobs which have no retries left. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="active">Only include active jobs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="suspended">Only include suspended jobs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="priorityLowerThanOrEquals">Only include jobs with a priority lower than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)</param>
        /// <param name="priorityHigherThanOrEquals">Only include jobs with a priority higher than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)</param>
        /// <param name="tenantIdIn">Only include jobs which belong to one of the passed comma-separated tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include jobs which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="includeJobsWithoutTenantId">Include jobs which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <returns>CountResultDto</returns>
        CountResultDto GetJobsCount(string jobId = default(string), string jobIds = default(string), string jobDefinitionId = default(string), string processInstanceId = default(string), string processInstanceIds = default(string), string executionId = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string activityId = default(string), bool? withRetriesLeft = default(bool?), bool? executable = default(bool?), bool? timers = default(bool?), bool? messages = default(bool?), string dueDates = default(string), string createTimes = default(string), bool? withException = default(bool?), string exceptionMessage = default(string), string failedActivityId = default(string), bool? noRetriesLeft = default(bool?), bool? active = default(bool?), bool? suspended = default(bool?), long? priorityLowerThanOrEquals = default(long?), long? priorityHigherThanOrEquals = default(long?), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), bool? includeJobsWithoutTenantId = default(bool?));

        /// <summary>
        /// Get Job Count
        /// </summary>
        /// <remarks>
        /// Queries for the number of jobs that fulfill given parameters. Takes the same parameters as the [Get Jobs](https://docs.camunda.org/manual/7.21/reference/rest/job/get-query/) method.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">Filter by job id. (optional)</param>
        /// <param name="jobIds">Filter by a comma-separated list of job ids. (optional)</param>
        /// <param name="jobDefinitionId">Only select jobs which exist for the given job definition. (optional)</param>
        /// <param name="processInstanceId">Only select jobs which exist for the given process instance. (optional)</param>
        /// <param name="processInstanceIds">Only select jobs which exist for the given comma-separated list of process instance ids. (optional)</param>
        /// <param name="executionId">Only select jobs which exist for the given execution. (optional)</param>
        /// <param name="processDefinitionId">Filter by the id of the process definition the jobs run on. (optional)</param>
        /// <param name="processDefinitionKey">Filter by the key of the process definition the jobs run on. (optional)</param>
        /// <param name="activityId">Only select jobs which exist for an activity with the given id. (optional)</param>
        /// <param name="withRetriesLeft">Only select jobs which have retries left. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="executable">Only select jobs which are executable, i.e., retries &gt; 0 and due date is &#x60;null&#x60; or due date is in the past. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="timers">Only select jobs that are timers. Cannot be used together with &#x60;messages&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="messages">Only select jobs that are messages. Cannot be used together with &#x60;timers&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="dueDates">Only select jobs where the due date is lower or higher than the given date. Due date expressions are comma-separated and are structured as follows:  A valid condition value has the form &#x60;operator_value&#x60;. &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the date value as string.  Valid operator values are: &#x60;gt&#x60; - greater than; &#x60;lt&#x60; - lower than. &#x60;value&#x60; may not contain underscore or comma characters. (optional)</param>
        /// <param name="createTimes">Only select jobs created before or after the given date.  Create time expressions are comma-separated and are structured as follows:  A valid condition value has the form &#x60;operator_value&#x60;. &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the date value as string.  Valid operator values are: &#x60;gt&#x60; - greater than; &#x60;lt&#x60; - lower than. &#x60;value&#x60; may not contain underscore or comma characters. (optional)</param>
        /// <param name="withException">Only select jobs that failed due to an exception. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="exceptionMessage">Only select jobs that failed due to an exception with the given message. (optional)</param>
        /// <param name="failedActivityId">Only select jobs that failed due to an exception at an activity with the given id. (optional)</param>
        /// <param name="noRetriesLeft">Only select jobs which have no retries left. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="active">Only include active jobs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="suspended">Only include suspended jobs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="priorityLowerThanOrEquals">Only include jobs with a priority lower than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)</param>
        /// <param name="priorityHigherThanOrEquals">Only include jobs with a priority higher than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)</param>
        /// <param name="tenantIdIn">Only include jobs which belong to one of the passed comma-separated tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include jobs which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="includeJobsWithoutTenantId">Include jobs which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <returns>ApiResponse of CountResultDto</returns>
        ApiResponse<CountResultDto> GetJobsCountWithHttpInfo(string jobId = default(string), string jobIds = default(string), string jobDefinitionId = default(string), string processInstanceId = default(string), string processInstanceIds = default(string), string executionId = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string activityId = default(string), bool? withRetriesLeft = default(bool?), bool? executable = default(bool?), bool? timers = default(bool?), bool? messages = default(bool?), string dueDates = default(string), string createTimes = default(string), bool? withException = default(bool?), string exceptionMessage = default(string), string failedActivityId = default(string), bool? noRetriesLeft = default(bool?), bool? active = default(bool?), bool? suspended = default(bool?), long? priorityLowerThanOrEquals = default(long?), long? priorityHigherThanOrEquals = default(long?), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), bool? includeJobsWithoutTenantId = default(bool?));
        /// <summary>
        /// Get Exception Stacktrace
        /// </summary>
        /// <remarks>
        /// Retrieves the exception stacktrace corresponding to the passed job id.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the job to get the exception stacktrace for.</param>
        /// <returns>Object</returns>
        Object GetStacktrace(string id);

        /// <summary>
        /// Get Exception Stacktrace
        /// </summary>
        /// <remarks>
        /// Retrieves the exception stacktrace corresponding to the passed job id.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the job to get the exception stacktrace for.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GetStacktraceWithHttpInfo(string id);
        /// <summary>
        /// Get Jobs (POST)
        /// </summary>
        /// <remarks>
        /// Queries for jobs that fulfill given parameters. This method is slightly more powerful than the [Get Jobs](https://docs.camunda.org/manual/7.21/reference/rest/job/get-query/) method because it allows filtering by multiple jobs of types &#x60;String&#x60;, &#x60;Number&#x60; or &#x60;Boolean&#x60;.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="jobQueryDto"> (optional)</param>
        /// <returns>List&lt;JobDto&gt;</returns>
        List<JobDto> QueryJobs(int? firstResult = default(int?), int? maxResults = default(int?), JobQueryDto jobQueryDto = default(JobQueryDto));

        /// <summary>
        /// Get Jobs (POST)
        /// </summary>
        /// <remarks>
        /// Queries for jobs that fulfill given parameters. This method is slightly more powerful than the [Get Jobs](https://docs.camunda.org/manual/7.21/reference/rest/job/get-query/) method because it allows filtering by multiple jobs of types &#x60;String&#x60;, &#x60;Number&#x60; or &#x60;Boolean&#x60;.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="jobQueryDto"> (optional)</param>
        /// <returns>ApiResponse of List&lt;JobDto&gt;</returns>
        ApiResponse<List<JobDto>> QueryJobsWithHttpInfo(int? firstResult = default(int?), int? maxResults = default(int?), JobQueryDto jobQueryDto = default(JobQueryDto));
        /// <summary>
        /// Get Job Count (POST)
        /// </summary>
        /// <remarks>
        /// Queries for jobs that fulfill given parameters. This method takes the same message body as the [Get Jobs POST](https://docs.camunda.org/manual/7.21/reference/rest/job/post- query/) method and therefore it is slightly more powerful than the [Get Job Count](https://docs.camunda.org/manual/7.21/reference/rest/job/get-query-count/) method.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobQueryDto"> (optional)</param>
        /// <returns>CountResultDto</returns>
        CountResultDto QueryJobsCount(JobQueryDto jobQueryDto = default(JobQueryDto));

        /// <summary>
        /// Get Job Count (POST)
        /// </summary>
        /// <remarks>
        /// Queries for jobs that fulfill given parameters. This method takes the same message body as the [Get Jobs POST](https://docs.camunda.org/manual/7.21/reference/rest/job/post- query/) method and therefore it is slightly more powerful than the [Get Job Count](https://docs.camunda.org/manual/7.21/reference/rest/job/get-query-count/) method.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobQueryDto"> (optional)</param>
        /// <returns>ApiResponse of CountResultDto</returns>
        ApiResponse<CountResultDto> QueryJobsCountWithHttpInfo(JobQueryDto jobQueryDto = default(JobQueryDto));
        /// <summary>
        /// Recalculate Job Due Date
        /// </summary>
        /// <remarks>
        /// Recalculates the due date of a job by id.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the job to be updated.</param>
        /// <param name="creationDateBased">Recalculate the due date based on the creation date of the job or the current date. Value may only be &#x60;false&#x60;, as &#x60;true&#x60; is the default behavior.  (optional)</param>
        /// <returns></returns>
        void RecalculateDuedate(string id, bool? creationDateBased = default(bool?));

        /// <summary>
        /// Recalculate Job Due Date
        /// </summary>
        /// <remarks>
        /// Recalculates the due date of a job by id.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the job to be updated.</param>
        /// <param name="creationDateBased">Recalculate the due date based on the creation date of the job or the current date. Value may only be &#x60;false&#x60;, as &#x60;true&#x60; is the default behavior.  (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RecalculateDuedateWithHttpInfo(string id, bool? creationDateBased = default(bool?));
        /// <summary>
        /// Set Job Due Date
        /// </summary>
        /// <remarks>
        /// Updates the due date of a job by id.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the job to be updated.</param>
        /// <param name="jobDuedateDto"> (optional)</param>
        /// <returns></returns>
        void SetJobDuedate(string id, JobDuedateDto jobDuedateDto = default(JobDuedateDto));

        /// <summary>
        /// Set Job Due Date
        /// </summary>
        /// <remarks>
        /// Updates the due date of a job by id.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the job to be updated.</param>
        /// <param name="jobDuedateDto"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SetJobDuedateWithHttpInfo(string id, JobDuedateDto jobDuedateDto = default(JobDuedateDto));
        /// <summary>
        /// Set Job Priority
        /// </summary>
        /// <remarks>
        /// Sets the execution priority of a job by id.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the job to be updated.</param>
        /// <param name="priorityDto"> (optional)</param>
        /// <returns></returns>
        void SetJobPriority(string id, PriorityDto priorityDto = default(PriorityDto));

        /// <summary>
        /// Set Job Priority
        /// </summary>
        /// <remarks>
        /// Sets the execution priority of a job by id.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the job to be updated.</param>
        /// <param name="priorityDto"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SetJobPriorityWithHttpInfo(string id, PriorityDto priorityDto = default(PriorityDto));
        /// <summary>
        /// Set Job Retries
        /// </summary>
        /// <remarks>
        /// Sets the retries of the job to the given number of retries by id.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the job to be updated.</param>
        /// <param name="jobRetriesDto"> (optional)</param>
        /// <returns></returns>
        void SetJobRetries(string id, JobRetriesDto jobRetriesDto = default(JobRetriesDto));

        /// <summary>
        /// Set Job Retries
        /// </summary>
        /// <remarks>
        /// Sets the retries of the job to the given number of retries by id.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the job to be updated.</param>
        /// <param name="jobRetriesDto"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SetJobRetriesWithHttpInfo(string id, JobRetriesDto jobRetriesDto = default(JobRetriesDto));
        /// <summary>
        /// Set Job Retries Async (POST)
        /// </summary>
        /// <remarks>
        /// Create a batch to set retries of jobs asynchronously.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setJobRetriesDto"> (optional)</param>
        /// <returns>BatchDto</returns>
        BatchDto SetJobRetriesAsyncOperation(SetJobRetriesDto setJobRetriesDto = default(SetJobRetriesDto));

        /// <summary>
        /// Set Job Retries Async (POST)
        /// </summary>
        /// <remarks>
        /// Create a batch to set retries of jobs asynchronously.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setJobRetriesDto"> (optional)</param>
        /// <returns>ApiResponse of BatchDto</returns>
        ApiResponse<BatchDto> SetJobRetriesAsyncOperationWithHttpInfo(SetJobRetriesDto setJobRetriesDto = default(SetJobRetriesDto));
        /// <summary>
        /// Activate/Suspend Job By Id
        /// </summary>
        /// <remarks>
        /// Activates or suspends a given job by id.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the job to activate or suspend.</param>
        /// <param name="suspensionStateDto"> (optional)</param>
        /// <returns></returns>
        void UpdateJobSuspensionState(string id, SuspensionStateDto suspensionStateDto = default(SuspensionStateDto));

        /// <summary>
        /// Activate/Suspend Job By Id
        /// </summary>
        /// <remarks>
        /// Activates or suspends a given job by id.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the job to activate or suspend.</param>
        /// <param name="suspensionStateDto"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateJobSuspensionStateWithHttpInfo(string id, SuspensionStateDto suspensionStateDto = default(SuspensionStateDto));
        /// <summary>
        /// Activate/Suspend Jobs
        /// </summary>
        /// <remarks>
        /// Activates or suspends jobs matching the given criterion. This can only be on of: * &#x60;jobDefinitionId&#x60; * &#x60;processDefinitionId&#x60; * &#x60;processInstanceId&#x60; * &#x60;processDefinitionKey&#x60;
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobSuspensionStateDto"> (optional)</param>
        /// <returns></returns>
        void UpdateSuspensionStateBy(JobSuspensionStateDto jobSuspensionStateDto = default(JobSuspensionStateDto));

        /// <summary>
        /// Activate/Suspend Jobs
        /// </summary>
        /// <remarks>
        /// Activates or suspends jobs matching the given criterion. This can only be on of: * &#x60;jobDefinitionId&#x60; * &#x60;processDefinitionId&#x60; * &#x60;processInstanceId&#x60; * &#x60;processDefinitionKey&#x60;
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobSuspensionStateDto"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateSuspensionStateByWithHttpInfo(JobSuspensionStateDto jobSuspensionStateDto = default(JobSuspensionStateDto));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IJobApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Delete Job
        /// </summary>
        /// <remarks>
        /// Deletes a job by id.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the job to be deleted.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteJobAsync(string id, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Delete Job
        /// </summary>
        /// <remarks>
        /// Deletes a job by id.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the job to be deleted.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteJobWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Execute Job
        /// </summary>
        /// <remarks>
        /// Executes a job by id. **Note:** The execution of the job happens synchronously in the same thread.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the job to be executed.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ExecuteJobAsync(string id, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Execute Job
        /// </summary>
        /// <remarks>
        /// Executes a job by id. **Note:** The execution of the job happens synchronously in the same thread.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the job to be executed.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ExecuteJobWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get Job
        /// </summary>
        /// <remarks>
        /// Retrieves a job by id, according to the &#x60;Job&#x60; interface in the engine.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the job to be retrieved.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JobDto</returns>
        System.Threading.Tasks.Task<JobDto> GetJobAsync(string id, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get Job
        /// </summary>
        /// <remarks>
        /// Retrieves a job by id, according to the &#x60;Job&#x60; interface in the engine.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the job to be retrieved.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JobDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<JobDto>> GetJobWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get Jobs
        /// </summary>
        /// <remarks>
        /// Queries for jobs that fulfill given parameters. The size of the result set can be retrieved by using the [Get Job Count](https://docs.camunda.org/manual/7.21/reference/rest/job/get-query-count/) method.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">Filter by job id. (optional)</param>
        /// <param name="jobIds">Filter by a comma-separated list of job ids. (optional)</param>
        /// <param name="jobDefinitionId">Only select jobs which exist for the given job definition. (optional)</param>
        /// <param name="processInstanceId">Only select jobs which exist for the given process instance. (optional)</param>
        /// <param name="processInstanceIds">Only select jobs which exist for the given comma-separated list of process instance ids. (optional)</param>
        /// <param name="executionId">Only select jobs which exist for the given execution. (optional)</param>
        /// <param name="processDefinitionId">Filter by the id of the process definition the jobs run on. (optional)</param>
        /// <param name="processDefinitionKey">Filter by the key of the process definition the jobs run on. (optional)</param>
        /// <param name="activityId">Only select jobs which exist for an activity with the given id. (optional)</param>
        /// <param name="withRetriesLeft">Only select jobs which have retries left. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="executable">Only select jobs which are executable, i.e., retries &gt; 0 and due date is &#x60;null&#x60; or due date is in the past. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="timers">Only select jobs that are timers. Cannot be used together with &#x60;messages&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="messages">Only select jobs that are messages. Cannot be used together with &#x60;timers&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="dueDates">Only select jobs where the due date is lower or higher than the given date. Due date expressions are comma-separated and are structured as follows:  A valid condition value has the form &#x60;operator_value&#x60;. &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the date value as string.  Valid operator values are: &#x60;gt&#x60; - greater than; &#x60;lt&#x60; - lower than. &#x60;value&#x60; may not contain underscore or comma characters. (optional)</param>
        /// <param name="createTimes">Only select jobs created before or after the given date.  Create time expressions are comma-separated and are structured as follows:  A valid condition value has the form &#x60;operator_value&#x60;. &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the date value as string.  Valid operator values are: &#x60;gt&#x60; - greater than; &#x60;lt&#x60; - lower than. &#x60;value&#x60; may not contain underscore or comma characters. (optional)</param>
        /// <param name="withException">Only select jobs that failed due to an exception. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="exceptionMessage">Only select jobs that failed due to an exception with the given message. (optional)</param>
        /// <param name="failedActivityId">Only select jobs that failed due to an exception at an activity with the given id. (optional)</param>
        /// <param name="noRetriesLeft">Only select jobs which have no retries left. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="active">Only include active jobs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="suspended">Only include suspended jobs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="priorityLowerThanOrEquals">Only include jobs with a priority lower than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)</param>
        /// <param name="priorityHigherThanOrEquals">Only include jobs with a priority higher than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)</param>
        /// <param name="tenantIdIn">Only include jobs which belong to one of the passed comma-separated tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include jobs which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="includeJobsWithoutTenantId">Include jobs which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;JobDto&gt;</returns>
        System.Threading.Tasks.Task<List<JobDto>> GetJobsAsync(string jobId = default(string), string jobIds = default(string), string jobDefinitionId = default(string), string processInstanceId = default(string), string processInstanceIds = default(string), string executionId = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string activityId = default(string), bool? withRetriesLeft = default(bool?), bool? executable = default(bool?), bool? timers = default(bool?), bool? messages = default(bool?), string dueDates = default(string), string createTimes = default(string), bool? withException = default(bool?), string exceptionMessage = default(string), string failedActivityId = default(string), bool? noRetriesLeft = default(bool?), bool? active = default(bool?), bool? suspended = default(bool?), long? priorityLowerThanOrEquals = default(long?), long? priorityHigherThanOrEquals = default(long?), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), bool? includeJobsWithoutTenantId = default(bool?), string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get Jobs
        /// </summary>
        /// <remarks>
        /// Queries for jobs that fulfill given parameters. The size of the result set can be retrieved by using the [Get Job Count](https://docs.camunda.org/manual/7.21/reference/rest/job/get-query-count/) method.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">Filter by job id. (optional)</param>
        /// <param name="jobIds">Filter by a comma-separated list of job ids. (optional)</param>
        /// <param name="jobDefinitionId">Only select jobs which exist for the given job definition. (optional)</param>
        /// <param name="processInstanceId">Only select jobs which exist for the given process instance. (optional)</param>
        /// <param name="processInstanceIds">Only select jobs which exist for the given comma-separated list of process instance ids. (optional)</param>
        /// <param name="executionId">Only select jobs which exist for the given execution. (optional)</param>
        /// <param name="processDefinitionId">Filter by the id of the process definition the jobs run on. (optional)</param>
        /// <param name="processDefinitionKey">Filter by the key of the process definition the jobs run on. (optional)</param>
        /// <param name="activityId">Only select jobs which exist for an activity with the given id. (optional)</param>
        /// <param name="withRetriesLeft">Only select jobs which have retries left. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="executable">Only select jobs which are executable, i.e., retries &gt; 0 and due date is &#x60;null&#x60; or due date is in the past. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="timers">Only select jobs that are timers. Cannot be used together with &#x60;messages&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="messages">Only select jobs that are messages. Cannot be used together with &#x60;timers&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="dueDates">Only select jobs where the due date is lower or higher than the given date. Due date expressions are comma-separated and are structured as follows:  A valid condition value has the form &#x60;operator_value&#x60;. &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the date value as string.  Valid operator values are: &#x60;gt&#x60; - greater than; &#x60;lt&#x60; - lower than. &#x60;value&#x60; may not contain underscore or comma characters. (optional)</param>
        /// <param name="createTimes">Only select jobs created before or after the given date.  Create time expressions are comma-separated and are structured as follows:  A valid condition value has the form &#x60;operator_value&#x60;. &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the date value as string.  Valid operator values are: &#x60;gt&#x60; - greater than; &#x60;lt&#x60; - lower than. &#x60;value&#x60; may not contain underscore or comma characters. (optional)</param>
        /// <param name="withException">Only select jobs that failed due to an exception. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="exceptionMessage">Only select jobs that failed due to an exception with the given message. (optional)</param>
        /// <param name="failedActivityId">Only select jobs that failed due to an exception at an activity with the given id. (optional)</param>
        /// <param name="noRetriesLeft">Only select jobs which have no retries left. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="active">Only include active jobs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="suspended">Only include suspended jobs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="priorityLowerThanOrEquals">Only include jobs with a priority lower than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)</param>
        /// <param name="priorityHigherThanOrEquals">Only include jobs with a priority higher than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)</param>
        /// <param name="tenantIdIn">Only include jobs which belong to one of the passed comma-separated tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include jobs which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="includeJobsWithoutTenantId">Include jobs which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;JobDto&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<JobDto>>> GetJobsWithHttpInfoAsync(string jobId = default(string), string jobIds = default(string), string jobDefinitionId = default(string), string processInstanceId = default(string), string processInstanceIds = default(string), string executionId = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string activityId = default(string), bool? withRetriesLeft = default(bool?), bool? executable = default(bool?), bool? timers = default(bool?), bool? messages = default(bool?), string dueDates = default(string), string createTimes = default(string), bool? withException = default(bool?), string exceptionMessage = default(string), string failedActivityId = default(string), bool? noRetriesLeft = default(bool?), bool? active = default(bool?), bool? suspended = default(bool?), long? priorityLowerThanOrEquals = default(long?), long? priorityHigherThanOrEquals = default(long?), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), bool? includeJobsWithoutTenantId = default(bool?), string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get Job Count
        /// </summary>
        /// <remarks>
        /// Queries for the number of jobs that fulfill given parameters. Takes the same parameters as the [Get Jobs](https://docs.camunda.org/manual/7.21/reference/rest/job/get-query/) method.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">Filter by job id. (optional)</param>
        /// <param name="jobIds">Filter by a comma-separated list of job ids. (optional)</param>
        /// <param name="jobDefinitionId">Only select jobs which exist for the given job definition. (optional)</param>
        /// <param name="processInstanceId">Only select jobs which exist for the given process instance. (optional)</param>
        /// <param name="processInstanceIds">Only select jobs which exist for the given comma-separated list of process instance ids. (optional)</param>
        /// <param name="executionId">Only select jobs which exist for the given execution. (optional)</param>
        /// <param name="processDefinitionId">Filter by the id of the process definition the jobs run on. (optional)</param>
        /// <param name="processDefinitionKey">Filter by the key of the process definition the jobs run on. (optional)</param>
        /// <param name="activityId">Only select jobs which exist for an activity with the given id. (optional)</param>
        /// <param name="withRetriesLeft">Only select jobs which have retries left. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="executable">Only select jobs which are executable, i.e., retries &gt; 0 and due date is &#x60;null&#x60; or due date is in the past. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="timers">Only select jobs that are timers. Cannot be used together with &#x60;messages&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="messages">Only select jobs that are messages. Cannot be used together with &#x60;timers&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="dueDates">Only select jobs where the due date is lower or higher than the given date. Due date expressions are comma-separated and are structured as follows:  A valid condition value has the form &#x60;operator_value&#x60;. &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the date value as string.  Valid operator values are: &#x60;gt&#x60; - greater than; &#x60;lt&#x60; - lower than. &#x60;value&#x60; may not contain underscore or comma characters. (optional)</param>
        /// <param name="createTimes">Only select jobs created before or after the given date.  Create time expressions are comma-separated and are structured as follows:  A valid condition value has the form &#x60;operator_value&#x60;. &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the date value as string.  Valid operator values are: &#x60;gt&#x60; - greater than; &#x60;lt&#x60; - lower than. &#x60;value&#x60; may not contain underscore or comma characters. (optional)</param>
        /// <param name="withException">Only select jobs that failed due to an exception. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="exceptionMessage">Only select jobs that failed due to an exception with the given message. (optional)</param>
        /// <param name="failedActivityId">Only select jobs that failed due to an exception at an activity with the given id. (optional)</param>
        /// <param name="noRetriesLeft">Only select jobs which have no retries left. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="active">Only include active jobs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="suspended">Only include suspended jobs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="priorityLowerThanOrEquals">Only include jobs with a priority lower than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)</param>
        /// <param name="priorityHigherThanOrEquals">Only include jobs with a priority higher than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)</param>
        /// <param name="tenantIdIn">Only include jobs which belong to one of the passed comma-separated tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include jobs which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="includeJobsWithoutTenantId">Include jobs which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CountResultDto</returns>
        System.Threading.Tasks.Task<CountResultDto> GetJobsCountAsync(string jobId = default(string), string jobIds = default(string), string jobDefinitionId = default(string), string processInstanceId = default(string), string processInstanceIds = default(string), string executionId = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string activityId = default(string), bool? withRetriesLeft = default(bool?), bool? executable = default(bool?), bool? timers = default(bool?), bool? messages = default(bool?), string dueDates = default(string), string createTimes = default(string), bool? withException = default(bool?), string exceptionMessage = default(string), string failedActivityId = default(string), bool? noRetriesLeft = default(bool?), bool? active = default(bool?), bool? suspended = default(bool?), long? priorityLowerThanOrEquals = default(long?), long? priorityHigherThanOrEquals = default(long?), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), bool? includeJobsWithoutTenantId = default(bool?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get Job Count
        /// </summary>
        /// <remarks>
        /// Queries for the number of jobs that fulfill given parameters. Takes the same parameters as the [Get Jobs](https://docs.camunda.org/manual/7.21/reference/rest/job/get-query/) method.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">Filter by job id. (optional)</param>
        /// <param name="jobIds">Filter by a comma-separated list of job ids. (optional)</param>
        /// <param name="jobDefinitionId">Only select jobs which exist for the given job definition. (optional)</param>
        /// <param name="processInstanceId">Only select jobs which exist for the given process instance. (optional)</param>
        /// <param name="processInstanceIds">Only select jobs which exist for the given comma-separated list of process instance ids. (optional)</param>
        /// <param name="executionId">Only select jobs which exist for the given execution. (optional)</param>
        /// <param name="processDefinitionId">Filter by the id of the process definition the jobs run on. (optional)</param>
        /// <param name="processDefinitionKey">Filter by the key of the process definition the jobs run on. (optional)</param>
        /// <param name="activityId">Only select jobs which exist for an activity with the given id. (optional)</param>
        /// <param name="withRetriesLeft">Only select jobs which have retries left. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="executable">Only select jobs which are executable, i.e., retries &gt; 0 and due date is &#x60;null&#x60; or due date is in the past. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="timers">Only select jobs that are timers. Cannot be used together with &#x60;messages&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="messages">Only select jobs that are messages. Cannot be used together with &#x60;timers&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="dueDates">Only select jobs where the due date is lower or higher than the given date. Due date expressions are comma-separated and are structured as follows:  A valid condition value has the form &#x60;operator_value&#x60;. &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the date value as string.  Valid operator values are: &#x60;gt&#x60; - greater than; &#x60;lt&#x60; - lower than. &#x60;value&#x60; may not contain underscore or comma characters. (optional)</param>
        /// <param name="createTimes">Only select jobs created before or after the given date.  Create time expressions are comma-separated and are structured as follows:  A valid condition value has the form &#x60;operator_value&#x60;. &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the date value as string.  Valid operator values are: &#x60;gt&#x60; - greater than; &#x60;lt&#x60; - lower than. &#x60;value&#x60; may not contain underscore or comma characters. (optional)</param>
        /// <param name="withException">Only select jobs that failed due to an exception. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="exceptionMessage">Only select jobs that failed due to an exception with the given message. (optional)</param>
        /// <param name="failedActivityId">Only select jobs that failed due to an exception at an activity with the given id. (optional)</param>
        /// <param name="noRetriesLeft">Only select jobs which have no retries left. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="active">Only include active jobs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="suspended">Only include suspended jobs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="priorityLowerThanOrEquals">Only include jobs with a priority lower than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)</param>
        /// <param name="priorityHigherThanOrEquals">Only include jobs with a priority higher than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)</param>
        /// <param name="tenantIdIn">Only include jobs which belong to one of the passed comma-separated tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include jobs which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="includeJobsWithoutTenantId">Include jobs which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CountResultDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<CountResultDto>> GetJobsCountWithHttpInfoAsync(string jobId = default(string), string jobIds = default(string), string jobDefinitionId = default(string), string processInstanceId = default(string), string processInstanceIds = default(string), string executionId = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string activityId = default(string), bool? withRetriesLeft = default(bool?), bool? executable = default(bool?), bool? timers = default(bool?), bool? messages = default(bool?), string dueDates = default(string), string createTimes = default(string), bool? withException = default(bool?), string exceptionMessage = default(string), string failedActivityId = default(string), bool? noRetriesLeft = default(bool?), bool? active = default(bool?), bool? suspended = default(bool?), long? priorityLowerThanOrEquals = default(long?), long? priorityHigherThanOrEquals = default(long?), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), bool? includeJobsWithoutTenantId = default(bool?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get Exception Stacktrace
        /// </summary>
        /// <remarks>
        /// Retrieves the exception stacktrace corresponding to the passed job id.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the job to get the exception stacktrace for.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GetStacktraceAsync(string id, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get Exception Stacktrace
        /// </summary>
        /// <remarks>
        /// Retrieves the exception stacktrace corresponding to the passed job id.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the job to get the exception stacktrace for.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetStacktraceWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get Jobs (POST)
        /// </summary>
        /// <remarks>
        /// Queries for jobs that fulfill given parameters. This method is slightly more powerful than the [Get Jobs](https://docs.camunda.org/manual/7.21/reference/rest/job/get-query/) method because it allows filtering by multiple jobs of types &#x60;String&#x60;, &#x60;Number&#x60; or &#x60;Boolean&#x60;.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="jobQueryDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;JobDto&gt;</returns>
        System.Threading.Tasks.Task<List<JobDto>> QueryJobsAsync(int? firstResult = default(int?), int? maxResults = default(int?), JobQueryDto jobQueryDto = default(JobQueryDto), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get Jobs (POST)
        /// </summary>
        /// <remarks>
        /// Queries for jobs that fulfill given parameters. This method is slightly more powerful than the [Get Jobs](https://docs.camunda.org/manual/7.21/reference/rest/job/get-query/) method because it allows filtering by multiple jobs of types &#x60;String&#x60;, &#x60;Number&#x60; or &#x60;Boolean&#x60;.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="jobQueryDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;JobDto&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<JobDto>>> QueryJobsWithHttpInfoAsync(int? firstResult = default(int?), int? maxResults = default(int?), JobQueryDto jobQueryDto = default(JobQueryDto), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get Job Count (POST)
        /// </summary>
        /// <remarks>
        /// Queries for jobs that fulfill given parameters. This method takes the same message body as the [Get Jobs POST](https://docs.camunda.org/manual/7.21/reference/rest/job/post- query/) method and therefore it is slightly more powerful than the [Get Job Count](https://docs.camunda.org/manual/7.21/reference/rest/job/get-query-count/) method.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobQueryDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CountResultDto</returns>
        System.Threading.Tasks.Task<CountResultDto> QueryJobsCountAsync(JobQueryDto jobQueryDto = default(JobQueryDto), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get Job Count (POST)
        /// </summary>
        /// <remarks>
        /// Queries for jobs that fulfill given parameters. This method takes the same message body as the [Get Jobs POST](https://docs.camunda.org/manual/7.21/reference/rest/job/post- query/) method and therefore it is slightly more powerful than the [Get Job Count](https://docs.camunda.org/manual/7.21/reference/rest/job/get-query-count/) method.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobQueryDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CountResultDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<CountResultDto>> QueryJobsCountWithHttpInfoAsync(JobQueryDto jobQueryDto = default(JobQueryDto), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Recalculate Job Due Date
        /// </summary>
        /// <remarks>
        /// Recalculates the due date of a job by id.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the job to be updated.</param>
        /// <param name="creationDateBased">Recalculate the due date based on the creation date of the job or the current date. Value may only be &#x60;false&#x60;, as &#x60;true&#x60; is the default behavior.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RecalculateDuedateAsync(string id, bool? creationDateBased = default(bool?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Recalculate Job Due Date
        /// </summary>
        /// <remarks>
        /// Recalculates the due date of a job by id.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the job to be updated.</param>
        /// <param name="creationDateBased">Recalculate the due date based on the creation date of the job or the current date. Value may only be &#x60;false&#x60;, as &#x60;true&#x60; is the default behavior.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RecalculateDuedateWithHttpInfoAsync(string id, bool? creationDateBased = default(bool?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Set Job Due Date
        /// </summary>
        /// <remarks>
        /// Updates the due date of a job by id.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the job to be updated.</param>
        /// <param name="jobDuedateDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SetJobDuedateAsync(string id, JobDuedateDto jobDuedateDto = default(JobDuedateDto), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Set Job Due Date
        /// </summary>
        /// <remarks>
        /// Updates the due date of a job by id.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the job to be updated.</param>
        /// <param name="jobDuedateDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SetJobDuedateWithHttpInfoAsync(string id, JobDuedateDto jobDuedateDto = default(JobDuedateDto), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Set Job Priority
        /// </summary>
        /// <remarks>
        /// Sets the execution priority of a job by id.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the job to be updated.</param>
        /// <param name="priorityDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SetJobPriorityAsync(string id, PriorityDto priorityDto = default(PriorityDto), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Set Job Priority
        /// </summary>
        /// <remarks>
        /// Sets the execution priority of a job by id.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the job to be updated.</param>
        /// <param name="priorityDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SetJobPriorityWithHttpInfoAsync(string id, PriorityDto priorityDto = default(PriorityDto), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Set Job Retries
        /// </summary>
        /// <remarks>
        /// Sets the retries of the job to the given number of retries by id.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the job to be updated.</param>
        /// <param name="jobRetriesDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SetJobRetriesAsync(string id, JobRetriesDto jobRetriesDto = default(JobRetriesDto), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Set Job Retries
        /// </summary>
        /// <remarks>
        /// Sets the retries of the job to the given number of retries by id.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the job to be updated.</param>
        /// <param name="jobRetriesDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SetJobRetriesWithHttpInfoAsync(string id, JobRetriesDto jobRetriesDto = default(JobRetriesDto), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Set Job Retries Async (POST)
        /// </summary>
        /// <remarks>
        /// Create a batch to set retries of jobs asynchronously.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setJobRetriesDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchDto</returns>
        System.Threading.Tasks.Task<BatchDto> SetJobRetriesAsyncOperationAsync(SetJobRetriesDto setJobRetriesDto = default(SetJobRetriesDto), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Set Job Retries Async (POST)
        /// </summary>
        /// <remarks>
        /// Create a batch to set retries of jobs asynchronously.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setJobRetriesDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<BatchDto>> SetJobRetriesAsyncOperationWithHttpInfoAsync(SetJobRetriesDto setJobRetriesDto = default(SetJobRetriesDto), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Activate/Suspend Job By Id
        /// </summary>
        /// <remarks>
        /// Activates or suspends a given job by id.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the job to activate or suspend.</param>
        /// <param name="suspensionStateDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateJobSuspensionStateAsync(string id, SuspensionStateDto suspensionStateDto = default(SuspensionStateDto), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Activate/Suspend Job By Id
        /// </summary>
        /// <remarks>
        /// Activates or suspends a given job by id.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the job to activate or suspend.</param>
        /// <param name="suspensionStateDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateJobSuspensionStateWithHttpInfoAsync(string id, SuspensionStateDto suspensionStateDto = default(SuspensionStateDto), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Activate/Suspend Jobs
        /// </summary>
        /// <remarks>
        /// Activates or suspends jobs matching the given criterion. This can only be on of: * &#x60;jobDefinitionId&#x60; * &#x60;processDefinitionId&#x60; * &#x60;processInstanceId&#x60; * &#x60;processDefinitionKey&#x60;
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobSuspensionStateDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateSuspensionStateByAsync(JobSuspensionStateDto jobSuspensionStateDto = default(JobSuspensionStateDto), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Activate/Suspend Jobs
        /// </summary>
        /// <remarks>
        /// Activates or suspends jobs matching the given criterion. This can only be on of: * &#x60;jobDefinitionId&#x60; * &#x60;processDefinitionId&#x60; * &#x60;processInstanceId&#x60; * &#x60;processDefinitionKey&#x60;
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobSuspensionStateDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateSuspensionStateByWithHttpInfoAsync(JobSuspensionStateDto jobSuspensionStateDto = default(JobSuspensionStateDto), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IJobApi : IJobApiSync, IJobApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class JobApi : IDisposable, IJobApi
    {
        private Camunda.OpenApi.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="JobApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public JobApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="JobApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public JobApi(string basePath)
        {
            this.Configuration = Camunda.OpenApi.Client.Client.Configuration.MergeConfigurations(
                Camunda.OpenApi.Client.Client.GlobalConfiguration.Instance,
                new Camunda.OpenApi.Client.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new Camunda.OpenApi.Client.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = Camunda.OpenApi.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="JobApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public JobApi(Camunda.OpenApi.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Camunda.OpenApi.Client.Client.Configuration.MergeConfigurations(
                Camunda.OpenApi.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new Camunda.OpenApi.Client.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = Camunda.OpenApi.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="JobApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public JobApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="JobApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public JobApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = Camunda.OpenApi.Client.Client.Configuration.MergeConfigurations(
                Camunda.OpenApi.Client.Client.GlobalConfiguration.Instance,
                new Camunda.OpenApi.Client.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new Camunda.OpenApi.Client.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = Camunda.OpenApi.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="JobApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public JobApi(HttpClient client, Camunda.OpenApi.Client.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = Camunda.OpenApi.Client.Client.Configuration.MergeConfigurations(
                Camunda.OpenApi.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new Camunda.OpenApi.Client.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = Camunda.OpenApi.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="JobApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public JobApi(Camunda.OpenApi.Client.Client.ISynchronousClient client, Camunda.OpenApi.Client.Client.IAsynchronousClient asyncClient, Camunda.OpenApi.Client.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Camunda.OpenApi.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public Camunda.OpenApi.Client.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Camunda.OpenApi.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Camunda.OpenApi.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Camunda.OpenApi.Client.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Camunda.OpenApi.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Delete Job Deletes a job by id.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the job to be deleted.</param>
        /// <returns></returns>
        public void DeleteJob(string id)
        {
            DeleteJobWithHttpInfo(id);
        }

        /// <summary>
        /// Delete Job Deletes a job by id.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the job to be deleted.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<Object> DeleteJobWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling JobApi->DeleteJob");

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Camunda.OpenApi.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/job/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteJob", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Job Deletes a job by id.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the job to be deleted.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteJobAsync(string id, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await DeleteJobWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete Job Deletes a job by id.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the job to be deleted.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<Object>> DeleteJobWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling JobApi->DeleteJob");


            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Camunda.OpenApi.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/job/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteJob", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Execute Job Executes a job by id. **Note:** The execution of the job happens synchronously in the same thread.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the job to be executed.</param>
        /// <returns></returns>
        public void ExecuteJob(string id)
        {
            ExecuteJobWithHttpInfo(id);
        }

        /// <summary>
        /// Execute Job Executes a job by id. **Note:** The execution of the job happens synchronously in the same thread.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the job to be executed.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<Object> ExecuteJobWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling JobApi->ExecuteJob");

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Camunda.OpenApi.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/job/{id}/execute", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExecuteJob", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Execute Job Executes a job by id. **Note:** The execution of the job happens synchronously in the same thread.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the job to be executed.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ExecuteJobAsync(string id, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await ExecuteJobWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Execute Job Executes a job by id. **Note:** The execution of the job happens synchronously in the same thread.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the job to be executed.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<Object>> ExecuteJobWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling JobApi->ExecuteJob");


            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Camunda.OpenApi.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/job/{id}/execute", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExecuteJob", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Job Retrieves a job by id, according to the &#x60;Job&#x60; interface in the engine.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the job to be retrieved.</param>
        /// <returns>JobDto</returns>
        public JobDto GetJob(string id)
        {
            Camunda.OpenApi.Client.Client.ApiResponse<JobDto> localVarResponse = GetJobWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Job Retrieves a job by id, according to the &#x60;Job&#x60; interface in the engine.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the job to be retrieved.</param>
        /// <returns>ApiResponse of JobDto</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<JobDto> GetJobWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling JobApi->GetJob");

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Camunda.OpenApi.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<JobDto>("/job/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetJob", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Job Retrieves a job by id, according to the &#x60;Job&#x60; interface in the engine.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the job to be retrieved.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JobDto</returns>
        public async System.Threading.Tasks.Task<JobDto> GetJobAsync(string id, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<JobDto> localVarResponse = await GetJobWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Job Retrieves a job by id, according to the &#x60;Job&#x60; interface in the engine.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the job to be retrieved.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JobDto)</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<JobDto>> GetJobWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling JobApi->GetJob");


            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Camunda.OpenApi.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<JobDto>("/job/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetJob", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Jobs Queries for jobs that fulfill given parameters. The size of the result set can be retrieved by using the [Get Job Count](https://docs.camunda.org/manual/7.21/reference/rest/job/get-query-count/) method.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">Filter by job id. (optional)</param>
        /// <param name="jobIds">Filter by a comma-separated list of job ids. (optional)</param>
        /// <param name="jobDefinitionId">Only select jobs which exist for the given job definition. (optional)</param>
        /// <param name="processInstanceId">Only select jobs which exist for the given process instance. (optional)</param>
        /// <param name="processInstanceIds">Only select jobs which exist for the given comma-separated list of process instance ids. (optional)</param>
        /// <param name="executionId">Only select jobs which exist for the given execution. (optional)</param>
        /// <param name="processDefinitionId">Filter by the id of the process definition the jobs run on. (optional)</param>
        /// <param name="processDefinitionKey">Filter by the key of the process definition the jobs run on. (optional)</param>
        /// <param name="activityId">Only select jobs which exist for an activity with the given id. (optional)</param>
        /// <param name="withRetriesLeft">Only select jobs which have retries left. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="executable">Only select jobs which are executable, i.e., retries &gt; 0 and due date is &#x60;null&#x60; or due date is in the past. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="timers">Only select jobs that are timers. Cannot be used together with &#x60;messages&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="messages">Only select jobs that are messages. Cannot be used together with &#x60;timers&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="dueDates">Only select jobs where the due date is lower or higher than the given date. Due date expressions are comma-separated and are structured as follows:  A valid condition value has the form &#x60;operator_value&#x60;. &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the date value as string.  Valid operator values are: &#x60;gt&#x60; - greater than; &#x60;lt&#x60; - lower than. &#x60;value&#x60; may not contain underscore or comma characters. (optional)</param>
        /// <param name="createTimes">Only select jobs created before or after the given date.  Create time expressions are comma-separated and are structured as follows:  A valid condition value has the form &#x60;operator_value&#x60;. &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the date value as string.  Valid operator values are: &#x60;gt&#x60; - greater than; &#x60;lt&#x60; - lower than. &#x60;value&#x60; may not contain underscore or comma characters. (optional)</param>
        /// <param name="withException">Only select jobs that failed due to an exception. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="exceptionMessage">Only select jobs that failed due to an exception with the given message. (optional)</param>
        /// <param name="failedActivityId">Only select jobs that failed due to an exception at an activity with the given id. (optional)</param>
        /// <param name="noRetriesLeft">Only select jobs which have no retries left. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="active">Only include active jobs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="suspended">Only include suspended jobs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="priorityLowerThanOrEquals">Only include jobs with a priority lower than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)</param>
        /// <param name="priorityHigherThanOrEquals">Only include jobs with a priority higher than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)</param>
        /// <param name="tenantIdIn">Only include jobs which belong to one of the passed comma-separated tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include jobs which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="includeJobsWithoutTenantId">Include jobs which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <returns>List&lt;JobDto&gt;</returns>
        public List<JobDto> GetJobs(string jobId = default(string), string jobIds = default(string), string jobDefinitionId = default(string), string processInstanceId = default(string), string processInstanceIds = default(string), string executionId = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string activityId = default(string), bool? withRetriesLeft = default(bool?), bool? executable = default(bool?), bool? timers = default(bool?), bool? messages = default(bool?), string dueDates = default(string), string createTimes = default(string), bool? withException = default(bool?), string exceptionMessage = default(string), string failedActivityId = default(string), bool? noRetriesLeft = default(bool?), bool? active = default(bool?), bool? suspended = default(bool?), long? priorityLowerThanOrEquals = default(long?), long? priorityHigherThanOrEquals = default(long?), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), bool? includeJobsWithoutTenantId = default(bool?), string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<List<JobDto>> localVarResponse = GetJobsWithHttpInfo(jobId, jobIds, jobDefinitionId, processInstanceId, processInstanceIds, executionId, processDefinitionId, processDefinitionKey, activityId, withRetriesLeft, executable, timers, messages, dueDates, createTimes, withException, exceptionMessage, failedActivityId, noRetriesLeft, active, suspended, priorityLowerThanOrEquals, priorityHigherThanOrEquals, tenantIdIn, withoutTenantId, includeJobsWithoutTenantId, sortBy, sortOrder, firstResult, maxResults);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Jobs Queries for jobs that fulfill given parameters. The size of the result set can be retrieved by using the [Get Job Count](https://docs.camunda.org/manual/7.21/reference/rest/job/get-query-count/) method.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">Filter by job id. (optional)</param>
        /// <param name="jobIds">Filter by a comma-separated list of job ids. (optional)</param>
        /// <param name="jobDefinitionId">Only select jobs which exist for the given job definition. (optional)</param>
        /// <param name="processInstanceId">Only select jobs which exist for the given process instance. (optional)</param>
        /// <param name="processInstanceIds">Only select jobs which exist for the given comma-separated list of process instance ids. (optional)</param>
        /// <param name="executionId">Only select jobs which exist for the given execution. (optional)</param>
        /// <param name="processDefinitionId">Filter by the id of the process definition the jobs run on. (optional)</param>
        /// <param name="processDefinitionKey">Filter by the key of the process definition the jobs run on. (optional)</param>
        /// <param name="activityId">Only select jobs which exist for an activity with the given id. (optional)</param>
        /// <param name="withRetriesLeft">Only select jobs which have retries left. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="executable">Only select jobs which are executable, i.e., retries &gt; 0 and due date is &#x60;null&#x60; or due date is in the past. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="timers">Only select jobs that are timers. Cannot be used together with &#x60;messages&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="messages">Only select jobs that are messages. Cannot be used together with &#x60;timers&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="dueDates">Only select jobs where the due date is lower or higher than the given date. Due date expressions are comma-separated and are structured as follows:  A valid condition value has the form &#x60;operator_value&#x60;. &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the date value as string.  Valid operator values are: &#x60;gt&#x60; - greater than; &#x60;lt&#x60; - lower than. &#x60;value&#x60; may not contain underscore or comma characters. (optional)</param>
        /// <param name="createTimes">Only select jobs created before or after the given date.  Create time expressions are comma-separated and are structured as follows:  A valid condition value has the form &#x60;operator_value&#x60;. &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the date value as string.  Valid operator values are: &#x60;gt&#x60; - greater than; &#x60;lt&#x60; - lower than. &#x60;value&#x60; may not contain underscore or comma characters. (optional)</param>
        /// <param name="withException">Only select jobs that failed due to an exception. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="exceptionMessage">Only select jobs that failed due to an exception with the given message. (optional)</param>
        /// <param name="failedActivityId">Only select jobs that failed due to an exception at an activity with the given id. (optional)</param>
        /// <param name="noRetriesLeft">Only select jobs which have no retries left. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="active">Only include active jobs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="suspended">Only include suspended jobs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="priorityLowerThanOrEquals">Only include jobs with a priority lower than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)</param>
        /// <param name="priorityHigherThanOrEquals">Only include jobs with a priority higher than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)</param>
        /// <param name="tenantIdIn">Only include jobs which belong to one of the passed comma-separated tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include jobs which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="includeJobsWithoutTenantId">Include jobs which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <returns>ApiResponse of List&lt;JobDto&gt;</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<List<JobDto>> GetJobsWithHttpInfo(string jobId = default(string), string jobIds = default(string), string jobDefinitionId = default(string), string processInstanceId = default(string), string processInstanceIds = default(string), string executionId = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string activityId = default(string), bool? withRetriesLeft = default(bool?), bool? executable = default(bool?), bool? timers = default(bool?), bool? messages = default(bool?), string dueDates = default(string), string createTimes = default(string), bool? withException = default(bool?), string exceptionMessage = default(string), string failedActivityId = default(string), bool? noRetriesLeft = default(bool?), bool? active = default(bool?), bool? suspended = default(bool?), long? priorityLowerThanOrEquals = default(long?), long? priorityHigherThanOrEquals = default(long?), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), bool? includeJobsWithoutTenantId = default(bool?), string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?))
        {
            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (jobId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "jobId", jobId));
            }
            if (jobIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "jobIds", jobIds));
            }
            if (jobDefinitionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "jobDefinitionId", jobDefinitionId));
            }
            if (processInstanceId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processInstanceId", processInstanceId));
            }
            if (processInstanceIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processInstanceIds", processInstanceIds));
            }
            if (executionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "executionId", executionId));
            }
            if (processDefinitionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processDefinitionId", processDefinitionId));
            }
            if (processDefinitionKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processDefinitionKey", processDefinitionKey));
            }
            if (activityId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "activityId", activityId));
            }
            if (withRetriesLeft != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "withRetriesLeft", withRetriesLeft));
            }
            if (executable != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "executable", executable));
            }
            if (timers != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "timers", timers));
            }
            if (messages != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "messages", messages));
            }
            if (dueDates != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "dueDates", dueDates));
            }
            if (createTimes != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "createTimes", createTimes));
            }
            if (withException != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "withException", withException));
            }
            if (exceptionMessage != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "exceptionMessage", exceptionMessage));
            }
            if (failedActivityId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "failedActivityId", failedActivityId));
            }
            if (noRetriesLeft != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "noRetriesLeft", noRetriesLeft));
            }
            if (active != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "active", active));
            }
            if (suspended != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "suspended", suspended));
            }
            if (priorityLowerThanOrEquals != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "priorityLowerThanOrEquals", priorityLowerThanOrEquals));
            }
            if (priorityHigherThanOrEquals != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "priorityHigherThanOrEquals", priorityHigherThanOrEquals));
            }
            if (tenantIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "tenantIdIn", tenantIdIn));
            }
            if (withoutTenantId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "withoutTenantId", withoutTenantId));
            }
            if (includeJobsWithoutTenantId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "includeJobsWithoutTenantId", includeJobsWithoutTenantId));
            }
            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "sortBy", sortBy));
            }
            if (sortOrder != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "sortOrder", sortOrder));
            }
            if (firstResult != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "firstResult", firstResult));
            }
            if (maxResults != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "maxResults", maxResults));
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Camunda.OpenApi.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<JobDto>>("/job", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetJobs", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Jobs Queries for jobs that fulfill given parameters. The size of the result set can be retrieved by using the [Get Job Count](https://docs.camunda.org/manual/7.21/reference/rest/job/get-query-count/) method.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">Filter by job id. (optional)</param>
        /// <param name="jobIds">Filter by a comma-separated list of job ids. (optional)</param>
        /// <param name="jobDefinitionId">Only select jobs which exist for the given job definition. (optional)</param>
        /// <param name="processInstanceId">Only select jobs which exist for the given process instance. (optional)</param>
        /// <param name="processInstanceIds">Only select jobs which exist for the given comma-separated list of process instance ids. (optional)</param>
        /// <param name="executionId">Only select jobs which exist for the given execution. (optional)</param>
        /// <param name="processDefinitionId">Filter by the id of the process definition the jobs run on. (optional)</param>
        /// <param name="processDefinitionKey">Filter by the key of the process definition the jobs run on. (optional)</param>
        /// <param name="activityId">Only select jobs which exist for an activity with the given id. (optional)</param>
        /// <param name="withRetriesLeft">Only select jobs which have retries left. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="executable">Only select jobs which are executable, i.e., retries &gt; 0 and due date is &#x60;null&#x60; or due date is in the past. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="timers">Only select jobs that are timers. Cannot be used together with &#x60;messages&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="messages">Only select jobs that are messages. Cannot be used together with &#x60;timers&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="dueDates">Only select jobs where the due date is lower or higher than the given date. Due date expressions are comma-separated and are structured as follows:  A valid condition value has the form &#x60;operator_value&#x60;. &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the date value as string.  Valid operator values are: &#x60;gt&#x60; - greater than; &#x60;lt&#x60; - lower than. &#x60;value&#x60; may not contain underscore or comma characters. (optional)</param>
        /// <param name="createTimes">Only select jobs created before or after the given date.  Create time expressions are comma-separated and are structured as follows:  A valid condition value has the form &#x60;operator_value&#x60;. &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the date value as string.  Valid operator values are: &#x60;gt&#x60; - greater than; &#x60;lt&#x60; - lower than. &#x60;value&#x60; may not contain underscore or comma characters. (optional)</param>
        /// <param name="withException">Only select jobs that failed due to an exception. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="exceptionMessage">Only select jobs that failed due to an exception with the given message. (optional)</param>
        /// <param name="failedActivityId">Only select jobs that failed due to an exception at an activity with the given id. (optional)</param>
        /// <param name="noRetriesLeft">Only select jobs which have no retries left. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="active">Only include active jobs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="suspended">Only include suspended jobs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="priorityLowerThanOrEquals">Only include jobs with a priority lower than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)</param>
        /// <param name="priorityHigherThanOrEquals">Only include jobs with a priority higher than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)</param>
        /// <param name="tenantIdIn">Only include jobs which belong to one of the passed comma-separated tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include jobs which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="includeJobsWithoutTenantId">Include jobs which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;JobDto&gt;</returns>
        public async System.Threading.Tasks.Task<List<JobDto>> GetJobsAsync(string jobId = default(string), string jobIds = default(string), string jobDefinitionId = default(string), string processInstanceId = default(string), string processInstanceIds = default(string), string executionId = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string activityId = default(string), bool? withRetriesLeft = default(bool?), bool? executable = default(bool?), bool? timers = default(bool?), bool? messages = default(bool?), string dueDates = default(string), string createTimes = default(string), bool? withException = default(bool?), string exceptionMessage = default(string), string failedActivityId = default(string), bool? noRetriesLeft = default(bool?), bool? active = default(bool?), bool? suspended = default(bool?), long? priorityLowerThanOrEquals = default(long?), long? priorityHigherThanOrEquals = default(long?), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), bool? includeJobsWithoutTenantId = default(bool?), string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<List<JobDto>> localVarResponse = await GetJobsWithHttpInfoAsync(jobId, jobIds, jobDefinitionId, processInstanceId, processInstanceIds, executionId, processDefinitionId, processDefinitionKey, activityId, withRetriesLeft, executable, timers, messages, dueDates, createTimes, withException, exceptionMessage, failedActivityId, noRetriesLeft, active, suspended, priorityLowerThanOrEquals, priorityHigherThanOrEquals, tenantIdIn, withoutTenantId, includeJobsWithoutTenantId, sortBy, sortOrder, firstResult, maxResults, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Jobs Queries for jobs that fulfill given parameters. The size of the result set can be retrieved by using the [Get Job Count](https://docs.camunda.org/manual/7.21/reference/rest/job/get-query-count/) method.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">Filter by job id. (optional)</param>
        /// <param name="jobIds">Filter by a comma-separated list of job ids. (optional)</param>
        /// <param name="jobDefinitionId">Only select jobs which exist for the given job definition. (optional)</param>
        /// <param name="processInstanceId">Only select jobs which exist for the given process instance. (optional)</param>
        /// <param name="processInstanceIds">Only select jobs which exist for the given comma-separated list of process instance ids. (optional)</param>
        /// <param name="executionId">Only select jobs which exist for the given execution. (optional)</param>
        /// <param name="processDefinitionId">Filter by the id of the process definition the jobs run on. (optional)</param>
        /// <param name="processDefinitionKey">Filter by the key of the process definition the jobs run on. (optional)</param>
        /// <param name="activityId">Only select jobs which exist for an activity with the given id. (optional)</param>
        /// <param name="withRetriesLeft">Only select jobs which have retries left. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="executable">Only select jobs which are executable, i.e., retries &gt; 0 and due date is &#x60;null&#x60; or due date is in the past. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="timers">Only select jobs that are timers. Cannot be used together with &#x60;messages&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="messages">Only select jobs that are messages. Cannot be used together with &#x60;timers&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="dueDates">Only select jobs where the due date is lower or higher than the given date. Due date expressions are comma-separated and are structured as follows:  A valid condition value has the form &#x60;operator_value&#x60;. &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the date value as string.  Valid operator values are: &#x60;gt&#x60; - greater than; &#x60;lt&#x60; - lower than. &#x60;value&#x60; may not contain underscore or comma characters. (optional)</param>
        /// <param name="createTimes">Only select jobs created before or after the given date.  Create time expressions are comma-separated and are structured as follows:  A valid condition value has the form &#x60;operator_value&#x60;. &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the date value as string.  Valid operator values are: &#x60;gt&#x60; - greater than; &#x60;lt&#x60; - lower than. &#x60;value&#x60; may not contain underscore or comma characters. (optional)</param>
        /// <param name="withException">Only select jobs that failed due to an exception. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="exceptionMessage">Only select jobs that failed due to an exception with the given message. (optional)</param>
        /// <param name="failedActivityId">Only select jobs that failed due to an exception at an activity with the given id. (optional)</param>
        /// <param name="noRetriesLeft">Only select jobs which have no retries left. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="active">Only include active jobs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="suspended">Only include suspended jobs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="priorityLowerThanOrEquals">Only include jobs with a priority lower than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)</param>
        /// <param name="priorityHigherThanOrEquals">Only include jobs with a priority higher than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)</param>
        /// <param name="tenantIdIn">Only include jobs which belong to one of the passed comma-separated tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include jobs which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="includeJobsWithoutTenantId">Include jobs which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;JobDto&gt;)</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<List<JobDto>>> GetJobsWithHttpInfoAsync(string jobId = default(string), string jobIds = default(string), string jobDefinitionId = default(string), string processInstanceId = default(string), string processInstanceIds = default(string), string executionId = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string activityId = default(string), bool? withRetriesLeft = default(bool?), bool? executable = default(bool?), bool? timers = default(bool?), bool? messages = default(bool?), string dueDates = default(string), string createTimes = default(string), bool? withException = default(bool?), string exceptionMessage = default(string), string failedActivityId = default(string), bool? noRetriesLeft = default(bool?), bool? active = default(bool?), bool? suspended = default(bool?), long? priorityLowerThanOrEquals = default(long?), long? priorityHigherThanOrEquals = default(long?), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), bool? includeJobsWithoutTenantId = default(bool?), string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (jobId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "jobId", jobId));
            }
            if (jobIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "jobIds", jobIds));
            }
            if (jobDefinitionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "jobDefinitionId", jobDefinitionId));
            }
            if (processInstanceId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processInstanceId", processInstanceId));
            }
            if (processInstanceIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processInstanceIds", processInstanceIds));
            }
            if (executionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "executionId", executionId));
            }
            if (processDefinitionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processDefinitionId", processDefinitionId));
            }
            if (processDefinitionKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processDefinitionKey", processDefinitionKey));
            }
            if (activityId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "activityId", activityId));
            }
            if (withRetriesLeft != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "withRetriesLeft", withRetriesLeft));
            }
            if (executable != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "executable", executable));
            }
            if (timers != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "timers", timers));
            }
            if (messages != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "messages", messages));
            }
            if (dueDates != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "dueDates", dueDates));
            }
            if (createTimes != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "createTimes", createTimes));
            }
            if (withException != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "withException", withException));
            }
            if (exceptionMessage != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "exceptionMessage", exceptionMessage));
            }
            if (failedActivityId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "failedActivityId", failedActivityId));
            }
            if (noRetriesLeft != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "noRetriesLeft", noRetriesLeft));
            }
            if (active != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "active", active));
            }
            if (suspended != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "suspended", suspended));
            }
            if (priorityLowerThanOrEquals != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "priorityLowerThanOrEquals", priorityLowerThanOrEquals));
            }
            if (priorityHigherThanOrEquals != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "priorityHigherThanOrEquals", priorityHigherThanOrEquals));
            }
            if (tenantIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "tenantIdIn", tenantIdIn));
            }
            if (withoutTenantId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "withoutTenantId", withoutTenantId));
            }
            if (includeJobsWithoutTenantId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "includeJobsWithoutTenantId", includeJobsWithoutTenantId));
            }
            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "sortBy", sortBy));
            }
            if (sortOrder != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "sortOrder", sortOrder));
            }
            if (firstResult != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "firstResult", firstResult));
            }
            if (maxResults != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "maxResults", maxResults));
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Camunda.OpenApi.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<JobDto>>("/job", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetJobs", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Job Count Queries for the number of jobs that fulfill given parameters. Takes the same parameters as the [Get Jobs](https://docs.camunda.org/manual/7.21/reference/rest/job/get-query/) method.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">Filter by job id. (optional)</param>
        /// <param name="jobIds">Filter by a comma-separated list of job ids. (optional)</param>
        /// <param name="jobDefinitionId">Only select jobs which exist for the given job definition. (optional)</param>
        /// <param name="processInstanceId">Only select jobs which exist for the given process instance. (optional)</param>
        /// <param name="processInstanceIds">Only select jobs which exist for the given comma-separated list of process instance ids. (optional)</param>
        /// <param name="executionId">Only select jobs which exist for the given execution. (optional)</param>
        /// <param name="processDefinitionId">Filter by the id of the process definition the jobs run on. (optional)</param>
        /// <param name="processDefinitionKey">Filter by the key of the process definition the jobs run on. (optional)</param>
        /// <param name="activityId">Only select jobs which exist for an activity with the given id. (optional)</param>
        /// <param name="withRetriesLeft">Only select jobs which have retries left. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="executable">Only select jobs which are executable, i.e., retries &gt; 0 and due date is &#x60;null&#x60; or due date is in the past. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="timers">Only select jobs that are timers. Cannot be used together with &#x60;messages&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="messages">Only select jobs that are messages. Cannot be used together with &#x60;timers&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="dueDates">Only select jobs where the due date is lower or higher than the given date. Due date expressions are comma-separated and are structured as follows:  A valid condition value has the form &#x60;operator_value&#x60;. &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the date value as string.  Valid operator values are: &#x60;gt&#x60; - greater than; &#x60;lt&#x60; - lower than. &#x60;value&#x60; may not contain underscore or comma characters. (optional)</param>
        /// <param name="createTimes">Only select jobs created before or after the given date.  Create time expressions are comma-separated and are structured as follows:  A valid condition value has the form &#x60;operator_value&#x60;. &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the date value as string.  Valid operator values are: &#x60;gt&#x60; - greater than; &#x60;lt&#x60; - lower than. &#x60;value&#x60; may not contain underscore or comma characters. (optional)</param>
        /// <param name="withException">Only select jobs that failed due to an exception. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="exceptionMessage">Only select jobs that failed due to an exception with the given message. (optional)</param>
        /// <param name="failedActivityId">Only select jobs that failed due to an exception at an activity with the given id. (optional)</param>
        /// <param name="noRetriesLeft">Only select jobs which have no retries left. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="active">Only include active jobs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="suspended">Only include suspended jobs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="priorityLowerThanOrEquals">Only include jobs with a priority lower than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)</param>
        /// <param name="priorityHigherThanOrEquals">Only include jobs with a priority higher than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)</param>
        /// <param name="tenantIdIn">Only include jobs which belong to one of the passed comma-separated tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include jobs which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="includeJobsWithoutTenantId">Include jobs which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <returns>CountResultDto</returns>
        public CountResultDto GetJobsCount(string jobId = default(string), string jobIds = default(string), string jobDefinitionId = default(string), string processInstanceId = default(string), string processInstanceIds = default(string), string executionId = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string activityId = default(string), bool? withRetriesLeft = default(bool?), bool? executable = default(bool?), bool? timers = default(bool?), bool? messages = default(bool?), string dueDates = default(string), string createTimes = default(string), bool? withException = default(bool?), string exceptionMessage = default(string), string failedActivityId = default(string), bool? noRetriesLeft = default(bool?), bool? active = default(bool?), bool? suspended = default(bool?), long? priorityLowerThanOrEquals = default(long?), long? priorityHigherThanOrEquals = default(long?), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), bool? includeJobsWithoutTenantId = default(bool?))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<CountResultDto> localVarResponse = GetJobsCountWithHttpInfo(jobId, jobIds, jobDefinitionId, processInstanceId, processInstanceIds, executionId, processDefinitionId, processDefinitionKey, activityId, withRetriesLeft, executable, timers, messages, dueDates, createTimes, withException, exceptionMessage, failedActivityId, noRetriesLeft, active, suspended, priorityLowerThanOrEquals, priorityHigherThanOrEquals, tenantIdIn, withoutTenantId, includeJobsWithoutTenantId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Job Count Queries for the number of jobs that fulfill given parameters. Takes the same parameters as the [Get Jobs](https://docs.camunda.org/manual/7.21/reference/rest/job/get-query/) method.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">Filter by job id. (optional)</param>
        /// <param name="jobIds">Filter by a comma-separated list of job ids. (optional)</param>
        /// <param name="jobDefinitionId">Only select jobs which exist for the given job definition. (optional)</param>
        /// <param name="processInstanceId">Only select jobs which exist for the given process instance. (optional)</param>
        /// <param name="processInstanceIds">Only select jobs which exist for the given comma-separated list of process instance ids. (optional)</param>
        /// <param name="executionId">Only select jobs which exist for the given execution. (optional)</param>
        /// <param name="processDefinitionId">Filter by the id of the process definition the jobs run on. (optional)</param>
        /// <param name="processDefinitionKey">Filter by the key of the process definition the jobs run on. (optional)</param>
        /// <param name="activityId">Only select jobs which exist for an activity with the given id. (optional)</param>
        /// <param name="withRetriesLeft">Only select jobs which have retries left. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="executable">Only select jobs which are executable, i.e., retries &gt; 0 and due date is &#x60;null&#x60; or due date is in the past. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="timers">Only select jobs that are timers. Cannot be used together with &#x60;messages&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="messages">Only select jobs that are messages. Cannot be used together with &#x60;timers&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="dueDates">Only select jobs where the due date is lower or higher than the given date. Due date expressions are comma-separated and are structured as follows:  A valid condition value has the form &#x60;operator_value&#x60;. &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the date value as string.  Valid operator values are: &#x60;gt&#x60; - greater than; &#x60;lt&#x60; - lower than. &#x60;value&#x60; may not contain underscore or comma characters. (optional)</param>
        /// <param name="createTimes">Only select jobs created before or after the given date.  Create time expressions are comma-separated and are structured as follows:  A valid condition value has the form &#x60;operator_value&#x60;. &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the date value as string.  Valid operator values are: &#x60;gt&#x60; - greater than; &#x60;lt&#x60; - lower than. &#x60;value&#x60; may not contain underscore or comma characters. (optional)</param>
        /// <param name="withException">Only select jobs that failed due to an exception. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="exceptionMessage">Only select jobs that failed due to an exception with the given message. (optional)</param>
        /// <param name="failedActivityId">Only select jobs that failed due to an exception at an activity with the given id. (optional)</param>
        /// <param name="noRetriesLeft">Only select jobs which have no retries left. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="active">Only include active jobs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="suspended">Only include suspended jobs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="priorityLowerThanOrEquals">Only include jobs with a priority lower than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)</param>
        /// <param name="priorityHigherThanOrEquals">Only include jobs with a priority higher than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)</param>
        /// <param name="tenantIdIn">Only include jobs which belong to one of the passed comma-separated tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include jobs which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="includeJobsWithoutTenantId">Include jobs which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <returns>ApiResponse of CountResultDto</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<CountResultDto> GetJobsCountWithHttpInfo(string jobId = default(string), string jobIds = default(string), string jobDefinitionId = default(string), string processInstanceId = default(string), string processInstanceIds = default(string), string executionId = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string activityId = default(string), bool? withRetriesLeft = default(bool?), bool? executable = default(bool?), bool? timers = default(bool?), bool? messages = default(bool?), string dueDates = default(string), string createTimes = default(string), bool? withException = default(bool?), string exceptionMessage = default(string), string failedActivityId = default(string), bool? noRetriesLeft = default(bool?), bool? active = default(bool?), bool? suspended = default(bool?), long? priorityLowerThanOrEquals = default(long?), long? priorityHigherThanOrEquals = default(long?), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), bool? includeJobsWithoutTenantId = default(bool?))
        {
            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (jobId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "jobId", jobId));
            }
            if (jobIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "jobIds", jobIds));
            }
            if (jobDefinitionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "jobDefinitionId", jobDefinitionId));
            }
            if (processInstanceId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processInstanceId", processInstanceId));
            }
            if (processInstanceIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processInstanceIds", processInstanceIds));
            }
            if (executionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "executionId", executionId));
            }
            if (processDefinitionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processDefinitionId", processDefinitionId));
            }
            if (processDefinitionKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processDefinitionKey", processDefinitionKey));
            }
            if (activityId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "activityId", activityId));
            }
            if (withRetriesLeft != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "withRetriesLeft", withRetriesLeft));
            }
            if (executable != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "executable", executable));
            }
            if (timers != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "timers", timers));
            }
            if (messages != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "messages", messages));
            }
            if (dueDates != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "dueDates", dueDates));
            }
            if (createTimes != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "createTimes", createTimes));
            }
            if (withException != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "withException", withException));
            }
            if (exceptionMessage != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "exceptionMessage", exceptionMessage));
            }
            if (failedActivityId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "failedActivityId", failedActivityId));
            }
            if (noRetriesLeft != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "noRetriesLeft", noRetriesLeft));
            }
            if (active != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "active", active));
            }
            if (suspended != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "suspended", suspended));
            }
            if (priorityLowerThanOrEquals != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "priorityLowerThanOrEquals", priorityLowerThanOrEquals));
            }
            if (priorityHigherThanOrEquals != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "priorityHigherThanOrEquals", priorityHigherThanOrEquals));
            }
            if (tenantIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "tenantIdIn", tenantIdIn));
            }
            if (withoutTenantId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "withoutTenantId", withoutTenantId));
            }
            if (includeJobsWithoutTenantId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "includeJobsWithoutTenantId", includeJobsWithoutTenantId));
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Camunda.OpenApi.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<CountResultDto>("/job/count", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetJobsCount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Job Count Queries for the number of jobs that fulfill given parameters. Takes the same parameters as the [Get Jobs](https://docs.camunda.org/manual/7.21/reference/rest/job/get-query/) method.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">Filter by job id. (optional)</param>
        /// <param name="jobIds">Filter by a comma-separated list of job ids. (optional)</param>
        /// <param name="jobDefinitionId">Only select jobs which exist for the given job definition. (optional)</param>
        /// <param name="processInstanceId">Only select jobs which exist for the given process instance. (optional)</param>
        /// <param name="processInstanceIds">Only select jobs which exist for the given comma-separated list of process instance ids. (optional)</param>
        /// <param name="executionId">Only select jobs which exist for the given execution. (optional)</param>
        /// <param name="processDefinitionId">Filter by the id of the process definition the jobs run on. (optional)</param>
        /// <param name="processDefinitionKey">Filter by the key of the process definition the jobs run on. (optional)</param>
        /// <param name="activityId">Only select jobs which exist for an activity with the given id. (optional)</param>
        /// <param name="withRetriesLeft">Only select jobs which have retries left. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="executable">Only select jobs which are executable, i.e., retries &gt; 0 and due date is &#x60;null&#x60; or due date is in the past. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="timers">Only select jobs that are timers. Cannot be used together with &#x60;messages&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="messages">Only select jobs that are messages. Cannot be used together with &#x60;timers&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="dueDates">Only select jobs where the due date is lower or higher than the given date. Due date expressions are comma-separated and are structured as follows:  A valid condition value has the form &#x60;operator_value&#x60;. &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the date value as string.  Valid operator values are: &#x60;gt&#x60; - greater than; &#x60;lt&#x60; - lower than. &#x60;value&#x60; may not contain underscore or comma characters. (optional)</param>
        /// <param name="createTimes">Only select jobs created before or after the given date.  Create time expressions are comma-separated and are structured as follows:  A valid condition value has the form &#x60;operator_value&#x60;. &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the date value as string.  Valid operator values are: &#x60;gt&#x60; - greater than; &#x60;lt&#x60; - lower than. &#x60;value&#x60; may not contain underscore or comma characters. (optional)</param>
        /// <param name="withException">Only select jobs that failed due to an exception. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="exceptionMessage">Only select jobs that failed due to an exception with the given message. (optional)</param>
        /// <param name="failedActivityId">Only select jobs that failed due to an exception at an activity with the given id. (optional)</param>
        /// <param name="noRetriesLeft">Only select jobs which have no retries left. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="active">Only include active jobs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="suspended">Only include suspended jobs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="priorityLowerThanOrEquals">Only include jobs with a priority lower than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)</param>
        /// <param name="priorityHigherThanOrEquals">Only include jobs with a priority higher than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)</param>
        /// <param name="tenantIdIn">Only include jobs which belong to one of the passed comma-separated tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include jobs which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="includeJobsWithoutTenantId">Include jobs which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CountResultDto</returns>
        public async System.Threading.Tasks.Task<CountResultDto> GetJobsCountAsync(string jobId = default(string), string jobIds = default(string), string jobDefinitionId = default(string), string processInstanceId = default(string), string processInstanceIds = default(string), string executionId = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string activityId = default(string), bool? withRetriesLeft = default(bool?), bool? executable = default(bool?), bool? timers = default(bool?), bool? messages = default(bool?), string dueDates = default(string), string createTimes = default(string), bool? withException = default(bool?), string exceptionMessage = default(string), string failedActivityId = default(string), bool? noRetriesLeft = default(bool?), bool? active = default(bool?), bool? suspended = default(bool?), long? priorityLowerThanOrEquals = default(long?), long? priorityHigherThanOrEquals = default(long?), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), bool? includeJobsWithoutTenantId = default(bool?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<CountResultDto> localVarResponse = await GetJobsCountWithHttpInfoAsync(jobId, jobIds, jobDefinitionId, processInstanceId, processInstanceIds, executionId, processDefinitionId, processDefinitionKey, activityId, withRetriesLeft, executable, timers, messages, dueDates, createTimes, withException, exceptionMessage, failedActivityId, noRetriesLeft, active, suspended, priorityLowerThanOrEquals, priorityHigherThanOrEquals, tenantIdIn, withoutTenantId, includeJobsWithoutTenantId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Job Count Queries for the number of jobs that fulfill given parameters. Takes the same parameters as the [Get Jobs](https://docs.camunda.org/manual/7.21/reference/rest/job/get-query/) method.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">Filter by job id. (optional)</param>
        /// <param name="jobIds">Filter by a comma-separated list of job ids. (optional)</param>
        /// <param name="jobDefinitionId">Only select jobs which exist for the given job definition. (optional)</param>
        /// <param name="processInstanceId">Only select jobs which exist for the given process instance. (optional)</param>
        /// <param name="processInstanceIds">Only select jobs which exist for the given comma-separated list of process instance ids. (optional)</param>
        /// <param name="executionId">Only select jobs which exist for the given execution. (optional)</param>
        /// <param name="processDefinitionId">Filter by the id of the process definition the jobs run on. (optional)</param>
        /// <param name="processDefinitionKey">Filter by the key of the process definition the jobs run on. (optional)</param>
        /// <param name="activityId">Only select jobs which exist for an activity with the given id. (optional)</param>
        /// <param name="withRetriesLeft">Only select jobs which have retries left. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="executable">Only select jobs which are executable, i.e., retries &gt; 0 and due date is &#x60;null&#x60; or due date is in the past. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="timers">Only select jobs that are timers. Cannot be used together with &#x60;messages&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="messages">Only select jobs that are messages. Cannot be used together with &#x60;timers&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="dueDates">Only select jobs where the due date is lower or higher than the given date. Due date expressions are comma-separated and are structured as follows:  A valid condition value has the form &#x60;operator_value&#x60;. &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the date value as string.  Valid operator values are: &#x60;gt&#x60; - greater than; &#x60;lt&#x60; - lower than. &#x60;value&#x60; may not contain underscore or comma characters. (optional)</param>
        /// <param name="createTimes">Only select jobs created before or after the given date.  Create time expressions are comma-separated and are structured as follows:  A valid condition value has the form &#x60;operator_value&#x60;. &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the date value as string.  Valid operator values are: &#x60;gt&#x60; - greater than; &#x60;lt&#x60; - lower than. &#x60;value&#x60; may not contain underscore or comma characters. (optional)</param>
        /// <param name="withException">Only select jobs that failed due to an exception. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="exceptionMessage">Only select jobs that failed due to an exception with the given message. (optional)</param>
        /// <param name="failedActivityId">Only select jobs that failed due to an exception at an activity with the given id. (optional)</param>
        /// <param name="noRetriesLeft">Only select jobs which have no retries left. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="active">Only include active jobs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="suspended">Only include suspended jobs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="priorityLowerThanOrEquals">Only include jobs with a priority lower than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)</param>
        /// <param name="priorityHigherThanOrEquals">Only include jobs with a priority higher than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)</param>
        /// <param name="tenantIdIn">Only include jobs which belong to one of the passed comma-separated tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include jobs which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="includeJobsWithoutTenantId">Include jobs which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CountResultDto)</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<CountResultDto>> GetJobsCountWithHttpInfoAsync(string jobId = default(string), string jobIds = default(string), string jobDefinitionId = default(string), string processInstanceId = default(string), string processInstanceIds = default(string), string executionId = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string activityId = default(string), bool? withRetriesLeft = default(bool?), bool? executable = default(bool?), bool? timers = default(bool?), bool? messages = default(bool?), string dueDates = default(string), string createTimes = default(string), bool? withException = default(bool?), string exceptionMessage = default(string), string failedActivityId = default(string), bool? noRetriesLeft = default(bool?), bool? active = default(bool?), bool? suspended = default(bool?), long? priorityLowerThanOrEquals = default(long?), long? priorityHigherThanOrEquals = default(long?), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), bool? includeJobsWithoutTenantId = default(bool?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (jobId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "jobId", jobId));
            }
            if (jobIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "jobIds", jobIds));
            }
            if (jobDefinitionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "jobDefinitionId", jobDefinitionId));
            }
            if (processInstanceId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processInstanceId", processInstanceId));
            }
            if (processInstanceIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processInstanceIds", processInstanceIds));
            }
            if (executionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "executionId", executionId));
            }
            if (processDefinitionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processDefinitionId", processDefinitionId));
            }
            if (processDefinitionKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processDefinitionKey", processDefinitionKey));
            }
            if (activityId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "activityId", activityId));
            }
            if (withRetriesLeft != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "withRetriesLeft", withRetriesLeft));
            }
            if (executable != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "executable", executable));
            }
            if (timers != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "timers", timers));
            }
            if (messages != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "messages", messages));
            }
            if (dueDates != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "dueDates", dueDates));
            }
            if (createTimes != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "createTimes", createTimes));
            }
            if (withException != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "withException", withException));
            }
            if (exceptionMessage != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "exceptionMessage", exceptionMessage));
            }
            if (failedActivityId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "failedActivityId", failedActivityId));
            }
            if (noRetriesLeft != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "noRetriesLeft", noRetriesLeft));
            }
            if (active != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "active", active));
            }
            if (suspended != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "suspended", suspended));
            }
            if (priorityLowerThanOrEquals != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "priorityLowerThanOrEquals", priorityLowerThanOrEquals));
            }
            if (priorityHigherThanOrEquals != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "priorityHigherThanOrEquals", priorityHigherThanOrEquals));
            }
            if (tenantIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "tenantIdIn", tenantIdIn));
            }
            if (withoutTenantId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "withoutTenantId", withoutTenantId));
            }
            if (includeJobsWithoutTenantId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "includeJobsWithoutTenantId", includeJobsWithoutTenantId));
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Camunda.OpenApi.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<CountResultDto>("/job/count", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetJobsCount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Exception Stacktrace Retrieves the exception stacktrace corresponding to the passed job id.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the job to get the exception stacktrace for.</param>
        /// <returns>Object</returns>
        public Object GetStacktrace(string id)
        {
            Camunda.OpenApi.Client.Client.ApiResponse<Object> localVarResponse = GetStacktraceWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Exception Stacktrace Retrieves the exception stacktrace corresponding to the passed job id.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the job to get the exception stacktrace for.</param>
        /// <returns>ApiResponse of Object</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<Object> GetStacktraceWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling JobApi->GetStacktrace");

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Camunda.OpenApi.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/job/{id}/stacktrace", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetStacktrace", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Exception Stacktrace Retrieves the exception stacktrace corresponding to the passed job id.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the job to get the exception stacktrace for.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetStacktraceAsync(string id, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<Object> localVarResponse = await GetStacktraceWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Exception Stacktrace Retrieves the exception stacktrace corresponding to the passed job id.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the job to get the exception stacktrace for.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<Object>> GetStacktraceWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling JobApi->GetStacktrace");


            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Camunda.OpenApi.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/job/{id}/stacktrace", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetStacktrace", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Jobs (POST) Queries for jobs that fulfill given parameters. This method is slightly more powerful than the [Get Jobs](https://docs.camunda.org/manual/7.21/reference/rest/job/get-query/) method because it allows filtering by multiple jobs of types &#x60;String&#x60;, &#x60;Number&#x60; or &#x60;Boolean&#x60;.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="jobQueryDto"> (optional)</param>
        /// <returns>List&lt;JobDto&gt;</returns>
        public List<JobDto> QueryJobs(int? firstResult = default(int?), int? maxResults = default(int?), JobQueryDto jobQueryDto = default(JobQueryDto))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<List<JobDto>> localVarResponse = QueryJobsWithHttpInfo(firstResult, maxResults, jobQueryDto);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Jobs (POST) Queries for jobs that fulfill given parameters. This method is slightly more powerful than the [Get Jobs](https://docs.camunda.org/manual/7.21/reference/rest/job/get-query/) method because it allows filtering by multiple jobs of types &#x60;String&#x60;, &#x60;Number&#x60; or &#x60;Boolean&#x60;.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="jobQueryDto"> (optional)</param>
        /// <returns>ApiResponse of List&lt;JobDto&gt;</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<List<JobDto>> QueryJobsWithHttpInfo(int? firstResult = default(int?), int? maxResults = default(int?), JobQueryDto jobQueryDto = default(JobQueryDto))
        {
            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (firstResult != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "firstResult", firstResult));
            }
            if (maxResults != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "maxResults", maxResults));
            }
            localVarRequestOptions.Data = jobQueryDto;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Camunda.OpenApi.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<List<JobDto>>("/job", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QueryJobs", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Jobs (POST) Queries for jobs that fulfill given parameters. This method is slightly more powerful than the [Get Jobs](https://docs.camunda.org/manual/7.21/reference/rest/job/get-query/) method because it allows filtering by multiple jobs of types &#x60;String&#x60;, &#x60;Number&#x60; or &#x60;Boolean&#x60;.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="jobQueryDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;JobDto&gt;</returns>
        public async System.Threading.Tasks.Task<List<JobDto>> QueryJobsAsync(int? firstResult = default(int?), int? maxResults = default(int?), JobQueryDto jobQueryDto = default(JobQueryDto), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<List<JobDto>> localVarResponse = await QueryJobsWithHttpInfoAsync(firstResult, maxResults, jobQueryDto, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Jobs (POST) Queries for jobs that fulfill given parameters. This method is slightly more powerful than the [Get Jobs](https://docs.camunda.org/manual/7.21/reference/rest/job/get-query/) method because it allows filtering by multiple jobs of types &#x60;String&#x60;, &#x60;Number&#x60; or &#x60;Boolean&#x60;.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="jobQueryDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;JobDto&gt;)</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<List<JobDto>>> QueryJobsWithHttpInfoAsync(int? firstResult = default(int?), int? maxResults = default(int?), JobQueryDto jobQueryDto = default(JobQueryDto), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (firstResult != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "firstResult", firstResult));
            }
            if (maxResults != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "maxResults", maxResults));
            }
            localVarRequestOptions.Data = jobQueryDto;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Camunda.OpenApi.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<List<JobDto>>("/job", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QueryJobs", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Job Count (POST) Queries for jobs that fulfill given parameters. This method takes the same message body as the [Get Jobs POST](https://docs.camunda.org/manual/7.21/reference/rest/job/post- query/) method and therefore it is slightly more powerful than the [Get Job Count](https://docs.camunda.org/manual/7.21/reference/rest/job/get-query-count/) method.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobQueryDto"> (optional)</param>
        /// <returns>CountResultDto</returns>
        public CountResultDto QueryJobsCount(JobQueryDto jobQueryDto = default(JobQueryDto))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<CountResultDto> localVarResponse = QueryJobsCountWithHttpInfo(jobQueryDto);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Job Count (POST) Queries for jobs that fulfill given parameters. This method takes the same message body as the [Get Jobs POST](https://docs.camunda.org/manual/7.21/reference/rest/job/post- query/) method and therefore it is slightly more powerful than the [Get Job Count](https://docs.camunda.org/manual/7.21/reference/rest/job/get-query-count/) method.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobQueryDto"> (optional)</param>
        /// <returns>ApiResponse of CountResultDto</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<CountResultDto> QueryJobsCountWithHttpInfo(JobQueryDto jobQueryDto = default(JobQueryDto))
        {
            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = jobQueryDto;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Camunda.OpenApi.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CountResultDto>("/job/count", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QueryJobsCount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Job Count (POST) Queries for jobs that fulfill given parameters. This method takes the same message body as the [Get Jobs POST](https://docs.camunda.org/manual/7.21/reference/rest/job/post- query/) method and therefore it is slightly more powerful than the [Get Job Count](https://docs.camunda.org/manual/7.21/reference/rest/job/get-query-count/) method.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobQueryDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CountResultDto</returns>
        public async System.Threading.Tasks.Task<CountResultDto> QueryJobsCountAsync(JobQueryDto jobQueryDto = default(JobQueryDto), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<CountResultDto> localVarResponse = await QueryJobsCountWithHttpInfoAsync(jobQueryDto, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Job Count (POST) Queries for jobs that fulfill given parameters. This method takes the same message body as the [Get Jobs POST](https://docs.camunda.org/manual/7.21/reference/rest/job/post- query/) method and therefore it is slightly more powerful than the [Get Job Count](https://docs.camunda.org/manual/7.21/reference/rest/job/get-query-count/) method.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobQueryDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CountResultDto)</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<CountResultDto>> QueryJobsCountWithHttpInfoAsync(JobQueryDto jobQueryDto = default(JobQueryDto), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = jobQueryDto;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Camunda.OpenApi.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<CountResultDto>("/job/count", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QueryJobsCount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Recalculate Job Due Date Recalculates the due date of a job by id.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the job to be updated.</param>
        /// <param name="creationDateBased">Recalculate the due date based on the creation date of the job or the current date. Value may only be &#x60;false&#x60;, as &#x60;true&#x60; is the default behavior.  (optional)</param>
        /// <returns></returns>
        public void RecalculateDuedate(string id, bool? creationDateBased = default(bool?))
        {
            RecalculateDuedateWithHttpInfo(id, creationDateBased);
        }

        /// <summary>
        /// Recalculate Job Due Date Recalculates the due date of a job by id.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the job to be updated.</param>
        /// <param name="creationDateBased">Recalculate the due date based on the creation date of the job or the current date. Value may only be &#x60;false&#x60;, as &#x60;true&#x60; is the default behavior.  (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<Object> RecalculateDuedateWithHttpInfo(string id, bool? creationDateBased = default(bool?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling JobApi->RecalculateDuedate");

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (creationDateBased != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "creationDateBased", creationDateBased));
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Camunda.OpenApi.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/job/{id}/duedate/recalculate", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RecalculateDuedate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Recalculate Job Due Date Recalculates the due date of a job by id.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the job to be updated.</param>
        /// <param name="creationDateBased">Recalculate the due date based on the creation date of the job or the current date. Value may only be &#x60;false&#x60;, as &#x60;true&#x60; is the default behavior.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RecalculateDuedateAsync(string id, bool? creationDateBased = default(bool?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await RecalculateDuedateWithHttpInfoAsync(id, creationDateBased, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Recalculate Job Due Date Recalculates the due date of a job by id.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the job to be updated.</param>
        /// <param name="creationDateBased">Recalculate the due date based on the creation date of the job or the current date. Value may only be &#x60;false&#x60;, as &#x60;true&#x60; is the default behavior.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<Object>> RecalculateDuedateWithHttpInfoAsync(string id, bool? creationDateBased = default(bool?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling JobApi->RecalculateDuedate");


            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (creationDateBased != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "creationDateBased", creationDateBased));
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Camunda.OpenApi.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/job/{id}/duedate/recalculate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RecalculateDuedate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set Job Due Date Updates the due date of a job by id.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the job to be updated.</param>
        /// <param name="jobDuedateDto"> (optional)</param>
        /// <returns></returns>
        public void SetJobDuedate(string id, JobDuedateDto jobDuedateDto = default(JobDuedateDto))
        {
            SetJobDuedateWithHttpInfo(id, jobDuedateDto);
        }

        /// <summary>
        /// Set Job Due Date Updates the due date of a job by id.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the job to be updated.</param>
        /// <param name="jobDuedateDto"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<Object> SetJobDuedateWithHttpInfo(string id, JobDuedateDto jobDuedateDto = default(JobDuedateDto))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling JobApi->SetJobDuedate");

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = jobDuedateDto;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Camunda.OpenApi.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/job/{id}/duedate", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetJobDuedate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set Job Due Date Updates the due date of a job by id.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the job to be updated.</param>
        /// <param name="jobDuedateDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SetJobDuedateAsync(string id, JobDuedateDto jobDuedateDto = default(JobDuedateDto), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await SetJobDuedateWithHttpInfoAsync(id, jobDuedateDto, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Set Job Due Date Updates the due date of a job by id.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the job to be updated.</param>
        /// <param name="jobDuedateDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<Object>> SetJobDuedateWithHttpInfoAsync(string id, JobDuedateDto jobDuedateDto = default(JobDuedateDto), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling JobApi->SetJobDuedate");


            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = jobDuedateDto;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Camunda.OpenApi.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/job/{id}/duedate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetJobDuedate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set Job Priority Sets the execution priority of a job by id.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the job to be updated.</param>
        /// <param name="priorityDto"> (optional)</param>
        /// <returns></returns>
        public void SetJobPriority(string id, PriorityDto priorityDto = default(PriorityDto))
        {
            SetJobPriorityWithHttpInfo(id, priorityDto);
        }

        /// <summary>
        /// Set Job Priority Sets the execution priority of a job by id.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the job to be updated.</param>
        /// <param name="priorityDto"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<Object> SetJobPriorityWithHttpInfo(string id, PriorityDto priorityDto = default(PriorityDto))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling JobApi->SetJobPriority");

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = priorityDto;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Camunda.OpenApi.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/job/{id}/priority", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetJobPriority", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set Job Priority Sets the execution priority of a job by id.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the job to be updated.</param>
        /// <param name="priorityDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SetJobPriorityAsync(string id, PriorityDto priorityDto = default(PriorityDto), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await SetJobPriorityWithHttpInfoAsync(id, priorityDto, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Set Job Priority Sets the execution priority of a job by id.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the job to be updated.</param>
        /// <param name="priorityDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<Object>> SetJobPriorityWithHttpInfoAsync(string id, PriorityDto priorityDto = default(PriorityDto), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling JobApi->SetJobPriority");


            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = priorityDto;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Camunda.OpenApi.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/job/{id}/priority", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetJobPriority", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set Job Retries Sets the retries of the job to the given number of retries by id.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the job to be updated.</param>
        /// <param name="jobRetriesDto"> (optional)</param>
        /// <returns></returns>
        public void SetJobRetries(string id, JobRetriesDto jobRetriesDto = default(JobRetriesDto))
        {
            SetJobRetriesWithHttpInfo(id, jobRetriesDto);
        }

        /// <summary>
        /// Set Job Retries Sets the retries of the job to the given number of retries by id.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the job to be updated.</param>
        /// <param name="jobRetriesDto"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<Object> SetJobRetriesWithHttpInfo(string id, JobRetriesDto jobRetriesDto = default(JobRetriesDto))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling JobApi->SetJobRetries");

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = jobRetriesDto;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Camunda.OpenApi.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/job/{id}/retries", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetJobRetries", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set Job Retries Sets the retries of the job to the given number of retries by id.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the job to be updated.</param>
        /// <param name="jobRetriesDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SetJobRetriesAsync(string id, JobRetriesDto jobRetriesDto = default(JobRetriesDto), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await SetJobRetriesWithHttpInfoAsync(id, jobRetriesDto, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Set Job Retries Sets the retries of the job to the given number of retries by id.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the job to be updated.</param>
        /// <param name="jobRetriesDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<Object>> SetJobRetriesWithHttpInfoAsync(string id, JobRetriesDto jobRetriesDto = default(JobRetriesDto), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling JobApi->SetJobRetries");


            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = jobRetriesDto;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Camunda.OpenApi.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/job/{id}/retries", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetJobRetries", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set Job Retries Async (POST) Create a batch to set retries of jobs asynchronously.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setJobRetriesDto"> (optional)</param>
        /// <returns>BatchDto</returns>
        public BatchDto SetJobRetriesAsyncOperation(SetJobRetriesDto setJobRetriesDto = default(SetJobRetriesDto))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<BatchDto> localVarResponse = SetJobRetriesAsyncOperationWithHttpInfo(setJobRetriesDto);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Set Job Retries Async (POST) Create a batch to set retries of jobs asynchronously.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setJobRetriesDto"> (optional)</param>
        /// <returns>ApiResponse of BatchDto</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<BatchDto> SetJobRetriesAsyncOperationWithHttpInfo(SetJobRetriesDto setJobRetriesDto = default(SetJobRetriesDto))
        {
            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = setJobRetriesDto;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Camunda.OpenApi.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<BatchDto>("/job/retries", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetJobRetriesAsyncOperation", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set Job Retries Async (POST) Create a batch to set retries of jobs asynchronously.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setJobRetriesDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchDto</returns>
        public async System.Threading.Tasks.Task<BatchDto> SetJobRetriesAsyncOperationAsync(SetJobRetriesDto setJobRetriesDto = default(SetJobRetriesDto), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<BatchDto> localVarResponse = await SetJobRetriesAsyncOperationWithHttpInfoAsync(setJobRetriesDto, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Set Job Retries Async (POST) Create a batch to set retries of jobs asynchronously.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setJobRetriesDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchDto)</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<BatchDto>> SetJobRetriesAsyncOperationWithHttpInfoAsync(SetJobRetriesDto setJobRetriesDto = default(SetJobRetriesDto), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = setJobRetriesDto;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Camunda.OpenApi.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<BatchDto>("/job/retries", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetJobRetriesAsyncOperation", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Activate/Suspend Job By Id Activates or suspends a given job by id.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the job to activate or suspend.</param>
        /// <param name="suspensionStateDto"> (optional)</param>
        /// <returns></returns>
        public void UpdateJobSuspensionState(string id, SuspensionStateDto suspensionStateDto = default(SuspensionStateDto))
        {
            UpdateJobSuspensionStateWithHttpInfo(id, suspensionStateDto);
        }

        /// <summary>
        /// Activate/Suspend Job By Id Activates or suspends a given job by id.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the job to activate or suspend.</param>
        /// <param name="suspensionStateDto"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<Object> UpdateJobSuspensionStateWithHttpInfo(string id, SuspensionStateDto suspensionStateDto = default(SuspensionStateDto))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling JobApi->UpdateJobSuspensionState");

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = suspensionStateDto;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Camunda.OpenApi.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/job/{id}/suspended", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateJobSuspensionState", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Activate/Suspend Job By Id Activates or suspends a given job by id.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the job to activate or suspend.</param>
        /// <param name="suspensionStateDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateJobSuspensionStateAsync(string id, SuspensionStateDto suspensionStateDto = default(SuspensionStateDto), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await UpdateJobSuspensionStateWithHttpInfoAsync(id, suspensionStateDto, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Activate/Suspend Job By Id Activates or suspends a given job by id.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the job to activate or suspend.</param>
        /// <param name="suspensionStateDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<Object>> UpdateJobSuspensionStateWithHttpInfoAsync(string id, SuspensionStateDto suspensionStateDto = default(SuspensionStateDto), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling JobApi->UpdateJobSuspensionState");


            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = suspensionStateDto;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Camunda.OpenApi.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/job/{id}/suspended", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateJobSuspensionState", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Activate/Suspend Jobs Activates or suspends jobs matching the given criterion. This can only be on of: * &#x60;jobDefinitionId&#x60; * &#x60;processDefinitionId&#x60; * &#x60;processInstanceId&#x60; * &#x60;processDefinitionKey&#x60;
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobSuspensionStateDto"> (optional)</param>
        /// <returns></returns>
        public void UpdateSuspensionStateBy(JobSuspensionStateDto jobSuspensionStateDto = default(JobSuspensionStateDto))
        {
            UpdateSuspensionStateByWithHttpInfo(jobSuspensionStateDto);
        }

        /// <summary>
        /// Activate/Suspend Jobs Activates or suspends jobs matching the given criterion. This can only be on of: * &#x60;jobDefinitionId&#x60; * &#x60;processDefinitionId&#x60; * &#x60;processInstanceId&#x60; * &#x60;processDefinitionKey&#x60;
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobSuspensionStateDto"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<Object> UpdateSuspensionStateByWithHttpInfo(JobSuspensionStateDto jobSuspensionStateDto = default(JobSuspensionStateDto))
        {
            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = jobSuspensionStateDto;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Camunda.OpenApi.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/job/suspended", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateSuspensionStateBy", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Activate/Suspend Jobs Activates or suspends jobs matching the given criterion. This can only be on of: * &#x60;jobDefinitionId&#x60; * &#x60;processDefinitionId&#x60; * &#x60;processInstanceId&#x60; * &#x60;processDefinitionKey&#x60;
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobSuspensionStateDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateSuspensionStateByAsync(JobSuspensionStateDto jobSuspensionStateDto = default(JobSuspensionStateDto), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await UpdateSuspensionStateByWithHttpInfoAsync(jobSuspensionStateDto, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Activate/Suspend Jobs Activates or suspends jobs matching the given criterion. This can only be on of: * &#x60;jobDefinitionId&#x60; * &#x60;processDefinitionId&#x60; * &#x60;processInstanceId&#x60; * &#x60;processDefinitionKey&#x60;
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobSuspensionStateDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<Object>> UpdateSuspensionStateByWithHttpInfoAsync(JobSuspensionStateDto jobSuspensionStateDto = default(JobSuspensionStateDto), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = jobSuspensionStateDto;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Camunda.OpenApi.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/job/suspended", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateSuspensionStateBy", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
