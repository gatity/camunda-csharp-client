/*
 * Camunda Platform REST API
 *
 * OpenApi Spec for Camunda Platform REST API.
 *
 * The version of the OpenAPI document: 7.17.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using Camunda.OpenApi.Client.Client;
using Camunda.OpenApi.Client.Model;

namespace Camunda.OpenApi.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProcessDefinitionApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete
        /// </summary>
        /// <remarks>
        /// Deletes a running process instance by id.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition to be deleted.</param>
        /// <param name="cascade">&#x60;true&#x60;, if all process instances, historic process instances and jobs for this process definition should be deleted. (optional)</param>
        /// <param name="skipCustomListeners">&#x60;true&#x60;, if only the built-in ExecutionListeners should be notified with the end event. (optional, default to false)</param>
        /// <param name="skipIoMappings">A boolean value to control whether input/output mappings should be executed during deletion. &#x60;true&#x60;, if input/output mappings should not be invoked. (optional, default to false)</param>
        /// <returns></returns>
        void DeleteProcessDefinition(string id, bool? cascade = default(bool?), bool? skipCustomListeners = default(bool?), bool? skipIoMappings = default(bool?));

        /// <summary>
        /// Delete
        /// </summary>
        /// <remarks>
        /// Deletes a running process instance by id.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition to be deleted.</param>
        /// <param name="cascade">&#x60;true&#x60;, if all process instances, historic process instances and jobs for this process definition should be deleted. (optional)</param>
        /// <param name="skipCustomListeners">&#x60;true&#x60;, if only the built-in ExecutionListeners should be notified with the end event. (optional, default to false)</param>
        /// <param name="skipIoMappings">A boolean value to control whether input/output mappings should be executed during deletion. &#x60;true&#x60;, if input/output mappings should not be invoked. (optional, default to false)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteProcessDefinitionWithHttpInfo(string id, bool? cascade = default(bool?), bool? skipCustomListeners = default(bool?), bool? skipIoMappings = default(bool?));
        /// <summary>
        /// Delete By Key
        /// </summary>
        /// <remarks>
        /// Deletes process definitions by a given key which belong to no tenant id.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definitions to be deleted.</param>
        /// <param name="cascade">&#x60;true&#x60;, if all process instances, historic process instances and jobs for this process definition should be deleted. (optional)</param>
        /// <param name="skipCustomListeners">&#x60;true&#x60;, if only the built-in ExecutionListeners should be notified with the end event. (optional, default to false)</param>
        /// <param name="skipIoMappings">A boolean value to control whether input/output mappings should be executed during deletion. &#x60;true&#x60;, if input/output mappings should not be invoked. (optional, default to false)</param>
        /// <returns></returns>
        void DeleteProcessDefinitionsByKey(string key, bool? cascade = default(bool?), bool? skipCustomListeners = default(bool?), bool? skipIoMappings = default(bool?));

        /// <summary>
        /// Delete By Key
        /// </summary>
        /// <remarks>
        /// Deletes process definitions by a given key which belong to no tenant id.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definitions to be deleted.</param>
        /// <param name="cascade">&#x60;true&#x60;, if all process instances, historic process instances and jobs for this process definition should be deleted. (optional)</param>
        /// <param name="skipCustomListeners">&#x60;true&#x60;, if only the built-in ExecutionListeners should be notified with the end event. (optional, default to false)</param>
        /// <param name="skipIoMappings">A boolean value to control whether input/output mappings should be executed during deletion. &#x60;true&#x60;, if input/output mappings should not be invoked. (optional, default to false)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteProcessDefinitionsByKeyWithHttpInfo(string key, bool? cascade = default(bool?), bool? skipCustomListeners = default(bool?), bool? skipIoMappings = default(bool?));
        /// <summary>
        /// Delete By Key
        /// </summary>
        /// <remarks>
        /// Deletes process definitions by a given key and which belong to a tenant id.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definitions to be deleted.</param>
        /// <param name="tenantId">The id of the tenant the process definitions belong to.</param>
        /// <param name="cascade">&#x60;true&#x60;, if all process instances, historic process instances and jobs for this process definition should be deleted. (optional)</param>
        /// <param name="skipCustomListeners">&#x60;true&#x60;, if only the built-in ExecutionListeners should be notified with the end event. (optional, default to false)</param>
        /// <param name="skipIoMappings">A boolean value to control whether input/output mappings should be executed during deletion. &#x60;true&#x60;, if input/output mappings should not be invoked. (optional, default to false)</param>
        /// <returns></returns>
        void DeleteProcessDefinitionsByKeyAndTenantId(string key, string tenantId, bool? cascade = default(bool?), bool? skipCustomListeners = default(bool?), bool? skipIoMappings = default(bool?));

        /// <summary>
        /// Delete By Key
        /// </summary>
        /// <remarks>
        /// Deletes process definitions by a given key and which belong to a tenant id.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definitions to be deleted.</param>
        /// <param name="tenantId">The id of the tenant the process definitions belong to.</param>
        /// <param name="cascade">&#x60;true&#x60;, if all process instances, historic process instances and jobs for this process definition should be deleted. (optional)</param>
        /// <param name="skipCustomListeners">&#x60;true&#x60;, if only the built-in ExecutionListeners should be notified with the end event. (optional, default to false)</param>
        /// <param name="skipIoMappings">A boolean value to control whether input/output mappings should be executed during deletion. &#x60;true&#x60;, if input/output mappings should not be invoked. (optional, default to false)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteProcessDefinitionsByKeyAndTenantIdWithHttpInfo(string key, string tenantId, bool? cascade = default(bool?), bool? skipCustomListeners = default(bool?), bool? skipIoMappings = default(bool?));
        /// <summary>
        /// Get Activity Instance Statistics
        /// </summary>
        /// <remarks>
        /// Retrieves runtime statistics of a given process definition, grouped by activities. These statistics include the number of running activity instances, optionally the number of failed jobs and also optionally the number of incidents either grouped by incident types or for a specific incident type. **Note**: This does not include historic data.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition.</param>
        /// <param name="failedJobs">Whether to include the number of failed jobs in the result or not. Valid values are &#x60;true&#x60; or &#x60;false&#x60;. (optional)</param>
        /// <param name="incidents">Valid values for this property are &#x60;true&#x60; or &#x60;false&#x60;. If this property has been set to &#x60;true&#x60; the result will include the corresponding number of incidents for each occurred incident type. If it is set to &#x60;false&#x60;, the incidents will not be included in the result. Cannot be used in combination with &#x60;incidentsForType&#x60;. (optional)</param>
        /// <param name="incidentsForType">If this property has been set with any incident type (i.e., a string value) the result will only include the number of incidents for the assigned incident type. Cannot be used in combination with &#x60;incidents&#x60;. See the [User Guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)</param>
        /// <returns>List&lt;ActivityStatisticsResultDto&gt;</returns>
        List<ActivityStatisticsResultDto> GetActivityStatistics(string id, bool? failedJobs = default(bool?), bool? incidents = default(bool?), string incidentsForType = default(string));

        /// <summary>
        /// Get Activity Instance Statistics
        /// </summary>
        /// <remarks>
        /// Retrieves runtime statistics of a given process definition, grouped by activities. These statistics include the number of running activity instances, optionally the number of failed jobs and also optionally the number of incidents either grouped by incident types or for a specific incident type. **Note**: This does not include historic data.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition.</param>
        /// <param name="failedJobs">Whether to include the number of failed jobs in the result or not. Valid values are &#x60;true&#x60; or &#x60;false&#x60;. (optional)</param>
        /// <param name="incidents">Valid values for this property are &#x60;true&#x60; or &#x60;false&#x60;. If this property has been set to &#x60;true&#x60; the result will include the corresponding number of incidents for each occurred incident type. If it is set to &#x60;false&#x60;, the incidents will not be included in the result. Cannot be used in combination with &#x60;incidentsForType&#x60;. (optional)</param>
        /// <param name="incidentsForType">If this property has been set with any incident type (i.e., a string value) the result will only include the number of incidents for the assigned incident type. Cannot be used in combination with &#x60;incidents&#x60;. See the [User Guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)</param>
        /// <returns>ApiResponse of List&lt;ActivityStatisticsResultDto&gt;</returns>
        ApiResponse<List<ActivityStatisticsResultDto>> GetActivityStatisticsWithHttpInfo(string id, bool? failedJobs = default(bool?), bool? incidents = default(bool?), string incidentsForType = default(string));
        /// <summary>
        /// Get Activity Instance Statistics
        /// </summary>
        /// <remarks>
        /// Retrieves runtime statistics of the latest version of the given process definition which belongs to no tenant, grouped by activities. These statistics include the number of running activity instances, optionally the number of failed jobs and also optionally the number of incidents either grouped by incident types or for a specific incident type. **Note**: This does not include historic data.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <param name="failedJobs">Whether to include the number of failed jobs in the result or not. Valid values are &#x60;true&#x60; or &#x60;false&#x60;. (optional)</param>
        /// <param name="incidents">Valid values for this property are &#x60;true&#x60; or &#x60;false&#x60;. If this property has been set to &#x60;true&#x60; the result will include the corresponding number of incidents for each occurred incident type. If it is set to &#x60;false&#x60;, the incidents will not be included in the result. Cannot be used in combination with &#x60;incidentsForType&#x60;. (optional)</param>
        /// <param name="incidentsForType">If this property has been set with any incident type (i.e., a string value) the result will only include the number of incidents for the assigned incident type. Cannot be used in combination with &#x60;incidents&#x60;. See the [User Guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)</param>
        /// <returns>List&lt;ActivityStatisticsResultDto&gt;</returns>
        List<ActivityStatisticsResultDto> GetActivityStatisticsByProcessDefinitionKey(string key, bool? failedJobs = default(bool?), bool? incidents = default(bool?), string incidentsForType = default(string));

        /// <summary>
        /// Get Activity Instance Statistics
        /// </summary>
        /// <remarks>
        /// Retrieves runtime statistics of the latest version of the given process definition which belongs to no tenant, grouped by activities. These statistics include the number of running activity instances, optionally the number of failed jobs and also optionally the number of incidents either grouped by incident types or for a specific incident type. **Note**: This does not include historic data.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <param name="failedJobs">Whether to include the number of failed jobs in the result or not. Valid values are &#x60;true&#x60; or &#x60;false&#x60;. (optional)</param>
        /// <param name="incidents">Valid values for this property are &#x60;true&#x60; or &#x60;false&#x60;. If this property has been set to &#x60;true&#x60; the result will include the corresponding number of incidents for each occurred incident type. If it is set to &#x60;false&#x60;, the incidents will not be included in the result. Cannot be used in combination with &#x60;incidentsForType&#x60;. (optional)</param>
        /// <param name="incidentsForType">If this property has been set with any incident type (i.e., a string value) the result will only include the number of incidents for the assigned incident type. Cannot be used in combination with &#x60;incidents&#x60;. See the [User Guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)</param>
        /// <returns>ApiResponse of List&lt;ActivityStatisticsResultDto&gt;</returns>
        ApiResponse<List<ActivityStatisticsResultDto>> GetActivityStatisticsByProcessDefinitionKeyWithHttpInfo(string key, bool? failedJobs = default(bool?), bool? incidents = default(bool?), string incidentsForType = default(string));
        /// <summary>
        /// Get Activity Instance Statistics
        /// </summary>
        /// <remarks>
        /// Retrieves runtime statistics of the latest version of the given process definition for a tenant, grouped by activities. These statistics include the number of running activity instances, optionally the number of failed jobs and also optionally the number of incidents either grouped by incident types or for a specific incident type. **Note**: This does not include historic data.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <param name="failedJobs">Whether to include the number of failed jobs in the result or not. Valid values are &#x60;true&#x60; or &#x60;false&#x60;. (optional)</param>
        /// <param name="incidents">Valid values for this property are &#x60;true&#x60; or &#x60;false&#x60;. If this property has been set to &#x60;true&#x60; the result will include the corresponding number of incidents for each occurred incident type. If it is set to &#x60;false&#x60;, the incidents will not be included in the result. Cannot be used in combination with &#x60;incidentsForType&#x60;. (optional)</param>
        /// <param name="incidentsForType">If this property has been set with any incident type (i.e., a string value) the result will only include the number of incidents for the assigned incident type. Cannot be used in combination with &#x60;incidents&#x60;. See the [User Guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)</param>
        /// <returns>List&lt;ActivityStatisticsResultDto&gt;</returns>
        List<ActivityStatisticsResultDto> GetActivityStatisticsByProcessDefinitionKeyAndTenantId(string key, string tenantId, bool? failedJobs = default(bool?), bool? incidents = default(bool?), string incidentsForType = default(string));

        /// <summary>
        /// Get Activity Instance Statistics
        /// </summary>
        /// <remarks>
        /// Retrieves runtime statistics of the latest version of the given process definition for a tenant, grouped by activities. These statistics include the number of running activity instances, optionally the number of failed jobs and also optionally the number of incidents either grouped by incident types or for a specific incident type. **Note**: This does not include historic data.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <param name="failedJobs">Whether to include the number of failed jobs in the result or not. Valid values are &#x60;true&#x60; or &#x60;false&#x60;. (optional)</param>
        /// <param name="incidents">Valid values for this property are &#x60;true&#x60; or &#x60;false&#x60;. If this property has been set to &#x60;true&#x60; the result will include the corresponding number of incidents for each occurred incident type. If it is set to &#x60;false&#x60;, the incidents will not be included in the result. Cannot be used in combination with &#x60;incidentsForType&#x60;. (optional)</param>
        /// <param name="incidentsForType">If this property has been set with any incident type (i.e., a string value) the result will only include the number of incidents for the assigned incident type. Cannot be used in combination with &#x60;incidents&#x60;. See the [User Guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)</param>
        /// <returns>ApiResponse of List&lt;ActivityStatisticsResultDto&gt;</returns>
        ApiResponse<List<ActivityStatisticsResultDto>> GetActivityStatisticsByProcessDefinitionKeyAndTenantIdWithHttpInfo(string key, string tenantId, bool? failedJobs = default(bool?), bool? incidents = default(bool?), string incidentsForType = default(string));
        /// <summary>
        /// Get Deployed Start Form
        /// </summary>
        /// <remarks>
        /// Retrieves the deployed form that can be referenced from a start event. For further information please refer to [User Guide](https://docs.camunda.org/manual/7.17/user-guide/task-forms/#embedded-task-forms).
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition to get the deployed start form for.</param>
        /// <returns>FileParameter</returns>
        FileParameter GetDeployedStartForm(string id);

        /// <summary>
        /// Get Deployed Start Form
        /// </summary>
        /// <remarks>
        /// Retrieves the deployed form that can be referenced from a start event. For further information please refer to [User Guide](https://docs.camunda.org/manual/7.17/user-guide/task-forms/#embedded-task-forms).
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition to get the deployed start form for.</param>
        /// <returns>ApiResponse of FileParameter</returns>
        ApiResponse<FileParameter> GetDeployedStartFormWithHttpInfo(string id);
        /// <summary>
        /// Get Deployed Start Form
        /// </summary>
        /// <remarks>
        /// Retrieves the deployed form that can be referenced from a start event. For further information please refer to [User Guide](https://docs.camunda.org/manual/7.17/user-guide/task-forms/#embedded-task-forms).
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <returns>FileParameter</returns>
        FileParameter GetDeployedStartFormByKey(string key);

        /// <summary>
        /// Get Deployed Start Form
        /// </summary>
        /// <remarks>
        /// Retrieves the deployed form that can be referenced from a start event. For further information please refer to [User Guide](https://docs.camunda.org/manual/7.17/user-guide/task-forms/#embedded-task-forms).
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <returns>ApiResponse of FileParameter</returns>
        ApiResponse<FileParameter> GetDeployedStartFormByKeyWithHttpInfo(string key);
        /// <summary>
        /// Get Deployed Start Form
        /// </summary>
        /// <remarks>
        /// Retrieves the deployed form that can be referenced from a start event. For further information please refer to [User Guide](https://docs.camunda.org/manual/7.17/user-guide/task-forms/#embedded-task-forms).
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <param name="tenantId">The id of the tenant the process definitions belong to.</param>
        /// <returns>FileParameter</returns>
        FileParameter GetDeployedStartFormByKeyAndTenantId(string key, string tenantId);

        /// <summary>
        /// Get Deployed Start Form
        /// </summary>
        /// <remarks>
        /// Retrieves the deployed form that can be referenced from a start event. For further information please refer to [User Guide](https://docs.camunda.org/manual/7.17/user-guide/task-forms/#embedded-task-forms).
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <param name="tenantId">The id of the tenant the process definitions belong to.</param>
        /// <returns>ApiResponse of FileParameter</returns>
        ApiResponse<FileParameter> GetDeployedStartFormByKeyAndTenantIdWithHttpInfo(string key, string tenantId);
        /// <summary>
        /// Get
        /// </summary>
        /// <remarks>
        /// Retrieves the latest version of the process definition for tenant according to the &#x60;ProcessDefinition&#x60; interface in the engine.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <returns>ProcessDefinitionDto</returns>
        ProcessDefinitionDto GetLatestProcessDefinitionByTenantId(string key, string tenantId);

        /// <summary>
        /// Get
        /// </summary>
        /// <remarks>
        /// Retrieves the latest version of the process definition for tenant according to the &#x60;ProcessDefinition&#x60; interface in the engine.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <returns>ApiResponse of ProcessDefinitionDto</returns>
        ApiResponse<ProcessDefinitionDto> GetLatestProcessDefinitionByTenantIdWithHttpInfo(string key, string tenantId);
        /// <summary>
        /// Get
        /// </summary>
        /// <remarks>
        /// Retrieves a process definition according to the &#x60;ProcessDefinition&#x60; interface in the engine.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition to be retrieved.</param>
        /// <returns>ProcessDefinitionDto</returns>
        ProcessDefinitionDto GetProcessDefinition(string id);

        /// <summary>
        /// Get
        /// </summary>
        /// <remarks>
        /// Retrieves a process definition according to the &#x60;ProcessDefinition&#x60; interface in the engine.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition to be retrieved.</param>
        /// <returns>ApiResponse of ProcessDefinitionDto</returns>
        ApiResponse<ProcessDefinitionDto> GetProcessDefinitionWithHttpInfo(string id);
        /// <summary>
        /// Get XML
        /// </summary>
        /// <remarks>
        /// Retrieves the BPMN 2.0 XML of a process definition.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition.</param>
        /// <returns>ProcessDefinitionDiagramDto</returns>
        ProcessDefinitionDiagramDto GetProcessDefinitionBpmn20Xml(string id);

        /// <summary>
        /// Get XML
        /// </summary>
        /// <remarks>
        /// Retrieves the BPMN 2.0 XML of a process definition.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition.</param>
        /// <returns>ApiResponse of ProcessDefinitionDiagramDto</returns>
        ApiResponse<ProcessDefinitionDiagramDto> GetProcessDefinitionBpmn20XmlWithHttpInfo(string id);
        /// <summary>
        /// Get XML
        /// </summary>
        /// <remarks>
        /// Retrieves latest version the BPMN 2.0 XML of a process definition.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) whose XML should be retrieved.</param>
        /// <returns>ProcessDefinitionDiagramDto</returns>
        ProcessDefinitionDiagramDto GetProcessDefinitionBpmn20XmlByKey(string key);

        /// <summary>
        /// Get XML
        /// </summary>
        /// <remarks>
        /// Retrieves latest version the BPMN 2.0 XML of a process definition.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) whose XML should be retrieved.</param>
        /// <returns>ApiResponse of ProcessDefinitionDiagramDto</returns>
        ApiResponse<ProcessDefinitionDiagramDto> GetProcessDefinitionBpmn20XmlByKeyWithHttpInfo(string key);
        /// <summary>
        /// Get XML
        /// </summary>
        /// <remarks>
        /// Retrieves latest version the BPMN 2.0 XML of a process definition. Returns the XML for the latest version of the process definition for tenant.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) whose XML should be retrieved.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <returns>ProcessDefinitionDiagramDto</returns>
        ProcessDefinitionDiagramDto GetProcessDefinitionBpmn20XmlByKeyAndTenantId(string key, string tenantId);

        /// <summary>
        /// Get XML
        /// </summary>
        /// <remarks>
        /// Retrieves latest version the BPMN 2.0 XML of a process definition. Returns the XML for the latest version of the process definition for tenant.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) whose XML should be retrieved.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <returns>ApiResponse of ProcessDefinitionDiagramDto</returns>
        ApiResponse<ProcessDefinitionDiagramDto> GetProcessDefinitionBpmn20XmlByKeyAndTenantIdWithHttpInfo(string key, string tenantId);
        /// <summary>
        /// Get
        /// </summary>
        /// <remarks>
        /// Retrieves the latest version of the process definition which belongs to no tenant according to the &#x60;ProcessDefinition&#x60; interface in the engine.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <returns>ProcessDefinitionDto</returns>
        ProcessDefinitionDto GetProcessDefinitionByKey(string key);

        /// <summary>
        /// Get
        /// </summary>
        /// <remarks>
        /// Retrieves the latest version of the process definition which belongs to no tenant according to the &#x60;ProcessDefinition&#x60; interface in the engine.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <returns>ApiResponse of ProcessDefinitionDto</returns>
        ApiResponse<ProcessDefinitionDto> GetProcessDefinitionByKeyWithHttpInfo(string key);
        /// <summary>
        /// Get Diagram
        /// </summary>
        /// <remarks>
        /// Retrieves the diagram of a process definition.  If the process definition&#39;s deployment contains an image resource with the same file name as the process definition, the deployed image will be returned by the Get Diagram endpoint. Example: &#x60;someProcess.bpmn&#x60; and &#x60;someProcess.png&#x60;. Supported file extentions for the image are: &#x60;svg&#x60;, &#x60;png&#x60;, &#x60;jpg&#x60;, and &#x60;gif&#x60;.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition.</param>
        /// <returns>FileParameter</returns>
        FileParameter GetProcessDefinitionDiagram(string id);

        /// <summary>
        /// Get Diagram
        /// </summary>
        /// <remarks>
        /// Retrieves the diagram of a process definition.  If the process definition&#39;s deployment contains an image resource with the same file name as the process definition, the deployed image will be returned by the Get Diagram endpoint. Example: &#x60;someProcess.bpmn&#x60; and &#x60;someProcess.png&#x60;. Supported file extentions for the image are: &#x60;svg&#x60;, &#x60;png&#x60;, &#x60;jpg&#x60;, and &#x60;gif&#x60;.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition.</param>
        /// <returns>ApiResponse of FileParameter</returns>
        ApiResponse<FileParameter> GetProcessDefinitionDiagramWithHttpInfo(string id);
        /// <summary>
        /// Get Diagram
        /// </summary>
        /// <remarks>
        /// Retrieves the diagram for the latest version of the process definition which belongs to no tenant.  If the process definition&#39;s deployment contains an image resource with the same file name as the process definition, the deployed image will be returned by the Get Diagram endpoint. Example: &#x60;someProcess.bpmn&#x60; and &#x60;someProcess.png&#x60;. Supported file extentions for the image are: &#x60;svg&#x60;, &#x60;png&#x60;, &#x60;jpg&#x60;, and &#x60;gif&#x60;.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition.</param>
        /// <returns>FileParameter</returns>
        FileParameter GetProcessDefinitionDiagramByKey(string key);

        /// <summary>
        /// Get Diagram
        /// </summary>
        /// <remarks>
        /// Retrieves the diagram for the latest version of the process definition which belongs to no tenant.  If the process definition&#39;s deployment contains an image resource with the same file name as the process definition, the deployed image will be returned by the Get Diagram endpoint. Example: &#x60;someProcess.bpmn&#x60; and &#x60;someProcess.png&#x60;. Supported file extentions for the image are: &#x60;svg&#x60;, &#x60;png&#x60;, &#x60;jpg&#x60;, and &#x60;gif&#x60;.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition.</param>
        /// <returns>ApiResponse of FileParameter</returns>
        ApiResponse<FileParameter> GetProcessDefinitionDiagramByKeyWithHttpInfo(string key);
        /// <summary>
        /// Get Diagram
        /// </summary>
        /// <remarks>
        /// Retrieves the diagram for the latest version of the process definition for tenant.  If the process definition&#39;s deployment contains an image resource with the same file name as the process definition, the deployed image will be returned by the Get Diagram endpoint. Example: &#x60;someProcess.bpmn&#x60; and &#x60;someProcess.png&#x60;. Supported file extentions for the image are: &#x60;svg&#x60;, &#x60;png&#x60;, &#x60;jpg&#x60;, and &#x60;gif&#x60;.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <returns>FileParameter</returns>
        FileParameter GetProcessDefinitionDiagramByKeyAndTenantId(string key, string tenantId);

        /// <summary>
        /// Get Diagram
        /// </summary>
        /// <remarks>
        /// Retrieves the diagram for the latest version of the process definition for tenant.  If the process definition&#39;s deployment contains an image resource with the same file name as the process definition, the deployed image will be returned by the Get Diagram endpoint. Example: &#x60;someProcess.bpmn&#x60; and &#x60;someProcess.png&#x60;. Supported file extentions for the image are: &#x60;svg&#x60;, &#x60;png&#x60;, &#x60;jpg&#x60;, and &#x60;gif&#x60;.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <returns>ApiResponse of FileParameter</returns>
        ApiResponse<FileParameter> GetProcessDefinitionDiagramByKeyAndTenantIdWithHttpInfo(string key, string tenantId);
        /// <summary>
        /// Get Process Instance Statistics
        /// </summary>
        /// <remarks>
        /// Retrieves runtime statistics of the process engine, grouped by process definitions. These statistics include the number of running process instances, optionally the number of failed jobs and also optionally the number of incidents either grouped by incident types or for a specific incident type. **Note**: This does not include historic data.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="failedJobs">Whether to include the number of failed jobs in the result or not. Valid values are &#x60;true&#x60; or &#x60;false&#x60;. (optional)</param>
        /// <param name="incidents">Valid values for this property are &#x60;true&#x60; or &#x60;false&#x60;. If this property has been set to &#x60;true&#x60; the result will include the corresponding number of incidents for each occurred incident type. If it is set to &#x60;false&#x60;, the incidents will not be included in the result. Cannot be used in combination with &#x60;incidentsForType&#x60;. (optional)</param>
        /// <param name="incidentsForType">If this property has been set with any incident type (i.e., a string value) the result will only include the number of incidents for the assigned incident type. Cannot be used in combination with &#x60;incidents&#x60;. See the [User Guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)</param>
        /// <param name="rootIncidents">Valid values for this property are &#x60;true&#x60; or &#x60;false&#x60;. If this property has been set to &#x60;true&#x60; the result will include the corresponding number of root incidents for each occurred incident type. If it is set to &#x60;false&#x60;, the incidents will not be included in the result. Cannot be used in combination with &#x60;incidentsForType&#x60; or &#x60;incidents&#x60;. (optional)</param>
        /// <returns>List&lt;ProcessDefinitionStatisticsResultDto&gt;</returns>
        List<ProcessDefinitionStatisticsResultDto> GetProcessDefinitionStatistics(bool? failedJobs = default(bool?), bool? incidents = default(bool?), string incidentsForType = default(string), bool? rootIncidents = default(bool?));

        /// <summary>
        /// Get Process Instance Statistics
        /// </summary>
        /// <remarks>
        /// Retrieves runtime statistics of the process engine, grouped by process definitions. These statistics include the number of running process instances, optionally the number of failed jobs and also optionally the number of incidents either grouped by incident types or for a specific incident type. **Note**: This does not include historic data.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="failedJobs">Whether to include the number of failed jobs in the result or not. Valid values are &#x60;true&#x60; or &#x60;false&#x60;. (optional)</param>
        /// <param name="incidents">Valid values for this property are &#x60;true&#x60; or &#x60;false&#x60;. If this property has been set to &#x60;true&#x60; the result will include the corresponding number of incidents for each occurred incident type. If it is set to &#x60;false&#x60;, the incidents will not be included in the result. Cannot be used in combination with &#x60;incidentsForType&#x60;. (optional)</param>
        /// <param name="incidentsForType">If this property has been set with any incident type (i.e., a string value) the result will only include the number of incidents for the assigned incident type. Cannot be used in combination with &#x60;incidents&#x60;. See the [User Guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)</param>
        /// <param name="rootIncidents">Valid values for this property are &#x60;true&#x60; or &#x60;false&#x60;. If this property has been set to &#x60;true&#x60; the result will include the corresponding number of root incidents for each occurred incident type. If it is set to &#x60;false&#x60;, the incidents will not be included in the result. Cannot be used in combination with &#x60;incidentsForType&#x60; or &#x60;incidents&#x60;. (optional)</param>
        /// <returns>ApiResponse of List&lt;ProcessDefinitionStatisticsResultDto&gt;</returns>
        ApiResponse<List<ProcessDefinitionStatisticsResultDto>> GetProcessDefinitionStatisticsWithHttpInfo(bool? failedJobs = default(bool?), bool? incidents = default(bool?), string incidentsForType = default(string), bool? rootIncidents = default(bool?));
        /// <summary>
        /// Get List
        /// </summary>
        /// <remarks>
        /// Queries for process definitions that fulfill given parameters. Parameters may be the properties of  process definitions, such as the name, key or version. The size of the result set can be retrieved by using the [Get Definition Count](https://docs.camunda.org/manual/7.17/reference/rest/process-definition/get-query-count/) method.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDefinitionId">Filter by process definition id. (optional)</param>
        /// <param name="processDefinitionIdIn">Filter by a comma-separated list of process definition ids. (optional)</param>
        /// <param name="name">Filter by process definition name. (optional)</param>
        /// <param name="nameLike">Filter by process definition names that the parameter is a substring of. (optional)</param>
        /// <param name="deploymentId">Filter by the deployment the id belongs to. (optional)</param>
        /// <param name="deployedAfter">Filter by the deploy time of the deployment the process definition belongs to. Only selects process definitions that have been deployed after (exclusive) a specific time. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.546+0200&#x60;. (optional)</param>
        /// <param name="deployedAt">Filter by the deploy time of the deployment the process definition belongs to. Only selects process definitions that have been deployed at a specific time (exact match). By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.546+0200&#x60;. (optional)</param>
        /// <param name="key">Filter by process definition key, i.e., the id in the BPMN 2.0 XML. Exact match. (optional)</param>
        /// <param name="keysIn">Filter by a comma-separated list of process definition keys. (optional)</param>
        /// <param name="keyLike">Filter by process definition keys that the parameter is a substring of. (optional)</param>
        /// <param name="category">Filter by process definition category. Exact match. (optional)</param>
        /// <param name="categoryLike">Filter by process definition categories that the parameter is a substring of. (optional)</param>
        /// <param name="version">Filter by process definition version. (optional)</param>
        /// <param name="latestVersion">Only include those process definitions that are latest versions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="resourceName">Filter by the name of the process definition resource. Exact match. (optional)</param>
        /// <param name="resourceNameLike">Filter by names of those process definition resources that the parameter is a substring of. (optional)</param>
        /// <param name="startableBy">Filter by a user name who is allowed to start the process. (optional)</param>
        /// <param name="active">Only include active process definitions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="suspended">Only include suspended process definitions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="incidentId">Filter by the incident id. (optional)</param>
        /// <param name="incidentType">Filter by the incident type. See the [User Guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)</param>
        /// <param name="incidentMessage">Filter by the incident message. Exact match. (optional)</param>
        /// <param name="incidentMessageLike">Filter by the incident message that the parameter is a substring of. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. A process definition must have one of the given tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include process definitions which belong to no tenant. Value may only be true, as false is the default behavior. (optional)</param>
        /// <param name="includeProcessDefinitionsWithoutTenantId">Include process definitions which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="versionTag">Filter by the version tag. (optional)</param>
        /// <param name="versionTagLike">Filter by the version tag that the parameter is a substring of. (optional)</param>
        /// <param name="withoutVersionTag">Only include process definitions without a &#x60;versionTag&#x60;. (optional)</param>
        /// <param name="startableInTasklist">Filter by process definitions which are startable in Tasklist.. (optional)</param>
        /// <param name="notStartableInTasklist">Filter by process definitions which are not startable in Tasklist. (optional)</param>
        /// <param name="startablePermissionCheck">Filter by process definitions which the user is allowed to start in Tasklist. If the user doesn&#39;t have these permissions the result will be empty list. The permissions are: * &#x60;CREATE&#x60; permission for all Process instances * &#x60;CREATE_INSTANCE&#x60; and &#x60;READ&#x60; permission on Process definition level (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <returns>List&lt;ProcessDefinitionDto&gt;</returns>
        List<ProcessDefinitionDto> GetProcessDefinitions(string processDefinitionId = default(string), string processDefinitionIdIn = default(string), string name = default(string), string nameLike = default(string), string deploymentId = default(string), DateTime? deployedAfter = default(DateTime?), DateTime? deployedAt = default(DateTime?), string key = default(string), string keysIn = default(string), string keyLike = default(string), string category = default(string), string categoryLike = default(string), int? version = default(int?), bool? latestVersion = default(bool?), string resourceName = default(string), string resourceNameLike = default(string), string startableBy = default(string), bool? active = default(bool?), bool? suspended = default(bool?), string incidentId = default(string), string incidentType = default(string), string incidentMessage = default(string), string incidentMessageLike = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), bool? includeProcessDefinitionsWithoutTenantId = default(bool?), string versionTag = default(string), string versionTagLike = default(string), bool? withoutVersionTag = default(bool?), bool? startableInTasklist = default(bool?), bool? notStartableInTasklist = default(bool?), bool? startablePermissionCheck = default(bool?), string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?));

        /// <summary>
        /// Get List
        /// </summary>
        /// <remarks>
        /// Queries for process definitions that fulfill given parameters. Parameters may be the properties of  process definitions, such as the name, key or version. The size of the result set can be retrieved by using the [Get Definition Count](https://docs.camunda.org/manual/7.17/reference/rest/process-definition/get-query-count/) method.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDefinitionId">Filter by process definition id. (optional)</param>
        /// <param name="processDefinitionIdIn">Filter by a comma-separated list of process definition ids. (optional)</param>
        /// <param name="name">Filter by process definition name. (optional)</param>
        /// <param name="nameLike">Filter by process definition names that the parameter is a substring of. (optional)</param>
        /// <param name="deploymentId">Filter by the deployment the id belongs to. (optional)</param>
        /// <param name="deployedAfter">Filter by the deploy time of the deployment the process definition belongs to. Only selects process definitions that have been deployed after (exclusive) a specific time. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.546+0200&#x60;. (optional)</param>
        /// <param name="deployedAt">Filter by the deploy time of the deployment the process definition belongs to. Only selects process definitions that have been deployed at a specific time (exact match). By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.546+0200&#x60;. (optional)</param>
        /// <param name="key">Filter by process definition key, i.e., the id in the BPMN 2.0 XML. Exact match. (optional)</param>
        /// <param name="keysIn">Filter by a comma-separated list of process definition keys. (optional)</param>
        /// <param name="keyLike">Filter by process definition keys that the parameter is a substring of. (optional)</param>
        /// <param name="category">Filter by process definition category. Exact match. (optional)</param>
        /// <param name="categoryLike">Filter by process definition categories that the parameter is a substring of. (optional)</param>
        /// <param name="version">Filter by process definition version. (optional)</param>
        /// <param name="latestVersion">Only include those process definitions that are latest versions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="resourceName">Filter by the name of the process definition resource. Exact match. (optional)</param>
        /// <param name="resourceNameLike">Filter by names of those process definition resources that the parameter is a substring of. (optional)</param>
        /// <param name="startableBy">Filter by a user name who is allowed to start the process. (optional)</param>
        /// <param name="active">Only include active process definitions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="suspended">Only include suspended process definitions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="incidentId">Filter by the incident id. (optional)</param>
        /// <param name="incidentType">Filter by the incident type. See the [User Guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)</param>
        /// <param name="incidentMessage">Filter by the incident message. Exact match. (optional)</param>
        /// <param name="incidentMessageLike">Filter by the incident message that the parameter is a substring of. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. A process definition must have one of the given tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include process definitions which belong to no tenant. Value may only be true, as false is the default behavior. (optional)</param>
        /// <param name="includeProcessDefinitionsWithoutTenantId">Include process definitions which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="versionTag">Filter by the version tag. (optional)</param>
        /// <param name="versionTagLike">Filter by the version tag that the parameter is a substring of. (optional)</param>
        /// <param name="withoutVersionTag">Only include process definitions without a &#x60;versionTag&#x60;. (optional)</param>
        /// <param name="startableInTasklist">Filter by process definitions which are startable in Tasklist.. (optional)</param>
        /// <param name="notStartableInTasklist">Filter by process definitions which are not startable in Tasklist. (optional)</param>
        /// <param name="startablePermissionCheck">Filter by process definitions which the user is allowed to start in Tasklist. If the user doesn&#39;t have these permissions the result will be empty list. The permissions are: * &#x60;CREATE&#x60; permission for all Process instances * &#x60;CREATE_INSTANCE&#x60; and &#x60;READ&#x60; permission on Process definition level (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <returns>ApiResponse of List&lt;ProcessDefinitionDto&gt;</returns>
        ApiResponse<List<ProcessDefinitionDto>> GetProcessDefinitionsWithHttpInfo(string processDefinitionId = default(string), string processDefinitionIdIn = default(string), string name = default(string), string nameLike = default(string), string deploymentId = default(string), DateTime? deployedAfter = default(DateTime?), DateTime? deployedAt = default(DateTime?), string key = default(string), string keysIn = default(string), string keyLike = default(string), string category = default(string), string categoryLike = default(string), int? version = default(int?), bool? latestVersion = default(bool?), string resourceName = default(string), string resourceNameLike = default(string), string startableBy = default(string), bool? active = default(bool?), bool? suspended = default(bool?), string incidentId = default(string), string incidentType = default(string), string incidentMessage = default(string), string incidentMessageLike = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), bool? includeProcessDefinitionsWithoutTenantId = default(bool?), string versionTag = default(string), string versionTagLike = default(string), bool? withoutVersionTag = default(bool?), bool? startableInTasklist = default(bool?), bool? notStartableInTasklist = default(bool?), bool? startablePermissionCheck = default(bool?), string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?));
        /// <summary>
        /// Get List Count
        /// </summary>
        /// <remarks>
        /// Requests the number of process definitions that fulfill the query criteria. Takes the same filtering parameters as the [Get Definitions](https://docs.camunda.org/manual/7.17/reference/rest/process-definition/get-query/) method.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDefinitionId">Filter by process definition id. (optional)</param>
        /// <param name="processDefinitionIdIn">Filter by a comma-separated list of process definition ids. (optional)</param>
        /// <param name="name">Filter by process definition name. (optional)</param>
        /// <param name="nameLike">Filter by process definition names that the parameter is a substring of. (optional)</param>
        /// <param name="deploymentId">Filter by the deployment the id belongs to. (optional)</param>
        /// <param name="deployedAfter">Filter by the deploy time of the deployment the process definition belongs to. Only selects process definitions that have been deployed after (exclusive) a specific time. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.546+0200&#x60;. (optional)</param>
        /// <param name="deployedAt">Filter by the deploy time of the deployment the process definition belongs to. Only selects process definitions that have been deployed at a specific time (exact match). By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.546+0200&#x60;. (optional)</param>
        /// <param name="key">Filter by process definition key, i.e., the id in the BPMN 2.0 XML. Exact match. (optional)</param>
        /// <param name="keysIn">Filter by a comma-separated list of process definition keys. (optional)</param>
        /// <param name="keyLike">Filter by process definition keys that the parameter is a substring of. (optional)</param>
        /// <param name="category">Filter by process definition category. Exact match. (optional)</param>
        /// <param name="categoryLike">Filter by process definition categories that the parameter is a substring of. (optional)</param>
        /// <param name="version">Filter by process definition version. (optional)</param>
        /// <param name="latestVersion">Only include those process definitions that are latest versions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="resourceName">Filter by the name of the process definition resource. Exact match. (optional)</param>
        /// <param name="resourceNameLike">Filter by names of those process definition resources that the parameter is a substring of. (optional)</param>
        /// <param name="startableBy">Filter by a user name who is allowed to start the process. (optional)</param>
        /// <param name="active">Only include active process definitions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="suspended">Only include suspended process definitions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="incidentId">Filter by the incident id. (optional)</param>
        /// <param name="incidentType">Filter by the incident type. See the [User Guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)</param>
        /// <param name="incidentMessage">Filter by the incident message. Exact match. (optional)</param>
        /// <param name="incidentMessageLike">Filter by the incident message that the parameter is a substring of. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. A process definition must have one of the given tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include process definitions which belong to no tenant. Value may only be true, as false is the default behavior. (optional)</param>
        /// <param name="includeProcessDefinitionsWithoutTenantId">Include process definitions which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="versionTag">Filter by the version tag. (optional)</param>
        /// <param name="versionTagLike">Filter by the version tag that the parameter is a substring of. (optional)</param>
        /// <param name="withoutVersionTag">Only include process definitions without a &#x60;versionTag&#x60;. (optional)</param>
        /// <param name="startableInTasklist">Filter by process definitions which are startable in Tasklist.. (optional)</param>
        /// <param name="notStartableInTasklist">Filter by process definitions which are not startable in Tasklist. (optional)</param>
        /// <param name="startablePermissionCheck">Filter by process definitions which the user is allowed to start in Tasklist. If the user doesn&#39;t have these permissions the result will be empty list. The permissions are: * &#x60;CREATE&#x60; permission for all Process instances * &#x60;CREATE_INSTANCE&#x60; and &#x60;READ&#x60; permission on Process definition level (optional)</param>
        /// <returns>CountResultDto</returns>
        CountResultDto GetProcessDefinitionsCount(string processDefinitionId = default(string), string processDefinitionIdIn = default(string), string name = default(string), string nameLike = default(string), string deploymentId = default(string), DateTime? deployedAfter = default(DateTime?), DateTime? deployedAt = default(DateTime?), string key = default(string), string keysIn = default(string), string keyLike = default(string), string category = default(string), string categoryLike = default(string), int? version = default(int?), bool? latestVersion = default(bool?), string resourceName = default(string), string resourceNameLike = default(string), string startableBy = default(string), bool? active = default(bool?), bool? suspended = default(bool?), string incidentId = default(string), string incidentType = default(string), string incidentMessage = default(string), string incidentMessageLike = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), bool? includeProcessDefinitionsWithoutTenantId = default(bool?), string versionTag = default(string), string versionTagLike = default(string), bool? withoutVersionTag = default(bool?), bool? startableInTasklist = default(bool?), bool? notStartableInTasklist = default(bool?), bool? startablePermissionCheck = default(bool?));

        /// <summary>
        /// Get List Count
        /// </summary>
        /// <remarks>
        /// Requests the number of process definitions that fulfill the query criteria. Takes the same filtering parameters as the [Get Definitions](https://docs.camunda.org/manual/7.17/reference/rest/process-definition/get-query/) method.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDefinitionId">Filter by process definition id. (optional)</param>
        /// <param name="processDefinitionIdIn">Filter by a comma-separated list of process definition ids. (optional)</param>
        /// <param name="name">Filter by process definition name. (optional)</param>
        /// <param name="nameLike">Filter by process definition names that the parameter is a substring of. (optional)</param>
        /// <param name="deploymentId">Filter by the deployment the id belongs to. (optional)</param>
        /// <param name="deployedAfter">Filter by the deploy time of the deployment the process definition belongs to. Only selects process definitions that have been deployed after (exclusive) a specific time. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.546+0200&#x60;. (optional)</param>
        /// <param name="deployedAt">Filter by the deploy time of the deployment the process definition belongs to. Only selects process definitions that have been deployed at a specific time (exact match). By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.546+0200&#x60;. (optional)</param>
        /// <param name="key">Filter by process definition key, i.e., the id in the BPMN 2.0 XML. Exact match. (optional)</param>
        /// <param name="keysIn">Filter by a comma-separated list of process definition keys. (optional)</param>
        /// <param name="keyLike">Filter by process definition keys that the parameter is a substring of. (optional)</param>
        /// <param name="category">Filter by process definition category. Exact match. (optional)</param>
        /// <param name="categoryLike">Filter by process definition categories that the parameter is a substring of. (optional)</param>
        /// <param name="version">Filter by process definition version. (optional)</param>
        /// <param name="latestVersion">Only include those process definitions that are latest versions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="resourceName">Filter by the name of the process definition resource. Exact match. (optional)</param>
        /// <param name="resourceNameLike">Filter by names of those process definition resources that the parameter is a substring of. (optional)</param>
        /// <param name="startableBy">Filter by a user name who is allowed to start the process. (optional)</param>
        /// <param name="active">Only include active process definitions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="suspended">Only include suspended process definitions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="incidentId">Filter by the incident id. (optional)</param>
        /// <param name="incidentType">Filter by the incident type. See the [User Guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)</param>
        /// <param name="incidentMessage">Filter by the incident message. Exact match. (optional)</param>
        /// <param name="incidentMessageLike">Filter by the incident message that the parameter is a substring of. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. A process definition must have one of the given tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include process definitions which belong to no tenant. Value may only be true, as false is the default behavior. (optional)</param>
        /// <param name="includeProcessDefinitionsWithoutTenantId">Include process definitions which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="versionTag">Filter by the version tag. (optional)</param>
        /// <param name="versionTagLike">Filter by the version tag that the parameter is a substring of. (optional)</param>
        /// <param name="withoutVersionTag">Only include process definitions without a &#x60;versionTag&#x60;. (optional)</param>
        /// <param name="startableInTasklist">Filter by process definitions which are startable in Tasklist.. (optional)</param>
        /// <param name="notStartableInTasklist">Filter by process definitions which are not startable in Tasklist. (optional)</param>
        /// <param name="startablePermissionCheck">Filter by process definitions which the user is allowed to start in Tasklist. If the user doesn&#39;t have these permissions the result will be empty list. The permissions are: * &#x60;CREATE&#x60; permission for all Process instances * &#x60;CREATE_INSTANCE&#x60; and &#x60;READ&#x60; permission on Process definition level (optional)</param>
        /// <returns>ApiResponse of CountResultDto</returns>
        ApiResponse<CountResultDto> GetProcessDefinitionsCountWithHttpInfo(string processDefinitionId = default(string), string processDefinitionIdIn = default(string), string name = default(string), string nameLike = default(string), string deploymentId = default(string), DateTime? deployedAfter = default(DateTime?), DateTime? deployedAt = default(DateTime?), string key = default(string), string keysIn = default(string), string keyLike = default(string), string category = default(string), string categoryLike = default(string), int? version = default(int?), bool? latestVersion = default(bool?), string resourceName = default(string), string resourceNameLike = default(string), string startableBy = default(string), bool? active = default(bool?), bool? suspended = default(bool?), string incidentId = default(string), string incidentType = default(string), string incidentMessage = default(string), string incidentMessageLike = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), bool? includeProcessDefinitionsWithoutTenantId = default(bool?), string versionTag = default(string), string versionTagLike = default(string), bool? withoutVersionTag = default(bool?), bool? startableInTasklist = default(bool?), bool? notStartableInTasklist = default(bool?), bool? startablePermissionCheck = default(bool?));
        /// <summary>
        /// Get Rendered Start Form
        /// </summary>
        /// <remarks>
        /// Retrieves the rendered form for a process definition. This method can be used to get the HTML rendering of a [Generated Task Form](https://docs.camunda.org/manual/7.17/user-guide/task-forms/#generated-task-forms).
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition to get the rendered start form for.</param>
        /// <returns>FileParameter</returns>
        FileParameter GetRenderedStartForm(string id);

        /// <summary>
        /// Get Rendered Start Form
        /// </summary>
        /// <remarks>
        /// Retrieves the rendered form for a process definition. This method can be used to get the HTML rendering of a [Generated Task Form](https://docs.camunda.org/manual/7.17/user-guide/task-forms/#generated-task-forms).
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition to get the rendered start form for.</param>
        /// <returns>ApiResponse of FileParameter</returns>
        ApiResponse<FileParameter> GetRenderedStartFormWithHttpInfo(string id);
        /// <summary>
        /// Get Rendered Start Form
        /// </summary>
        /// <remarks>
        /// Retrieves  the rendered form for the latest version of the process definition which belongs to no tenant. This method can be used to get the HTML rendering of a [Generated Task Form](https://docs.camunda.org/manual/7.17/user-guide/task-forms/#generated-task-forms).
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <returns>FileParameter</returns>
        FileParameter GetRenderedStartFormByKey(string key);

        /// <summary>
        /// Get Rendered Start Form
        /// </summary>
        /// <remarks>
        /// Retrieves  the rendered form for the latest version of the process definition which belongs to no tenant. This method can be used to get the HTML rendering of a [Generated Task Form](https://docs.camunda.org/manual/7.17/user-guide/task-forms/#generated-task-forms).
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <returns>ApiResponse of FileParameter</returns>
        ApiResponse<FileParameter> GetRenderedStartFormByKeyWithHttpInfo(string key);
        /// <summary>
        /// Get Rendered Start Form
        /// </summary>
        /// <remarks>
        /// Retrieves  the rendered form for the latest version of the process definition for a tenant. This method can be used to get the HTML rendering of a [Generated Task Form](https://docs.camunda.org/manual/7.17/user-guide/task-forms/#generated-task-forms).
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <returns>FileParameter</returns>
        FileParameter GetRenderedStartFormByKeyAndTenantId(string key, string tenantId);

        /// <summary>
        /// Get Rendered Start Form
        /// </summary>
        /// <remarks>
        /// Retrieves  the rendered form for the latest version of the process definition for a tenant. This method can be used to get the HTML rendering of a [Generated Task Form](https://docs.camunda.org/manual/7.17/user-guide/task-forms/#generated-task-forms).
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <returns>ApiResponse of FileParameter</returns>
        ApiResponse<FileParameter> GetRenderedStartFormByKeyAndTenantIdWithHttpInfo(string key, string tenantId);
        /// <summary>
        /// Get Start Form Key
        /// </summary>
        /// <remarks>
        /// Retrieves the key of the start form for a process definition. The form key corresponds to the &#x60;FormData#formKey&#x60; property in the engine.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition to get the start form key for.</param>
        /// <returns>FormDto</returns>
        FormDto GetStartForm(string id);

        /// <summary>
        /// Get Start Form Key
        /// </summary>
        /// <remarks>
        /// Retrieves the key of the start form for a process definition. The form key corresponds to the &#x60;FormData#formKey&#x60; property in the engine.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition to get the start form key for.</param>
        /// <returns>ApiResponse of FormDto</returns>
        ApiResponse<FormDto> GetStartFormWithHttpInfo(string id);
        /// <summary>
        /// Get Start Form Key
        /// </summary>
        /// <remarks>
        /// Retrieves the key of the start form for the latest version of the process definition which belongs to no tenant. The form key corresponds to the &#x60;FormData#formKey&#x60; property in the engine.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) for which the form key is to be retrieved.</param>
        /// <returns>FormDto</returns>
        FormDto GetStartFormByKey(string key);

        /// <summary>
        /// Get Start Form Key
        /// </summary>
        /// <remarks>
        /// Retrieves the key of the start form for the latest version of the process definition which belongs to no tenant. The form key corresponds to the &#x60;FormData#formKey&#x60; property in the engine.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) for which the form key is to be retrieved.</param>
        /// <returns>ApiResponse of FormDto</returns>
        ApiResponse<FormDto> GetStartFormByKeyWithHttpInfo(string key);
        /// <summary>
        /// Get Start Form Key
        /// </summary>
        /// <remarks>
        /// Retrieves the key of the start form for the latest version of the process definition for a tenant. The form key corresponds to the &#x60;FormData#formKey&#x60; property in the engine.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) for which the form key is to be retrieved.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <returns>FormDto</returns>
        FormDto GetStartFormByKeyAndTenantId(string key, string tenantId);

        /// <summary>
        /// Get Start Form Key
        /// </summary>
        /// <remarks>
        /// Retrieves the key of the start form for the latest version of the process definition for a tenant. The form key corresponds to the &#x60;FormData#formKey&#x60; property in the engine.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) for which the form key is to be retrieved.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <returns>ApiResponse of FormDto</returns>
        ApiResponse<FormDto> GetStartFormByKeyAndTenantIdWithHttpInfo(string key, string tenantId);
        /// <summary>
        /// Get Start Form Variables
        /// </summary>
        /// <remarks>
        /// Retrieves the start form variables for a process definition (only if they are defined via the  [Generated Task Form](https://docs.camunda.org/manual/7.17/user-guide/task-forms/#generated-task-forms) approach). The start form variables take form data specified on the start event into account. If form fields are defined, the variable types and default values of the form fields are taken into account.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition to retrieve the variables for.</param>
        /// <param name="variableNames">A comma-separated list of variable names. Allows restricting the list of requested variables to the variable names in the list. It is best practice to restrict the list of variables to the variables actually required by the form in order to minimize fetching of data. If the query parameter is ommitted all variables are fetched. If the query parameter contains non-existent variable names, the variable names are ignored. (optional)</param>
        /// <param name="deserializeValues">Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default true).  If set to true, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](http://jackson.codehaus.org/) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to false, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note**: While true is the default value for reasons of backward compatibility, we recommend setting this parameter to false when developing web applications that are independent of the Java process applications deployed to the engine. (optional, default to true)</param>
        /// <returns>Dictionary&lt;string, VariableValueDto&gt;</returns>
        Dictionary<string, VariableValueDto> GetStartFormVariables(string id, string variableNames = default(string), bool? deserializeValues = default(bool?));

        /// <summary>
        /// Get Start Form Variables
        /// </summary>
        /// <remarks>
        /// Retrieves the start form variables for a process definition (only if they are defined via the  [Generated Task Form](https://docs.camunda.org/manual/7.17/user-guide/task-forms/#generated-task-forms) approach). The start form variables take form data specified on the start event into account. If form fields are defined, the variable types and default values of the form fields are taken into account.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition to retrieve the variables for.</param>
        /// <param name="variableNames">A comma-separated list of variable names. Allows restricting the list of requested variables to the variable names in the list. It is best practice to restrict the list of variables to the variables actually required by the form in order to minimize fetching of data. If the query parameter is ommitted all variables are fetched. If the query parameter contains non-existent variable names, the variable names are ignored. (optional)</param>
        /// <param name="deserializeValues">Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default true).  If set to true, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](http://jackson.codehaus.org/) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to false, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note**: While true is the default value for reasons of backward compatibility, we recommend setting this parameter to false when developing web applications that are independent of the Java process applications deployed to the engine. (optional, default to true)</param>
        /// <returns>ApiResponse of Dictionary&lt;string, VariableValueDto&gt;</returns>
        ApiResponse<Dictionary<string, VariableValueDto>> GetStartFormVariablesWithHttpInfo(string id, string variableNames = default(string), bool? deserializeValues = default(bool?));
        /// <summary>
        /// Get Start Form Variables
        /// </summary>
        /// <remarks>
        /// Retrieves the start form variables for the latest process definition which belongs to no tenant (only if they are defined via the  [Generated Task Form](https://docs.camunda.org/manual/7.17/user-guide/task-forms/#generated-task-forms) approach). The start form variables take form data specified on the start event into account. If form fields are defined, the variable types and default values of the form fields are taken into account.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <param name="variableNames">A comma-separated list of variable names. Allows restricting the list of requested variables to the variable names in the list. It is best practice to restrict the list of variables to the variables actually required by the form in order to minimize fetching of data. If the query parameter is ommitted all variables are fetched. If the query parameter contains non-existent variable names, the variable names are ignored. (optional)</param>
        /// <param name="deserializeValues">Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default true).  If set to true, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](http://jackson.codehaus.org/) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to false, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note**: While true is the default value for reasons of backward compatibility, we recommend setting this parameter to false when developing web applications that are independent of the Java process applications deployed to the engine. (optional, default to true)</param>
        /// <returns>Dictionary&lt;string, VariableValueDto&gt;</returns>
        Dictionary<string, VariableValueDto> GetStartFormVariablesByKey(string key, string variableNames = default(string), bool? deserializeValues = default(bool?));

        /// <summary>
        /// Get Start Form Variables
        /// </summary>
        /// <remarks>
        /// Retrieves the start form variables for the latest process definition which belongs to no tenant (only if they are defined via the  [Generated Task Form](https://docs.camunda.org/manual/7.17/user-guide/task-forms/#generated-task-forms) approach). The start form variables take form data specified on the start event into account. If form fields are defined, the variable types and default values of the form fields are taken into account.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <param name="variableNames">A comma-separated list of variable names. Allows restricting the list of requested variables to the variable names in the list. It is best practice to restrict the list of variables to the variables actually required by the form in order to minimize fetching of data. If the query parameter is ommitted all variables are fetched. If the query parameter contains non-existent variable names, the variable names are ignored. (optional)</param>
        /// <param name="deserializeValues">Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default true).  If set to true, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](http://jackson.codehaus.org/) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to false, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note**: While true is the default value for reasons of backward compatibility, we recommend setting this parameter to false when developing web applications that are independent of the Java process applications deployed to the engine. (optional, default to true)</param>
        /// <returns>ApiResponse of Dictionary&lt;string, VariableValueDto&gt;</returns>
        ApiResponse<Dictionary<string, VariableValueDto>> GetStartFormVariablesByKeyWithHttpInfo(string key, string variableNames = default(string), bool? deserializeValues = default(bool?));
        /// <summary>
        /// Get Start Form Variables
        /// </summary>
        /// <remarks>
        /// Retrieves the start form variables for the latest process definition for a tenant (only if they are defined via the  [Generated Task Form](https://docs.camunda.org/manual/7.17/user-guide/task-forms/#generated-task-forms) approach). The start form variables take form data specified on the start event into account. If form fields are defined, the variable types and default values of the form fields are taken into account.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <param name="variableNames">A comma-separated list of variable names. Allows restricting the list of requested variables to the variable names in the list. It is best practice to restrict the list of variables to the variables actually required by the form in order to minimize fetching of data. If the query parameter is ommitted all variables are fetched. If the query parameter contains non-existent variable names, the variable names are ignored. (optional)</param>
        /// <param name="deserializeValues">Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default true).  If set to true, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](http://jackson.codehaus.org/) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to false, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note**: While true is the default value for reasons of backward compatibility, we recommend setting this parameter to false when developing web applications that are independent of the Java process applications deployed to the engine. (optional, default to true)</param>
        /// <returns>Dictionary&lt;string, VariableValueDto&gt;</returns>
        Dictionary<string, VariableValueDto> GetStartFormVariablesByKeyAndTenantId(string key, string tenantId, string variableNames = default(string), bool? deserializeValues = default(bool?));

        /// <summary>
        /// Get Start Form Variables
        /// </summary>
        /// <remarks>
        /// Retrieves the start form variables for the latest process definition for a tenant (only if they are defined via the  [Generated Task Form](https://docs.camunda.org/manual/7.17/user-guide/task-forms/#generated-task-forms) approach). The start form variables take form data specified on the start event into account. If form fields are defined, the variable types and default values of the form fields are taken into account.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <param name="variableNames">A comma-separated list of variable names. Allows restricting the list of requested variables to the variable names in the list. It is best practice to restrict the list of variables to the variables actually required by the form in order to minimize fetching of data. If the query parameter is ommitted all variables are fetched. If the query parameter contains non-existent variable names, the variable names are ignored. (optional)</param>
        /// <param name="deserializeValues">Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default true).  If set to true, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](http://jackson.codehaus.org/) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to false, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note**: While true is the default value for reasons of backward compatibility, we recommend setting this parameter to false when developing web applications that are independent of the Java process applications deployed to the engine. (optional, default to true)</param>
        /// <returns>ApiResponse of Dictionary&lt;string, VariableValueDto&gt;</returns>
        ApiResponse<Dictionary<string, VariableValueDto>> GetStartFormVariablesByKeyAndTenantIdWithHttpInfo(string key, string tenantId, string variableNames = default(string), bool? deserializeValues = default(bool?));
        /// <summary>
        /// Get Static Called Process Definitions
        /// </summary>
        /// <remarks>
        /// For the given process, returns a list of called process definitions corresponding to the &#x60;CalledProcessDefinition&#x60; interface in the engine. The list contains all process definitions that are referenced statically by call activities in the given process. This endpoint does not resolve process definitions that are referenced with expressions. Each called process definition contains a list of call activity ids, which specifies the call activities that are calling that process. This endpoint does not resolve references to case definitions.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition.</param>
        /// <returns>List&lt;CalledProcessDefinitionDto&gt;</returns>
        List<CalledProcessDefinitionDto> GetStaticCalledProcessDefinitions(string id);

        /// <summary>
        /// Get Static Called Process Definitions
        /// </summary>
        /// <remarks>
        /// For the given process, returns a list of called process definitions corresponding to the &#x60;CalledProcessDefinition&#x60; interface in the engine. The list contains all process definitions that are referenced statically by call activities in the given process. This endpoint does not resolve process definitions that are referenced with expressions. Each called process definition contains a list of call activity ids, which specifies the call activities that are calling that process. This endpoint does not resolve references to case definitions.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition.</param>
        /// <returns>ApiResponse of List&lt;CalledProcessDefinitionDto&gt;</returns>
        ApiResponse<List<CalledProcessDefinitionDto>> GetStaticCalledProcessDefinitionsWithHttpInfo(string id);
        /// <summary>
        /// Restart Process Instance
        /// </summary>
        /// <remarks>
        /// Restarts process instances that were canceled or terminated synchronously. Can also restart completed process instances. It will create a new instance using the original instance information. To execute the restart asynchronously, use the [Restart Process Instance Async](https://docs.camunda.org/manual/7.17/reference/rest/process-definition/post-restart-process-instance-async/) method.  For more information about the difference between synchronous and asynchronous execution, please refer to the related section of the [User Guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/process-instance-restart/#execution).
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition of the process instances to restart.</param>
        /// <param name="restartProcessInstanceDto"> (optional)</param>
        /// <returns></returns>
        void RestartProcessInstance(string id, RestartProcessInstanceDto restartProcessInstanceDto = default(RestartProcessInstanceDto));

        /// <summary>
        /// Restart Process Instance
        /// </summary>
        /// <remarks>
        /// Restarts process instances that were canceled or terminated synchronously. Can also restart completed process instances. It will create a new instance using the original instance information. To execute the restart asynchronously, use the [Restart Process Instance Async](https://docs.camunda.org/manual/7.17/reference/rest/process-definition/post-restart-process-instance-async/) method.  For more information about the difference between synchronous and asynchronous execution, please refer to the related section of the [User Guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/process-instance-restart/#execution).
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition of the process instances to restart.</param>
        /// <param name="restartProcessInstanceDto"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RestartProcessInstanceWithHttpInfo(string id, RestartProcessInstanceDto restartProcessInstanceDto = default(RestartProcessInstanceDto));
        /// <summary>
        /// Restart Process Instance Async
        /// </summary>
        /// <remarks>
        /// Restarts process instances that were canceled or terminated asynchronously. Can also restart completed process instances. It will create a new instance using the original instance information. To execute the restart asynchronously, use the [Restart Process Instance](https://docs.camunda.org/manual/7.17/reference/rest/process-definition/post-restart-process-instance-sync/) method.  For more information about the difference between synchronous and asynchronous execution, please refer to the related section of the [User Guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/process-instance-restart/#execution).
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition of the process instances to restart.</param>
        /// <param name="restartProcessInstanceDto"> (optional)</param>
        /// <returns>BatchDto</returns>
        BatchDto RestartProcessInstanceAsyncOperation(string id, RestartProcessInstanceDto restartProcessInstanceDto = default(RestartProcessInstanceDto));

        /// <summary>
        /// Restart Process Instance Async
        /// </summary>
        /// <remarks>
        /// Restarts process instances that were canceled or terminated asynchronously. Can also restart completed process instances. It will create a new instance using the original instance information. To execute the restart asynchronously, use the [Restart Process Instance](https://docs.camunda.org/manual/7.17/reference/rest/process-definition/post-restart-process-instance-sync/) method.  For more information about the difference between synchronous and asynchronous execution, please refer to the related section of the [User Guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/process-instance-restart/#execution).
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition of the process instances to restart.</param>
        /// <param name="restartProcessInstanceDto"> (optional)</param>
        /// <returns>ApiResponse of BatchDto</returns>
        ApiResponse<BatchDto> RestartProcessInstanceAsyncOperationWithHttpInfo(string id, RestartProcessInstanceDto restartProcessInstanceDto = default(RestartProcessInstanceDto));
        /// <summary>
        /// Start Instance
        /// </summary>
        /// <remarks>
        /// Instantiates a given process definition. Process variables and business key may be supplied in the request body.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition to be retrieved.</param>
        /// <param name="startProcessInstanceDto"> (optional)</param>
        /// <returns>ProcessInstanceWithVariablesDto</returns>
        ProcessInstanceWithVariablesDto StartProcessInstance(string id, StartProcessInstanceDto startProcessInstanceDto = default(StartProcessInstanceDto));

        /// <summary>
        /// Start Instance
        /// </summary>
        /// <remarks>
        /// Instantiates a given process definition. Process variables and business key may be supplied in the request body.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition to be retrieved.</param>
        /// <param name="startProcessInstanceDto"> (optional)</param>
        /// <returns>ApiResponse of ProcessInstanceWithVariablesDto</returns>
        ApiResponse<ProcessInstanceWithVariablesDto> StartProcessInstanceWithHttpInfo(string id, StartProcessInstanceDto startProcessInstanceDto = default(StartProcessInstanceDto));
        /// <summary>
        /// Start Instance
        /// </summary>
        /// <remarks>
        /// Instantiates a given process definition, starts the latest version of the process definition which belongs to no tenant. Process variables and business key may be supplied in the request body.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <param name="startProcessInstanceDto"> (optional)</param>
        /// <returns>ProcessInstanceWithVariablesDto</returns>
        ProcessInstanceWithVariablesDto StartProcessInstanceByKey(string key, StartProcessInstanceDto startProcessInstanceDto = default(StartProcessInstanceDto));

        /// <summary>
        /// Start Instance
        /// </summary>
        /// <remarks>
        /// Instantiates a given process definition, starts the latest version of the process definition which belongs to no tenant. Process variables and business key may be supplied in the request body.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <param name="startProcessInstanceDto"> (optional)</param>
        /// <returns>ApiResponse of ProcessInstanceWithVariablesDto</returns>
        ApiResponse<ProcessInstanceWithVariablesDto> StartProcessInstanceByKeyWithHttpInfo(string key, StartProcessInstanceDto startProcessInstanceDto = default(StartProcessInstanceDto));
        /// <summary>
        /// Start Instance
        /// </summary>
        /// <remarks>
        /// Instantiates a given process definition, starts the latest version of the process definition for tenant. Process variables and business key may be supplied in the request body.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <param name="startProcessInstanceDto"> (optional)</param>
        /// <returns>ProcessInstanceWithVariablesDto</returns>
        ProcessInstanceWithVariablesDto StartProcessInstanceByKeyAndTenantId(string key, string tenantId, StartProcessInstanceDto startProcessInstanceDto = default(StartProcessInstanceDto));

        /// <summary>
        /// Start Instance
        /// </summary>
        /// <remarks>
        /// Instantiates a given process definition, starts the latest version of the process definition for tenant. Process variables and business key may be supplied in the request body.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <param name="startProcessInstanceDto"> (optional)</param>
        /// <returns>ApiResponse of ProcessInstanceWithVariablesDto</returns>
        ApiResponse<ProcessInstanceWithVariablesDto> StartProcessInstanceByKeyAndTenantIdWithHttpInfo(string key, string tenantId, StartProcessInstanceDto startProcessInstanceDto = default(StartProcessInstanceDto));
        /// <summary>
        /// Submit Start Form
        /// </summary>
        /// <remarks>
        /// Starts a process instance using a set of process variables and the business key. If the start event has Form Field Metadata defined, the process engine will perform backend validation for any form fields which have validators defined. See [Documentation on Generated Task Forms](https://docs.camunda.org/manual/7.17/user-guide/task-forms/#generated-task-forms).
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition to submit the form for.</param>
        /// <param name="startProcessInstanceFormDto"> (optional)</param>
        /// <returns>ProcessInstanceDto</returns>
        ProcessInstanceDto SubmitForm(string id, StartProcessInstanceFormDto startProcessInstanceFormDto = default(StartProcessInstanceFormDto));

        /// <summary>
        /// Submit Start Form
        /// </summary>
        /// <remarks>
        /// Starts a process instance using a set of process variables and the business key. If the start event has Form Field Metadata defined, the process engine will perform backend validation for any form fields which have validators defined. See [Documentation on Generated Task Forms](https://docs.camunda.org/manual/7.17/user-guide/task-forms/#generated-task-forms).
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition to submit the form for.</param>
        /// <param name="startProcessInstanceFormDto"> (optional)</param>
        /// <returns>ApiResponse of ProcessInstanceDto</returns>
        ApiResponse<ProcessInstanceDto> SubmitFormWithHttpInfo(string id, StartProcessInstanceFormDto startProcessInstanceFormDto = default(StartProcessInstanceFormDto));
        /// <summary>
        /// Submit Start Form
        /// </summary>
        /// <remarks>
        /// Starts the latest version of the process definition which belongs to no tenant using a set of process variables and the business key. If the start event has Form Field Metadata defined, the process engine will perform backend validation for any form fields which have validators defined. See [Documentation on Generated Task Forms](https://docs.camunda.org/manual/7.17/user-guide/task-forms/#generated-task-forms).
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition to submit the form for.</param>
        /// <param name="startProcessInstanceFormDto"> (optional)</param>
        /// <returns>ProcessInstanceDto</returns>
        ProcessInstanceDto SubmitFormByKey(string key, StartProcessInstanceFormDto startProcessInstanceFormDto = default(StartProcessInstanceFormDto));

        /// <summary>
        /// Submit Start Form
        /// </summary>
        /// <remarks>
        /// Starts the latest version of the process definition which belongs to no tenant using a set of process variables and the business key. If the start event has Form Field Metadata defined, the process engine will perform backend validation for any form fields which have validators defined. See [Documentation on Generated Task Forms](https://docs.camunda.org/manual/7.17/user-guide/task-forms/#generated-task-forms).
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition to submit the form for.</param>
        /// <param name="startProcessInstanceFormDto"> (optional)</param>
        /// <returns>ApiResponse of ProcessInstanceDto</returns>
        ApiResponse<ProcessInstanceDto> SubmitFormByKeyWithHttpInfo(string key, StartProcessInstanceFormDto startProcessInstanceFormDto = default(StartProcessInstanceFormDto));
        /// <summary>
        /// Submit Start Form
        /// </summary>
        /// <remarks>
        /// Starts the latest version of the process definition for a tenant using a set of process variables and the business key. If the start event has Form Field Metadata defined, the process engine will perform backend validation for any form fields which have validators defined. See [Documentation on Generated Task Forms](https://docs.camunda.org/manual/7.17/user-guide/task-forms/#generated-task-forms).
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition to submit the form for.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <param name="startProcessInstanceFormDto"> (optional)</param>
        /// <returns>ProcessInstanceDto</returns>
        ProcessInstanceDto SubmitFormByKeyAndTenantId(string key, string tenantId, StartProcessInstanceFormDto startProcessInstanceFormDto = default(StartProcessInstanceFormDto));

        /// <summary>
        /// Submit Start Form
        /// </summary>
        /// <remarks>
        /// Starts the latest version of the process definition for a tenant using a set of process variables and the business key. If the start event has Form Field Metadata defined, the process engine will perform backend validation for any form fields which have validators defined. See [Documentation on Generated Task Forms](https://docs.camunda.org/manual/7.17/user-guide/task-forms/#generated-task-forms).
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition to submit the form for.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <param name="startProcessInstanceFormDto"> (optional)</param>
        /// <returns>ApiResponse of ProcessInstanceDto</returns>
        ApiResponse<ProcessInstanceDto> SubmitFormByKeyAndTenantIdWithHttpInfo(string key, string tenantId, StartProcessInstanceFormDto startProcessInstanceFormDto = default(StartProcessInstanceFormDto));
        /// <summary>
        /// Update History Time to Live
        /// </summary>
        /// <remarks>
        /// Updates history time to live for process definition. The field is used within [History cleanup](https://docs.camunda.org/manual/7.17/user-guide/process-engine/history/#history-cleanup).
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition to change history time to live.</param>
        /// <param name="historyTimeToLiveDto"> (optional)</param>
        /// <returns></returns>
        void UpdateHistoryTimeToLiveByProcessDefinitionId(string id, HistoryTimeToLiveDto historyTimeToLiveDto = default(HistoryTimeToLiveDto));

        /// <summary>
        /// Update History Time to Live
        /// </summary>
        /// <remarks>
        /// Updates history time to live for process definition. The field is used within [History cleanup](https://docs.camunda.org/manual/7.17/user-guide/process-engine/history/#history-cleanup).
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition to change history time to live.</param>
        /// <param name="historyTimeToLiveDto"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateHistoryTimeToLiveByProcessDefinitionIdWithHttpInfo(string id, HistoryTimeToLiveDto historyTimeToLiveDto = default(HistoryTimeToLiveDto));
        /// <summary>
        /// Update History Time to Live
        /// </summary>
        /// <remarks>
        /// Updates history time to live for the latest version of the process definition which belongs to no tenant. The field is used within [History cleanup](https://docs.camunda.org/manual/7.17/user-guide/process-engine/history/#history-cleanup).
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition to change history time to live.</param>
        /// <param name="historyTimeToLiveDto"> (optional)</param>
        /// <returns></returns>
        void UpdateHistoryTimeToLiveByProcessDefinitionKey(string key, HistoryTimeToLiveDto historyTimeToLiveDto = default(HistoryTimeToLiveDto));

        /// <summary>
        /// Update History Time to Live
        /// </summary>
        /// <remarks>
        /// Updates history time to live for the latest version of the process definition which belongs to no tenant. The field is used within [History cleanup](https://docs.camunda.org/manual/7.17/user-guide/process-engine/history/#history-cleanup).
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition to change history time to live.</param>
        /// <param name="historyTimeToLiveDto"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateHistoryTimeToLiveByProcessDefinitionKeyWithHttpInfo(string key, HistoryTimeToLiveDto historyTimeToLiveDto = default(HistoryTimeToLiveDto));
        /// <summary>
        /// Update History Time to Live
        /// </summary>
        /// <remarks>
        /// Updates history time to live for the latest version of the process definition for a tenant. The field is used within [History cleanup](https://docs.camunda.org/manual/7.17/user-guide/process-engine/history/#history-cleanup).
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition to change history time to live.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <param name="historyTimeToLiveDto"> (optional)</param>
        /// <returns></returns>
        void UpdateHistoryTimeToLiveByProcessDefinitionKeyAndTenantId(string key, string tenantId, HistoryTimeToLiveDto historyTimeToLiveDto = default(HistoryTimeToLiveDto));

        /// <summary>
        /// Update History Time to Live
        /// </summary>
        /// <remarks>
        /// Updates history time to live for the latest version of the process definition for a tenant. The field is used within [History cleanup](https://docs.camunda.org/manual/7.17/user-guide/process-engine/history/#history-cleanup).
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition to change history time to live.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <param name="historyTimeToLiveDto"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateHistoryTimeToLiveByProcessDefinitionKeyAndTenantIdWithHttpInfo(string key, string tenantId, HistoryTimeToLiveDto historyTimeToLiveDto = default(HistoryTimeToLiveDto));
        /// <summary>
        /// Activate/Suspend By Key
        /// </summary>
        /// <remarks>
        /// Activates or suspends process definitions with the given process definition key.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDefinitionSuspensionStateDto">**Note**: Unallowed property is &#x60;processDefinitionId&#x60;. (optional)</param>
        /// <returns></returns>
        void UpdateProcessDefinitionSuspensionState(ProcessDefinitionSuspensionStateDto processDefinitionSuspensionStateDto = default(ProcessDefinitionSuspensionStateDto));

        /// <summary>
        /// Activate/Suspend By Key
        /// </summary>
        /// <remarks>
        /// Activates or suspends process definitions with the given process definition key.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDefinitionSuspensionStateDto">**Note**: Unallowed property is &#x60;processDefinitionId&#x60;. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateProcessDefinitionSuspensionStateWithHttpInfo(ProcessDefinitionSuspensionStateDto processDefinitionSuspensionStateDto = default(ProcessDefinitionSuspensionStateDto));
        /// <summary>
        /// Activate/Suspend By Id
        /// </summary>
        /// <remarks>
        /// Activates or suspends a given process definition by id.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition to activate or suspend.</param>
        /// <param name="processDefinitionSuspensionStateDto">**Note**: Unallowed properties are &#x60;processDefinitionId&#x60; and &#x60;processDefinitionKey&#x60;. (optional)</param>
        /// <returns></returns>
        void UpdateProcessDefinitionSuspensionStateById(string id, ProcessDefinitionSuspensionStateDto processDefinitionSuspensionStateDto = default(ProcessDefinitionSuspensionStateDto));

        /// <summary>
        /// Activate/Suspend By Id
        /// </summary>
        /// <remarks>
        /// Activates or suspends a given process definition by id.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition to activate or suspend.</param>
        /// <param name="processDefinitionSuspensionStateDto">**Note**: Unallowed properties are &#x60;processDefinitionId&#x60; and &#x60;processDefinitionKey&#x60;. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateProcessDefinitionSuspensionStateByIdWithHttpInfo(string id, ProcessDefinitionSuspensionStateDto processDefinitionSuspensionStateDto = default(ProcessDefinitionSuspensionStateDto));
        /// <summary>
        /// Activate/Suspend by Id
        /// </summary>
        /// <remarks>
        /// Activates or suspends a given process definition by latest version of process definition key which belongs to no tenant.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be activated/suspended.</param>
        /// <param name="processDefinitionSuspensionStateDto">**Note**: Unallowed properties are &#x60;processDefinitionId&#x60; and &#x60;processDefinitionKey&#x60;. (optional)</param>
        /// <returns></returns>
        void UpdateProcessDefinitionSuspensionStateByKey(string key, ProcessDefinitionSuspensionStateDto processDefinitionSuspensionStateDto = default(ProcessDefinitionSuspensionStateDto));

        /// <summary>
        /// Activate/Suspend by Id
        /// </summary>
        /// <remarks>
        /// Activates or suspends a given process definition by latest version of process definition key which belongs to no tenant.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be activated/suspended.</param>
        /// <param name="processDefinitionSuspensionStateDto">**Note**: Unallowed properties are &#x60;processDefinitionId&#x60; and &#x60;processDefinitionKey&#x60;. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateProcessDefinitionSuspensionStateByKeyWithHttpInfo(string key, ProcessDefinitionSuspensionStateDto processDefinitionSuspensionStateDto = default(ProcessDefinitionSuspensionStateDto));
        /// <summary>
        /// Activate/Suspend by Id
        /// </summary>
        /// <remarks>
        /// Activates or suspends a given process definition by the latest version of the process definition for tenant.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be activated/suspended.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <param name="processDefinitionSuspensionStateDto">**Note**: Unallowed properties are &#x60;processDefinitionId&#x60; and &#x60;processDefinitionKey&#x60;. (optional)</param>
        /// <returns></returns>
        void UpdateProcessDefinitionSuspensionStateByKeyAndTenantId(string key, string tenantId, ProcessDefinitionSuspensionStateDto processDefinitionSuspensionStateDto = default(ProcessDefinitionSuspensionStateDto));

        /// <summary>
        /// Activate/Suspend by Id
        /// </summary>
        /// <remarks>
        /// Activates or suspends a given process definition by the latest version of the process definition for tenant.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be activated/suspended.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <param name="processDefinitionSuspensionStateDto">**Note**: Unallowed properties are &#x60;processDefinitionId&#x60; and &#x60;processDefinitionKey&#x60;. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateProcessDefinitionSuspensionStateByKeyAndTenantIdWithHttpInfo(string key, string tenantId, ProcessDefinitionSuspensionStateDto processDefinitionSuspensionStateDto = default(ProcessDefinitionSuspensionStateDto));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProcessDefinitionApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Delete
        /// </summary>
        /// <remarks>
        /// Deletes a running process instance by id.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition to be deleted.</param>
        /// <param name="cascade">&#x60;true&#x60;, if all process instances, historic process instances and jobs for this process definition should be deleted. (optional)</param>
        /// <param name="skipCustomListeners">&#x60;true&#x60;, if only the built-in ExecutionListeners should be notified with the end event. (optional, default to false)</param>
        /// <param name="skipIoMappings">A boolean value to control whether input/output mappings should be executed during deletion. &#x60;true&#x60;, if input/output mappings should not be invoked. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteProcessDefinitionAsync(string id, bool? cascade = default(bool?), bool? skipCustomListeners = default(bool?), bool? skipIoMappings = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete
        /// </summary>
        /// <remarks>
        /// Deletes a running process instance by id.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition to be deleted.</param>
        /// <param name="cascade">&#x60;true&#x60;, if all process instances, historic process instances and jobs for this process definition should be deleted. (optional)</param>
        /// <param name="skipCustomListeners">&#x60;true&#x60;, if only the built-in ExecutionListeners should be notified with the end event. (optional, default to false)</param>
        /// <param name="skipIoMappings">A boolean value to control whether input/output mappings should be executed during deletion. &#x60;true&#x60;, if input/output mappings should not be invoked. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteProcessDefinitionWithHttpInfoAsync(string id, bool? cascade = default(bool?), bool? skipCustomListeners = default(bool?), bool? skipIoMappings = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete By Key
        /// </summary>
        /// <remarks>
        /// Deletes process definitions by a given key which belong to no tenant id.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definitions to be deleted.</param>
        /// <param name="cascade">&#x60;true&#x60;, if all process instances, historic process instances and jobs for this process definition should be deleted. (optional)</param>
        /// <param name="skipCustomListeners">&#x60;true&#x60;, if only the built-in ExecutionListeners should be notified with the end event. (optional, default to false)</param>
        /// <param name="skipIoMappings">A boolean value to control whether input/output mappings should be executed during deletion. &#x60;true&#x60;, if input/output mappings should not be invoked. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteProcessDefinitionsByKeyAsync(string key, bool? cascade = default(bool?), bool? skipCustomListeners = default(bool?), bool? skipIoMappings = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete By Key
        /// </summary>
        /// <remarks>
        /// Deletes process definitions by a given key which belong to no tenant id.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definitions to be deleted.</param>
        /// <param name="cascade">&#x60;true&#x60;, if all process instances, historic process instances and jobs for this process definition should be deleted. (optional)</param>
        /// <param name="skipCustomListeners">&#x60;true&#x60;, if only the built-in ExecutionListeners should be notified with the end event. (optional, default to false)</param>
        /// <param name="skipIoMappings">A boolean value to control whether input/output mappings should be executed during deletion. &#x60;true&#x60;, if input/output mappings should not be invoked. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteProcessDefinitionsByKeyWithHttpInfoAsync(string key, bool? cascade = default(bool?), bool? skipCustomListeners = default(bool?), bool? skipIoMappings = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete By Key
        /// </summary>
        /// <remarks>
        /// Deletes process definitions by a given key and which belong to a tenant id.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definitions to be deleted.</param>
        /// <param name="tenantId">The id of the tenant the process definitions belong to.</param>
        /// <param name="cascade">&#x60;true&#x60;, if all process instances, historic process instances and jobs for this process definition should be deleted. (optional)</param>
        /// <param name="skipCustomListeners">&#x60;true&#x60;, if only the built-in ExecutionListeners should be notified with the end event. (optional, default to false)</param>
        /// <param name="skipIoMappings">A boolean value to control whether input/output mappings should be executed during deletion. &#x60;true&#x60;, if input/output mappings should not be invoked. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteProcessDefinitionsByKeyAndTenantIdAsync(string key, string tenantId, bool? cascade = default(bool?), bool? skipCustomListeners = default(bool?), bool? skipIoMappings = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete By Key
        /// </summary>
        /// <remarks>
        /// Deletes process definitions by a given key and which belong to a tenant id.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definitions to be deleted.</param>
        /// <param name="tenantId">The id of the tenant the process definitions belong to.</param>
        /// <param name="cascade">&#x60;true&#x60;, if all process instances, historic process instances and jobs for this process definition should be deleted. (optional)</param>
        /// <param name="skipCustomListeners">&#x60;true&#x60;, if only the built-in ExecutionListeners should be notified with the end event. (optional, default to false)</param>
        /// <param name="skipIoMappings">A boolean value to control whether input/output mappings should be executed during deletion. &#x60;true&#x60;, if input/output mappings should not be invoked. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteProcessDefinitionsByKeyAndTenantIdWithHttpInfoAsync(string key, string tenantId, bool? cascade = default(bool?), bool? skipCustomListeners = default(bool?), bool? skipIoMappings = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Activity Instance Statistics
        /// </summary>
        /// <remarks>
        /// Retrieves runtime statistics of a given process definition, grouped by activities. These statistics include the number of running activity instances, optionally the number of failed jobs and also optionally the number of incidents either grouped by incident types or for a specific incident type. **Note**: This does not include historic data.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition.</param>
        /// <param name="failedJobs">Whether to include the number of failed jobs in the result or not. Valid values are &#x60;true&#x60; or &#x60;false&#x60;. (optional)</param>
        /// <param name="incidents">Valid values for this property are &#x60;true&#x60; or &#x60;false&#x60;. If this property has been set to &#x60;true&#x60; the result will include the corresponding number of incidents for each occurred incident type. If it is set to &#x60;false&#x60;, the incidents will not be included in the result. Cannot be used in combination with &#x60;incidentsForType&#x60;. (optional)</param>
        /// <param name="incidentsForType">If this property has been set with any incident type (i.e., a string value) the result will only include the number of incidents for the assigned incident type. Cannot be used in combination with &#x60;incidents&#x60;. See the [User Guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ActivityStatisticsResultDto&gt;</returns>
        System.Threading.Tasks.Task<List<ActivityStatisticsResultDto>> GetActivityStatisticsAsync(string id, bool? failedJobs = default(bool?), bool? incidents = default(bool?), string incidentsForType = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Activity Instance Statistics
        /// </summary>
        /// <remarks>
        /// Retrieves runtime statistics of a given process definition, grouped by activities. These statistics include the number of running activity instances, optionally the number of failed jobs and also optionally the number of incidents either grouped by incident types or for a specific incident type. **Note**: This does not include historic data.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition.</param>
        /// <param name="failedJobs">Whether to include the number of failed jobs in the result or not. Valid values are &#x60;true&#x60; or &#x60;false&#x60;. (optional)</param>
        /// <param name="incidents">Valid values for this property are &#x60;true&#x60; or &#x60;false&#x60;. If this property has been set to &#x60;true&#x60; the result will include the corresponding number of incidents for each occurred incident type. If it is set to &#x60;false&#x60;, the incidents will not be included in the result. Cannot be used in combination with &#x60;incidentsForType&#x60;. (optional)</param>
        /// <param name="incidentsForType">If this property has been set with any incident type (i.e., a string value) the result will only include the number of incidents for the assigned incident type. Cannot be used in combination with &#x60;incidents&#x60;. See the [User Guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ActivityStatisticsResultDto&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ActivityStatisticsResultDto>>> GetActivityStatisticsWithHttpInfoAsync(string id, bool? failedJobs = default(bool?), bool? incidents = default(bool?), string incidentsForType = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Activity Instance Statistics
        /// </summary>
        /// <remarks>
        /// Retrieves runtime statistics of the latest version of the given process definition which belongs to no tenant, grouped by activities. These statistics include the number of running activity instances, optionally the number of failed jobs and also optionally the number of incidents either grouped by incident types or for a specific incident type. **Note**: This does not include historic data.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <param name="failedJobs">Whether to include the number of failed jobs in the result or not. Valid values are &#x60;true&#x60; or &#x60;false&#x60;. (optional)</param>
        /// <param name="incidents">Valid values for this property are &#x60;true&#x60; or &#x60;false&#x60;. If this property has been set to &#x60;true&#x60; the result will include the corresponding number of incidents for each occurred incident type. If it is set to &#x60;false&#x60;, the incidents will not be included in the result. Cannot be used in combination with &#x60;incidentsForType&#x60;. (optional)</param>
        /// <param name="incidentsForType">If this property has been set with any incident type (i.e., a string value) the result will only include the number of incidents for the assigned incident type. Cannot be used in combination with &#x60;incidents&#x60;. See the [User Guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ActivityStatisticsResultDto&gt;</returns>
        System.Threading.Tasks.Task<List<ActivityStatisticsResultDto>> GetActivityStatisticsByProcessDefinitionKeyAsync(string key, bool? failedJobs = default(bool?), bool? incidents = default(bool?), string incidentsForType = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Activity Instance Statistics
        /// </summary>
        /// <remarks>
        /// Retrieves runtime statistics of the latest version of the given process definition which belongs to no tenant, grouped by activities. These statistics include the number of running activity instances, optionally the number of failed jobs and also optionally the number of incidents either grouped by incident types or for a specific incident type. **Note**: This does not include historic data.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <param name="failedJobs">Whether to include the number of failed jobs in the result or not. Valid values are &#x60;true&#x60; or &#x60;false&#x60;. (optional)</param>
        /// <param name="incidents">Valid values for this property are &#x60;true&#x60; or &#x60;false&#x60;. If this property has been set to &#x60;true&#x60; the result will include the corresponding number of incidents for each occurred incident type. If it is set to &#x60;false&#x60;, the incidents will not be included in the result. Cannot be used in combination with &#x60;incidentsForType&#x60;. (optional)</param>
        /// <param name="incidentsForType">If this property has been set with any incident type (i.e., a string value) the result will only include the number of incidents for the assigned incident type. Cannot be used in combination with &#x60;incidents&#x60;. See the [User Guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ActivityStatisticsResultDto&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ActivityStatisticsResultDto>>> GetActivityStatisticsByProcessDefinitionKeyWithHttpInfoAsync(string key, bool? failedJobs = default(bool?), bool? incidents = default(bool?), string incidentsForType = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Activity Instance Statistics
        /// </summary>
        /// <remarks>
        /// Retrieves runtime statistics of the latest version of the given process definition for a tenant, grouped by activities. These statistics include the number of running activity instances, optionally the number of failed jobs and also optionally the number of incidents either grouped by incident types or for a specific incident type. **Note**: This does not include historic data.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <param name="failedJobs">Whether to include the number of failed jobs in the result or not. Valid values are &#x60;true&#x60; or &#x60;false&#x60;. (optional)</param>
        /// <param name="incidents">Valid values for this property are &#x60;true&#x60; or &#x60;false&#x60;. If this property has been set to &#x60;true&#x60; the result will include the corresponding number of incidents for each occurred incident type. If it is set to &#x60;false&#x60;, the incidents will not be included in the result. Cannot be used in combination with &#x60;incidentsForType&#x60;. (optional)</param>
        /// <param name="incidentsForType">If this property has been set with any incident type (i.e., a string value) the result will only include the number of incidents for the assigned incident type. Cannot be used in combination with &#x60;incidents&#x60;. See the [User Guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ActivityStatisticsResultDto&gt;</returns>
        System.Threading.Tasks.Task<List<ActivityStatisticsResultDto>> GetActivityStatisticsByProcessDefinitionKeyAndTenantIdAsync(string key, string tenantId, bool? failedJobs = default(bool?), bool? incidents = default(bool?), string incidentsForType = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Activity Instance Statistics
        /// </summary>
        /// <remarks>
        /// Retrieves runtime statistics of the latest version of the given process definition for a tenant, grouped by activities. These statistics include the number of running activity instances, optionally the number of failed jobs and also optionally the number of incidents either grouped by incident types or for a specific incident type. **Note**: This does not include historic data.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <param name="failedJobs">Whether to include the number of failed jobs in the result or not. Valid values are &#x60;true&#x60; or &#x60;false&#x60;. (optional)</param>
        /// <param name="incidents">Valid values for this property are &#x60;true&#x60; or &#x60;false&#x60;. If this property has been set to &#x60;true&#x60; the result will include the corresponding number of incidents for each occurred incident type. If it is set to &#x60;false&#x60;, the incidents will not be included in the result. Cannot be used in combination with &#x60;incidentsForType&#x60;. (optional)</param>
        /// <param name="incidentsForType">If this property has been set with any incident type (i.e., a string value) the result will only include the number of incidents for the assigned incident type. Cannot be used in combination with &#x60;incidents&#x60;. See the [User Guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ActivityStatisticsResultDto&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ActivityStatisticsResultDto>>> GetActivityStatisticsByProcessDefinitionKeyAndTenantIdWithHttpInfoAsync(string key, string tenantId, bool? failedJobs = default(bool?), bool? incidents = default(bool?), string incidentsForType = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Deployed Start Form
        /// </summary>
        /// <remarks>
        /// Retrieves the deployed form that can be referenced from a start event. For further information please refer to [User Guide](https://docs.camunda.org/manual/7.17/user-guide/task-forms/#embedded-task-forms).
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition to get the deployed start form for.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FileParameter</returns>
        System.Threading.Tasks.Task<FileParameter> GetDeployedStartFormAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Deployed Start Form
        /// </summary>
        /// <remarks>
        /// Retrieves the deployed form that can be referenced from a start event. For further information please refer to [User Guide](https://docs.camunda.org/manual/7.17/user-guide/task-forms/#embedded-task-forms).
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition to get the deployed start form for.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FileParameter)</returns>
        System.Threading.Tasks.Task<ApiResponse<FileParameter>> GetDeployedStartFormWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Deployed Start Form
        /// </summary>
        /// <remarks>
        /// Retrieves the deployed form that can be referenced from a start event. For further information please refer to [User Guide](https://docs.camunda.org/manual/7.17/user-guide/task-forms/#embedded-task-forms).
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FileParameter</returns>
        System.Threading.Tasks.Task<FileParameter> GetDeployedStartFormByKeyAsync(string key, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Deployed Start Form
        /// </summary>
        /// <remarks>
        /// Retrieves the deployed form that can be referenced from a start event. For further information please refer to [User Guide](https://docs.camunda.org/manual/7.17/user-guide/task-forms/#embedded-task-forms).
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FileParameter)</returns>
        System.Threading.Tasks.Task<ApiResponse<FileParameter>> GetDeployedStartFormByKeyWithHttpInfoAsync(string key, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Deployed Start Form
        /// </summary>
        /// <remarks>
        /// Retrieves the deployed form that can be referenced from a start event. For further information please refer to [User Guide](https://docs.camunda.org/manual/7.17/user-guide/task-forms/#embedded-task-forms).
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <param name="tenantId">The id of the tenant the process definitions belong to.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FileParameter</returns>
        System.Threading.Tasks.Task<FileParameter> GetDeployedStartFormByKeyAndTenantIdAsync(string key, string tenantId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Deployed Start Form
        /// </summary>
        /// <remarks>
        /// Retrieves the deployed form that can be referenced from a start event. For further information please refer to [User Guide](https://docs.camunda.org/manual/7.17/user-guide/task-forms/#embedded-task-forms).
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <param name="tenantId">The id of the tenant the process definitions belong to.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FileParameter)</returns>
        System.Threading.Tasks.Task<ApiResponse<FileParameter>> GetDeployedStartFormByKeyAndTenantIdWithHttpInfoAsync(string key, string tenantId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get
        /// </summary>
        /// <remarks>
        /// Retrieves the latest version of the process definition for tenant according to the &#x60;ProcessDefinition&#x60; interface in the engine.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProcessDefinitionDto</returns>
        System.Threading.Tasks.Task<ProcessDefinitionDto> GetLatestProcessDefinitionByTenantIdAsync(string key, string tenantId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get
        /// </summary>
        /// <remarks>
        /// Retrieves the latest version of the process definition for tenant according to the &#x60;ProcessDefinition&#x60; interface in the engine.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProcessDefinitionDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProcessDefinitionDto>> GetLatestProcessDefinitionByTenantIdWithHttpInfoAsync(string key, string tenantId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get
        /// </summary>
        /// <remarks>
        /// Retrieves a process definition according to the &#x60;ProcessDefinition&#x60; interface in the engine.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition to be retrieved.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProcessDefinitionDto</returns>
        System.Threading.Tasks.Task<ProcessDefinitionDto> GetProcessDefinitionAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get
        /// </summary>
        /// <remarks>
        /// Retrieves a process definition according to the &#x60;ProcessDefinition&#x60; interface in the engine.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition to be retrieved.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProcessDefinitionDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProcessDefinitionDto>> GetProcessDefinitionWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get XML
        /// </summary>
        /// <remarks>
        /// Retrieves the BPMN 2.0 XML of a process definition.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProcessDefinitionDiagramDto</returns>
        System.Threading.Tasks.Task<ProcessDefinitionDiagramDto> GetProcessDefinitionBpmn20XmlAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get XML
        /// </summary>
        /// <remarks>
        /// Retrieves the BPMN 2.0 XML of a process definition.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProcessDefinitionDiagramDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProcessDefinitionDiagramDto>> GetProcessDefinitionBpmn20XmlWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get XML
        /// </summary>
        /// <remarks>
        /// Retrieves latest version the BPMN 2.0 XML of a process definition.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) whose XML should be retrieved.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProcessDefinitionDiagramDto</returns>
        System.Threading.Tasks.Task<ProcessDefinitionDiagramDto> GetProcessDefinitionBpmn20XmlByKeyAsync(string key, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get XML
        /// </summary>
        /// <remarks>
        /// Retrieves latest version the BPMN 2.0 XML of a process definition.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) whose XML should be retrieved.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProcessDefinitionDiagramDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProcessDefinitionDiagramDto>> GetProcessDefinitionBpmn20XmlByKeyWithHttpInfoAsync(string key, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get XML
        /// </summary>
        /// <remarks>
        /// Retrieves latest version the BPMN 2.0 XML of a process definition. Returns the XML for the latest version of the process definition for tenant.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) whose XML should be retrieved.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProcessDefinitionDiagramDto</returns>
        System.Threading.Tasks.Task<ProcessDefinitionDiagramDto> GetProcessDefinitionBpmn20XmlByKeyAndTenantIdAsync(string key, string tenantId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get XML
        /// </summary>
        /// <remarks>
        /// Retrieves latest version the BPMN 2.0 XML of a process definition. Returns the XML for the latest version of the process definition for tenant.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) whose XML should be retrieved.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProcessDefinitionDiagramDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProcessDefinitionDiagramDto>> GetProcessDefinitionBpmn20XmlByKeyAndTenantIdWithHttpInfoAsync(string key, string tenantId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get
        /// </summary>
        /// <remarks>
        /// Retrieves the latest version of the process definition which belongs to no tenant according to the &#x60;ProcessDefinition&#x60; interface in the engine.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProcessDefinitionDto</returns>
        System.Threading.Tasks.Task<ProcessDefinitionDto> GetProcessDefinitionByKeyAsync(string key, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get
        /// </summary>
        /// <remarks>
        /// Retrieves the latest version of the process definition which belongs to no tenant according to the &#x60;ProcessDefinition&#x60; interface in the engine.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProcessDefinitionDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProcessDefinitionDto>> GetProcessDefinitionByKeyWithHttpInfoAsync(string key, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Diagram
        /// </summary>
        /// <remarks>
        /// Retrieves the diagram of a process definition.  If the process definition&#39;s deployment contains an image resource with the same file name as the process definition, the deployed image will be returned by the Get Diagram endpoint. Example: &#x60;someProcess.bpmn&#x60; and &#x60;someProcess.png&#x60;. Supported file extentions for the image are: &#x60;svg&#x60;, &#x60;png&#x60;, &#x60;jpg&#x60;, and &#x60;gif&#x60;.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FileParameter</returns>
        System.Threading.Tasks.Task<FileParameter> GetProcessDefinitionDiagramAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Diagram
        /// </summary>
        /// <remarks>
        /// Retrieves the diagram of a process definition.  If the process definition&#39;s deployment contains an image resource with the same file name as the process definition, the deployed image will be returned by the Get Diagram endpoint. Example: &#x60;someProcess.bpmn&#x60; and &#x60;someProcess.png&#x60;. Supported file extentions for the image are: &#x60;svg&#x60;, &#x60;png&#x60;, &#x60;jpg&#x60;, and &#x60;gif&#x60;.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FileParameter)</returns>
        System.Threading.Tasks.Task<ApiResponse<FileParameter>> GetProcessDefinitionDiagramWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Diagram
        /// </summary>
        /// <remarks>
        /// Retrieves the diagram for the latest version of the process definition which belongs to no tenant.  If the process definition&#39;s deployment contains an image resource with the same file name as the process definition, the deployed image will be returned by the Get Diagram endpoint. Example: &#x60;someProcess.bpmn&#x60; and &#x60;someProcess.png&#x60;. Supported file extentions for the image are: &#x60;svg&#x60;, &#x60;png&#x60;, &#x60;jpg&#x60;, and &#x60;gif&#x60;.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FileParameter</returns>
        System.Threading.Tasks.Task<FileParameter> GetProcessDefinitionDiagramByKeyAsync(string key, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Diagram
        /// </summary>
        /// <remarks>
        /// Retrieves the diagram for the latest version of the process definition which belongs to no tenant.  If the process definition&#39;s deployment contains an image resource with the same file name as the process definition, the deployed image will be returned by the Get Diagram endpoint. Example: &#x60;someProcess.bpmn&#x60; and &#x60;someProcess.png&#x60;. Supported file extentions for the image are: &#x60;svg&#x60;, &#x60;png&#x60;, &#x60;jpg&#x60;, and &#x60;gif&#x60;.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FileParameter)</returns>
        System.Threading.Tasks.Task<ApiResponse<FileParameter>> GetProcessDefinitionDiagramByKeyWithHttpInfoAsync(string key, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Diagram
        /// </summary>
        /// <remarks>
        /// Retrieves the diagram for the latest version of the process definition for tenant.  If the process definition&#39;s deployment contains an image resource with the same file name as the process definition, the deployed image will be returned by the Get Diagram endpoint. Example: &#x60;someProcess.bpmn&#x60; and &#x60;someProcess.png&#x60;. Supported file extentions for the image are: &#x60;svg&#x60;, &#x60;png&#x60;, &#x60;jpg&#x60;, and &#x60;gif&#x60;.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FileParameter</returns>
        System.Threading.Tasks.Task<FileParameter> GetProcessDefinitionDiagramByKeyAndTenantIdAsync(string key, string tenantId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Diagram
        /// </summary>
        /// <remarks>
        /// Retrieves the diagram for the latest version of the process definition for tenant.  If the process definition&#39;s deployment contains an image resource with the same file name as the process definition, the deployed image will be returned by the Get Diagram endpoint. Example: &#x60;someProcess.bpmn&#x60; and &#x60;someProcess.png&#x60;. Supported file extentions for the image are: &#x60;svg&#x60;, &#x60;png&#x60;, &#x60;jpg&#x60;, and &#x60;gif&#x60;.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FileParameter)</returns>
        System.Threading.Tasks.Task<ApiResponse<FileParameter>> GetProcessDefinitionDiagramByKeyAndTenantIdWithHttpInfoAsync(string key, string tenantId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Process Instance Statistics
        /// </summary>
        /// <remarks>
        /// Retrieves runtime statistics of the process engine, grouped by process definitions. These statistics include the number of running process instances, optionally the number of failed jobs and also optionally the number of incidents either grouped by incident types or for a specific incident type. **Note**: This does not include historic data.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="failedJobs">Whether to include the number of failed jobs in the result or not. Valid values are &#x60;true&#x60; or &#x60;false&#x60;. (optional)</param>
        /// <param name="incidents">Valid values for this property are &#x60;true&#x60; or &#x60;false&#x60;. If this property has been set to &#x60;true&#x60; the result will include the corresponding number of incidents for each occurred incident type. If it is set to &#x60;false&#x60;, the incidents will not be included in the result. Cannot be used in combination with &#x60;incidentsForType&#x60;. (optional)</param>
        /// <param name="incidentsForType">If this property has been set with any incident type (i.e., a string value) the result will only include the number of incidents for the assigned incident type. Cannot be used in combination with &#x60;incidents&#x60;. See the [User Guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)</param>
        /// <param name="rootIncidents">Valid values for this property are &#x60;true&#x60; or &#x60;false&#x60;. If this property has been set to &#x60;true&#x60; the result will include the corresponding number of root incidents for each occurred incident type. If it is set to &#x60;false&#x60;, the incidents will not be included in the result. Cannot be used in combination with &#x60;incidentsForType&#x60; or &#x60;incidents&#x60;. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ProcessDefinitionStatisticsResultDto&gt;</returns>
        System.Threading.Tasks.Task<List<ProcessDefinitionStatisticsResultDto>> GetProcessDefinitionStatisticsAsync(bool? failedJobs = default(bool?), bool? incidents = default(bool?), string incidentsForType = default(string), bool? rootIncidents = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Process Instance Statistics
        /// </summary>
        /// <remarks>
        /// Retrieves runtime statistics of the process engine, grouped by process definitions. These statistics include the number of running process instances, optionally the number of failed jobs and also optionally the number of incidents either grouped by incident types or for a specific incident type. **Note**: This does not include historic data.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="failedJobs">Whether to include the number of failed jobs in the result or not. Valid values are &#x60;true&#x60; or &#x60;false&#x60;. (optional)</param>
        /// <param name="incidents">Valid values for this property are &#x60;true&#x60; or &#x60;false&#x60;. If this property has been set to &#x60;true&#x60; the result will include the corresponding number of incidents for each occurred incident type. If it is set to &#x60;false&#x60;, the incidents will not be included in the result. Cannot be used in combination with &#x60;incidentsForType&#x60;. (optional)</param>
        /// <param name="incidentsForType">If this property has been set with any incident type (i.e., a string value) the result will only include the number of incidents for the assigned incident type. Cannot be used in combination with &#x60;incidents&#x60;. See the [User Guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)</param>
        /// <param name="rootIncidents">Valid values for this property are &#x60;true&#x60; or &#x60;false&#x60;. If this property has been set to &#x60;true&#x60; the result will include the corresponding number of root incidents for each occurred incident type. If it is set to &#x60;false&#x60;, the incidents will not be included in the result. Cannot be used in combination with &#x60;incidentsForType&#x60; or &#x60;incidents&#x60;. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ProcessDefinitionStatisticsResultDto&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ProcessDefinitionStatisticsResultDto>>> GetProcessDefinitionStatisticsWithHttpInfoAsync(bool? failedJobs = default(bool?), bool? incidents = default(bool?), string incidentsForType = default(string), bool? rootIncidents = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get List
        /// </summary>
        /// <remarks>
        /// Queries for process definitions that fulfill given parameters. Parameters may be the properties of  process definitions, such as the name, key or version. The size of the result set can be retrieved by using the [Get Definition Count](https://docs.camunda.org/manual/7.17/reference/rest/process-definition/get-query-count/) method.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDefinitionId">Filter by process definition id. (optional)</param>
        /// <param name="processDefinitionIdIn">Filter by a comma-separated list of process definition ids. (optional)</param>
        /// <param name="name">Filter by process definition name. (optional)</param>
        /// <param name="nameLike">Filter by process definition names that the parameter is a substring of. (optional)</param>
        /// <param name="deploymentId">Filter by the deployment the id belongs to. (optional)</param>
        /// <param name="deployedAfter">Filter by the deploy time of the deployment the process definition belongs to. Only selects process definitions that have been deployed after (exclusive) a specific time. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.546+0200&#x60;. (optional)</param>
        /// <param name="deployedAt">Filter by the deploy time of the deployment the process definition belongs to. Only selects process definitions that have been deployed at a specific time (exact match). By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.546+0200&#x60;. (optional)</param>
        /// <param name="key">Filter by process definition key, i.e., the id in the BPMN 2.0 XML. Exact match. (optional)</param>
        /// <param name="keysIn">Filter by a comma-separated list of process definition keys. (optional)</param>
        /// <param name="keyLike">Filter by process definition keys that the parameter is a substring of. (optional)</param>
        /// <param name="category">Filter by process definition category. Exact match. (optional)</param>
        /// <param name="categoryLike">Filter by process definition categories that the parameter is a substring of. (optional)</param>
        /// <param name="version">Filter by process definition version. (optional)</param>
        /// <param name="latestVersion">Only include those process definitions that are latest versions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="resourceName">Filter by the name of the process definition resource. Exact match. (optional)</param>
        /// <param name="resourceNameLike">Filter by names of those process definition resources that the parameter is a substring of. (optional)</param>
        /// <param name="startableBy">Filter by a user name who is allowed to start the process. (optional)</param>
        /// <param name="active">Only include active process definitions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="suspended">Only include suspended process definitions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="incidentId">Filter by the incident id. (optional)</param>
        /// <param name="incidentType">Filter by the incident type. See the [User Guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)</param>
        /// <param name="incidentMessage">Filter by the incident message. Exact match. (optional)</param>
        /// <param name="incidentMessageLike">Filter by the incident message that the parameter is a substring of. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. A process definition must have one of the given tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include process definitions which belong to no tenant. Value may only be true, as false is the default behavior. (optional)</param>
        /// <param name="includeProcessDefinitionsWithoutTenantId">Include process definitions which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="versionTag">Filter by the version tag. (optional)</param>
        /// <param name="versionTagLike">Filter by the version tag that the parameter is a substring of. (optional)</param>
        /// <param name="withoutVersionTag">Only include process definitions without a &#x60;versionTag&#x60;. (optional)</param>
        /// <param name="startableInTasklist">Filter by process definitions which are startable in Tasklist.. (optional)</param>
        /// <param name="notStartableInTasklist">Filter by process definitions which are not startable in Tasklist. (optional)</param>
        /// <param name="startablePermissionCheck">Filter by process definitions which the user is allowed to start in Tasklist. If the user doesn&#39;t have these permissions the result will be empty list. The permissions are: * &#x60;CREATE&#x60; permission for all Process instances * &#x60;CREATE_INSTANCE&#x60; and &#x60;READ&#x60; permission on Process definition level (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ProcessDefinitionDto&gt;</returns>
        System.Threading.Tasks.Task<List<ProcessDefinitionDto>> GetProcessDefinitionsAsync(string processDefinitionId = default(string), string processDefinitionIdIn = default(string), string name = default(string), string nameLike = default(string), string deploymentId = default(string), DateTime? deployedAfter = default(DateTime?), DateTime? deployedAt = default(DateTime?), string key = default(string), string keysIn = default(string), string keyLike = default(string), string category = default(string), string categoryLike = default(string), int? version = default(int?), bool? latestVersion = default(bool?), string resourceName = default(string), string resourceNameLike = default(string), string startableBy = default(string), bool? active = default(bool?), bool? suspended = default(bool?), string incidentId = default(string), string incidentType = default(string), string incidentMessage = default(string), string incidentMessageLike = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), bool? includeProcessDefinitionsWithoutTenantId = default(bool?), string versionTag = default(string), string versionTagLike = default(string), bool? withoutVersionTag = default(bool?), bool? startableInTasklist = default(bool?), bool? notStartableInTasklist = default(bool?), bool? startablePermissionCheck = default(bool?), string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get List
        /// </summary>
        /// <remarks>
        /// Queries for process definitions that fulfill given parameters. Parameters may be the properties of  process definitions, such as the name, key or version. The size of the result set can be retrieved by using the [Get Definition Count](https://docs.camunda.org/manual/7.17/reference/rest/process-definition/get-query-count/) method.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDefinitionId">Filter by process definition id. (optional)</param>
        /// <param name="processDefinitionIdIn">Filter by a comma-separated list of process definition ids. (optional)</param>
        /// <param name="name">Filter by process definition name. (optional)</param>
        /// <param name="nameLike">Filter by process definition names that the parameter is a substring of. (optional)</param>
        /// <param name="deploymentId">Filter by the deployment the id belongs to. (optional)</param>
        /// <param name="deployedAfter">Filter by the deploy time of the deployment the process definition belongs to. Only selects process definitions that have been deployed after (exclusive) a specific time. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.546+0200&#x60;. (optional)</param>
        /// <param name="deployedAt">Filter by the deploy time of the deployment the process definition belongs to. Only selects process definitions that have been deployed at a specific time (exact match). By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.546+0200&#x60;. (optional)</param>
        /// <param name="key">Filter by process definition key, i.e., the id in the BPMN 2.0 XML. Exact match. (optional)</param>
        /// <param name="keysIn">Filter by a comma-separated list of process definition keys. (optional)</param>
        /// <param name="keyLike">Filter by process definition keys that the parameter is a substring of. (optional)</param>
        /// <param name="category">Filter by process definition category. Exact match. (optional)</param>
        /// <param name="categoryLike">Filter by process definition categories that the parameter is a substring of. (optional)</param>
        /// <param name="version">Filter by process definition version. (optional)</param>
        /// <param name="latestVersion">Only include those process definitions that are latest versions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="resourceName">Filter by the name of the process definition resource. Exact match. (optional)</param>
        /// <param name="resourceNameLike">Filter by names of those process definition resources that the parameter is a substring of. (optional)</param>
        /// <param name="startableBy">Filter by a user name who is allowed to start the process. (optional)</param>
        /// <param name="active">Only include active process definitions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="suspended">Only include suspended process definitions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="incidentId">Filter by the incident id. (optional)</param>
        /// <param name="incidentType">Filter by the incident type. See the [User Guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)</param>
        /// <param name="incidentMessage">Filter by the incident message. Exact match. (optional)</param>
        /// <param name="incidentMessageLike">Filter by the incident message that the parameter is a substring of. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. A process definition must have one of the given tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include process definitions which belong to no tenant. Value may only be true, as false is the default behavior. (optional)</param>
        /// <param name="includeProcessDefinitionsWithoutTenantId">Include process definitions which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="versionTag">Filter by the version tag. (optional)</param>
        /// <param name="versionTagLike">Filter by the version tag that the parameter is a substring of. (optional)</param>
        /// <param name="withoutVersionTag">Only include process definitions without a &#x60;versionTag&#x60;. (optional)</param>
        /// <param name="startableInTasklist">Filter by process definitions which are startable in Tasklist.. (optional)</param>
        /// <param name="notStartableInTasklist">Filter by process definitions which are not startable in Tasklist. (optional)</param>
        /// <param name="startablePermissionCheck">Filter by process definitions which the user is allowed to start in Tasklist. If the user doesn&#39;t have these permissions the result will be empty list. The permissions are: * &#x60;CREATE&#x60; permission for all Process instances * &#x60;CREATE_INSTANCE&#x60; and &#x60;READ&#x60; permission on Process definition level (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ProcessDefinitionDto&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ProcessDefinitionDto>>> GetProcessDefinitionsWithHttpInfoAsync(string processDefinitionId = default(string), string processDefinitionIdIn = default(string), string name = default(string), string nameLike = default(string), string deploymentId = default(string), DateTime? deployedAfter = default(DateTime?), DateTime? deployedAt = default(DateTime?), string key = default(string), string keysIn = default(string), string keyLike = default(string), string category = default(string), string categoryLike = default(string), int? version = default(int?), bool? latestVersion = default(bool?), string resourceName = default(string), string resourceNameLike = default(string), string startableBy = default(string), bool? active = default(bool?), bool? suspended = default(bool?), string incidentId = default(string), string incidentType = default(string), string incidentMessage = default(string), string incidentMessageLike = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), bool? includeProcessDefinitionsWithoutTenantId = default(bool?), string versionTag = default(string), string versionTagLike = default(string), bool? withoutVersionTag = default(bool?), bool? startableInTasklist = default(bool?), bool? notStartableInTasklist = default(bool?), bool? startablePermissionCheck = default(bool?), string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get List Count
        /// </summary>
        /// <remarks>
        /// Requests the number of process definitions that fulfill the query criteria. Takes the same filtering parameters as the [Get Definitions](https://docs.camunda.org/manual/7.17/reference/rest/process-definition/get-query/) method.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDefinitionId">Filter by process definition id. (optional)</param>
        /// <param name="processDefinitionIdIn">Filter by a comma-separated list of process definition ids. (optional)</param>
        /// <param name="name">Filter by process definition name. (optional)</param>
        /// <param name="nameLike">Filter by process definition names that the parameter is a substring of. (optional)</param>
        /// <param name="deploymentId">Filter by the deployment the id belongs to. (optional)</param>
        /// <param name="deployedAfter">Filter by the deploy time of the deployment the process definition belongs to. Only selects process definitions that have been deployed after (exclusive) a specific time. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.546+0200&#x60;. (optional)</param>
        /// <param name="deployedAt">Filter by the deploy time of the deployment the process definition belongs to. Only selects process definitions that have been deployed at a specific time (exact match). By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.546+0200&#x60;. (optional)</param>
        /// <param name="key">Filter by process definition key, i.e., the id in the BPMN 2.0 XML. Exact match. (optional)</param>
        /// <param name="keysIn">Filter by a comma-separated list of process definition keys. (optional)</param>
        /// <param name="keyLike">Filter by process definition keys that the parameter is a substring of. (optional)</param>
        /// <param name="category">Filter by process definition category. Exact match. (optional)</param>
        /// <param name="categoryLike">Filter by process definition categories that the parameter is a substring of. (optional)</param>
        /// <param name="version">Filter by process definition version. (optional)</param>
        /// <param name="latestVersion">Only include those process definitions that are latest versions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="resourceName">Filter by the name of the process definition resource. Exact match. (optional)</param>
        /// <param name="resourceNameLike">Filter by names of those process definition resources that the parameter is a substring of. (optional)</param>
        /// <param name="startableBy">Filter by a user name who is allowed to start the process. (optional)</param>
        /// <param name="active">Only include active process definitions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="suspended">Only include suspended process definitions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="incidentId">Filter by the incident id. (optional)</param>
        /// <param name="incidentType">Filter by the incident type. See the [User Guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)</param>
        /// <param name="incidentMessage">Filter by the incident message. Exact match. (optional)</param>
        /// <param name="incidentMessageLike">Filter by the incident message that the parameter is a substring of. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. A process definition must have one of the given tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include process definitions which belong to no tenant. Value may only be true, as false is the default behavior. (optional)</param>
        /// <param name="includeProcessDefinitionsWithoutTenantId">Include process definitions which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="versionTag">Filter by the version tag. (optional)</param>
        /// <param name="versionTagLike">Filter by the version tag that the parameter is a substring of. (optional)</param>
        /// <param name="withoutVersionTag">Only include process definitions without a &#x60;versionTag&#x60;. (optional)</param>
        /// <param name="startableInTasklist">Filter by process definitions which are startable in Tasklist.. (optional)</param>
        /// <param name="notStartableInTasklist">Filter by process definitions which are not startable in Tasklist. (optional)</param>
        /// <param name="startablePermissionCheck">Filter by process definitions which the user is allowed to start in Tasklist. If the user doesn&#39;t have these permissions the result will be empty list. The permissions are: * &#x60;CREATE&#x60; permission for all Process instances * &#x60;CREATE_INSTANCE&#x60; and &#x60;READ&#x60; permission on Process definition level (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CountResultDto</returns>
        System.Threading.Tasks.Task<CountResultDto> GetProcessDefinitionsCountAsync(string processDefinitionId = default(string), string processDefinitionIdIn = default(string), string name = default(string), string nameLike = default(string), string deploymentId = default(string), DateTime? deployedAfter = default(DateTime?), DateTime? deployedAt = default(DateTime?), string key = default(string), string keysIn = default(string), string keyLike = default(string), string category = default(string), string categoryLike = default(string), int? version = default(int?), bool? latestVersion = default(bool?), string resourceName = default(string), string resourceNameLike = default(string), string startableBy = default(string), bool? active = default(bool?), bool? suspended = default(bool?), string incidentId = default(string), string incidentType = default(string), string incidentMessage = default(string), string incidentMessageLike = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), bool? includeProcessDefinitionsWithoutTenantId = default(bool?), string versionTag = default(string), string versionTagLike = default(string), bool? withoutVersionTag = default(bool?), bool? startableInTasklist = default(bool?), bool? notStartableInTasklist = default(bool?), bool? startablePermissionCheck = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get List Count
        /// </summary>
        /// <remarks>
        /// Requests the number of process definitions that fulfill the query criteria. Takes the same filtering parameters as the [Get Definitions](https://docs.camunda.org/manual/7.17/reference/rest/process-definition/get-query/) method.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDefinitionId">Filter by process definition id. (optional)</param>
        /// <param name="processDefinitionIdIn">Filter by a comma-separated list of process definition ids. (optional)</param>
        /// <param name="name">Filter by process definition name. (optional)</param>
        /// <param name="nameLike">Filter by process definition names that the parameter is a substring of. (optional)</param>
        /// <param name="deploymentId">Filter by the deployment the id belongs to. (optional)</param>
        /// <param name="deployedAfter">Filter by the deploy time of the deployment the process definition belongs to. Only selects process definitions that have been deployed after (exclusive) a specific time. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.546+0200&#x60;. (optional)</param>
        /// <param name="deployedAt">Filter by the deploy time of the deployment the process definition belongs to. Only selects process definitions that have been deployed at a specific time (exact match). By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.546+0200&#x60;. (optional)</param>
        /// <param name="key">Filter by process definition key, i.e., the id in the BPMN 2.0 XML. Exact match. (optional)</param>
        /// <param name="keysIn">Filter by a comma-separated list of process definition keys. (optional)</param>
        /// <param name="keyLike">Filter by process definition keys that the parameter is a substring of. (optional)</param>
        /// <param name="category">Filter by process definition category. Exact match. (optional)</param>
        /// <param name="categoryLike">Filter by process definition categories that the parameter is a substring of. (optional)</param>
        /// <param name="version">Filter by process definition version. (optional)</param>
        /// <param name="latestVersion">Only include those process definitions that are latest versions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="resourceName">Filter by the name of the process definition resource. Exact match. (optional)</param>
        /// <param name="resourceNameLike">Filter by names of those process definition resources that the parameter is a substring of. (optional)</param>
        /// <param name="startableBy">Filter by a user name who is allowed to start the process. (optional)</param>
        /// <param name="active">Only include active process definitions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="suspended">Only include suspended process definitions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="incidentId">Filter by the incident id. (optional)</param>
        /// <param name="incidentType">Filter by the incident type. See the [User Guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)</param>
        /// <param name="incidentMessage">Filter by the incident message. Exact match. (optional)</param>
        /// <param name="incidentMessageLike">Filter by the incident message that the parameter is a substring of. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. A process definition must have one of the given tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include process definitions which belong to no tenant. Value may only be true, as false is the default behavior. (optional)</param>
        /// <param name="includeProcessDefinitionsWithoutTenantId">Include process definitions which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="versionTag">Filter by the version tag. (optional)</param>
        /// <param name="versionTagLike">Filter by the version tag that the parameter is a substring of. (optional)</param>
        /// <param name="withoutVersionTag">Only include process definitions without a &#x60;versionTag&#x60;. (optional)</param>
        /// <param name="startableInTasklist">Filter by process definitions which are startable in Tasklist.. (optional)</param>
        /// <param name="notStartableInTasklist">Filter by process definitions which are not startable in Tasklist. (optional)</param>
        /// <param name="startablePermissionCheck">Filter by process definitions which the user is allowed to start in Tasklist. If the user doesn&#39;t have these permissions the result will be empty list. The permissions are: * &#x60;CREATE&#x60; permission for all Process instances * &#x60;CREATE_INSTANCE&#x60; and &#x60;READ&#x60; permission on Process definition level (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CountResultDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<CountResultDto>> GetProcessDefinitionsCountWithHttpInfoAsync(string processDefinitionId = default(string), string processDefinitionIdIn = default(string), string name = default(string), string nameLike = default(string), string deploymentId = default(string), DateTime? deployedAfter = default(DateTime?), DateTime? deployedAt = default(DateTime?), string key = default(string), string keysIn = default(string), string keyLike = default(string), string category = default(string), string categoryLike = default(string), int? version = default(int?), bool? latestVersion = default(bool?), string resourceName = default(string), string resourceNameLike = default(string), string startableBy = default(string), bool? active = default(bool?), bool? suspended = default(bool?), string incidentId = default(string), string incidentType = default(string), string incidentMessage = default(string), string incidentMessageLike = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), bool? includeProcessDefinitionsWithoutTenantId = default(bool?), string versionTag = default(string), string versionTagLike = default(string), bool? withoutVersionTag = default(bool?), bool? startableInTasklist = default(bool?), bool? notStartableInTasklist = default(bool?), bool? startablePermissionCheck = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Rendered Start Form
        /// </summary>
        /// <remarks>
        /// Retrieves the rendered form for a process definition. This method can be used to get the HTML rendering of a [Generated Task Form](https://docs.camunda.org/manual/7.17/user-guide/task-forms/#generated-task-forms).
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition to get the rendered start form for.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FileParameter</returns>
        System.Threading.Tasks.Task<FileParameter> GetRenderedStartFormAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Rendered Start Form
        /// </summary>
        /// <remarks>
        /// Retrieves the rendered form for a process definition. This method can be used to get the HTML rendering of a [Generated Task Form](https://docs.camunda.org/manual/7.17/user-guide/task-forms/#generated-task-forms).
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition to get the rendered start form for.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FileParameter)</returns>
        System.Threading.Tasks.Task<ApiResponse<FileParameter>> GetRenderedStartFormWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Rendered Start Form
        /// </summary>
        /// <remarks>
        /// Retrieves  the rendered form for the latest version of the process definition which belongs to no tenant. This method can be used to get the HTML rendering of a [Generated Task Form](https://docs.camunda.org/manual/7.17/user-guide/task-forms/#generated-task-forms).
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FileParameter</returns>
        System.Threading.Tasks.Task<FileParameter> GetRenderedStartFormByKeyAsync(string key, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Rendered Start Form
        /// </summary>
        /// <remarks>
        /// Retrieves  the rendered form for the latest version of the process definition which belongs to no tenant. This method can be used to get the HTML rendering of a [Generated Task Form](https://docs.camunda.org/manual/7.17/user-guide/task-forms/#generated-task-forms).
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FileParameter)</returns>
        System.Threading.Tasks.Task<ApiResponse<FileParameter>> GetRenderedStartFormByKeyWithHttpInfoAsync(string key, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Rendered Start Form
        /// </summary>
        /// <remarks>
        /// Retrieves  the rendered form for the latest version of the process definition for a tenant. This method can be used to get the HTML rendering of a [Generated Task Form](https://docs.camunda.org/manual/7.17/user-guide/task-forms/#generated-task-forms).
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FileParameter</returns>
        System.Threading.Tasks.Task<FileParameter> GetRenderedStartFormByKeyAndTenantIdAsync(string key, string tenantId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Rendered Start Form
        /// </summary>
        /// <remarks>
        /// Retrieves  the rendered form for the latest version of the process definition for a tenant. This method can be used to get the HTML rendering of a [Generated Task Form](https://docs.camunda.org/manual/7.17/user-guide/task-forms/#generated-task-forms).
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FileParameter)</returns>
        System.Threading.Tasks.Task<ApiResponse<FileParameter>> GetRenderedStartFormByKeyAndTenantIdWithHttpInfoAsync(string key, string tenantId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Start Form Key
        /// </summary>
        /// <remarks>
        /// Retrieves the key of the start form for a process definition. The form key corresponds to the &#x60;FormData#formKey&#x60; property in the engine.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition to get the start form key for.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FormDto</returns>
        System.Threading.Tasks.Task<FormDto> GetStartFormAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Start Form Key
        /// </summary>
        /// <remarks>
        /// Retrieves the key of the start form for a process definition. The form key corresponds to the &#x60;FormData#formKey&#x60; property in the engine.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition to get the start form key for.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FormDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<FormDto>> GetStartFormWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Start Form Key
        /// </summary>
        /// <remarks>
        /// Retrieves the key of the start form for the latest version of the process definition which belongs to no tenant. The form key corresponds to the &#x60;FormData#formKey&#x60; property in the engine.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) for which the form key is to be retrieved.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FormDto</returns>
        System.Threading.Tasks.Task<FormDto> GetStartFormByKeyAsync(string key, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Start Form Key
        /// </summary>
        /// <remarks>
        /// Retrieves the key of the start form for the latest version of the process definition which belongs to no tenant. The form key corresponds to the &#x60;FormData#formKey&#x60; property in the engine.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) for which the form key is to be retrieved.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FormDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<FormDto>> GetStartFormByKeyWithHttpInfoAsync(string key, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Start Form Key
        /// </summary>
        /// <remarks>
        /// Retrieves the key of the start form for the latest version of the process definition for a tenant. The form key corresponds to the &#x60;FormData#formKey&#x60; property in the engine.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) for which the form key is to be retrieved.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FormDto</returns>
        System.Threading.Tasks.Task<FormDto> GetStartFormByKeyAndTenantIdAsync(string key, string tenantId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Start Form Key
        /// </summary>
        /// <remarks>
        /// Retrieves the key of the start form for the latest version of the process definition for a tenant. The form key corresponds to the &#x60;FormData#formKey&#x60; property in the engine.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) for which the form key is to be retrieved.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FormDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<FormDto>> GetStartFormByKeyAndTenantIdWithHttpInfoAsync(string key, string tenantId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Start Form Variables
        /// </summary>
        /// <remarks>
        /// Retrieves the start form variables for a process definition (only if they are defined via the  [Generated Task Form](https://docs.camunda.org/manual/7.17/user-guide/task-forms/#generated-task-forms) approach). The start form variables take form data specified on the start event into account. If form fields are defined, the variable types and default values of the form fields are taken into account.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition to retrieve the variables for.</param>
        /// <param name="variableNames">A comma-separated list of variable names. Allows restricting the list of requested variables to the variable names in the list. It is best practice to restrict the list of variables to the variables actually required by the form in order to minimize fetching of data. If the query parameter is ommitted all variables are fetched. If the query parameter contains non-existent variable names, the variable names are ignored. (optional)</param>
        /// <param name="deserializeValues">Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default true).  If set to true, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](http://jackson.codehaus.org/) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to false, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note**: While true is the default value for reasons of backward compatibility, we recommend setting this parameter to false when developing web applications that are independent of the Java process applications deployed to the engine. (optional, default to true)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Dictionary&lt;string, VariableValueDto&gt;</returns>
        System.Threading.Tasks.Task<Dictionary<string, VariableValueDto>> GetStartFormVariablesAsync(string id, string variableNames = default(string), bool? deserializeValues = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Start Form Variables
        /// </summary>
        /// <remarks>
        /// Retrieves the start form variables for a process definition (only if they are defined via the  [Generated Task Form](https://docs.camunda.org/manual/7.17/user-guide/task-forms/#generated-task-forms) approach). The start form variables take form data specified on the start event into account. If form fields are defined, the variable types and default values of the form fields are taken into account.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition to retrieve the variables for.</param>
        /// <param name="variableNames">A comma-separated list of variable names. Allows restricting the list of requested variables to the variable names in the list. It is best practice to restrict the list of variables to the variables actually required by the form in order to minimize fetching of data. If the query parameter is ommitted all variables are fetched. If the query parameter contains non-existent variable names, the variable names are ignored. (optional)</param>
        /// <param name="deserializeValues">Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default true).  If set to true, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](http://jackson.codehaus.org/) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to false, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note**: While true is the default value for reasons of backward compatibility, we recommend setting this parameter to false when developing web applications that are independent of the Java process applications deployed to the engine. (optional, default to true)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, VariableValueDto&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dictionary<string, VariableValueDto>>> GetStartFormVariablesWithHttpInfoAsync(string id, string variableNames = default(string), bool? deserializeValues = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Start Form Variables
        /// </summary>
        /// <remarks>
        /// Retrieves the start form variables for the latest process definition which belongs to no tenant (only if they are defined via the  [Generated Task Form](https://docs.camunda.org/manual/7.17/user-guide/task-forms/#generated-task-forms) approach). The start form variables take form data specified on the start event into account. If form fields are defined, the variable types and default values of the form fields are taken into account.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <param name="variableNames">A comma-separated list of variable names. Allows restricting the list of requested variables to the variable names in the list. It is best practice to restrict the list of variables to the variables actually required by the form in order to minimize fetching of data. If the query parameter is ommitted all variables are fetched. If the query parameter contains non-existent variable names, the variable names are ignored. (optional)</param>
        /// <param name="deserializeValues">Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default true).  If set to true, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](http://jackson.codehaus.org/) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to false, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note**: While true is the default value for reasons of backward compatibility, we recommend setting this parameter to false when developing web applications that are independent of the Java process applications deployed to the engine. (optional, default to true)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Dictionary&lt;string, VariableValueDto&gt;</returns>
        System.Threading.Tasks.Task<Dictionary<string, VariableValueDto>> GetStartFormVariablesByKeyAsync(string key, string variableNames = default(string), bool? deserializeValues = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Start Form Variables
        /// </summary>
        /// <remarks>
        /// Retrieves the start form variables for the latest process definition which belongs to no tenant (only if they are defined via the  [Generated Task Form](https://docs.camunda.org/manual/7.17/user-guide/task-forms/#generated-task-forms) approach). The start form variables take form data specified on the start event into account. If form fields are defined, the variable types and default values of the form fields are taken into account.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <param name="variableNames">A comma-separated list of variable names. Allows restricting the list of requested variables to the variable names in the list. It is best practice to restrict the list of variables to the variables actually required by the form in order to minimize fetching of data. If the query parameter is ommitted all variables are fetched. If the query parameter contains non-existent variable names, the variable names are ignored. (optional)</param>
        /// <param name="deserializeValues">Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default true).  If set to true, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](http://jackson.codehaus.org/) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to false, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note**: While true is the default value for reasons of backward compatibility, we recommend setting this parameter to false when developing web applications that are independent of the Java process applications deployed to the engine. (optional, default to true)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, VariableValueDto&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dictionary<string, VariableValueDto>>> GetStartFormVariablesByKeyWithHttpInfoAsync(string key, string variableNames = default(string), bool? deserializeValues = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Start Form Variables
        /// </summary>
        /// <remarks>
        /// Retrieves the start form variables for the latest process definition for a tenant (only if they are defined via the  [Generated Task Form](https://docs.camunda.org/manual/7.17/user-guide/task-forms/#generated-task-forms) approach). The start form variables take form data specified on the start event into account. If form fields are defined, the variable types and default values of the form fields are taken into account.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <param name="variableNames">A comma-separated list of variable names. Allows restricting the list of requested variables to the variable names in the list. It is best practice to restrict the list of variables to the variables actually required by the form in order to minimize fetching of data. If the query parameter is ommitted all variables are fetched. If the query parameter contains non-existent variable names, the variable names are ignored. (optional)</param>
        /// <param name="deserializeValues">Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default true).  If set to true, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](http://jackson.codehaus.org/) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to false, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note**: While true is the default value for reasons of backward compatibility, we recommend setting this parameter to false when developing web applications that are independent of the Java process applications deployed to the engine. (optional, default to true)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Dictionary&lt;string, VariableValueDto&gt;</returns>
        System.Threading.Tasks.Task<Dictionary<string, VariableValueDto>> GetStartFormVariablesByKeyAndTenantIdAsync(string key, string tenantId, string variableNames = default(string), bool? deserializeValues = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Start Form Variables
        /// </summary>
        /// <remarks>
        /// Retrieves the start form variables for the latest process definition for a tenant (only if they are defined via the  [Generated Task Form](https://docs.camunda.org/manual/7.17/user-guide/task-forms/#generated-task-forms) approach). The start form variables take form data specified on the start event into account. If form fields are defined, the variable types and default values of the form fields are taken into account.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <param name="variableNames">A comma-separated list of variable names. Allows restricting the list of requested variables to the variable names in the list. It is best practice to restrict the list of variables to the variables actually required by the form in order to minimize fetching of data. If the query parameter is ommitted all variables are fetched. If the query parameter contains non-existent variable names, the variable names are ignored. (optional)</param>
        /// <param name="deserializeValues">Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default true).  If set to true, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](http://jackson.codehaus.org/) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to false, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note**: While true is the default value for reasons of backward compatibility, we recommend setting this parameter to false when developing web applications that are independent of the Java process applications deployed to the engine. (optional, default to true)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, VariableValueDto&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dictionary<string, VariableValueDto>>> GetStartFormVariablesByKeyAndTenantIdWithHttpInfoAsync(string key, string tenantId, string variableNames = default(string), bool? deserializeValues = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Static Called Process Definitions
        /// </summary>
        /// <remarks>
        /// For the given process, returns a list of called process definitions corresponding to the &#x60;CalledProcessDefinition&#x60; interface in the engine. The list contains all process definitions that are referenced statically by call activities in the given process. This endpoint does not resolve process definitions that are referenced with expressions. Each called process definition contains a list of call activity ids, which specifies the call activities that are calling that process. This endpoint does not resolve references to case definitions.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;CalledProcessDefinitionDto&gt;</returns>
        System.Threading.Tasks.Task<List<CalledProcessDefinitionDto>> GetStaticCalledProcessDefinitionsAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Static Called Process Definitions
        /// </summary>
        /// <remarks>
        /// For the given process, returns a list of called process definitions corresponding to the &#x60;CalledProcessDefinition&#x60; interface in the engine. The list contains all process definitions that are referenced statically by call activities in the given process. This endpoint does not resolve process definitions that are referenced with expressions. Each called process definition contains a list of call activity ids, which specifies the call activities that are calling that process. This endpoint does not resolve references to case definitions.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;CalledProcessDefinitionDto&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<CalledProcessDefinitionDto>>> GetStaticCalledProcessDefinitionsWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Restart Process Instance
        /// </summary>
        /// <remarks>
        /// Restarts process instances that were canceled or terminated synchronously. Can also restart completed process instances. It will create a new instance using the original instance information. To execute the restart asynchronously, use the [Restart Process Instance Async](https://docs.camunda.org/manual/7.17/reference/rest/process-definition/post-restart-process-instance-async/) method.  For more information about the difference between synchronous and asynchronous execution, please refer to the related section of the [User Guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/process-instance-restart/#execution).
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition of the process instances to restart.</param>
        /// <param name="restartProcessInstanceDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RestartProcessInstanceAsync(string id, RestartProcessInstanceDto restartProcessInstanceDto = default(RestartProcessInstanceDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Restart Process Instance
        /// </summary>
        /// <remarks>
        /// Restarts process instances that were canceled or terminated synchronously. Can also restart completed process instances. It will create a new instance using the original instance information. To execute the restart asynchronously, use the [Restart Process Instance Async](https://docs.camunda.org/manual/7.17/reference/rest/process-definition/post-restart-process-instance-async/) method.  For more information about the difference between synchronous and asynchronous execution, please refer to the related section of the [User Guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/process-instance-restart/#execution).
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition of the process instances to restart.</param>
        /// <param name="restartProcessInstanceDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RestartProcessInstanceWithHttpInfoAsync(string id, RestartProcessInstanceDto restartProcessInstanceDto = default(RestartProcessInstanceDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Restart Process Instance Async
        /// </summary>
        /// <remarks>
        /// Restarts process instances that were canceled or terminated asynchronously. Can also restart completed process instances. It will create a new instance using the original instance information. To execute the restart asynchronously, use the [Restart Process Instance](https://docs.camunda.org/manual/7.17/reference/rest/process-definition/post-restart-process-instance-sync/) method.  For more information about the difference between synchronous and asynchronous execution, please refer to the related section of the [User Guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/process-instance-restart/#execution).
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition of the process instances to restart.</param>
        /// <param name="restartProcessInstanceDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchDto</returns>
        System.Threading.Tasks.Task<BatchDto> RestartProcessInstanceAsyncOperationAsync(string id, RestartProcessInstanceDto restartProcessInstanceDto = default(RestartProcessInstanceDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Restart Process Instance Async
        /// </summary>
        /// <remarks>
        /// Restarts process instances that were canceled or terminated asynchronously. Can also restart completed process instances. It will create a new instance using the original instance information. To execute the restart asynchronously, use the [Restart Process Instance](https://docs.camunda.org/manual/7.17/reference/rest/process-definition/post-restart-process-instance-sync/) method.  For more information about the difference between synchronous and asynchronous execution, please refer to the related section of the [User Guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/process-instance-restart/#execution).
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition of the process instances to restart.</param>
        /// <param name="restartProcessInstanceDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<BatchDto>> RestartProcessInstanceAsyncOperationWithHttpInfoAsync(string id, RestartProcessInstanceDto restartProcessInstanceDto = default(RestartProcessInstanceDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Start Instance
        /// </summary>
        /// <remarks>
        /// Instantiates a given process definition. Process variables and business key may be supplied in the request body.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition to be retrieved.</param>
        /// <param name="startProcessInstanceDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProcessInstanceWithVariablesDto</returns>
        System.Threading.Tasks.Task<ProcessInstanceWithVariablesDto> StartProcessInstanceAsync(string id, StartProcessInstanceDto startProcessInstanceDto = default(StartProcessInstanceDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Start Instance
        /// </summary>
        /// <remarks>
        /// Instantiates a given process definition. Process variables and business key may be supplied in the request body.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition to be retrieved.</param>
        /// <param name="startProcessInstanceDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProcessInstanceWithVariablesDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProcessInstanceWithVariablesDto>> StartProcessInstanceWithHttpInfoAsync(string id, StartProcessInstanceDto startProcessInstanceDto = default(StartProcessInstanceDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Start Instance
        /// </summary>
        /// <remarks>
        /// Instantiates a given process definition, starts the latest version of the process definition which belongs to no tenant. Process variables and business key may be supplied in the request body.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <param name="startProcessInstanceDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProcessInstanceWithVariablesDto</returns>
        System.Threading.Tasks.Task<ProcessInstanceWithVariablesDto> StartProcessInstanceByKeyAsync(string key, StartProcessInstanceDto startProcessInstanceDto = default(StartProcessInstanceDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Start Instance
        /// </summary>
        /// <remarks>
        /// Instantiates a given process definition, starts the latest version of the process definition which belongs to no tenant. Process variables and business key may be supplied in the request body.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <param name="startProcessInstanceDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProcessInstanceWithVariablesDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProcessInstanceWithVariablesDto>> StartProcessInstanceByKeyWithHttpInfoAsync(string key, StartProcessInstanceDto startProcessInstanceDto = default(StartProcessInstanceDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Start Instance
        /// </summary>
        /// <remarks>
        /// Instantiates a given process definition, starts the latest version of the process definition for tenant. Process variables and business key may be supplied in the request body.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <param name="startProcessInstanceDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProcessInstanceWithVariablesDto</returns>
        System.Threading.Tasks.Task<ProcessInstanceWithVariablesDto> StartProcessInstanceByKeyAndTenantIdAsync(string key, string tenantId, StartProcessInstanceDto startProcessInstanceDto = default(StartProcessInstanceDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Start Instance
        /// </summary>
        /// <remarks>
        /// Instantiates a given process definition, starts the latest version of the process definition for tenant. Process variables and business key may be supplied in the request body.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <param name="startProcessInstanceDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProcessInstanceWithVariablesDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProcessInstanceWithVariablesDto>> StartProcessInstanceByKeyAndTenantIdWithHttpInfoAsync(string key, string tenantId, StartProcessInstanceDto startProcessInstanceDto = default(StartProcessInstanceDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Submit Start Form
        /// </summary>
        /// <remarks>
        /// Starts a process instance using a set of process variables and the business key. If the start event has Form Field Metadata defined, the process engine will perform backend validation for any form fields which have validators defined. See [Documentation on Generated Task Forms](https://docs.camunda.org/manual/7.17/user-guide/task-forms/#generated-task-forms).
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition to submit the form for.</param>
        /// <param name="startProcessInstanceFormDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProcessInstanceDto</returns>
        System.Threading.Tasks.Task<ProcessInstanceDto> SubmitFormAsync(string id, StartProcessInstanceFormDto startProcessInstanceFormDto = default(StartProcessInstanceFormDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Submit Start Form
        /// </summary>
        /// <remarks>
        /// Starts a process instance using a set of process variables and the business key. If the start event has Form Field Metadata defined, the process engine will perform backend validation for any form fields which have validators defined. See [Documentation on Generated Task Forms](https://docs.camunda.org/manual/7.17/user-guide/task-forms/#generated-task-forms).
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition to submit the form for.</param>
        /// <param name="startProcessInstanceFormDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProcessInstanceDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProcessInstanceDto>> SubmitFormWithHttpInfoAsync(string id, StartProcessInstanceFormDto startProcessInstanceFormDto = default(StartProcessInstanceFormDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Submit Start Form
        /// </summary>
        /// <remarks>
        /// Starts the latest version of the process definition which belongs to no tenant using a set of process variables and the business key. If the start event has Form Field Metadata defined, the process engine will perform backend validation for any form fields which have validators defined. See [Documentation on Generated Task Forms](https://docs.camunda.org/manual/7.17/user-guide/task-forms/#generated-task-forms).
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition to submit the form for.</param>
        /// <param name="startProcessInstanceFormDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProcessInstanceDto</returns>
        System.Threading.Tasks.Task<ProcessInstanceDto> SubmitFormByKeyAsync(string key, StartProcessInstanceFormDto startProcessInstanceFormDto = default(StartProcessInstanceFormDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Submit Start Form
        /// </summary>
        /// <remarks>
        /// Starts the latest version of the process definition which belongs to no tenant using a set of process variables and the business key. If the start event has Form Field Metadata defined, the process engine will perform backend validation for any form fields which have validators defined. See [Documentation on Generated Task Forms](https://docs.camunda.org/manual/7.17/user-guide/task-forms/#generated-task-forms).
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition to submit the form for.</param>
        /// <param name="startProcessInstanceFormDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProcessInstanceDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProcessInstanceDto>> SubmitFormByKeyWithHttpInfoAsync(string key, StartProcessInstanceFormDto startProcessInstanceFormDto = default(StartProcessInstanceFormDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Submit Start Form
        /// </summary>
        /// <remarks>
        /// Starts the latest version of the process definition for a tenant using a set of process variables and the business key. If the start event has Form Field Metadata defined, the process engine will perform backend validation for any form fields which have validators defined. See [Documentation on Generated Task Forms](https://docs.camunda.org/manual/7.17/user-guide/task-forms/#generated-task-forms).
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition to submit the form for.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <param name="startProcessInstanceFormDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProcessInstanceDto</returns>
        System.Threading.Tasks.Task<ProcessInstanceDto> SubmitFormByKeyAndTenantIdAsync(string key, string tenantId, StartProcessInstanceFormDto startProcessInstanceFormDto = default(StartProcessInstanceFormDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Submit Start Form
        /// </summary>
        /// <remarks>
        /// Starts the latest version of the process definition for a tenant using a set of process variables and the business key. If the start event has Form Field Metadata defined, the process engine will perform backend validation for any form fields which have validators defined. See [Documentation on Generated Task Forms](https://docs.camunda.org/manual/7.17/user-guide/task-forms/#generated-task-forms).
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition to submit the form for.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <param name="startProcessInstanceFormDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProcessInstanceDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProcessInstanceDto>> SubmitFormByKeyAndTenantIdWithHttpInfoAsync(string key, string tenantId, StartProcessInstanceFormDto startProcessInstanceFormDto = default(StartProcessInstanceFormDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update History Time to Live
        /// </summary>
        /// <remarks>
        /// Updates history time to live for process definition. The field is used within [History cleanup](https://docs.camunda.org/manual/7.17/user-guide/process-engine/history/#history-cleanup).
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition to change history time to live.</param>
        /// <param name="historyTimeToLiveDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateHistoryTimeToLiveByProcessDefinitionIdAsync(string id, HistoryTimeToLiveDto historyTimeToLiveDto = default(HistoryTimeToLiveDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update History Time to Live
        /// </summary>
        /// <remarks>
        /// Updates history time to live for process definition. The field is used within [History cleanup](https://docs.camunda.org/manual/7.17/user-guide/process-engine/history/#history-cleanup).
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition to change history time to live.</param>
        /// <param name="historyTimeToLiveDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateHistoryTimeToLiveByProcessDefinitionIdWithHttpInfoAsync(string id, HistoryTimeToLiveDto historyTimeToLiveDto = default(HistoryTimeToLiveDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update History Time to Live
        /// </summary>
        /// <remarks>
        /// Updates history time to live for the latest version of the process definition which belongs to no tenant. The field is used within [History cleanup](https://docs.camunda.org/manual/7.17/user-guide/process-engine/history/#history-cleanup).
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition to change history time to live.</param>
        /// <param name="historyTimeToLiveDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateHistoryTimeToLiveByProcessDefinitionKeyAsync(string key, HistoryTimeToLiveDto historyTimeToLiveDto = default(HistoryTimeToLiveDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update History Time to Live
        /// </summary>
        /// <remarks>
        /// Updates history time to live for the latest version of the process definition which belongs to no tenant. The field is used within [History cleanup](https://docs.camunda.org/manual/7.17/user-guide/process-engine/history/#history-cleanup).
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition to change history time to live.</param>
        /// <param name="historyTimeToLiveDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateHistoryTimeToLiveByProcessDefinitionKeyWithHttpInfoAsync(string key, HistoryTimeToLiveDto historyTimeToLiveDto = default(HistoryTimeToLiveDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update History Time to Live
        /// </summary>
        /// <remarks>
        /// Updates history time to live for the latest version of the process definition for a tenant. The field is used within [History cleanup](https://docs.camunda.org/manual/7.17/user-guide/process-engine/history/#history-cleanup).
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition to change history time to live.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <param name="historyTimeToLiveDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateHistoryTimeToLiveByProcessDefinitionKeyAndTenantIdAsync(string key, string tenantId, HistoryTimeToLiveDto historyTimeToLiveDto = default(HistoryTimeToLiveDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update History Time to Live
        /// </summary>
        /// <remarks>
        /// Updates history time to live for the latest version of the process definition for a tenant. The field is used within [History cleanup](https://docs.camunda.org/manual/7.17/user-guide/process-engine/history/#history-cleanup).
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition to change history time to live.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <param name="historyTimeToLiveDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateHistoryTimeToLiveByProcessDefinitionKeyAndTenantIdWithHttpInfoAsync(string key, string tenantId, HistoryTimeToLiveDto historyTimeToLiveDto = default(HistoryTimeToLiveDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Activate/Suspend By Key
        /// </summary>
        /// <remarks>
        /// Activates or suspends process definitions with the given process definition key.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDefinitionSuspensionStateDto">**Note**: Unallowed property is &#x60;processDefinitionId&#x60;. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateProcessDefinitionSuspensionStateAsync(ProcessDefinitionSuspensionStateDto processDefinitionSuspensionStateDto = default(ProcessDefinitionSuspensionStateDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Activate/Suspend By Key
        /// </summary>
        /// <remarks>
        /// Activates or suspends process definitions with the given process definition key.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDefinitionSuspensionStateDto">**Note**: Unallowed property is &#x60;processDefinitionId&#x60;. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateProcessDefinitionSuspensionStateWithHttpInfoAsync(ProcessDefinitionSuspensionStateDto processDefinitionSuspensionStateDto = default(ProcessDefinitionSuspensionStateDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Activate/Suspend By Id
        /// </summary>
        /// <remarks>
        /// Activates or suspends a given process definition by id.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition to activate or suspend.</param>
        /// <param name="processDefinitionSuspensionStateDto">**Note**: Unallowed properties are &#x60;processDefinitionId&#x60; and &#x60;processDefinitionKey&#x60;. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateProcessDefinitionSuspensionStateByIdAsync(string id, ProcessDefinitionSuspensionStateDto processDefinitionSuspensionStateDto = default(ProcessDefinitionSuspensionStateDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Activate/Suspend By Id
        /// </summary>
        /// <remarks>
        /// Activates or suspends a given process definition by id.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition to activate or suspend.</param>
        /// <param name="processDefinitionSuspensionStateDto">**Note**: Unallowed properties are &#x60;processDefinitionId&#x60; and &#x60;processDefinitionKey&#x60;. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateProcessDefinitionSuspensionStateByIdWithHttpInfoAsync(string id, ProcessDefinitionSuspensionStateDto processDefinitionSuspensionStateDto = default(ProcessDefinitionSuspensionStateDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Activate/Suspend by Id
        /// </summary>
        /// <remarks>
        /// Activates or suspends a given process definition by latest version of process definition key which belongs to no tenant.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be activated/suspended.</param>
        /// <param name="processDefinitionSuspensionStateDto">**Note**: Unallowed properties are &#x60;processDefinitionId&#x60; and &#x60;processDefinitionKey&#x60;. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateProcessDefinitionSuspensionStateByKeyAsync(string key, ProcessDefinitionSuspensionStateDto processDefinitionSuspensionStateDto = default(ProcessDefinitionSuspensionStateDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Activate/Suspend by Id
        /// </summary>
        /// <remarks>
        /// Activates or suspends a given process definition by latest version of process definition key which belongs to no tenant.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be activated/suspended.</param>
        /// <param name="processDefinitionSuspensionStateDto">**Note**: Unallowed properties are &#x60;processDefinitionId&#x60; and &#x60;processDefinitionKey&#x60;. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateProcessDefinitionSuspensionStateByKeyWithHttpInfoAsync(string key, ProcessDefinitionSuspensionStateDto processDefinitionSuspensionStateDto = default(ProcessDefinitionSuspensionStateDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Activate/Suspend by Id
        /// </summary>
        /// <remarks>
        /// Activates or suspends a given process definition by the latest version of the process definition for tenant.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be activated/suspended.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <param name="processDefinitionSuspensionStateDto">**Note**: Unallowed properties are &#x60;processDefinitionId&#x60; and &#x60;processDefinitionKey&#x60;. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateProcessDefinitionSuspensionStateByKeyAndTenantIdAsync(string key, string tenantId, ProcessDefinitionSuspensionStateDto processDefinitionSuspensionStateDto = default(ProcessDefinitionSuspensionStateDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Activate/Suspend by Id
        /// </summary>
        /// <remarks>
        /// Activates or suspends a given process definition by the latest version of the process definition for tenant.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be activated/suspended.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <param name="processDefinitionSuspensionStateDto">**Note**: Unallowed properties are &#x60;processDefinitionId&#x60; and &#x60;processDefinitionKey&#x60;. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateProcessDefinitionSuspensionStateByKeyAndTenantIdWithHttpInfoAsync(string key, string tenantId, ProcessDefinitionSuspensionStateDto processDefinitionSuspensionStateDto = default(ProcessDefinitionSuspensionStateDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProcessDefinitionApi : IProcessDefinitionApiSync, IProcessDefinitionApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ProcessDefinitionApi : IDisposable, IProcessDefinitionApi
    {
        private Camunda.OpenApi.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ProcessDefinitionApi"/> class.
        /// **IMPORTANT** This will also create an istance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHander</see>.
        /// </summary>
        /// <returns></returns>
        public ProcessDefinitionApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProcessDefinitionApi"/> class.
        /// **IMPORTANT** This will also create an istance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHander</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public ProcessDefinitionApi(string basePath)
        {
            this.Configuration = Camunda.OpenApi.Client.Client.Configuration.MergeConfigurations(
                Camunda.OpenApi.Client.Client.GlobalConfiguration.Instance,
                new Camunda.OpenApi.Client.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new Camunda.OpenApi.Client.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = Camunda.OpenApi.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProcessDefinitionApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an istance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHander</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public ProcessDefinitionApi(Camunda.OpenApi.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Camunda.OpenApi.Client.Client.Configuration.MergeConfigurations(
                Camunda.OpenApi.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new Camunda.OpenApi.Client.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = Camunda.OpenApi.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProcessDefinitionApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public ProcessDefinitionApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProcessDefinitionApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public ProcessDefinitionApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = Camunda.OpenApi.Client.Client.Configuration.MergeConfigurations(
                Camunda.OpenApi.Client.Client.GlobalConfiguration.Instance,
                new Camunda.OpenApi.Client.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new Camunda.OpenApi.Client.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = Camunda.OpenApi.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProcessDefinitionApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public ProcessDefinitionApi(HttpClient client, Camunda.OpenApi.Client.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = Camunda.OpenApi.Client.Client.Configuration.MergeConfigurations(
                Camunda.OpenApi.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new Camunda.OpenApi.Client.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = Camunda.OpenApi.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProcessDefinitionApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public ProcessDefinitionApi(Camunda.OpenApi.Client.Client.ISynchronousClient client, Camunda.OpenApi.Client.Client.IAsynchronousClient asyncClient, Camunda.OpenApi.Client.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Camunda.OpenApi.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public Camunda.OpenApi.Client.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Camunda.OpenApi.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Camunda.OpenApi.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Camunda.OpenApi.Client.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Camunda.OpenApi.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Delete Deletes a running process instance by id.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition to be deleted.</param>
        /// <param name="cascade">&#x60;true&#x60;, if all process instances, historic process instances and jobs for this process definition should be deleted. (optional)</param>
        /// <param name="skipCustomListeners">&#x60;true&#x60;, if only the built-in ExecutionListeners should be notified with the end event. (optional, default to false)</param>
        /// <param name="skipIoMappings">A boolean value to control whether input/output mappings should be executed during deletion. &#x60;true&#x60;, if input/output mappings should not be invoked. (optional, default to false)</param>
        /// <returns></returns>
        public void DeleteProcessDefinition(string id, bool? cascade = default(bool?), bool? skipCustomListeners = default(bool?), bool? skipIoMappings = default(bool?))
        {
            DeleteProcessDefinitionWithHttpInfo(id, cascade, skipCustomListeners, skipIoMappings);
        }

        /// <summary>
        /// Delete Deletes a running process instance by id.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition to be deleted.</param>
        /// <param name="cascade">&#x60;true&#x60;, if all process instances, historic process instances and jobs for this process definition should be deleted. (optional)</param>
        /// <param name="skipCustomListeners">&#x60;true&#x60;, if only the built-in ExecutionListeners should be notified with the end event. (optional, default to false)</param>
        /// <param name="skipIoMappings">A boolean value to control whether input/output mappings should be executed during deletion. &#x60;true&#x60;, if input/output mappings should not be invoked. (optional, default to false)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<Object> DeleteProcessDefinitionWithHttpInfo(string id, bool? cascade = default(bool?), bool? skipCustomListeners = default(bool?), bool? skipIoMappings = default(bool?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling ProcessDefinitionApi->DeleteProcessDefinition");

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (cascade != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "cascade", cascade));
            }
            if (skipCustomListeners != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "skipCustomListeners", skipCustomListeners));
            }
            if (skipIoMappings != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "skipIoMappings", skipIoMappings));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/process-definition/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteProcessDefinition", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Deletes a running process instance by id.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition to be deleted.</param>
        /// <param name="cascade">&#x60;true&#x60;, if all process instances, historic process instances and jobs for this process definition should be deleted. (optional)</param>
        /// <param name="skipCustomListeners">&#x60;true&#x60;, if only the built-in ExecutionListeners should be notified with the end event. (optional, default to false)</param>
        /// <param name="skipIoMappings">A boolean value to control whether input/output mappings should be executed during deletion. &#x60;true&#x60;, if input/output mappings should not be invoked. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteProcessDefinitionAsync(string id, bool? cascade = default(bool?), bool? skipCustomListeners = default(bool?), bool? skipIoMappings = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteProcessDefinitionWithHttpInfoAsync(id, cascade, skipCustomListeners, skipIoMappings, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete Deletes a running process instance by id.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition to be deleted.</param>
        /// <param name="cascade">&#x60;true&#x60;, if all process instances, historic process instances and jobs for this process definition should be deleted. (optional)</param>
        /// <param name="skipCustomListeners">&#x60;true&#x60;, if only the built-in ExecutionListeners should be notified with the end event. (optional, default to false)</param>
        /// <param name="skipIoMappings">A boolean value to control whether input/output mappings should be executed during deletion. &#x60;true&#x60;, if input/output mappings should not be invoked. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<Object>> DeleteProcessDefinitionWithHttpInfoAsync(string id, bool? cascade = default(bool?), bool? skipCustomListeners = default(bool?), bool? skipIoMappings = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling ProcessDefinitionApi->DeleteProcessDefinition");


            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (cascade != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "cascade", cascade));
            }
            if (skipCustomListeners != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "skipCustomListeners", skipCustomListeners));
            }
            if (skipIoMappings != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "skipIoMappings", skipIoMappings));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/process-definition/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteProcessDefinition", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete By Key Deletes process definitions by a given key which belong to no tenant id.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definitions to be deleted.</param>
        /// <param name="cascade">&#x60;true&#x60;, if all process instances, historic process instances and jobs for this process definition should be deleted. (optional)</param>
        /// <param name="skipCustomListeners">&#x60;true&#x60;, if only the built-in ExecutionListeners should be notified with the end event. (optional, default to false)</param>
        /// <param name="skipIoMappings">A boolean value to control whether input/output mappings should be executed during deletion. &#x60;true&#x60;, if input/output mappings should not be invoked. (optional, default to false)</param>
        /// <returns></returns>
        public void DeleteProcessDefinitionsByKey(string key, bool? cascade = default(bool?), bool? skipCustomListeners = default(bool?), bool? skipIoMappings = default(bool?))
        {
            DeleteProcessDefinitionsByKeyWithHttpInfo(key, cascade, skipCustomListeners, skipIoMappings);
        }

        /// <summary>
        /// Delete By Key Deletes process definitions by a given key which belong to no tenant id.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definitions to be deleted.</param>
        /// <param name="cascade">&#x60;true&#x60;, if all process instances, historic process instances and jobs for this process definition should be deleted. (optional)</param>
        /// <param name="skipCustomListeners">&#x60;true&#x60;, if only the built-in ExecutionListeners should be notified with the end event. (optional, default to false)</param>
        /// <param name="skipIoMappings">A boolean value to control whether input/output mappings should be executed during deletion. &#x60;true&#x60;, if input/output mappings should not be invoked. (optional, default to false)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<Object> DeleteProcessDefinitionsByKeyWithHttpInfo(string key, bool? cascade = default(bool?), bool? skipCustomListeners = default(bool?), bool? skipIoMappings = default(bool?))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'key' when calling ProcessDefinitionApi->DeleteProcessDefinitionsByKey");

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(key)); // path parameter
            if (cascade != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "cascade", cascade));
            }
            if (skipCustomListeners != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "skipCustomListeners", skipCustomListeners));
            }
            if (skipIoMappings != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "skipIoMappings", skipIoMappings));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/process-definition/key/{key}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteProcessDefinitionsByKey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete By Key Deletes process definitions by a given key which belong to no tenant id.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definitions to be deleted.</param>
        /// <param name="cascade">&#x60;true&#x60;, if all process instances, historic process instances and jobs for this process definition should be deleted. (optional)</param>
        /// <param name="skipCustomListeners">&#x60;true&#x60;, if only the built-in ExecutionListeners should be notified with the end event. (optional, default to false)</param>
        /// <param name="skipIoMappings">A boolean value to control whether input/output mappings should be executed during deletion. &#x60;true&#x60;, if input/output mappings should not be invoked. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteProcessDefinitionsByKeyAsync(string key, bool? cascade = default(bool?), bool? skipCustomListeners = default(bool?), bool? skipIoMappings = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteProcessDefinitionsByKeyWithHttpInfoAsync(key, cascade, skipCustomListeners, skipIoMappings, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete By Key Deletes process definitions by a given key which belong to no tenant id.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definitions to be deleted.</param>
        /// <param name="cascade">&#x60;true&#x60;, if all process instances, historic process instances and jobs for this process definition should be deleted. (optional)</param>
        /// <param name="skipCustomListeners">&#x60;true&#x60;, if only the built-in ExecutionListeners should be notified with the end event. (optional, default to false)</param>
        /// <param name="skipIoMappings">A boolean value to control whether input/output mappings should be executed during deletion. &#x60;true&#x60;, if input/output mappings should not be invoked. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<Object>> DeleteProcessDefinitionsByKeyWithHttpInfoAsync(string key, bool? cascade = default(bool?), bool? skipCustomListeners = default(bool?), bool? skipIoMappings = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'key' when calling ProcessDefinitionApi->DeleteProcessDefinitionsByKey");


            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(key)); // path parameter
            if (cascade != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "cascade", cascade));
            }
            if (skipCustomListeners != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "skipCustomListeners", skipCustomListeners));
            }
            if (skipIoMappings != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "skipIoMappings", skipIoMappings));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/process-definition/key/{key}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteProcessDefinitionsByKey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete By Key Deletes process definitions by a given key and which belong to a tenant id.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definitions to be deleted.</param>
        /// <param name="tenantId">The id of the tenant the process definitions belong to.</param>
        /// <param name="cascade">&#x60;true&#x60;, if all process instances, historic process instances and jobs for this process definition should be deleted. (optional)</param>
        /// <param name="skipCustomListeners">&#x60;true&#x60;, if only the built-in ExecutionListeners should be notified with the end event. (optional, default to false)</param>
        /// <param name="skipIoMappings">A boolean value to control whether input/output mappings should be executed during deletion. &#x60;true&#x60;, if input/output mappings should not be invoked. (optional, default to false)</param>
        /// <returns></returns>
        public void DeleteProcessDefinitionsByKeyAndTenantId(string key, string tenantId, bool? cascade = default(bool?), bool? skipCustomListeners = default(bool?), bool? skipIoMappings = default(bool?))
        {
            DeleteProcessDefinitionsByKeyAndTenantIdWithHttpInfo(key, tenantId, cascade, skipCustomListeners, skipIoMappings);
        }

        /// <summary>
        /// Delete By Key Deletes process definitions by a given key and which belong to a tenant id.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definitions to be deleted.</param>
        /// <param name="tenantId">The id of the tenant the process definitions belong to.</param>
        /// <param name="cascade">&#x60;true&#x60;, if all process instances, historic process instances and jobs for this process definition should be deleted. (optional)</param>
        /// <param name="skipCustomListeners">&#x60;true&#x60;, if only the built-in ExecutionListeners should be notified with the end event. (optional, default to false)</param>
        /// <param name="skipIoMappings">A boolean value to control whether input/output mappings should be executed during deletion. &#x60;true&#x60;, if input/output mappings should not be invoked. (optional, default to false)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<Object> DeleteProcessDefinitionsByKeyAndTenantIdWithHttpInfo(string key, string tenantId, bool? cascade = default(bool?), bool? skipCustomListeners = default(bool?), bool? skipIoMappings = default(bool?))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'key' when calling ProcessDefinitionApi->DeleteProcessDefinitionsByKeyAndTenantId");

            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'tenantId' when calling ProcessDefinitionApi->DeleteProcessDefinitionsByKeyAndTenantId");

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(key)); // path parameter
            localVarRequestOptions.PathParameters.Add("tenant-id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            if (cascade != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "cascade", cascade));
            }
            if (skipCustomListeners != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "skipCustomListeners", skipCustomListeners));
            }
            if (skipIoMappings != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "skipIoMappings", skipIoMappings));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/process-definition/key/{key}/tenant-id/{tenant-id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteProcessDefinitionsByKeyAndTenantId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete By Key Deletes process definitions by a given key and which belong to a tenant id.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definitions to be deleted.</param>
        /// <param name="tenantId">The id of the tenant the process definitions belong to.</param>
        /// <param name="cascade">&#x60;true&#x60;, if all process instances, historic process instances and jobs for this process definition should be deleted. (optional)</param>
        /// <param name="skipCustomListeners">&#x60;true&#x60;, if only the built-in ExecutionListeners should be notified with the end event. (optional, default to false)</param>
        /// <param name="skipIoMappings">A boolean value to control whether input/output mappings should be executed during deletion. &#x60;true&#x60;, if input/output mappings should not be invoked. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteProcessDefinitionsByKeyAndTenantIdAsync(string key, string tenantId, bool? cascade = default(bool?), bool? skipCustomListeners = default(bool?), bool? skipIoMappings = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteProcessDefinitionsByKeyAndTenantIdWithHttpInfoAsync(key, tenantId, cascade, skipCustomListeners, skipIoMappings, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete By Key Deletes process definitions by a given key and which belong to a tenant id.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definitions to be deleted.</param>
        /// <param name="tenantId">The id of the tenant the process definitions belong to.</param>
        /// <param name="cascade">&#x60;true&#x60;, if all process instances, historic process instances and jobs for this process definition should be deleted. (optional)</param>
        /// <param name="skipCustomListeners">&#x60;true&#x60;, if only the built-in ExecutionListeners should be notified with the end event. (optional, default to false)</param>
        /// <param name="skipIoMappings">A boolean value to control whether input/output mappings should be executed during deletion. &#x60;true&#x60;, if input/output mappings should not be invoked. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<Object>> DeleteProcessDefinitionsByKeyAndTenantIdWithHttpInfoAsync(string key, string tenantId, bool? cascade = default(bool?), bool? skipCustomListeners = default(bool?), bool? skipIoMappings = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'key' when calling ProcessDefinitionApi->DeleteProcessDefinitionsByKeyAndTenantId");

            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'tenantId' when calling ProcessDefinitionApi->DeleteProcessDefinitionsByKeyAndTenantId");


            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(key)); // path parameter
            localVarRequestOptions.PathParameters.Add("tenant-id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            if (cascade != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "cascade", cascade));
            }
            if (skipCustomListeners != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "skipCustomListeners", skipCustomListeners));
            }
            if (skipIoMappings != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "skipIoMappings", skipIoMappings));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/process-definition/key/{key}/tenant-id/{tenant-id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteProcessDefinitionsByKeyAndTenantId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Activity Instance Statistics Retrieves runtime statistics of a given process definition, grouped by activities. These statistics include the number of running activity instances, optionally the number of failed jobs and also optionally the number of incidents either grouped by incident types or for a specific incident type. **Note**: This does not include historic data.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition.</param>
        /// <param name="failedJobs">Whether to include the number of failed jobs in the result or not. Valid values are &#x60;true&#x60; or &#x60;false&#x60;. (optional)</param>
        /// <param name="incidents">Valid values for this property are &#x60;true&#x60; or &#x60;false&#x60;. If this property has been set to &#x60;true&#x60; the result will include the corresponding number of incidents for each occurred incident type. If it is set to &#x60;false&#x60;, the incidents will not be included in the result. Cannot be used in combination with &#x60;incidentsForType&#x60;. (optional)</param>
        /// <param name="incidentsForType">If this property has been set with any incident type (i.e., a string value) the result will only include the number of incidents for the assigned incident type. Cannot be used in combination with &#x60;incidents&#x60;. See the [User Guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)</param>
        /// <returns>List&lt;ActivityStatisticsResultDto&gt;</returns>
        public List<ActivityStatisticsResultDto> GetActivityStatistics(string id, bool? failedJobs = default(bool?), bool? incidents = default(bool?), string incidentsForType = default(string))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<List<ActivityStatisticsResultDto>> localVarResponse = GetActivityStatisticsWithHttpInfo(id, failedJobs, incidents, incidentsForType);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Activity Instance Statistics Retrieves runtime statistics of a given process definition, grouped by activities. These statistics include the number of running activity instances, optionally the number of failed jobs and also optionally the number of incidents either grouped by incident types or for a specific incident type. **Note**: This does not include historic data.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition.</param>
        /// <param name="failedJobs">Whether to include the number of failed jobs in the result or not. Valid values are &#x60;true&#x60; or &#x60;false&#x60;. (optional)</param>
        /// <param name="incidents">Valid values for this property are &#x60;true&#x60; or &#x60;false&#x60;. If this property has been set to &#x60;true&#x60; the result will include the corresponding number of incidents for each occurred incident type. If it is set to &#x60;false&#x60;, the incidents will not be included in the result. Cannot be used in combination with &#x60;incidentsForType&#x60;. (optional)</param>
        /// <param name="incidentsForType">If this property has been set with any incident type (i.e., a string value) the result will only include the number of incidents for the assigned incident type. Cannot be used in combination with &#x60;incidents&#x60;. See the [User Guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)</param>
        /// <returns>ApiResponse of List&lt;ActivityStatisticsResultDto&gt;</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<List<ActivityStatisticsResultDto>> GetActivityStatisticsWithHttpInfo(string id, bool? failedJobs = default(bool?), bool? incidents = default(bool?), string incidentsForType = default(string))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling ProcessDefinitionApi->GetActivityStatistics");

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (failedJobs != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "failedJobs", failedJobs));
            }
            if (incidents != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "incidents", incidents));
            }
            if (incidentsForType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "incidentsForType", incidentsForType));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<ActivityStatisticsResultDto>>("/process-definition/{id}/statistics", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetActivityStatistics", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Activity Instance Statistics Retrieves runtime statistics of a given process definition, grouped by activities. These statistics include the number of running activity instances, optionally the number of failed jobs and also optionally the number of incidents either grouped by incident types or for a specific incident type. **Note**: This does not include historic data.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition.</param>
        /// <param name="failedJobs">Whether to include the number of failed jobs in the result or not. Valid values are &#x60;true&#x60; or &#x60;false&#x60;. (optional)</param>
        /// <param name="incidents">Valid values for this property are &#x60;true&#x60; or &#x60;false&#x60;. If this property has been set to &#x60;true&#x60; the result will include the corresponding number of incidents for each occurred incident type. If it is set to &#x60;false&#x60;, the incidents will not be included in the result. Cannot be used in combination with &#x60;incidentsForType&#x60;. (optional)</param>
        /// <param name="incidentsForType">If this property has been set with any incident type (i.e., a string value) the result will only include the number of incidents for the assigned incident type. Cannot be used in combination with &#x60;incidents&#x60;. See the [User Guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ActivityStatisticsResultDto&gt;</returns>
        public async System.Threading.Tasks.Task<List<ActivityStatisticsResultDto>> GetActivityStatisticsAsync(string id, bool? failedJobs = default(bool?), bool? incidents = default(bool?), string incidentsForType = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<List<ActivityStatisticsResultDto>> localVarResponse = await GetActivityStatisticsWithHttpInfoAsync(id, failedJobs, incidents, incidentsForType, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Activity Instance Statistics Retrieves runtime statistics of a given process definition, grouped by activities. These statistics include the number of running activity instances, optionally the number of failed jobs and also optionally the number of incidents either grouped by incident types or for a specific incident type. **Note**: This does not include historic data.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition.</param>
        /// <param name="failedJobs">Whether to include the number of failed jobs in the result or not. Valid values are &#x60;true&#x60; or &#x60;false&#x60;. (optional)</param>
        /// <param name="incidents">Valid values for this property are &#x60;true&#x60; or &#x60;false&#x60;. If this property has been set to &#x60;true&#x60; the result will include the corresponding number of incidents for each occurred incident type. If it is set to &#x60;false&#x60;, the incidents will not be included in the result. Cannot be used in combination with &#x60;incidentsForType&#x60;. (optional)</param>
        /// <param name="incidentsForType">If this property has been set with any incident type (i.e., a string value) the result will only include the number of incidents for the assigned incident type. Cannot be used in combination with &#x60;incidents&#x60;. See the [User Guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ActivityStatisticsResultDto&gt;)</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<List<ActivityStatisticsResultDto>>> GetActivityStatisticsWithHttpInfoAsync(string id, bool? failedJobs = default(bool?), bool? incidents = default(bool?), string incidentsForType = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling ProcessDefinitionApi->GetActivityStatistics");


            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (failedJobs != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "failedJobs", failedJobs));
            }
            if (incidents != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "incidents", incidents));
            }
            if (incidentsForType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "incidentsForType", incidentsForType));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<ActivityStatisticsResultDto>>("/process-definition/{id}/statistics", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetActivityStatistics", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Activity Instance Statistics Retrieves runtime statistics of the latest version of the given process definition which belongs to no tenant, grouped by activities. These statistics include the number of running activity instances, optionally the number of failed jobs and also optionally the number of incidents either grouped by incident types or for a specific incident type. **Note**: This does not include historic data.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <param name="failedJobs">Whether to include the number of failed jobs in the result or not. Valid values are &#x60;true&#x60; or &#x60;false&#x60;. (optional)</param>
        /// <param name="incidents">Valid values for this property are &#x60;true&#x60; or &#x60;false&#x60;. If this property has been set to &#x60;true&#x60; the result will include the corresponding number of incidents for each occurred incident type. If it is set to &#x60;false&#x60;, the incidents will not be included in the result. Cannot be used in combination with &#x60;incidentsForType&#x60;. (optional)</param>
        /// <param name="incidentsForType">If this property has been set with any incident type (i.e., a string value) the result will only include the number of incidents for the assigned incident type. Cannot be used in combination with &#x60;incidents&#x60;. See the [User Guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)</param>
        /// <returns>List&lt;ActivityStatisticsResultDto&gt;</returns>
        public List<ActivityStatisticsResultDto> GetActivityStatisticsByProcessDefinitionKey(string key, bool? failedJobs = default(bool?), bool? incidents = default(bool?), string incidentsForType = default(string))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<List<ActivityStatisticsResultDto>> localVarResponse = GetActivityStatisticsByProcessDefinitionKeyWithHttpInfo(key, failedJobs, incidents, incidentsForType);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Activity Instance Statistics Retrieves runtime statistics of the latest version of the given process definition which belongs to no tenant, grouped by activities. These statistics include the number of running activity instances, optionally the number of failed jobs and also optionally the number of incidents either grouped by incident types or for a specific incident type. **Note**: This does not include historic data.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <param name="failedJobs">Whether to include the number of failed jobs in the result or not. Valid values are &#x60;true&#x60; or &#x60;false&#x60;. (optional)</param>
        /// <param name="incidents">Valid values for this property are &#x60;true&#x60; or &#x60;false&#x60;. If this property has been set to &#x60;true&#x60; the result will include the corresponding number of incidents for each occurred incident type. If it is set to &#x60;false&#x60;, the incidents will not be included in the result. Cannot be used in combination with &#x60;incidentsForType&#x60;. (optional)</param>
        /// <param name="incidentsForType">If this property has been set with any incident type (i.e., a string value) the result will only include the number of incidents for the assigned incident type. Cannot be used in combination with &#x60;incidents&#x60;. See the [User Guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)</param>
        /// <returns>ApiResponse of List&lt;ActivityStatisticsResultDto&gt;</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<List<ActivityStatisticsResultDto>> GetActivityStatisticsByProcessDefinitionKeyWithHttpInfo(string key, bool? failedJobs = default(bool?), bool? incidents = default(bool?), string incidentsForType = default(string))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'key' when calling ProcessDefinitionApi->GetActivityStatisticsByProcessDefinitionKey");

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(key)); // path parameter
            if (failedJobs != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "failedJobs", failedJobs));
            }
            if (incidents != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "incidents", incidents));
            }
            if (incidentsForType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "incidentsForType", incidentsForType));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<ActivityStatisticsResultDto>>("/process-definition/key/{key}/statistics", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetActivityStatisticsByProcessDefinitionKey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Activity Instance Statistics Retrieves runtime statistics of the latest version of the given process definition which belongs to no tenant, grouped by activities. These statistics include the number of running activity instances, optionally the number of failed jobs and also optionally the number of incidents either grouped by incident types or for a specific incident type. **Note**: This does not include historic data.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <param name="failedJobs">Whether to include the number of failed jobs in the result or not. Valid values are &#x60;true&#x60; or &#x60;false&#x60;. (optional)</param>
        /// <param name="incidents">Valid values for this property are &#x60;true&#x60; or &#x60;false&#x60;. If this property has been set to &#x60;true&#x60; the result will include the corresponding number of incidents for each occurred incident type. If it is set to &#x60;false&#x60;, the incidents will not be included in the result. Cannot be used in combination with &#x60;incidentsForType&#x60;. (optional)</param>
        /// <param name="incidentsForType">If this property has been set with any incident type (i.e., a string value) the result will only include the number of incidents for the assigned incident type. Cannot be used in combination with &#x60;incidents&#x60;. See the [User Guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ActivityStatisticsResultDto&gt;</returns>
        public async System.Threading.Tasks.Task<List<ActivityStatisticsResultDto>> GetActivityStatisticsByProcessDefinitionKeyAsync(string key, bool? failedJobs = default(bool?), bool? incidents = default(bool?), string incidentsForType = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<List<ActivityStatisticsResultDto>> localVarResponse = await GetActivityStatisticsByProcessDefinitionKeyWithHttpInfoAsync(key, failedJobs, incidents, incidentsForType, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Activity Instance Statistics Retrieves runtime statistics of the latest version of the given process definition which belongs to no tenant, grouped by activities. These statistics include the number of running activity instances, optionally the number of failed jobs and also optionally the number of incidents either grouped by incident types or for a specific incident type. **Note**: This does not include historic data.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <param name="failedJobs">Whether to include the number of failed jobs in the result or not. Valid values are &#x60;true&#x60; or &#x60;false&#x60;. (optional)</param>
        /// <param name="incidents">Valid values for this property are &#x60;true&#x60; or &#x60;false&#x60;. If this property has been set to &#x60;true&#x60; the result will include the corresponding number of incidents for each occurred incident type. If it is set to &#x60;false&#x60;, the incidents will not be included in the result. Cannot be used in combination with &#x60;incidentsForType&#x60;. (optional)</param>
        /// <param name="incidentsForType">If this property has been set with any incident type (i.e., a string value) the result will only include the number of incidents for the assigned incident type. Cannot be used in combination with &#x60;incidents&#x60;. See the [User Guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ActivityStatisticsResultDto&gt;)</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<List<ActivityStatisticsResultDto>>> GetActivityStatisticsByProcessDefinitionKeyWithHttpInfoAsync(string key, bool? failedJobs = default(bool?), bool? incidents = default(bool?), string incidentsForType = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'key' when calling ProcessDefinitionApi->GetActivityStatisticsByProcessDefinitionKey");


            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(key)); // path parameter
            if (failedJobs != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "failedJobs", failedJobs));
            }
            if (incidents != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "incidents", incidents));
            }
            if (incidentsForType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "incidentsForType", incidentsForType));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<ActivityStatisticsResultDto>>("/process-definition/key/{key}/statistics", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetActivityStatisticsByProcessDefinitionKey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Activity Instance Statistics Retrieves runtime statistics of the latest version of the given process definition for a tenant, grouped by activities. These statistics include the number of running activity instances, optionally the number of failed jobs and also optionally the number of incidents either grouped by incident types or for a specific incident type. **Note**: This does not include historic data.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <param name="failedJobs">Whether to include the number of failed jobs in the result or not. Valid values are &#x60;true&#x60; or &#x60;false&#x60;. (optional)</param>
        /// <param name="incidents">Valid values for this property are &#x60;true&#x60; or &#x60;false&#x60;. If this property has been set to &#x60;true&#x60; the result will include the corresponding number of incidents for each occurred incident type. If it is set to &#x60;false&#x60;, the incidents will not be included in the result. Cannot be used in combination with &#x60;incidentsForType&#x60;. (optional)</param>
        /// <param name="incidentsForType">If this property has been set with any incident type (i.e., a string value) the result will only include the number of incidents for the assigned incident type. Cannot be used in combination with &#x60;incidents&#x60;. See the [User Guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)</param>
        /// <returns>List&lt;ActivityStatisticsResultDto&gt;</returns>
        public List<ActivityStatisticsResultDto> GetActivityStatisticsByProcessDefinitionKeyAndTenantId(string key, string tenantId, bool? failedJobs = default(bool?), bool? incidents = default(bool?), string incidentsForType = default(string))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<List<ActivityStatisticsResultDto>> localVarResponse = GetActivityStatisticsByProcessDefinitionKeyAndTenantIdWithHttpInfo(key, tenantId, failedJobs, incidents, incidentsForType);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Activity Instance Statistics Retrieves runtime statistics of the latest version of the given process definition for a tenant, grouped by activities. These statistics include the number of running activity instances, optionally the number of failed jobs and also optionally the number of incidents either grouped by incident types or for a specific incident type. **Note**: This does not include historic data.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <param name="failedJobs">Whether to include the number of failed jobs in the result or not. Valid values are &#x60;true&#x60; or &#x60;false&#x60;. (optional)</param>
        /// <param name="incidents">Valid values for this property are &#x60;true&#x60; or &#x60;false&#x60;. If this property has been set to &#x60;true&#x60; the result will include the corresponding number of incidents for each occurred incident type. If it is set to &#x60;false&#x60;, the incidents will not be included in the result. Cannot be used in combination with &#x60;incidentsForType&#x60;. (optional)</param>
        /// <param name="incidentsForType">If this property has been set with any incident type (i.e., a string value) the result will only include the number of incidents for the assigned incident type. Cannot be used in combination with &#x60;incidents&#x60;. See the [User Guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)</param>
        /// <returns>ApiResponse of List&lt;ActivityStatisticsResultDto&gt;</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<List<ActivityStatisticsResultDto>> GetActivityStatisticsByProcessDefinitionKeyAndTenantIdWithHttpInfo(string key, string tenantId, bool? failedJobs = default(bool?), bool? incidents = default(bool?), string incidentsForType = default(string))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'key' when calling ProcessDefinitionApi->GetActivityStatisticsByProcessDefinitionKeyAndTenantId");

            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'tenantId' when calling ProcessDefinitionApi->GetActivityStatisticsByProcessDefinitionKeyAndTenantId");

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(key)); // path parameter
            localVarRequestOptions.PathParameters.Add("tenant-id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            if (failedJobs != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "failedJobs", failedJobs));
            }
            if (incidents != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "incidents", incidents));
            }
            if (incidentsForType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "incidentsForType", incidentsForType));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<ActivityStatisticsResultDto>>("/process-definition/key/{key}/tenant-id/{tenant-id}/statistics", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetActivityStatisticsByProcessDefinitionKeyAndTenantId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Activity Instance Statistics Retrieves runtime statistics of the latest version of the given process definition for a tenant, grouped by activities. These statistics include the number of running activity instances, optionally the number of failed jobs and also optionally the number of incidents either grouped by incident types or for a specific incident type. **Note**: This does not include historic data.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <param name="failedJobs">Whether to include the number of failed jobs in the result or not. Valid values are &#x60;true&#x60; or &#x60;false&#x60;. (optional)</param>
        /// <param name="incidents">Valid values for this property are &#x60;true&#x60; or &#x60;false&#x60;. If this property has been set to &#x60;true&#x60; the result will include the corresponding number of incidents for each occurred incident type. If it is set to &#x60;false&#x60;, the incidents will not be included in the result. Cannot be used in combination with &#x60;incidentsForType&#x60;. (optional)</param>
        /// <param name="incidentsForType">If this property has been set with any incident type (i.e., a string value) the result will only include the number of incidents for the assigned incident type. Cannot be used in combination with &#x60;incidents&#x60;. See the [User Guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ActivityStatisticsResultDto&gt;</returns>
        public async System.Threading.Tasks.Task<List<ActivityStatisticsResultDto>> GetActivityStatisticsByProcessDefinitionKeyAndTenantIdAsync(string key, string tenantId, bool? failedJobs = default(bool?), bool? incidents = default(bool?), string incidentsForType = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<List<ActivityStatisticsResultDto>> localVarResponse = await GetActivityStatisticsByProcessDefinitionKeyAndTenantIdWithHttpInfoAsync(key, tenantId, failedJobs, incidents, incidentsForType, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Activity Instance Statistics Retrieves runtime statistics of the latest version of the given process definition for a tenant, grouped by activities. These statistics include the number of running activity instances, optionally the number of failed jobs and also optionally the number of incidents either grouped by incident types or for a specific incident type. **Note**: This does not include historic data.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <param name="failedJobs">Whether to include the number of failed jobs in the result or not. Valid values are &#x60;true&#x60; or &#x60;false&#x60;. (optional)</param>
        /// <param name="incidents">Valid values for this property are &#x60;true&#x60; or &#x60;false&#x60;. If this property has been set to &#x60;true&#x60; the result will include the corresponding number of incidents for each occurred incident type. If it is set to &#x60;false&#x60;, the incidents will not be included in the result. Cannot be used in combination with &#x60;incidentsForType&#x60;. (optional)</param>
        /// <param name="incidentsForType">If this property has been set with any incident type (i.e., a string value) the result will only include the number of incidents for the assigned incident type. Cannot be used in combination with &#x60;incidents&#x60;. See the [User Guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ActivityStatisticsResultDto&gt;)</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<List<ActivityStatisticsResultDto>>> GetActivityStatisticsByProcessDefinitionKeyAndTenantIdWithHttpInfoAsync(string key, string tenantId, bool? failedJobs = default(bool?), bool? incidents = default(bool?), string incidentsForType = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'key' when calling ProcessDefinitionApi->GetActivityStatisticsByProcessDefinitionKeyAndTenantId");

            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'tenantId' when calling ProcessDefinitionApi->GetActivityStatisticsByProcessDefinitionKeyAndTenantId");


            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(key)); // path parameter
            localVarRequestOptions.PathParameters.Add("tenant-id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            if (failedJobs != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "failedJobs", failedJobs));
            }
            if (incidents != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "incidents", incidents));
            }
            if (incidentsForType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "incidentsForType", incidentsForType));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<ActivityStatisticsResultDto>>("/process-definition/key/{key}/tenant-id/{tenant-id}/statistics", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetActivityStatisticsByProcessDefinitionKeyAndTenantId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Deployed Start Form Retrieves the deployed form that can be referenced from a start event. For further information please refer to [User Guide](https://docs.camunda.org/manual/7.17/user-guide/task-forms/#embedded-task-forms).
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition to get the deployed start form for.</param>
        /// <returns>FileParameter</returns>
        public FileParameter GetDeployedStartForm(string id)
        {
            Camunda.OpenApi.Client.Client.ApiResponse<FileParameter> localVarResponse = GetDeployedStartFormWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Deployed Start Form Retrieves the deployed form that can be referenced from a start event. For further information please refer to [User Guide](https://docs.camunda.org/manual/7.17/user-guide/task-forms/#embedded-task-forms).
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition to get the deployed start form for.</param>
        /// <returns>ApiResponse of FileParameter</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<FileParameter> GetDeployedStartFormWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling ProcessDefinitionApi->GetDeployedStartForm");

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/xhtml+xml",
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<FileParameter>("/process-definition/{id}/deployed-start-form", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDeployedStartForm", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Deployed Start Form Retrieves the deployed form that can be referenced from a start event. For further information please refer to [User Guide](https://docs.camunda.org/manual/7.17/user-guide/task-forms/#embedded-task-forms).
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition to get the deployed start form for.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FileParameter</returns>
        public async System.Threading.Tasks.Task<FileParameter> GetDeployedStartFormAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<FileParameter> localVarResponse = await GetDeployedStartFormWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Deployed Start Form Retrieves the deployed form that can be referenced from a start event. For further information please refer to [User Guide](https://docs.camunda.org/manual/7.17/user-guide/task-forms/#embedded-task-forms).
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition to get the deployed start form for.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FileParameter)</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<FileParameter>> GetDeployedStartFormWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling ProcessDefinitionApi->GetDeployedStartForm");


            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/xhtml+xml",
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<FileParameter>("/process-definition/{id}/deployed-start-form", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDeployedStartForm", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Deployed Start Form Retrieves the deployed form that can be referenced from a start event. For further information please refer to [User Guide](https://docs.camunda.org/manual/7.17/user-guide/task-forms/#embedded-task-forms).
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <returns>FileParameter</returns>
        public FileParameter GetDeployedStartFormByKey(string key)
        {
            Camunda.OpenApi.Client.Client.ApiResponse<FileParameter> localVarResponse = GetDeployedStartFormByKeyWithHttpInfo(key);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Deployed Start Form Retrieves the deployed form that can be referenced from a start event. For further information please refer to [User Guide](https://docs.camunda.org/manual/7.17/user-guide/task-forms/#embedded-task-forms).
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <returns>ApiResponse of FileParameter</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<FileParameter> GetDeployedStartFormByKeyWithHttpInfo(string key)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'key' when calling ProcessDefinitionApi->GetDeployedStartFormByKey");

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/xhtml+xml",
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(key)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<FileParameter>("/process-definition/key/{key}/deployed-start-form", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDeployedStartFormByKey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Deployed Start Form Retrieves the deployed form that can be referenced from a start event. For further information please refer to [User Guide](https://docs.camunda.org/manual/7.17/user-guide/task-forms/#embedded-task-forms).
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FileParameter</returns>
        public async System.Threading.Tasks.Task<FileParameter> GetDeployedStartFormByKeyAsync(string key, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<FileParameter> localVarResponse = await GetDeployedStartFormByKeyWithHttpInfoAsync(key, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Deployed Start Form Retrieves the deployed form that can be referenced from a start event. For further information please refer to [User Guide](https://docs.camunda.org/manual/7.17/user-guide/task-forms/#embedded-task-forms).
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FileParameter)</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<FileParameter>> GetDeployedStartFormByKeyWithHttpInfoAsync(string key, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'key' when calling ProcessDefinitionApi->GetDeployedStartFormByKey");


            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/xhtml+xml",
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(key)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<FileParameter>("/process-definition/key/{key}/deployed-start-form", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDeployedStartFormByKey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Deployed Start Form Retrieves the deployed form that can be referenced from a start event. For further information please refer to [User Guide](https://docs.camunda.org/manual/7.17/user-guide/task-forms/#embedded-task-forms).
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <param name="tenantId">The id of the tenant the process definitions belong to.</param>
        /// <returns>FileParameter</returns>
        public FileParameter GetDeployedStartFormByKeyAndTenantId(string key, string tenantId)
        {
            Camunda.OpenApi.Client.Client.ApiResponse<FileParameter> localVarResponse = GetDeployedStartFormByKeyAndTenantIdWithHttpInfo(key, tenantId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Deployed Start Form Retrieves the deployed form that can be referenced from a start event. For further information please refer to [User Guide](https://docs.camunda.org/manual/7.17/user-guide/task-forms/#embedded-task-forms).
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <param name="tenantId">The id of the tenant the process definitions belong to.</param>
        /// <returns>ApiResponse of FileParameter</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<FileParameter> GetDeployedStartFormByKeyAndTenantIdWithHttpInfo(string key, string tenantId)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'key' when calling ProcessDefinitionApi->GetDeployedStartFormByKeyAndTenantId");

            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'tenantId' when calling ProcessDefinitionApi->GetDeployedStartFormByKeyAndTenantId");

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/xhtml+xml",
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(key)); // path parameter
            localVarRequestOptions.PathParameters.Add("tenant-id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(tenantId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<FileParameter>("/process-definition/key/{key}/tenant-id/{tenant-id}/deployed-start-form", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDeployedStartFormByKeyAndTenantId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Deployed Start Form Retrieves the deployed form that can be referenced from a start event. For further information please refer to [User Guide](https://docs.camunda.org/manual/7.17/user-guide/task-forms/#embedded-task-forms).
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <param name="tenantId">The id of the tenant the process definitions belong to.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FileParameter</returns>
        public async System.Threading.Tasks.Task<FileParameter> GetDeployedStartFormByKeyAndTenantIdAsync(string key, string tenantId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<FileParameter> localVarResponse = await GetDeployedStartFormByKeyAndTenantIdWithHttpInfoAsync(key, tenantId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Deployed Start Form Retrieves the deployed form that can be referenced from a start event. For further information please refer to [User Guide](https://docs.camunda.org/manual/7.17/user-guide/task-forms/#embedded-task-forms).
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <param name="tenantId">The id of the tenant the process definitions belong to.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FileParameter)</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<FileParameter>> GetDeployedStartFormByKeyAndTenantIdWithHttpInfoAsync(string key, string tenantId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'key' when calling ProcessDefinitionApi->GetDeployedStartFormByKeyAndTenantId");

            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'tenantId' when calling ProcessDefinitionApi->GetDeployedStartFormByKeyAndTenantId");


            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/xhtml+xml",
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(key)); // path parameter
            localVarRequestOptions.PathParameters.Add("tenant-id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(tenantId)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<FileParameter>("/process-definition/key/{key}/tenant-id/{tenant-id}/deployed-start-form", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDeployedStartFormByKeyAndTenantId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Retrieves the latest version of the process definition for tenant according to the &#x60;ProcessDefinition&#x60; interface in the engine.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <returns>ProcessDefinitionDto</returns>
        public ProcessDefinitionDto GetLatestProcessDefinitionByTenantId(string key, string tenantId)
        {
            Camunda.OpenApi.Client.Client.ApiResponse<ProcessDefinitionDto> localVarResponse = GetLatestProcessDefinitionByTenantIdWithHttpInfo(key, tenantId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Retrieves the latest version of the process definition for tenant according to the &#x60;ProcessDefinition&#x60; interface in the engine.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <returns>ApiResponse of ProcessDefinitionDto</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<ProcessDefinitionDto> GetLatestProcessDefinitionByTenantIdWithHttpInfo(string key, string tenantId)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'key' when calling ProcessDefinitionApi->GetLatestProcessDefinitionByTenantId");

            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'tenantId' when calling ProcessDefinitionApi->GetLatestProcessDefinitionByTenantId");

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(key)); // path parameter
            localVarRequestOptions.PathParameters.Add("tenant-id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(tenantId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<ProcessDefinitionDto>("/process-definition/key/{key}/tenant-id/{tenant-id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLatestProcessDefinitionByTenantId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Retrieves the latest version of the process definition for tenant according to the &#x60;ProcessDefinition&#x60; interface in the engine.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProcessDefinitionDto</returns>
        public async System.Threading.Tasks.Task<ProcessDefinitionDto> GetLatestProcessDefinitionByTenantIdAsync(string key, string tenantId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<ProcessDefinitionDto> localVarResponse = await GetLatestProcessDefinitionByTenantIdWithHttpInfoAsync(key, tenantId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Retrieves the latest version of the process definition for tenant according to the &#x60;ProcessDefinition&#x60; interface in the engine.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProcessDefinitionDto)</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<ProcessDefinitionDto>> GetLatestProcessDefinitionByTenantIdWithHttpInfoAsync(string key, string tenantId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'key' when calling ProcessDefinitionApi->GetLatestProcessDefinitionByTenantId");

            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'tenantId' when calling ProcessDefinitionApi->GetLatestProcessDefinitionByTenantId");


            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(key)); // path parameter
            localVarRequestOptions.PathParameters.Add("tenant-id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(tenantId)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ProcessDefinitionDto>("/process-definition/key/{key}/tenant-id/{tenant-id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLatestProcessDefinitionByTenantId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Retrieves a process definition according to the &#x60;ProcessDefinition&#x60; interface in the engine.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition to be retrieved.</param>
        /// <returns>ProcessDefinitionDto</returns>
        public ProcessDefinitionDto GetProcessDefinition(string id)
        {
            Camunda.OpenApi.Client.Client.ApiResponse<ProcessDefinitionDto> localVarResponse = GetProcessDefinitionWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Retrieves a process definition according to the &#x60;ProcessDefinition&#x60; interface in the engine.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition to be retrieved.</param>
        /// <returns>ApiResponse of ProcessDefinitionDto</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<ProcessDefinitionDto> GetProcessDefinitionWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling ProcessDefinitionApi->GetProcessDefinition");

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<ProcessDefinitionDto>("/process-definition/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProcessDefinition", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Retrieves a process definition according to the &#x60;ProcessDefinition&#x60; interface in the engine.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition to be retrieved.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProcessDefinitionDto</returns>
        public async System.Threading.Tasks.Task<ProcessDefinitionDto> GetProcessDefinitionAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<ProcessDefinitionDto> localVarResponse = await GetProcessDefinitionWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Retrieves a process definition according to the &#x60;ProcessDefinition&#x60; interface in the engine.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition to be retrieved.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProcessDefinitionDto)</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<ProcessDefinitionDto>> GetProcessDefinitionWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling ProcessDefinitionApi->GetProcessDefinition");


            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ProcessDefinitionDto>("/process-definition/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProcessDefinition", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get XML Retrieves the BPMN 2.0 XML of a process definition.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition.</param>
        /// <returns>ProcessDefinitionDiagramDto</returns>
        public ProcessDefinitionDiagramDto GetProcessDefinitionBpmn20Xml(string id)
        {
            Camunda.OpenApi.Client.Client.ApiResponse<ProcessDefinitionDiagramDto> localVarResponse = GetProcessDefinitionBpmn20XmlWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get XML Retrieves the BPMN 2.0 XML of a process definition.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition.</param>
        /// <returns>ApiResponse of ProcessDefinitionDiagramDto</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<ProcessDefinitionDiagramDto> GetProcessDefinitionBpmn20XmlWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling ProcessDefinitionApi->GetProcessDefinitionBpmn20Xml");

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<ProcessDefinitionDiagramDto>("/process-definition/{id}/xml", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProcessDefinitionBpmn20Xml", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get XML Retrieves the BPMN 2.0 XML of a process definition.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProcessDefinitionDiagramDto</returns>
        public async System.Threading.Tasks.Task<ProcessDefinitionDiagramDto> GetProcessDefinitionBpmn20XmlAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<ProcessDefinitionDiagramDto> localVarResponse = await GetProcessDefinitionBpmn20XmlWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get XML Retrieves the BPMN 2.0 XML of a process definition.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProcessDefinitionDiagramDto)</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<ProcessDefinitionDiagramDto>> GetProcessDefinitionBpmn20XmlWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling ProcessDefinitionApi->GetProcessDefinitionBpmn20Xml");


            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ProcessDefinitionDiagramDto>("/process-definition/{id}/xml", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProcessDefinitionBpmn20Xml", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get XML Retrieves latest version the BPMN 2.0 XML of a process definition.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) whose XML should be retrieved.</param>
        /// <returns>ProcessDefinitionDiagramDto</returns>
        public ProcessDefinitionDiagramDto GetProcessDefinitionBpmn20XmlByKey(string key)
        {
            Camunda.OpenApi.Client.Client.ApiResponse<ProcessDefinitionDiagramDto> localVarResponse = GetProcessDefinitionBpmn20XmlByKeyWithHttpInfo(key);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get XML Retrieves latest version the BPMN 2.0 XML of a process definition.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) whose XML should be retrieved.</param>
        /// <returns>ApiResponse of ProcessDefinitionDiagramDto</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<ProcessDefinitionDiagramDto> GetProcessDefinitionBpmn20XmlByKeyWithHttpInfo(string key)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'key' when calling ProcessDefinitionApi->GetProcessDefinitionBpmn20XmlByKey");

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(key)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<ProcessDefinitionDiagramDto>("/process-definition/key/{key}/xml", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProcessDefinitionBpmn20XmlByKey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get XML Retrieves latest version the BPMN 2.0 XML of a process definition.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) whose XML should be retrieved.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProcessDefinitionDiagramDto</returns>
        public async System.Threading.Tasks.Task<ProcessDefinitionDiagramDto> GetProcessDefinitionBpmn20XmlByKeyAsync(string key, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<ProcessDefinitionDiagramDto> localVarResponse = await GetProcessDefinitionBpmn20XmlByKeyWithHttpInfoAsync(key, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get XML Retrieves latest version the BPMN 2.0 XML of a process definition.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) whose XML should be retrieved.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProcessDefinitionDiagramDto)</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<ProcessDefinitionDiagramDto>> GetProcessDefinitionBpmn20XmlByKeyWithHttpInfoAsync(string key, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'key' when calling ProcessDefinitionApi->GetProcessDefinitionBpmn20XmlByKey");


            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(key)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ProcessDefinitionDiagramDto>("/process-definition/key/{key}/xml", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProcessDefinitionBpmn20XmlByKey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get XML Retrieves latest version the BPMN 2.0 XML of a process definition. Returns the XML for the latest version of the process definition for tenant.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) whose XML should be retrieved.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <returns>ProcessDefinitionDiagramDto</returns>
        public ProcessDefinitionDiagramDto GetProcessDefinitionBpmn20XmlByKeyAndTenantId(string key, string tenantId)
        {
            Camunda.OpenApi.Client.Client.ApiResponse<ProcessDefinitionDiagramDto> localVarResponse = GetProcessDefinitionBpmn20XmlByKeyAndTenantIdWithHttpInfo(key, tenantId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get XML Retrieves latest version the BPMN 2.0 XML of a process definition. Returns the XML for the latest version of the process definition for tenant.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) whose XML should be retrieved.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <returns>ApiResponse of ProcessDefinitionDiagramDto</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<ProcessDefinitionDiagramDto> GetProcessDefinitionBpmn20XmlByKeyAndTenantIdWithHttpInfo(string key, string tenantId)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'key' when calling ProcessDefinitionApi->GetProcessDefinitionBpmn20XmlByKeyAndTenantId");

            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'tenantId' when calling ProcessDefinitionApi->GetProcessDefinitionBpmn20XmlByKeyAndTenantId");

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(key)); // path parameter
            localVarRequestOptions.PathParameters.Add("tenant-id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(tenantId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<ProcessDefinitionDiagramDto>("/process-definition/key/{key}/tenant-id/{tenant-id}/xml", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProcessDefinitionBpmn20XmlByKeyAndTenantId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get XML Retrieves latest version the BPMN 2.0 XML of a process definition. Returns the XML for the latest version of the process definition for tenant.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) whose XML should be retrieved.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProcessDefinitionDiagramDto</returns>
        public async System.Threading.Tasks.Task<ProcessDefinitionDiagramDto> GetProcessDefinitionBpmn20XmlByKeyAndTenantIdAsync(string key, string tenantId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<ProcessDefinitionDiagramDto> localVarResponse = await GetProcessDefinitionBpmn20XmlByKeyAndTenantIdWithHttpInfoAsync(key, tenantId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get XML Retrieves latest version the BPMN 2.0 XML of a process definition. Returns the XML for the latest version of the process definition for tenant.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) whose XML should be retrieved.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProcessDefinitionDiagramDto)</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<ProcessDefinitionDiagramDto>> GetProcessDefinitionBpmn20XmlByKeyAndTenantIdWithHttpInfoAsync(string key, string tenantId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'key' when calling ProcessDefinitionApi->GetProcessDefinitionBpmn20XmlByKeyAndTenantId");

            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'tenantId' when calling ProcessDefinitionApi->GetProcessDefinitionBpmn20XmlByKeyAndTenantId");


            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(key)); // path parameter
            localVarRequestOptions.PathParameters.Add("tenant-id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(tenantId)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ProcessDefinitionDiagramDto>("/process-definition/key/{key}/tenant-id/{tenant-id}/xml", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProcessDefinitionBpmn20XmlByKeyAndTenantId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Retrieves the latest version of the process definition which belongs to no tenant according to the &#x60;ProcessDefinition&#x60; interface in the engine.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <returns>ProcessDefinitionDto</returns>
        public ProcessDefinitionDto GetProcessDefinitionByKey(string key)
        {
            Camunda.OpenApi.Client.Client.ApiResponse<ProcessDefinitionDto> localVarResponse = GetProcessDefinitionByKeyWithHttpInfo(key);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Retrieves the latest version of the process definition which belongs to no tenant according to the &#x60;ProcessDefinition&#x60; interface in the engine.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <returns>ApiResponse of ProcessDefinitionDto</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<ProcessDefinitionDto> GetProcessDefinitionByKeyWithHttpInfo(string key)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'key' when calling ProcessDefinitionApi->GetProcessDefinitionByKey");

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(key)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<ProcessDefinitionDto>("/process-definition/key/{key}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProcessDefinitionByKey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Retrieves the latest version of the process definition which belongs to no tenant according to the &#x60;ProcessDefinition&#x60; interface in the engine.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProcessDefinitionDto</returns>
        public async System.Threading.Tasks.Task<ProcessDefinitionDto> GetProcessDefinitionByKeyAsync(string key, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<ProcessDefinitionDto> localVarResponse = await GetProcessDefinitionByKeyWithHttpInfoAsync(key, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Retrieves the latest version of the process definition which belongs to no tenant according to the &#x60;ProcessDefinition&#x60; interface in the engine.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProcessDefinitionDto)</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<ProcessDefinitionDto>> GetProcessDefinitionByKeyWithHttpInfoAsync(string key, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'key' when calling ProcessDefinitionApi->GetProcessDefinitionByKey");


            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(key)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ProcessDefinitionDto>("/process-definition/key/{key}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProcessDefinitionByKey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Diagram Retrieves the diagram of a process definition.  If the process definition&#39;s deployment contains an image resource with the same file name as the process definition, the deployed image will be returned by the Get Diagram endpoint. Example: &#x60;someProcess.bpmn&#x60; and &#x60;someProcess.png&#x60;. Supported file extentions for the image are: &#x60;svg&#x60;, &#x60;png&#x60;, &#x60;jpg&#x60;, and &#x60;gif&#x60;.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition.</param>
        /// <returns>FileParameter</returns>
        public FileParameter GetProcessDefinitionDiagram(string id)
        {
            Camunda.OpenApi.Client.Client.ApiResponse<FileParameter> localVarResponse = GetProcessDefinitionDiagramWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Diagram Retrieves the diagram of a process definition.  If the process definition&#39;s deployment contains an image resource with the same file name as the process definition, the deployed image will be returned by the Get Diagram endpoint. Example: &#x60;someProcess.bpmn&#x60; and &#x60;someProcess.png&#x60;. Supported file extentions for the image are: &#x60;svg&#x60;, &#x60;png&#x60;, &#x60;jpg&#x60;, and &#x60;gif&#x60;.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition.</param>
        /// <returns>ApiResponse of FileParameter</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<FileParameter> GetProcessDefinitionDiagramWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling ProcessDefinitionApi->GetProcessDefinitionDiagram");

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/octet-stream",
                "*/*",
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<FileParameter>("/process-definition/{id}/diagram", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProcessDefinitionDiagram", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Diagram Retrieves the diagram of a process definition.  If the process definition&#39;s deployment contains an image resource with the same file name as the process definition, the deployed image will be returned by the Get Diagram endpoint. Example: &#x60;someProcess.bpmn&#x60; and &#x60;someProcess.png&#x60;. Supported file extentions for the image are: &#x60;svg&#x60;, &#x60;png&#x60;, &#x60;jpg&#x60;, and &#x60;gif&#x60;.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FileParameter</returns>
        public async System.Threading.Tasks.Task<FileParameter> GetProcessDefinitionDiagramAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<FileParameter> localVarResponse = await GetProcessDefinitionDiagramWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Diagram Retrieves the diagram of a process definition.  If the process definition&#39;s deployment contains an image resource with the same file name as the process definition, the deployed image will be returned by the Get Diagram endpoint. Example: &#x60;someProcess.bpmn&#x60; and &#x60;someProcess.png&#x60;. Supported file extentions for the image are: &#x60;svg&#x60;, &#x60;png&#x60;, &#x60;jpg&#x60;, and &#x60;gif&#x60;.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FileParameter)</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<FileParameter>> GetProcessDefinitionDiagramWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling ProcessDefinitionApi->GetProcessDefinitionDiagram");


            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/octet-stream",
                "*/*",
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<FileParameter>("/process-definition/{id}/diagram", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProcessDefinitionDiagram", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Diagram Retrieves the diagram for the latest version of the process definition which belongs to no tenant.  If the process definition&#39;s deployment contains an image resource with the same file name as the process definition, the deployed image will be returned by the Get Diagram endpoint. Example: &#x60;someProcess.bpmn&#x60; and &#x60;someProcess.png&#x60;. Supported file extentions for the image are: &#x60;svg&#x60;, &#x60;png&#x60;, &#x60;jpg&#x60;, and &#x60;gif&#x60;.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition.</param>
        /// <returns>FileParameter</returns>
        public FileParameter GetProcessDefinitionDiagramByKey(string key)
        {
            Camunda.OpenApi.Client.Client.ApiResponse<FileParameter> localVarResponse = GetProcessDefinitionDiagramByKeyWithHttpInfo(key);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Diagram Retrieves the diagram for the latest version of the process definition which belongs to no tenant.  If the process definition&#39;s deployment contains an image resource with the same file name as the process definition, the deployed image will be returned by the Get Diagram endpoint. Example: &#x60;someProcess.bpmn&#x60; and &#x60;someProcess.png&#x60;. Supported file extentions for the image are: &#x60;svg&#x60;, &#x60;png&#x60;, &#x60;jpg&#x60;, and &#x60;gif&#x60;.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition.</param>
        /// <returns>ApiResponse of FileParameter</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<FileParameter> GetProcessDefinitionDiagramByKeyWithHttpInfo(string key)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'key' when calling ProcessDefinitionApi->GetProcessDefinitionDiagramByKey");

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/octet-stream",
                "*/*",
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(key)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<FileParameter>("/process-definition/key/{key}/diagram", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProcessDefinitionDiagramByKey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Diagram Retrieves the diagram for the latest version of the process definition which belongs to no tenant.  If the process definition&#39;s deployment contains an image resource with the same file name as the process definition, the deployed image will be returned by the Get Diagram endpoint. Example: &#x60;someProcess.bpmn&#x60; and &#x60;someProcess.png&#x60;. Supported file extentions for the image are: &#x60;svg&#x60;, &#x60;png&#x60;, &#x60;jpg&#x60;, and &#x60;gif&#x60;.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FileParameter</returns>
        public async System.Threading.Tasks.Task<FileParameter> GetProcessDefinitionDiagramByKeyAsync(string key, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<FileParameter> localVarResponse = await GetProcessDefinitionDiagramByKeyWithHttpInfoAsync(key, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Diagram Retrieves the diagram for the latest version of the process definition which belongs to no tenant.  If the process definition&#39;s deployment contains an image resource with the same file name as the process definition, the deployed image will be returned by the Get Diagram endpoint. Example: &#x60;someProcess.bpmn&#x60; and &#x60;someProcess.png&#x60;. Supported file extentions for the image are: &#x60;svg&#x60;, &#x60;png&#x60;, &#x60;jpg&#x60;, and &#x60;gif&#x60;.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FileParameter)</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<FileParameter>> GetProcessDefinitionDiagramByKeyWithHttpInfoAsync(string key, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'key' when calling ProcessDefinitionApi->GetProcessDefinitionDiagramByKey");


            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/octet-stream",
                "*/*",
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(key)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<FileParameter>("/process-definition/key/{key}/diagram", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProcessDefinitionDiagramByKey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Diagram Retrieves the diagram for the latest version of the process definition for tenant.  If the process definition&#39;s deployment contains an image resource with the same file name as the process definition, the deployed image will be returned by the Get Diagram endpoint. Example: &#x60;someProcess.bpmn&#x60; and &#x60;someProcess.png&#x60;. Supported file extentions for the image are: &#x60;svg&#x60;, &#x60;png&#x60;, &#x60;jpg&#x60;, and &#x60;gif&#x60;.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <returns>FileParameter</returns>
        public FileParameter GetProcessDefinitionDiagramByKeyAndTenantId(string key, string tenantId)
        {
            Camunda.OpenApi.Client.Client.ApiResponse<FileParameter> localVarResponse = GetProcessDefinitionDiagramByKeyAndTenantIdWithHttpInfo(key, tenantId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Diagram Retrieves the diagram for the latest version of the process definition for tenant.  If the process definition&#39;s deployment contains an image resource with the same file name as the process definition, the deployed image will be returned by the Get Diagram endpoint. Example: &#x60;someProcess.bpmn&#x60; and &#x60;someProcess.png&#x60;. Supported file extentions for the image are: &#x60;svg&#x60;, &#x60;png&#x60;, &#x60;jpg&#x60;, and &#x60;gif&#x60;.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <returns>ApiResponse of FileParameter</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<FileParameter> GetProcessDefinitionDiagramByKeyAndTenantIdWithHttpInfo(string key, string tenantId)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'key' when calling ProcessDefinitionApi->GetProcessDefinitionDiagramByKeyAndTenantId");

            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'tenantId' when calling ProcessDefinitionApi->GetProcessDefinitionDiagramByKeyAndTenantId");

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/octet-stream",
                "*/*",
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(key)); // path parameter
            localVarRequestOptions.PathParameters.Add("tenant-id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(tenantId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<FileParameter>("/process-definition/key/{key}/tenant-id/{tenant-id}/diagram", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProcessDefinitionDiagramByKeyAndTenantId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Diagram Retrieves the diagram for the latest version of the process definition for tenant.  If the process definition&#39;s deployment contains an image resource with the same file name as the process definition, the deployed image will be returned by the Get Diagram endpoint. Example: &#x60;someProcess.bpmn&#x60; and &#x60;someProcess.png&#x60;. Supported file extentions for the image are: &#x60;svg&#x60;, &#x60;png&#x60;, &#x60;jpg&#x60;, and &#x60;gif&#x60;.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FileParameter</returns>
        public async System.Threading.Tasks.Task<FileParameter> GetProcessDefinitionDiagramByKeyAndTenantIdAsync(string key, string tenantId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<FileParameter> localVarResponse = await GetProcessDefinitionDiagramByKeyAndTenantIdWithHttpInfoAsync(key, tenantId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Diagram Retrieves the diagram for the latest version of the process definition for tenant.  If the process definition&#39;s deployment contains an image resource with the same file name as the process definition, the deployed image will be returned by the Get Diagram endpoint. Example: &#x60;someProcess.bpmn&#x60; and &#x60;someProcess.png&#x60;. Supported file extentions for the image are: &#x60;svg&#x60;, &#x60;png&#x60;, &#x60;jpg&#x60;, and &#x60;gif&#x60;.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FileParameter)</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<FileParameter>> GetProcessDefinitionDiagramByKeyAndTenantIdWithHttpInfoAsync(string key, string tenantId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'key' when calling ProcessDefinitionApi->GetProcessDefinitionDiagramByKeyAndTenantId");

            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'tenantId' when calling ProcessDefinitionApi->GetProcessDefinitionDiagramByKeyAndTenantId");


            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/octet-stream",
                "*/*",
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(key)); // path parameter
            localVarRequestOptions.PathParameters.Add("tenant-id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(tenantId)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<FileParameter>("/process-definition/key/{key}/tenant-id/{tenant-id}/diagram", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProcessDefinitionDiagramByKeyAndTenantId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Process Instance Statistics Retrieves runtime statistics of the process engine, grouped by process definitions. These statistics include the number of running process instances, optionally the number of failed jobs and also optionally the number of incidents either grouped by incident types or for a specific incident type. **Note**: This does not include historic data.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="failedJobs">Whether to include the number of failed jobs in the result or not. Valid values are &#x60;true&#x60; or &#x60;false&#x60;. (optional)</param>
        /// <param name="incidents">Valid values for this property are &#x60;true&#x60; or &#x60;false&#x60;. If this property has been set to &#x60;true&#x60; the result will include the corresponding number of incidents for each occurred incident type. If it is set to &#x60;false&#x60;, the incidents will not be included in the result. Cannot be used in combination with &#x60;incidentsForType&#x60;. (optional)</param>
        /// <param name="incidentsForType">If this property has been set with any incident type (i.e., a string value) the result will only include the number of incidents for the assigned incident type. Cannot be used in combination with &#x60;incidents&#x60;. See the [User Guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)</param>
        /// <param name="rootIncidents">Valid values for this property are &#x60;true&#x60; or &#x60;false&#x60;. If this property has been set to &#x60;true&#x60; the result will include the corresponding number of root incidents for each occurred incident type. If it is set to &#x60;false&#x60;, the incidents will not be included in the result. Cannot be used in combination with &#x60;incidentsForType&#x60; or &#x60;incidents&#x60;. (optional)</param>
        /// <returns>List&lt;ProcessDefinitionStatisticsResultDto&gt;</returns>
        public List<ProcessDefinitionStatisticsResultDto> GetProcessDefinitionStatistics(bool? failedJobs = default(bool?), bool? incidents = default(bool?), string incidentsForType = default(string), bool? rootIncidents = default(bool?))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<List<ProcessDefinitionStatisticsResultDto>> localVarResponse = GetProcessDefinitionStatisticsWithHttpInfo(failedJobs, incidents, incidentsForType, rootIncidents);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Process Instance Statistics Retrieves runtime statistics of the process engine, grouped by process definitions. These statistics include the number of running process instances, optionally the number of failed jobs and also optionally the number of incidents either grouped by incident types or for a specific incident type. **Note**: This does not include historic data.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="failedJobs">Whether to include the number of failed jobs in the result or not. Valid values are &#x60;true&#x60; or &#x60;false&#x60;. (optional)</param>
        /// <param name="incidents">Valid values for this property are &#x60;true&#x60; or &#x60;false&#x60;. If this property has been set to &#x60;true&#x60; the result will include the corresponding number of incidents for each occurred incident type. If it is set to &#x60;false&#x60;, the incidents will not be included in the result. Cannot be used in combination with &#x60;incidentsForType&#x60;. (optional)</param>
        /// <param name="incidentsForType">If this property has been set with any incident type (i.e., a string value) the result will only include the number of incidents for the assigned incident type. Cannot be used in combination with &#x60;incidents&#x60;. See the [User Guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)</param>
        /// <param name="rootIncidents">Valid values for this property are &#x60;true&#x60; or &#x60;false&#x60;. If this property has been set to &#x60;true&#x60; the result will include the corresponding number of root incidents for each occurred incident type. If it is set to &#x60;false&#x60;, the incidents will not be included in the result. Cannot be used in combination with &#x60;incidentsForType&#x60; or &#x60;incidents&#x60;. (optional)</param>
        /// <returns>ApiResponse of List&lt;ProcessDefinitionStatisticsResultDto&gt;</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<List<ProcessDefinitionStatisticsResultDto>> GetProcessDefinitionStatisticsWithHttpInfo(bool? failedJobs = default(bool?), bool? incidents = default(bool?), string incidentsForType = default(string), bool? rootIncidents = default(bool?))
        {
            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (failedJobs != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "failedJobs", failedJobs));
            }
            if (incidents != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "incidents", incidents));
            }
            if (incidentsForType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "incidentsForType", incidentsForType));
            }
            if (rootIncidents != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "rootIncidents", rootIncidents));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<ProcessDefinitionStatisticsResultDto>>("/process-definition/statistics", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProcessDefinitionStatistics", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Process Instance Statistics Retrieves runtime statistics of the process engine, grouped by process definitions. These statistics include the number of running process instances, optionally the number of failed jobs and also optionally the number of incidents either grouped by incident types or for a specific incident type. **Note**: This does not include historic data.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="failedJobs">Whether to include the number of failed jobs in the result or not. Valid values are &#x60;true&#x60; or &#x60;false&#x60;. (optional)</param>
        /// <param name="incidents">Valid values for this property are &#x60;true&#x60; or &#x60;false&#x60;. If this property has been set to &#x60;true&#x60; the result will include the corresponding number of incidents for each occurred incident type. If it is set to &#x60;false&#x60;, the incidents will not be included in the result. Cannot be used in combination with &#x60;incidentsForType&#x60;. (optional)</param>
        /// <param name="incidentsForType">If this property has been set with any incident type (i.e., a string value) the result will only include the number of incidents for the assigned incident type. Cannot be used in combination with &#x60;incidents&#x60;. See the [User Guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)</param>
        /// <param name="rootIncidents">Valid values for this property are &#x60;true&#x60; or &#x60;false&#x60;. If this property has been set to &#x60;true&#x60; the result will include the corresponding number of root incidents for each occurred incident type. If it is set to &#x60;false&#x60;, the incidents will not be included in the result. Cannot be used in combination with &#x60;incidentsForType&#x60; or &#x60;incidents&#x60;. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ProcessDefinitionStatisticsResultDto&gt;</returns>
        public async System.Threading.Tasks.Task<List<ProcessDefinitionStatisticsResultDto>> GetProcessDefinitionStatisticsAsync(bool? failedJobs = default(bool?), bool? incidents = default(bool?), string incidentsForType = default(string), bool? rootIncidents = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<List<ProcessDefinitionStatisticsResultDto>> localVarResponse = await GetProcessDefinitionStatisticsWithHttpInfoAsync(failedJobs, incidents, incidentsForType, rootIncidents, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Process Instance Statistics Retrieves runtime statistics of the process engine, grouped by process definitions. These statistics include the number of running process instances, optionally the number of failed jobs and also optionally the number of incidents either grouped by incident types or for a specific incident type. **Note**: This does not include historic data.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="failedJobs">Whether to include the number of failed jobs in the result or not. Valid values are &#x60;true&#x60; or &#x60;false&#x60;. (optional)</param>
        /// <param name="incidents">Valid values for this property are &#x60;true&#x60; or &#x60;false&#x60;. If this property has been set to &#x60;true&#x60; the result will include the corresponding number of incidents for each occurred incident type. If it is set to &#x60;false&#x60;, the incidents will not be included in the result. Cannot be used in combination with &#x60;incidentsForType&#x60;. (optional)</param>
        /// <param name="incidentsForType">If this property has been set with any incident type (i.e., a string value) the result will only include the number of incidents for the assigned incident type. Cannot be used in combination with &#x60;incidents&#x60;. See the [User Guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)</param>
        /// <param name="rootIncidents">Valid values for this property are &#x60;true&#x60; or &#x60;false&#x60;. If this property has been set to &#x60;true&#x60; the result will include the corresponding number of root incidents for each occurred incident type. If it is set to &#x60;false&#x60;, the incidents will not be included in the result. Cannot be used in combination with &#x60;incidentsForType&#x60; or &#x60;incidents&#x60;. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ProcessDefinitionStatisticsResultDto&gt;)</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<List<ProcessDefinitionStatisticsResultDto>>> GetProcessDefinitionStatisticsWithHttpInfoAsync(bool? failedJobs = default(bool?), bool? incidents = default(bool?), string incidentsForType = default(string), bool? rootIncidents = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (failedJobs != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "failedJobs", failedJobs));
            }
            if (incidents != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "incidents", incidents));
            }
            if (incidentsForType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "incidentsForType", incidentsForType));
            }
            if (rootIncidents != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "rootIncidents", rootIncidents));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<ProcessDefinitionStatisticsResultDto>>("/process-definition/statistics", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProcessDefinitionStatistics", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get List Queries for process definitions that fulfill given parameters. Parameters may be the properties of  process definitions, such as the name, key or version. The size of the result set can be retrieved by using the [Get Definition Count](https://docs.camunda.org/manual/7.17/reference/rest/process-definition/get-query-count/) method.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDefinitionId">Filter by process definition id. (optional)</param>
        /// <param name="processDefinitionIdIn">Filter by a comma-separated list of process definition ids. (optional)</param>
        /// <param name="name">Filter by process definition name. (optional)</param>
        /// <param name="nameLike">Filter by process definition names that the parameter is a substring of. (optional)</param>
        /// <param name="deploymentId">Filter by the deployment the id belongs to. (optional)</param>
        /// <param name="deployedAfter">Filter by the deploy time of the deployment the process definition belongs to. Only selects process definitions that have been deployed after (exclusive) a specific time. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.546+0200&#x60;. (optional)</param>
        /// <param name="deployedAt">Filter by the deploy time of the deployment the process definition belongs to. Only selects process definitions that have been deployed at a specific time (exact match). By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.546+0200&#x60;. (optional)</param>
        /// <param name="key">Filter by process definition key, i.e., the id in the BPMN 2.0 XML. Exact match. (optional)</param>
        /// <param name="keysIn">Filter by a comma-separated list of process definition keys. (optional)</param>
        /// <param name="keyLike">Filter by process definition keys that the parameter is a substring of. (optional)</param>
        /// <param name="category">Filter by process definition category. Exact match. (optional)</param>
        /// <param name="categoryLike">Filter by process definition categories that the parameter is a substring of. (optional)</param>
        /// <param name="version">Filter by process definition version. (optional)</param>
        /// <param name="latestVersion">Only include those process definitions that are latest versions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="resourceName">Filter by the name of the process definition resource. Exact match. (optional)</param>
        /// <param name="resourceNameLike">Filter by names of those process definition resources that the parameter is a substring of. (optional)</param>
        /// <param name="startableBy">Filter by a user name who is allowed to start the process. (optional)</param>
        /// <param name="active">Only include active process definitions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="suspended">Only include suspended process definitions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="incidentId">Filter by the incident id. (optional)</param>
        /// <param name="incidentType">Filter by the incident type. See the [User Guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)</param>
        /// <param name="incidentMessage">Filter by the incident message. Exact match. (optional)</param>
        /// <param name="incidentMessageLike">Filter by the incident message that the parameter is a substring of. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. A process definition must have one of the given tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include process definitions which belong to no tenant. Value may only be true, as false is the default behavior. (optional)</param>
        /// <param name="includeProcessDefinitionsWithoutTenantId">Include process definitions which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="versionTag">Filter by the version tag. (optional)</param>
        /// <param name="versionTagLike">Filter by the version tag that the parameter is a substring of. (optional)</param>
        /// <param name="withoutVersionTag">Only include process definitions without a &#x60;versionTag&#x60;. (optional)</param>
        /// <param name="startableInTasklist">Filter by process definitions which are startable in Tasklist.. (optional)</param>
        /// <param name="notStartableInTasklist">Filter by process definitions which are not startable in Tasklist. (optional)</param>
        /// <param name="startablePermissionCheck">Filter by process definitions which the user is allowed to start in Tasklist. If the user doesn&#39;t have these permissions the result will be empty list. The permissions are: * &#x60;CREATE&#x60; permission for all Process instances * &#x60;CREATE_INSTANCE&#x60; and &#x60;READ&#x60; permission on Process definition level (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <returns>List&lt;ProcessDefinitionDto&gt;</returns>
        public List<ProcessDefinitionDto> GetProcessDefinitions(string processDefinitionId = default(string), string processDefinitionIdIn = default(string), string name = default(string), string nameLike = default(string), string deploymentId = default(string), DateTime? deployedAfter = default(DateTime?), DateTime? deployedAt = default(DateTime?), string key = default(string), string keysIn = default(string), string keyLike = default(string), string category = default(string), string categoryLike = default(string), int? version = default(int?), bool? latestVersion = default(bool?), string resourceName = default(string), string resourceNameLike = default(string), string startableBy = default(string), bool? active = default(bool?), bool? suspended = default(bool?), string incidentId = default(string), string incidentType = default(string), string incidentMessage = default(string), string incidentMessageLike = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), bool? includeProcessDefinitionsWithoutTenantId = default(bool?), string versionTag = default(string), string versionTagLike = default(string), bool? withoutVersionTag = default(bool?), bool? startableInTasklist = default(bool?), bool? notStartableInTasklist = default(bool?), bool? startablePermissionCheck = default(bool?), string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<List<ProcessDefinitionDto>> localVarResponse = GetProcessDefinitionsWithHttpInfo(processDefinitionId, processDefinitionIdIn, name, nameLike, deploymentId, deployedAfter, deployedAt, key, keysIn, keyLike, category, categoryLike, version, latestVersion, resourceName, resourceNameLike, startableBy, active, suspended, incidentId, incidentType, incidentMessage, incidentMessageLike, tenantIdIn, withoutTenantId, includeProcessDefinitionsWithoutTenantId, versionTag, versionTagLike, withoutVersionTag, startableInTasklist, notStartableInTasklist, startablePermissionCheck, sortBy, sortOrder, firstResult, maxResults);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get List Queries for process definitions that fulfill given parameters. Parameters may be the properties of  process definitions, such as the name, key or version. The size of the result set can be retrieved by using the [Get Definition Count](https://docs.camunda.org/manual/7.17/reference/rest/process-definition/get-query-count/) method.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDefinitionId">Filter by process definition id. (optional)</param>
        /// <param name="processDefinitionIdIn">Filter by a comma-separated list of process definition ids. (optional)</param>
        /// <param name="name">Filter by process definition name. (optional)</param>
        /// <param name="nameLike">Filter by process definition names that the parameter is a substring of. (optional)</param>
        /// <param name="deploymentId">Filter by the deployment the id belongs to. (optional)</param>
        /// <param name="deployedAfter">Filter by the deploy time of the deployment the process definition belongs to. Only selects process definitions that have been deployed after (exclusive) a specific time. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.546+0200&#x60;. (optional)</param>
        /// <param name="deployedAt">Filter by the deploy time of the deployment the process definition belongs to. Only selects process definitions that have been deployed at a specific time (exact match). By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.546+0200&#x60;. (optional)</param>
        /// <param name="key">Filter by process definition key, i.e., the id in the BPMN 2.0 XML. Exact match. (optional)</param>
        /// <param name="keysIn">Filter by a comma-separated list of process definition keys. (optional)</param>
        /// <param name="keyLike">Filter by process definition keys that the parameter is a substring of. (optional)</param>
        /// <param name="category">Filter by process definition category. Exact match. (optional)</param>
        /// <param name="categoryLike">Filter by process definition categories that the parameter is a substring of. (optional)</param>
        /// <param name="version">Filter by process definition version. (optional)</param>
        /// <param name="latestVersion">Only include those process definitions that are latest versions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="resourceName">Filter by the name of the process definition resource. Exact match. (optional)</param>
        /// <param name="resourceNameLike">Filter by names of those process definition resources that the parameter is a substring of. (optional)</param>
        /// <param name="startableBy">Filter by a user name who is allowed to start the process. (optional)</param>
        /// <param name="active">Only include active process definitions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="suspended">Only include suspended process definitions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="incidentId">Filter by the incident id. (optional)</param>
        /// <param name="incidentType">Filter by the incident type. See the [User Guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)</param>
        /// <param name="incidentMessage">Filter by the incident message. Exact match. (optional)</param>
        /// <param name="incidentMessageLike">Filter by the incident message that the parameter is a substring of. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. A process definition must have one of the given tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include process definitions which belong to no tenant. Value may only be true, as false is the default behavior. (optional)</param>
        /// <param name="includeProcessDefinitionsWithoutTenantId">Include process definitions which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="versionTag">Filter by the version tag. (optional)</param>
        /// <param name="versionTagLike">Filter by the version tag that the parameter is a substring of. (optional)</param>
        /// <param name="withoutVersionTag">Only include process definitions without a &#x60;versionTag&#x60;. (optional)</param>
        /// <param name="startableInTasklist">Filter by process definitions which are startable in Tasklist.. (optional)</param>
        /// <param name="notStartableInTasklist">Filter by process definitions which are not startable in Tasklist. (optional)</param>
        /// <param name="startablePermissionCheck">Filter by process definitions which the user is allowed to start in Tasklist. If the user doesn&#39;t have these permissions the result will be empty list. The permissions are: * &#x60;CREATE&#x60; permission for all Process instances * &#x60;CREATE_INSTANCE&#x60; and &#x60;READ&#x60; permission on Process definition level (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <returns>ApiResponse of List&lt;ProcessDefinitionDto&gt;</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<List<ProcessDefinitionDto>> GetProcessDefinitionsWithHttpInfo(string processDefinitionId = default(string), string processDefinitionIdIn = default(string), string name = default(string), string nameLike = default(string), string deploymentId = default(string), DateTime? deployedAfter = default(DateTime?), DateTime? deployedAt = default(DateTime?), string key = default(string), string keysIn = default(string), string keyLike = default(string), string category = default(string), string categoryLike = default(string), int? version = default(int?), bool? latestVersion = default(bool?), string resourceName = default(string), string resourceNameLike = default(string), string startableBy = default(string), bool? active = default(bool?), bool? suspended = default(bool?), string incidentId = default(string), string incidentType = default(string), string incidentMessage = default(string), string incidentMessageLike = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), bool? includeProcessDefinitionsWithoutTenantId = default(bool?), string versionTag = default(string), string versionTagLike = default(string), bool? withoutVersionTag = default(bool?), bool? startableInTasklist = default(bool?), bool? notStartableInTasklist = default(bool?), bool? startablePermissionCheck = default(bool?), string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?))
        {
            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (processDefinitionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processDefinitionId", processDefinitionId));
            }
            if (processDefinitionIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processDefinitionIdIn", processDefinitionIdIn));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (nameLike != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "nameLike", nameLike));
            }
            if (deploymentId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "deploymentId", deploymentId));
            }
            if (deployedAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "deployedAfter", deployedAfter));
            }
            if (deployedAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "deployedAt", deployedAt));
            }
            if (key != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "key", key));
            }
            if (keysIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "keysIn", keysIn));
            }
            if (keyLike != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "keyLike", keyLike));
            }
            if (category != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "category", category));
            }
            if (categoryLike != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "categoryLike", categoryLike));
            }
            if (version != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "version", version));
            }
            if (latestVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "latestVersion", latestVersion));
            }
            if (resourceName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "resourceName", resourceName));
            }
            if (resourceNameLike != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "resourceNameLike", resourceNameLike));
            }
            if (startableBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "startableBy", startableBy));
            }
            if (active != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "active", active));
            }
            if (suspended != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "suspended", suspended));
            }
            if (incidentId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "incidentId", incidentId));
            }
            if (incidentType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "incidentType", incidentType));
            }
            if (incidentMessage != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "incidentMessage", incidentMessage));
            }
            if (incidentMessageLike != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "incidentMessageLike", incidentMessageLike));
            }
            if (tenantIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "tenantIdIn", tenantIdIn));
            }
            if (withoutTenantId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "withoutTenantId", withoutTenantId));
            }
            if (includeProcessDefinitionsWithoutTenantId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "includeProcessDefinitionsWithoutTenantId", includeProcessDefinitionsWithoutTenantId));
            }
            if (versionTag != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "versionTag", versionTag));
            }
            if (versionTagLike != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "versionTagLike", versionTagLike));
            }
            if (withoutVersionTag != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "withoutVersionTag", withoutVersionTag));
            }
            if (startableInTasklist != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "startableInTasklist", startableInTasklist));
            }
            if (notStartableInTasklist != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "notStartableInTasklist", notStartableInTasklist));
            }
            if (startablePermissionCheck != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "startablePermissionCheck", startablePermissionCheck));
            }
            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "sortBy", sortBy));
            }
            if (sortOrder != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "sortOrder", sortOrder));
            }
            if (firstResult != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "firstResult", firstResult));
            }
            if (maxResults != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "maxResults", maxResults));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<ProcessDefinitionDto>>("/process-definition", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProcessDefinitions", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get List Queries for process definitions that fulfill given parameters. Parameters may be the properties of  process definitions, such as the name, key or version. The size of the result set can be retrieved by using the [Get Definition Count](https://docs.camunda.org/manual/7.17/reference/rest/process-definition/get-query-count/) method.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDefinitionId">Filter by process definition id. (optional)</param>
        /// <param name="processDefinitionIdIn">Filter by a comma-separated list of process definition ids. (optional)</param>
        /// <param name="name">Filter by process definition name. (optional)</param>
        /// <param name="nameLike">Filter by process definition names that the parameter is a substring of. (optional)</param>
        /// <param name="deploymentId">Filter by the deployment the id belongs to. (optional)</param>
        /// <param name="deployedAfter">Filter by the deploy time of the deployment the process definition belongs to. Only selects process definitions that have been deployed after (exclusive) a specific time. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.546+0200&#x60;. (optional)</param>
        /// <param name="deployedAt">Filter by the deploy time of the deployment the process definition belongs to. Only selects process definitions that have been deployed at a specific time (exact match). By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.546+0200&#x60;. (optional)</param>
        /// <param name="key">Filter by process definition key, i.e., the id in the BPMN 2.0 XML. Exact match. (optional)</param>
        /// <param name="keysIn">Filter by a comma-separated list of process definition keys. (optional)</param>
        /// <param name="keyLike">Filter by process definition keys that the parameter is a substring of. (optional)</param>
        /// <param name="category">Filter by process definition category. Exact match. (optional)</param>
        /// <param name="categoryLike">Filter by process definition categories that the parameter is a substring of. (optional)</param>
        /// <param name="version">Filter by process definition version. (optional)</param>
        /// <param name="latestVersion">Only include those process definitions that are latest versions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="resourceName">Filter by the name of the process definition resource. Exact match. (optional)</param>
        /// <param name="resourceNameLike">Filter by names of those process definition resources that the parameter is a substring of. (optional)</param>
        /// <param name="startableBy">Filter by a user name who is allowed to start the process. (optional)</param>
        /// <param name="active">Only include active process definitions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="suspended">Only include suspended process definitions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="incidentId">Filter by the incident id. (optional)</param>
        /// <param name="incidentType">Filter by the incident type. See the [User Guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)</param>
        /// <param name="incidentMessage">Filter by the incident message. Exact match. (optional)</param>
        /// <param name="incidentMessageLike">Filter by the incident message that the parameter is a substring of. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. A process definition must have one of the given tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include process definitions which belong to no tenant. Value may only be true, as false is the default behavior. (optional)</param>
        /// <param name="includeProcessDefinitionsWithoutTenantId">Include process definitions which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="versionTag">Filter by the version tag. (optional)</param>
        /// <param name="versionTagLike">Filter by the version tag that the parameter is a substring of. (optional)</param>
        /// <param name="withoutVersionTag">Only include process definitions without a &#x60;versionTag&#x60;. (optional)</param>
        /// <param name="startableInTasklist">Filter by process definitions which are startable in Tasklist.. (optional)</param>
        /// <param name="notStartableInTasklist">Filter by process definitions which are not startable in Tasklist. (optional)</param>
        /// <param name="startablePermissionCheck">Filter by process definitions which the user is allowed to start in Tasklist. If the user doesn&#39;t have these permissions the result will be empty list. The permissions are: * &#x60;CREATE&#x60; permission for all Process instances * &#x60;CREATE_INSTANCE&#x60; and &#x60;READ&#x60; permission on Process definition level (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ProcessDefinitionDto&gt;</returns>
        public async System.Threading.Tasks.Task<List<ProcessDefinitionDto>> GetProcessDefinitionsAsync(string processDefinitionId = default(string), string processDefinitionIdIn = default(string), string name = default(string), string nameLike = default(string), string deploymentId = default(string), DateTime? deployedAfter = default(DateTime?), DateTime? deployedAt = default(DateTime?), string key = default(string), string keysIn = default(string), string keyLike = default(string), string category = default(string), string categoryLike = default(string), int? version = default(int?), bool? latestVersion = default(bool?), string resourceName = default(string), string resourceNameLike = default(string), string startableBy = default(string), bool? active = default(bool?), bool? suspended = default(bool?), string incidentId = default(string), string incidentType = default(string), string incidentMessage = default(string), string incidentMessageLike = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), bool? includeProcessDefinitionsWithoutTenantId = default(bool?), string versionTag = default(string), string versionTagLike = default(string), bool? withoutVersionTag = default(bool?), bool? startableInTasklist = default(bool?), bool? notStartableInTasklist = default(bool?), bool? startablePermissionCheck = default(bool?), string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<List<ProcessDefinitionDto>> localVarResponse = await GetProcessDefinitionsWithHttpInfoAsync(processDefinitionId, processDefinitionIdIn, name, nameLike, deploymentId, deployedAfter, deployedAt, key, keysIn, keyLike, category, categoryLike, version, latestVersion, resourceName, resourceNameLike, startableBy, active, suspended, incidentId, incidentType, incidentMessage, incidentMessageLike, tenantIdIn, withoutTenantId, includeProcessDefinitionsWithoutTenantId, versionTag, versionTagLike, withoutVersionTag, startableInTasklist, notStartableInTasklist, startablePermissionCheck, sortBy, sortOrder, firstResult, maxResults, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get List Queries for process definitions that fulfill given parameters. Parameters may be the properties of  process definitions, such as the name, key or version. The size of the result set can be retrieved by using the [Get Definition Count](https://docs.camunda.org/manual/7.17/reference/rest/process-definition/get-query-count/) method.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDefinitionId">Filter by process definition id. (optional)</param>
        /// <param name="processDefinitionIdIn">Filter by a comma-separated list of process definition ids. (optional)</param>
        /// <param name="name">Filter by process definition name. (optional)</param>
        /// <param name="nameLike">Filter by process definition names that the parameter is a substring of. (optional)</param>
        /// <param name="deploymentId">Filter by the deployment the id belongs to. (optional)</param>
        /// <param name="deployedAfter">Filter by the deploy time of the deployment the process definition belongs to. Only selects process definitions that have been deployed after (exclusive) a specific time. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.546+0200&#x60;. (optional)</param>
        /// <param name="deployedAt">Filter by the deploy time of the deployment the process definition belongs to. Only selects process definitions that have been deployed at a specific time (exact match). By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.546+0200&#x60;. (optional)</param>
        /// <param name="key">Filter by process definition key, i.e., the id in the BPMN 2.0 XML. Exact match. (optional)</param>
        /// <param name="keysIn">Filter by a comma-separated list of process definition keys. (optional)</param>
        /// <param name="keyLike">Filter by process definition keys that the parameter is a substring of. (optional)</param>
        /// <param name="category">Filter by process definition category. Exact match. (optional)</param>
        /// <param name="categoryLike">Filter by process definition categories that the parameter is a substring of. (optional)</param>
        /// <param name="version">Filter by process definition version. (optional)</param>
        /// <param name="latestVersion">Only include those process definitions that are latest versions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="resourceName">Filter by the name of the process definition resource. Exact match. (optional)</param>
        /// <param name="resourceNameLike">Filter by names of those process definition resources that the parameter is a substring of. (optional)</param>
        /// <param name="startableBy">Filter by a user name who is allowed to start the process. (optional)</param>
        /// <param name="active">Only include active process definitions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="suspended">Only include suspended process definitions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="incidentId">Filter by the incident id. (optional)</param>
        /// <param name="incidentType">Filter by the incident type. See the [User Guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)</param>
        /// <param name="incidentMessage">Filter by the incident message. Exact match. (optional)</param>
        /// <param name="incidentMessageLike">Filter by the incident message that the parameter is a substring of. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. A process definition must have one of the given tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include process definitions which belong to no tenant. Value may only be true, as false is the default behavior. (optional)</param>
        /// <param name="includeProcessDefinitionsWithoutTenantId">Include process definitions which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="versionTag">Filter by the version tag. (optional)</param>
        /// <param name="versionTagLike">Filter by the version tag that the parameter is a substring of. (optional)</param>
        /// <param name="withoutVersionTag">Only include process definitions without a &#x60;versionTag&#x60;. (optional)</param>
        /// <param name="startableInTasklist">Filter by process definitions which are startable in Tasklist.. (optional)</param>
        /// <param name="notStartableInTasklist">Filter by process definitions which are not startable in Tasklist. (optional)</param>
        /// <param name="startablePermissionCheck">Filter by process definitions which the user is allowed to start in Tasklist. If the user doesn&#39;t have these permissions the result will be empty list. The permissions are: * &#x60;CREATE&#x60; permission for all Process instances * &#x60;CREATE_INSTANCE&#x60; and &#x60;READ&#x60; permission on Process definition level (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ProcessDefinitionDto&gt;)</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<List<ProcessDefinitionDto>>> GetProcessDefinitionsWithHttpInfoAsync(string processDefinitionId = default(string), string processDefinitionIdIn = default(string), string name = default(string), string nameLike = default(string), string deploymentId = default(string), DateTime? deployedAfter = default(DateTime?), DateTime? deployedAt = default(DateTime?), string key = default(string), string keysIn = default(string), string keyLike = default(string), string category = default(string), string categoryLike = default(string), int? version = default(int?), bool? latestVersion = default(bool?), string resourceName = default(string), string resourceNameLike = default(string), string startableBy = default(string), bool? active = default(bool?), bool? suspended = default(bool?), string incidentId = default(string), string incidentType = default(string), string incidentMessage = default(string), string incidentMessageLike = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), bool? includeProcessDefinitionsWithoutTenantId = default(bool?), string versionTag = default(string), string versionTagLike = default(string), bool? withoutVersionTag = default(bool?), bool? startableInTasklist = default(bool?), bool? notStartableInTasklist = default(bool?), bool? startablePermissionCheck = default(bool?), string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (processDefinitionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processDefinitionId", processDefinitionId));
            }
            if (processDefinitionIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processDefinitionIdIn", processDefinitionIdIn));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (nameLike != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "nameLike", nameLike));
            }
            if (deploymentId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "deploymentId", deploymentId));
            }
            if (deployedAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "deployedAfter", deployedAfter));
            }
            if (deployedAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "deployedAt", deployedAt));
            }
            if (key != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "key", key));
            }
            if (keysIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "keysIn", keysIn));
            }
            if (keyLike != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "keyLike", keyLike));
            }
            if (category != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "category", category));
            }
            if (categoryLike != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "categoryLike", categoryLike));
            }
            if (version != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "version", version));
            }
            if (latestVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "latestVersion", latestVersion));
            }
            if (resourceName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "resourceName", resourceName));
            }
            if (resourceNameLike != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "resourceNameLike", resourceNameLike));
            }
            if (startableBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "startableBy", startableBy));
            }
            if (active != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "active", active));
            }
            if (suspended != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "suspended", suspended));
            }
            if (incidentId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "incidentId", incidentId));
            }
            if (incidentType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "incidentType", incidentType));
            }
            if (incidentMessage != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "incidentMessage", incidentMessage));
            }
            if (incidentMessageLike != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "incidentMessageLike", incidentMessageLike));
            }
            if (tenantIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "tenantIdIn", tenantIdIn));
            }
            if (withoutTenantId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "withoutTenantId", withoutTenantId));
            }
            if (includeProcessDefinitionsWithoutTenantId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "includeProcessDefinitionsWithoutTenantId", includeProcessDefinitionsWithoutTenantId));
            }
            if (versionTag != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "versionTag", versionTag));
            }
            if (versionTagLike != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "versionTagLike", versionTagLike));
            }
            if (withoutVersionTag != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "withoutVersionTag", withoutVersionTag));
            }
            if (startableInTasklist != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "startableInTasklist", startableInTasklist));
            }
            if (notStartableInTasklist != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "notStartableInTasklist", notStartableInTasklist));
            }
            if (startablePermissionCheck != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "startablePermissionCheck", startablePermissionCheck));
            }
            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "sortBy", sortBy));
            }
            if (sortOrder != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "sortOrder", sortOrder));
            }
            if (firstResult != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "firstResult", firstResult));
            }
            if (maxResults != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "maxResults", maxResults));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<ProcessDefinitionDto>>("/process-definition", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProcessDefinitions", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get List Count Requests the number of process definitions that fulfill the query criteria. Takes the same filtering parameters as the [Get Definitions](https://docs.camunda.org/manual/7.17/reference/rest/process-definition/get-query/) method.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDefinitionId">Filter by process definition id. (optional)</param>
        /// <param name="processDefinitionIdIn">Filter by a comma-separated list of process definition ids. (optional)</param>
        /// <param name="name">Filter by process definition name. (optional)</param>
        /// <param name="nameLike">Filter by process definition names that the parameter is a substring of. (optional)</param>
        /// <param name="deploymentId">Filter by the deployment the id belongs to. (optional)</param>
        /// <param name="deployedAfter">Filter by the deploy time of the deployment the process definition belongs to. Only selects process definitions that have been deployed after (exclusive) a specific time. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.546+0200&#x60;. (optional)</param>
        /// <param name="deployedAt">Filter by the deploy time of the deployment the process definition belongs to. Only selects process definitions that have been deployed at a specific time (exact match). By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.546+0200&#x60;. (optional)</param>
        /// <param name="key">Filter by process definition key, i.e., the id in the BPMN 2.0 XML. Exact match. (optional)</param>
        /// <param name="keysIn">Filter by a comma-separated list of process definition keys. (optional)</param>
        /// <param name="keyLike">Filter by process definition keys that the parameter is a substring of. (optional)</param>
        /// <param name="category">Filter by process definition category. Exact match. (optional)</param>
        /// <param name="categoryLike">Filter by process definition categories that the parameter is a substring of. (optional)</param>
        /// <param name="version">Filter by process definition version. (optional)</param>
        /// <param name="latestVersion">Only include those process definitions that are latest versions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="resourceName">Filter by the name of the process definition resource. Exact match. (optional)</param>
        /// <param name="resourceNameLike">Filter by names of those process definition resources that the parameter is a substring of. (optional)</param>
        /// <param name="startableBy">Filter by a user name who is allowed to start the process. (optional)</param>
        /// <param name="active">Only include active process definitions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="suspended">Only include suspended process definitions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="incidentId">Filter by the incident id. (optional)</param>
        /// <param name="incidentType">Filter by the incident type. See the [User Guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)</param>
        /// <param name="incidentMessage">Filter by the incident message. Exact match. (optional)</param>
        /// <param name="incidentMessageLike">Filter by the incident message that the parameter is a substring of. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. A process definition must have one of the given tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include process definitions which belong to no tenant. Value may only be true, as false is the default behavior. (optional)</param>
        /// <param name="includeProcessDefinitionsWithoutTenantId">Include process definitions which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="versionTag">Filter by the version tag. (optional)</param>
        /// <param name="versionTagLike">Filter by the version tag that the parameter is a substring of. (optional)</param>
        /// <param name="withoutVersionTag">Only include process definitions without a &#x60;versionTag&#x60;. (optional)</param>
        /// <param name="startableInTasklist">Filter by process definitions which are startable in Tasklist.. (optional)</param>
        /// <param name="notStartableInTasklist">Filter by process definitions which are not startable in Tasklist. (optional)</param>
        /// <param name="startablePermissionCheck">Filter by process definitions which the user is allowed to start in Tasklist. If the user doesn&#39;t have these permissions the result will be empty list. The permissions are: * &#x60;CREATE&#x60; permission for all Process instances * &#x60;CREATE_INSTANCE&#x60; and &#x60;READ&#x60; permission on Process definition level (optional)</param>
        /// <returns>CountResultDto</returns>
        public CountResultDto GetProcessDefinitionsCount(string processDefinitionId = default(string), string processDefinitionIdIn = default(string), string name = default(string), string nameLike = default(string), string deploymentId = default(string), DateTime? deployedAfter = default(DateTime?), DateTime? deployedAt = default(DateTime?), string key = default(string), string keysIn = default(string), string keyLike = default(string), string category = default(string), string categoryLike = default(string), int? version = default(int?), bool? latestVersion = default(bool?), string resourceName = default(string), string resourceNameLike = default(string), string startableBy = default(string), bool? active = default(bool?), bool? suspended = default(bool?), string incidentId = default(string), string incidentType = default(string), string incidentMessage = default(string), string incidentMessageLike = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), bool? includeProcessDefinitionsWithoutTenantId = default(bool?), string versionTag = default(string), string versionTagLike = default(string), bool? withoutVersionTag = default(bool?), bool? startableInTasklist = default(bool?), bool? notStartableInTasklist = default(bool?), bool? startablePermissionCheck = default(bool?))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<CountResultDto> localVarResponse = GetProcessDefinitionsCountWithHttpInfo(processDefinitionId, processDefinitionIdIn, name, nameLike, deploymentId, deployedAfter, deployedAt, key, keysIn, keyLike, category, categoryLike, version, latestVersion, resourceName, resourceNameLike, startableBy, active, suspended, incidentId, incidentType, incidentMessage, incidentMessageLike, tenantIdIn, withoutTenantId, includeProcessDefinitionsWithoutTenantId, versionTag, versionTagLike, withoutVersionTag, startableInTasklist, notStartableInTasklist, startablePermissionCheck);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get List Count Requests the number of process definitions that fulfill the query criteria. Takes the same filtering parameters as the [Get Definitions](https://docs.camunda.org/manual/7.17/reference/rest/process-definition/get-query/) method.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDefinitionId">Filter by process definition id. (optional)</param>
        /// <param name="processDefinitionIdIn">Filter by a comma-separated list of process definition ids. (optional)</param>
        /// <param name="name">Filter by process definition name. (optional)</param>
        /// <param name="nameLike">Filter by process definition names that the parameter is a substring of. (optional)</param>
        /// <param name="deploymentId">Filter by the deployment the id belongs to. (optional)</param>
        /// <param name="deployedAfter">Filter by the deploy time of the deployment the process definition belongs to. Only selects process definitions that have been deployed after (exclusive) a specific time. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.546+0200&#x60;. (optional)</param>
        /// <param name="deployedAt">Filter by the deploy time of the deployment the process definition belongs to. Only selects process definitions that have been deployed at a specific time (exact match). By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.546+0200&#x60;. (optional)</param>
        /// <param name="key">Filter by process definition key, i.e., the id in the BPMN 2.0 XML. Exact match. (optional)</param>
        /// <param name="keysIn">Filter by a comma-separated list of process definition keys. (optional)</param>
        /// <param name="keyLike">Filter by process definition keys that the parameter is a substring of. (optional)</param>
        /// <param name="category">Filter by process definition category. Exact match. (optional)</param>
        /// <param name="categoryLike">Filter by process definition categories that the parameter is a substring of. (optional)</param>
        /// <param name="version">Filter by process definition version. (optional)</param>
        /// <param name="latestVersion">Only include those process definitions that are latest versions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="resourceName">Filter by the name of the process definition resource. Exact match. (optional)</param>
        /// <param name="resourceNameLike">Filter by names of those process definition resources that the parameter is a substring of. (optional)</param>
        /// <param name="startableBy">Filter by a user name who is allowed to start the process. (optional)</param>
        /// <param name="active">Only include active process definitions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="suspended">Only include suspended process definitions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="incidentId">Filter by the incident id. (optional)</param>
        /// <param name="incidentType">Filter by the incident type. See the [User Guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)</param>
        /// <param name="incidentMessage">Filter by the incident message. Exact match. (optional)</param>
        /// <param name="incidentMessageLike">Filter by the incident message that the parameter is a substring of. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. A process definition must have one of the given tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include process definitions which belong to no tenant. Value may only be true, as false is the default behavior. (optional)</param>
        /// <param name="includeProcessDefinitionsWithoutTenantId">Include process definitions which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="versionTag">Filter by the version tag. (optional)</param>
        /// <param name="versionTagLike">Filter by the version tag that the parameter is a substring of. (optional)</param>
        /// <param name="withoutVersionTag">Only include process definitions without a &#x60;versionTag&#x60;. (optional)</param>
        /// <param name="startableInTasklist">Filter by process definitions which are startable in Tasklist.. (optional)</param>
        /// <param name="notStartableInTasklist">Filter by process definitions which are not startable in Tasklist. (optional)</param>
        /// <param name="startablePermissionCheck">Filter by process definitions which the user is allowed to start in Tasklist. If the user doesn&#39;t have these permissions the result will be empty list. The permissions are: * &#x60;CREATE&#x60; permission for all Process instances * &#x60;CREATE_INSTANCE&#x60; and &#x60;READ&#x60; permission on Process definition level (optional)</param>
        /// <returns>ApiResponse of CountResultDto</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<CountResultDto> GetProcessDefinitionsCountWithHttpInfo(string processDefinitionId = default(string), string processDefinitionIdIn = default(string), string name = default(string), string nameLike = default(string), string deploymentId = default(string), DateTime? deployedAfter = default(DateTime?), DateTime? deployedAt = default(DateTime?), string key = default(string), string keysIn = default(string), string keyLike = default(string), string category = default(string), string categoryLike = default(string), int? version = default(int?), bool? latestVersion = default(bool?), string resourceName = default(string), string resourceNameLike = default(string), string startableBy = default(string), bool? active = default(bool?), bool? suspended = default(bool?), string incidentId = default(string), string incidentType = default(string), string incidentMessage = default(string), string incidentMessageLike = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), bool? includeProcessDefinitionsWithoutTenantId = default(bool?), string versionTag = default(string), string versionTagLike = default(string), bool? withoutVersionTag = default(bool?), bool? startableInTasklist = default(bool?), bool? notStartableInTasklist = default(bool?), bool? startablePermissionCheck = default(bool?))
        {
            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (processDefinitionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processDefinitionId", processDefinitionId));
            }
            if (processDefinitionIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processDefinitionIdIn", processDefinitionIdIn));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (nameLike != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "nameLike", nameLike));
            }
            if (deploymentId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "deploymentId", deploymentId));
            }
            if (deployedAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "deployedAfter", deployedAfter));
            }
            if (deployedAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "deployedAt", deployedAt));
            }
            if (key != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "key", key));
            }
            if (keysIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "keysIn", keysIn));
            }
            if (keyLike != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "keyLike", keyLike));
            }
            if (category != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "category", category));
            }
            if (categoryLike != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "categoryLike", categoryLike));
            }
            if (version != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "version", version));
            }
            if (latestVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "latestVersion", latestVersion));
            }
            if (resourceName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "resourceName", resourceName));
            }
            if (resourceNameLike != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "resourceNameLike", resourceNameLike));
            }
            if (startableBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "startableBy", startableBy));
            }
            if (active != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "active", active));
            }
            if (suspended != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "suspended", suspended));
            }
            if (incidentId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "incidentId", incidentId));
            }
            if (incidentType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "incidentType", incidentType));
            }
            if (incidentMessage != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "incidentMessage", incidentMessage));
            }
            if (incidentMessageLike != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "incidentMessageLike", incidentMessageLike));
            }
            if (tenantIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "tenantIdIn", tenantIdIn));
            }
            if (withoutTenantId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "withoutTenantId", withoutTenantId));
            }
            if (includeProcessDefinitionsWithoutTenantId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "includeProcessDefinitionsWithoutTenantId", includeProcessDefinitionsWithoutTenantId));
            }
            if (versionTag != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "versionTag", versionTag));
            }
            if (versionTagLike != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "versionTagLike", versionTagLike));
            }
            if (withoutVersionTag != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "withoutVersionTag", withoutVersionTag));
            }
            if (startableInTasklist != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "startableInTasklist", startableInTasklist));
            }
            if (notStartableInTasklist != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "notStartableInTasklist", notStartableInTasklist));
            }
            if (startablePermissionCheck != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "startablePermissionCheck", startablePermissionCheck));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<CountResultDto>("/process-definition/count", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProcessDefinitionsCount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get List Count Requests the number of process definitions that fulfill the query criteria. Takes the same filtering parameters as the [Get Definitions](https://docs.camunda.org/manual/7.17/reference/rest/process-definition/get-query/) method.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDefinitionId">Filter by process definition id. (optional)</param>
        /// <param name="processDefinitionIdIn">Filter by a comma-separated list of process definition ids. (optional)</param>
        /// <param name="name">Filter by process definition name. (optional)</param>
        /// <param name="nameLike">Filter by process definition names that the parameter is a substring of. (optional)</param>
        /// <param name="deploymentId">Filter by the deployment the id belongs to. (optional)</param>
        /// <param name="deployedAfter">Filter by the deploy time of the deployment the process definition belongs to. Only selects process definitions that have been deployed after (exclusive) a specific time. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.546+0200&#x60;. (optional)</param>
        /// <param name="deployedAt">Filter by the deploy time of the deployment the process definition belongs to. Only selects process definitions that have been deployed at a specific time (exact match). By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.546+0200&#x60;. (optional)</param>
        /// <param name="key">Filter by process definition key, i.e., the id in the BPMN 2.0 XML. Exact match. (optional)</param>
        /// <param name="keysIn">Filter by a comma-separated list of process definition keys. (optional)</param>
        /// <param name="keyLike">Filter by process definition keys that the parameter is a substring of. (optional)</param>
        /// <param name="category">Filter by process definition category. Exact match. (optional)</param>
        /// <param name="categoryLike">Filter by process definition categories that the parameter is a substring of. (optional)</param>
        /// <param name="version">Filter by process definition version. (optional)</param>
        /// <param name="latestVersion">Only include those process definitions that are latest versions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="resourceName">Filter by the name of the process definition resource. Exact match. (optional)</param>
        /// <param name="resourceNameLike">Filter by names of those process definition resources that the parameter is a substring of. (optional)</param>
        /// <param name="startableBy">Filter by a user name who is allowed to start the process. (optional)</param>
        /// <param name="active">Only include active process definitions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="suspended">Only include suspended process definitions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="incidentId">Filter by the incident id. (optional)</param>
        /// <param name="incidentType">Filter by the incident type. See the [User Guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)</param>
        /// <param name="incidentMessage">Filter by the incident message. Exact match. (optional)</param>
        /// <param name="incidentMessageLike">Filter by the incident message that the parameter is a substring of. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. A process definition must have one of the given tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include process definitions which belong to no tenant. Value may only be true, as false is the default behavior. (optional)</param>
        /// <param name="includeProcessDefinitionsWithoutTenantId">Include process definitions which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="versionTag">Filter by the version tag. (optional)</param>
        /// <param name="versionTagLike">Filter by the version tag that the parameter is a substring of. (optional)</param>
        /// <param name="withoutVersionTag">Only include process definitions without a &#x60;versionTag&#x60;. (optional)</param>
        /// <param name="startableInTasklist">Filter by process definitions which are startable in Tasklist.. (optional)</param>
        /// <param name="notStartableInTasklist">Filter by process definitions which are not startable in Tasklist. (optional)</param>
        /// <param name="startablePermissionCheck">Filter by process definitions which the user is allowed to start in Tasklist. If the user doesn&#39;t have these permissions the result will be empty list. The permissions are: * &#x60;CREATE&#x60; permission for all Process instances * &#x60;CREATE_INSTANCE&#x60; and &#x60;READ&#x60; permission on Process definition level (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CountResultDto</returns>
        public async System.Threading.Tasks.Task<CountResultDto> GetProcessDefinitionsCountAsync(string processDefinitionId = default(string), string processDefinitionIdIn = default(string), string name = default(string), string nameLike = default(string), string deploymentId = default(string), DateTime? deployedAfter = default(DateTime?), DateTime? deployedAt = default(DateTime?), string key = default(string), string keysIn = default(string), string keyLike = default(string), string category = default(string), string categoryLike = default(string), int? version = default(int?), bool? latestVersion = default(bool?), string resourceName = default(string), string resourceNameLike = default(string), string startableBy = default(string), bool? active = default(bool?), bool? suspended = default(bool?), string incidentId = default(string), string incidentType = default(string), string incidentMessage = default(string), string incidentMessageLike = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), bool? includeProcessDefinitionsWithoutTenantId = default(bool?), string versionTag = default(string), string versionTagLike = default(string), bool? withoutVersionTag = default(bool?), bool? startableInTasklist = default(bool?), bool? notStartableInTasklist = default(bool?), bool? startablePermissionCheck = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<CountResultDto> localVarResponse = await GetProcessDefinitionsCountWithHttpInfoAsync(processDefinitionId, processDefinitionIdIn, name, nameLike, deploymentId, deployedAfter, deployedAt, key, keysIn, keyLike, category, categoryLike, version, latestVersion, resourceName, resourceNameLike, startableBy, active, suspended, incidentId, incidentType, incidentMessage, incidentMessageLike, tenantIdIn, withoutTenantId, includeProcessDefinitionsWithoutTenantId, versionTag, versionTagLike, withoutVersionTag, startableInTasklist, notStartableInTasklist, startablePermissionCheck, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get List Count Requests the number of process definitions that fulfill the query criteria. Takes the same filtering parameters as the [Get Definitions](https://docs.camunda.org/manual/7.17/reference/rest/process-definition/get-query/) method.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDefinitionId">Filter by process definition id. (optional)</param>
        /// <param name="processDefinitionIdIn">Filter by a comma-separated list of process definition ids. (optional)</param>
        /// <param name="name">Filter by process definition name. (optional)</param>
        /// <param name="nameLike">Filter by process definition names that the parameter is a substring of. (optional)</param>
        /// <param name="deploymentId">Filter by the deployment the id belongs to. (optional)</param>
        /// <param name="deployedAfter">Filter by the deploy time of the deployment the process definition belongs to. Only selects process definitions that have been deployed after (exclusive) a specific time. By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.546+0200&#x60;. (optional)</param>
        /// <param name="deployedAt">Filter by the deploy time of the deployment the process definition belongs to. Only selects process definitions that have been deployed at a specific time (exact match). By [default](https://docs.camunda.org/manual/7.17/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.546+0200&#x60;. (optional)</param>
        /// <param name="key">Filter by process definition key, i.e., the id in the BPMN 2.0 XML. Exact match. (optional)</param>
        /// <param name="keysIn">Filter by a comma-separated list of process definition keys. (optional)</param>
        /// <param name="keyLike">Filter by process definition keys that the parameter is a substring of. (optional)</param>
        /// <param name="category">Filter by process definition category. Exact match. (optional)</param>
        /// <param name="categoryLike">Filter by process definition categories that the parameter is a substring of. (optional)</param>
        /// <param name="version">Filter by process definition version. (optional)</param>
        /// <param name="latestVersion">Only include those process definitions that are latest versions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="resourceName">Filter by the name of the process definition resource. Exact match. (optional)</param>
        /// <param name="resourceNameLike">Filter by names of those process definition resources that the parameter is a substring of. (optional)</param>
        /// <param name="startableBy">Filter by a user name who is allowed to start the process. (optional)</param>
        /// <param name="active">Only include active process definitions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="suspended">Only include suspended process definitions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="incidentId">Filter by the incident id. (optional)</param>
        /// <param name="incidentType">Filter by the incident type. See the [User Guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)</param>
        /// <param name="incidentMessage">Filter by the incident message. Exact match. (optional)</param>
        /// <param name="incidentMessageLike">Filter by the incident message that the parameter is a substring of. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. A process definition must have one of the given tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include process definitions which belong to no tenant. Value may only be true, as false is the default behavior. (optional)</param>
        /// <param name="includeProcessDefinitionsWithoutTenantId">Include process definitions which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="versionTag">Filter by the version tag. (optional)</param>
        /// <param name="versionTagLike">Filter by the version tag that the parameter is a substring of. (optional)</param>
        /// <param name="withoutVersionTag">Only include process definitions without a &#x60;versionTag&#x60;. (optional)</param>
        /// <param name="startableInTasklist">Filter by process definitions which are startable in Tasklist.. (optional)</param>
        /// <param name="notStartableInTasklist">Filter by process definitions which are not startable in Tasklist. (optional)</param>
        /// <param name="startablePermissionCheck">Filter by process definitions which the user is allowed to start in Tasklist. If the user doesn&#39;t have these permissions the result will be empty list. The permissions are: * &#x60;CREATE&#x60; permission for all Process instances * &#x60;CREATE_INSTANCE&#x60; and &#x60;READ&#x60; permission on Process definition level (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CountResultDto)</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<CountResultDto>> GetProcessDefinitionsCountWithHttpInfoAsync(string processDefinitionId = default(string), string processDefinitionIdIn = default(string), string name = default(string), string nameLike = default(string), string deploymentId = default(string), DateTime? deployedAfter = default(DateTime?), DateTime? deployedAt = default(DateTime?), string key = default(string), string keysIn = default(string), string keyLike = default(string), string category = default(string), string categoryLike = default(string), int? version = default(int?), bool? latestVersion = default(bool?), string resourceName = default(string), string resourceNameLike = default(string), string startableBy = default(string), bool? active = default(bool?), bool? suspended = default(bool?), string incidentId = default(string), string incidentType = default(string), string incidentMessage = default(string), string incidentMessageLike = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), bool? includeProcessDefinitionsWithoutTenantId = default(bool?), string versionTag = default(string), string versionTagLike = default(string), bool? withoutVersionTag = default(bool?), bool? startableInTasklist = default(bool?), bool? notStartableInTasklist = default(bool?), bool? startablePermissionCheck = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (processDefinitionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processDefinitionId", processDefinitionId));
            }
            if (processDefinitionIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processDefinitionIdIn", processDefinitionIdIn));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (nameLike != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "nameLike", nameLike));
            }
            if (deploymentId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "deploymentId", deploymentId));
            }
            if (deployedAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "deployedAfter", deployedAfter));
            }
            if (deployedAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "deployedAt", deployedAt));
            }
            if (key != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "key", key));
            }
            if (keysIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "keysIn", keysIn));
            }
            if (keyLike != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "keyLike", keyLike));
            }
            if (category != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "category", category));
            }
            if (categoryLike != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "categoryLike", categoryLike));
            }
            if (version != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "version", version));
            }
            if (latestVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "latestVersion", latestVersion));
            }
            if (resourceName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "resourceName", resourceName));
            }
            if (resourceNameLike != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "resourceNameLike", resourceNameLike));
            }
            if (startableBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "startableBy", startableBy));
            }
            if (active != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "active", active));
            }
            if (suspended != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "suspended", suspended));
            }
            if (incidentId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "incidentId", incidentId));
            }
            if (incidentType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "incidentType", incidentType));
            }
            if (incidentMessage != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "incidentMessage", incidentMessage));
            }
            if (incidentMessageLike != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "incidentMessageLike", incidentMessageLike));
            }
            if (tenantIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "tenantIdIn", tenantIdIn));
            }
            if (withoutTenantId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "withoutTenantId", withoutTenantId));
            }
            if (includeProcessDefinitionsWithoutTenantId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "includeProcessDefinitionsWithoutTenantId", includeProcessDefinitionsWithoutTenantId));
            }
            if (versionTag != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "versionTag", versionTag));
            }
            if (versionTagLike != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "versionTagLike", versionTagLike));
            }
            if (withoutVersionTag != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "withoutVersionTag", withoutVersionTag));
            }
            if (startableInTasklist != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "startableInTasklist", startableInTasklist));
            }
            if (notStartableInTasklist != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "notStartableInTasklist", notStartableInTasklist));
            }
            if (startablePermissionCheck != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "startablePermissionCheck", startablePermissionCheck));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<CountResultDto>("/process-definition/count", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProcessDefinitionsCount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Rendered Start Form Retrieves the rendered form for a process definition. This method can be used to get the HTML rendering of a [Generated Task Form](https://docs.camunda.org/manual/7.17/user-guide/task-forms/#generated-task-forms).
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition to get the rendered start form for.</param>
        /// <returns>FileParameter</returns>
        public FileParameter GetRenderedStartForm(string id)
        {
            Camunda.OpenApi.Client.Client.ApiResponse<FileParameter> localVarResponse = GetRenderedStartFormWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Rendered Start Form Retrieves the rendered form for a process definition. This method can be used to get the HTML rendering of a [Generated Task Form](https://docs.camunda.org/manual/7.17/user-guide/task-forms/#generated-task-forms).
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition to get the rendered start form for.</param>
        /// <returns>ApiResponse of FileParameter</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<FileParameter> GetRenderedStartFormWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling ProcessDefinitionApi->GetRenderedStartForm");

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/xhtml+xml",
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<FileParameter>("/process-definition/{id}/rendered-form", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRenderedStartForm", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Rendered Start Form Retrieves the rendered form for a process definition. This method can be used to get the HTML rendering of a [Generated Task Form](https://docs.camunda.org/manual/7.17/user-guide/task-forms/#generated-task-forms).
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition to get the rendered start form for.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FileParameter</returns>
        public async System.Threading.Tasks.Task<FileParameter> GetRenderedStartFormAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<FileParameter> localVarResponse = await GetRenderedStartFormWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Rendered Start Form Retrieves the rendered form for a process definition. This method can be used to get the HTML rendering of a [Generated Task Form](https://docs.camunda.org/manual/7.17/user-guide/task-forms/#generated-task-forms).
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition to get the rendered start form for.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FileParameter)</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<FileParameter>> GetRenderedStartFormWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling ProcessDefinitionApi->GetRenderedStartForm");


            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/xhtml+xml",
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<FileParameter>("/process-definition/{id}/rendered-form", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRenderedStartForm", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Rendered Start Form Retrieves  the rendered form for the latest version of the process definition which belongs to no tenant. This method can be used to get the HTML rendering of a [Generated Task Form](https://docs.camunda.org/manual/7.17/user-guide/task-forms/#generated-task-forms).
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <returns>FileParameter</returns>
        public FileParameter GetRenderedStartFormByKey(string key)
        {
            Camunda.OpenApi.Client.Client.ApiResponse<FileParameter> localVarResponse = GetRenderedStartFormByKeyWithHttpInfo(key);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Rendered Start Form Retrieves  the rendered form for the latest version of the process definition which belongs to no tenant. This method can be used to get the HTML rendering of a [Generated Task Form](https://docs.camunda.org/manual/7.17/user-guide/task-forms/#generated-task-forms).
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <returns>ApiResponse of FileParameter</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<FileParameter> GetRenderedStartFormByKeyWithHttpInfo(string key)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'key' when calling ProcessDefinitionApi->GetRenderedStartFormByKey");

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/xhtml+xml",
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(key)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<FileParameter>("/process-definition/key/{key}/rendered-form", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRenderedStartFormByKey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Rendered Start Form Retrieves  the rendered form for the latest version of the process definition which belongs to no tenant. This method can be used to get the HTML rendering of a [Generated Task Form](https://docs.camunda.org/manual/7.17/user-guide/task-forms/#generated-task-forms).
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FileParameter</returns>
        public async System.Threading.Tasks.Task<FileParameter> GetRenderedStartFormByKeyAsync(string key, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<FileParameter> localVarResponse = await GetRenderedStartFormByKeyWithHttpInfoAsync(key, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Rendered Start Form Retrieves  the rendered form for the latest version of the process definition which belongs to no tenant. This method can be used to get the HTML rendering of a [Generated Task Form](https://docs.camunda.org/manual/7.17/user-guide/task-forms/#generated-task-forms).
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FileParameter)</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<FileParameter>> GetRenderedStartFormByKeyWithHttpInfoAsync(string key, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'key' when calling ProcessDefinitionApi->GetRenderedStartFormByKey");


            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/xhtml+xml",
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(key)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<FileParameter>("/process-definition/key/{key}/rendered-form", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRenderedStartFormByKey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Rendered Start Form Retrieves  the rendered form for the latest version of the process definition for a tenant. This method can be used to get the HTML rendering of a [Generated Task Form](https://docs.camunda.org/manual/7.17/user-guide/task-forms/#generated-task-forms).
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <returns>FileParameter</returns>
        public FileParameter GetRenderedStartFormByKeyAndTenantId(string key, string tenantId)
        {
            Camunda.OpenApi.Client.Client.ApiResponse<FileParameter> localVarResponse = GetRenderedStartFormByKeyAndTenantIdWithHttpInfo(key, tenantId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Rendered Start Form Retrieves  the rendered form for the latest version of the process definition for a tenant. This method can be used to get the HTML rendering of a [Generated Task Form](https://docs.camunda.org/manual/7.17/user-guide/task-forms/#generated-task-forms).
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <returns>ApiResponse of FileParameter</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<FileParameter> GetRenderedStartFormByKeyAndTenantIdWithHttpInfo(string key, string tenantId)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'key' when calling ProcessDefinitionApi->GetRenderedStartFormByKeyAndTenantId");

            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'tenantId' when calling ProcessDefinitionApi->GetRenderedStartFormByKeyAndTenantId");

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/xhtml+xml",
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(key)); // path parameter
            localVarRequestOptions.PathParameters.Add("tenant-id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(tenantId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<FileParameter>("/process-definition/key/{key}/tenant-id/{tenant-id}/rendered-form", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRenderedStartFormByKeyAndTenantId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Rendered Start Form Retrieves  the rendered form for the latest version of the process definition for a tenant. This method can be used to get the HTML rendering of a [Generated Task Form](https://docs.camunda.org/manual/7.17/user-guide/task-forms/#generated-task-forms).
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FileParameter</returns>
        public async System.Threading.Tasks.Task<FileParameter> GetRenderedStartFormByKeyAndTenantIdAsync(string key, string tenantId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<FileParameter> localVarResponse = await GetRenderedStartFormByKeyAndTenantIdWithHttpInfoAsync(key, tenantId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Rendered Start Form Retrieves  the rendered form for the latest version of the process definition for a tenant. This method can be used to get the HTML rendering of a [Generated Task Form](https://docs.camunda.org/manual/7.17/user-guide/task-forms/#generated-task-forms).
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FileParameter)</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<FileParameter>> GetRenderedStartFormByKeyAndTenantIdWithHttpInfoAsync(string key, string tenantId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'key' when calling ProcessDefinitionApi->GetRenderedStartFormByKeyAndTenantId");

            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'tenantId' when calling ProcessDefinitionApi->GetRenderedStartFormByKeyAndTenantId");


            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/xhtml+xml",
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(key)); // path parameter
            localVarRequestOptions.PathParameters.Add("tenant-id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(tenantId)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<FileParameter>("/process-definition/key/{key}/tenant-id/{tenant-id}/rendered-form", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRenderedStartFormByKeyAndTenantId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Start Form Key Retrieves the key of the start form for a process definition. The form key corresponds to the &#x60;FormData#formKey&#x60; property in the engine.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition to get the start form key for.</param>
        /// <returns>FormDto</returns>
        public FormDto GetStartForm(string id)
        {
            Camunda.OpenApi.Client.Client.ApiResponse<FormDto> localVarResponse = GetStartFormWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Start Form Key Retrieves the key of the start form for a process definition. The form key corresponds to the &#x60;FormData#formKey&#x60; property in the engine.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition to get the start form key for.</param>
        /// <returns>ApiResponse of FormDto</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<FormDto> GetStartFormWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling ProcessDefinitionApi->GetStartForm");

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<FormDto>("/process-definition/{id}/startForm", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetStartForm", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Start Form Key Retrieves the key of the start form for a process definition. The form key corresponds to the &#x60;FormData#formKey&#x60; property in the engine.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition to get the start form key for.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FormDto</returns>
        public async System.Threading.Tasks.Task<FormDto> GetStartFormAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<FormDto> localVarResponse = await GetStartFormWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Start Form Key Retrieves the key of the start form for a process definition. The form key corresponds to the &#x60;FormData#formKey&#x60; property in the engine.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition to get the start form key for.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FormDto)</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<FormDto>> GetStartFormWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling ProcessDefinitionApi->GetStartForm");


            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<FormDto>("/process-definition/{id}/startForm", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetStartForm", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Start Form Key Retrieves the key of the start form for the latest version of the process definition which belongs to no tenant. The form key corresponds to the &#x60;FormData#formKey&#x60; property in the engine.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) for which the form key is to be retrieved.</param>
        /// <returns>FormDto</returns>
        public FormDto GetStartFormByKey(string key)
        {
            Camunda.OpenApi.Client.Client.ApiResponse<FormDto> localVarResponse = GetStartFormByKeyWithHttpInfo(key);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Start Form Key Retrieves the key of the start form for the latest version of the process definition which belongs to no tenant. The form key corresponds to the &#x60;FormData#formKey&#x60; property in the engine.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) for which the form key is to be retrieved.</param>
        /// <returns>ApiResponse of FormDto</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<FormDto> GetStartFormByKeyWithHttpInfo(string key)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'key' when calling ProcessDefinitionApi->GetStartFormByKey");

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(key)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<FormDto>("/process-definition/key/{key}/startForm", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetStartFormByKey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Start Form Key Retrieves the key of the start form for the latest version of the process definition which belongs to no tenant. The form key corresponds to the &#x60;FormData#formKey&#x60; property in the engine.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) for which the form key is to be retrieved.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FormDto</returns>
        public async System.Threading.Tasks.Task<FormDto> GetStartFormByKeyAsync(string key, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<FormDto> localVarResponse = await GetStartFormByKeyWithHttpInfoAsync(key, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Start Form Key Retrieves the key of the start form for the latest version of the process definition which belongs to no tenant. The form key corresponds to the &#x60;FormData#formKey&#x60; property in the engine.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) for which the form key is to be retrieved.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FormDto)</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<FormDto>> GetStartFormByKeyWithHttpInfoAsync(string key, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'key' when calling ProcessDefinitionApi->GetStartFormByKey");


            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(key)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<FormDto>("/process-definition/key/{key}/startForm", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetStartFormByKey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Start Form Key Retrieves the key of the start form for the latest version of the process definition for a tenant. The form key corresponds to the &#x60;FormData#formKey&#x60; property in the engine.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) for which the form key is to be retrieved.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <returns>FormDto</returns>
        public FormDto GetStartFormByKeyAndTenantId(string key, string tenantId)
        {
            Camunda.OpenApi.Client.Client.ApiResponse<FormDto> localVarResponse = GetStartFormByKeyAndTenantIdWithHttpInfo(key, tenantId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Start Form Key Retrieves the key of the start form for the latest version of the process definition for a tenant. The form key corresponds to the &#x60;FormData#formKey&#x60; property in the engine.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) for which the form key is to be retrieved.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <returns>ApiResponse of FormDto</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<FormDto> GetStartFormByKeyAndTenantIdWithHttpInfo(string key, string tenantId)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'key' when calling ProcessDefinitionApi->GetStartFormByKeyAndTenantId");

            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'tenantId' when calling ProcessDefinitionApi->GetStartFormByKeyAndTenantId");

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(key)); // path parameter
            localVarRequestOptions.PathParameters.Add("tenant-id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(tenantId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<FormDto>("/process-definition/key/{key}/tenant-id/{tenant-id}/startForm", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetStartFormByKeyAndTenantId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Start Form Key Retrieves the key of the start form for the latest version of the process definition for a tenant. The form key corresponds to the &#x60;FormData#formKey&#x60; property in the engine.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) for which the form key is to be retrieved.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FormDto</returns>
        public async System.Threading.Tasks.Task<FormDto> GetStartFormByKeyAndTenantIdAsync(string key, string tenantId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<FormDto> localVarResponse = await GetStartFormByKeyAndTenantIdWithHttpInfoAsync(key, tenantId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Start Form Key Retrieves the key of the start form for the latest version of the process definition for a tenant. The form key corresponds to the &#x60;FormData#formKey&#x60; property in the engine.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) for which the form key is to be retrieved.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FormDto)</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<FormDto>> GetStartFormByKeyAndTenantIdWithHttpInfoAsync(string key, string tenantId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'key' when calling ProcessDefinitionApi->GetStartFormByKeyAndTenantId");

            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'tenantId' when calling ProcessDefinitionApi->GetStartFormByKeyAndTenantId");


            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(key)); // path parameter
            localVarRequestOptions.PathParameters.Add("tenant-id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(tenantId)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<FormDto>("/process-definition/key/{key}/tenant-id/{tenant-id}/startForm", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetStartFormByKeyAndTenantId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Start Form Variables Retrieves the start form variables for a process definition (only if they are defined via the  [Generated Task Form](https://docs.camunda.org/manual/7.17/user-guide/task-forms/#generated-task-forms) approach). The start form variables take form data specified on the start event into account. If form fields are defined, the variable types and default values of the form fields are taken into account.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition to retrieve the variables for.</param>
        /// <param name="variableNames">A comma-separated list of variable names. Allows restricting the list of requested variables to the variable names in the list. It is best practice to restrict the list of variables to the variables actually required by the form in order to minimize fetching of data. If the query parameter is ommitted all variables are fetched. If the query parameter contains non-existent variable names, the variable names are ignored. (optional)</param>
        /// <param name="deserializeValues">Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default true).  If set to true, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](http://jackson.codehaus.org/) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to false, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note**: While true is the default value for reasons of backward compatibility, we recommend setting this parameter to false when developing web applications that are independent of the Java process applications deployed to the engine. (optional, default to true)</param>
        /// <returns>Dictionary&lt;string, VariableValueDto&gt;</returns>
        public Dictionary<string, VariableValueDto> GetStartFormVariables(string id, string variableNames = default(string), bool? deserializeValues = default(bool?))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<Dictionary<string, VariableValueDto>> localVarResponse = GetStartFormVariablesWithHttpInfo(id, variableNames, deserializeValues);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Start Form Variables Retrieves the start form variables for a process definition (only if they are defined via the  [Generated Task Form](https://docs.camunda.org/manual/7.17/user-guide/task-forms/#generated-task-forms) approach). The start form variables take form data specified on the start event into account. If form fields are defined, the variable types and default values of the form fields are taken into account.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition to retrieve the variables for.</param>
        /// <param name="variableNames">A comma-separated list of variable names. Allows restricting the list of requested variables to the variable names in the list. It is best practice to restrict the list of variables to the variables actually required by the form in order to minimize fetching of data. If the query parameter is ommitted all variables are fetched. If the query parameter contains non-existent variable names, the variable names are ignored. (optional)</param>
        /// <param name="deserializeValues">Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default true).  If set to true, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](http://jackson.codehaus.org/) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to false, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note**: While true is the default value for reasons of backward compatibility, we recommend setting this parameter to false when developing web applications that are independent of the Java process applications deployed to the engine. (optional, default to true)</param>
        /// <returns>ApiResponse of Dictionary&lt;string, VariableValueDto&gt;</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<Dictionary<string, VariableValueDto>> GetStartFormVariablesWithHttpInfo(string id, string variableNames = default(string), bool? deserializeValues = default(bool?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling ProcessDefinitionApi->GetStartFormVariables");

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (variableNames != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "variableNames", variableNames));
            }
            if (deserializeValues != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "deserializeValues", deserializeValues));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<Dictionary<string, VariableValueDto>>("/process-definition/{id}/form-variables", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetStartFormVariables", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Start Form Variables Retrieves the start form variables for a process definition (only if they are defined via the  [Generated Task Form](https://docs.camunda.org/manual/7.17/user-guide/task-forms/#generated-task-forms) approach). The start form variables take form data specified on the start event into account. If form fields are defined, the variable types and default values of the form fields are taken into account.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition to retrieve the variables for.</param>
        /// <param name="variableNames">A comma-separated list of variable names. Allows restricting the list of requested variables to the variable names in the list. It is best practice to restrict the list of variables to the variables actually required by the form in order to minimize fetching of data. If the query parameter is ommitted all variables are fetched. If the query parameter contains non-existent variable names, the variable names are ignored. (optional)</param>
        /// <param name="deserializeValues">Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default true).  If set to true, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](http://jackson.codehaus.org/) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to false, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note**: While true is the default value for reasons of backward compatibility, we recommend setting this parameter to false when developing web applications that are independent of the Java process applications deployed to the engine. (optional, default to true)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Dictionary&lt;string, VariableValueDto&gt;</returns>
        public async System.Threading.Tasks.Task<Dictionary<string, VariableValueDto>> GetStartFormVariablesAsync(string id, string variableNames = default(string), bool? deserializeValues = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<Dictionary<string, VariableValueDto>> localVarResponse = await GetStartFormVariablesWithHttpInfoAsync(id, variableNames, deserializeValues, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Start Form Variables Retrieves the start form variables for a process definition (only if they are defined via the  [Generated Task Form](https://docs.camunda.org/manual/7.17/user-guide/task-forms/#generated-task-forms) approach). The start form variables take form data specified on the start event into account. If form fields are defined, the variable types and default values of the form fields are taken into account.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition to retrieve the variables for.</param>
        /// <param name="variableNames">A comma-separated list of variable names. Allows restricting the list of requested variables to the variable names in the list. It is best practice to restrict the list of variables to the variables actually required by the form in order to minimize fetching of data. If the query parameter is ommitted all variables are fetched. If the query parameter contains non-existent variable names, the variable names are ignored. (optional)</param>
        /// <param name="deserializeValues">Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default true).  If set to true, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](http://jackson.codehaus.org/) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to false, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note**: While true is the default value for reasons of backward compatibility, we recommend setting this parameter to false when developing web applications that are independent of the Java process applications deployed to the engine. (optional, default to true)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, VariableValueDto&gt;)</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<Dictionary<string, VariableValueDto>>> GetStartFormVariablesWithHttpInfoAsync(string id, string variableNames = default(string), bool? deserializeValues = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling ProcessDefinitionApi->GetStartFormVariables");


            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (variableNames != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "variableNames", variableNames));
            }
            if (deserializeValues != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "deserializeValues", deserializeValues));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Dictionary<string, VariableValueDto>>("/process-definition/{id}/form-variables", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetStartFormVariables", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Start Form Variables Retrieves the start form variables for the latest process definition which belongs to no tenant (only if they are defined via the  [Generated Task Form](https://docs.camunda.org/manual/7.17/user-guide/task-forms/#generated-task-forms) approach). The start form variables take form data specified on the start event into account. If form fields are defined, the variable types and default values of the form fields are taken into account.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <param name="variableNames">A comma-separated list of variable names. Allows restricting the list of requested variables to the variable names in the list. It is best practice to restrict the list of variables to the variables actually required by the form in order to minimize fetching of data. If the query parameter is ommitted all variables are fetched. If the query parameter contains non-existent variable names, the variable names are ignored. (optional)</param>
        /// <param name="deserializeValues">Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default true).  If set to true, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](http://jackson.codehaus.org/) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to false, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note**: While true is the default value for reasons of backward compatibility, we recommend setting this parameter to false when developing web applications that are independent of the Java process applications deployed to the engine. (optional, default to true)</param>
        /// <returns>Dictionary&lt;string, VariableValueDto&gt;</returns>
        public Dictionary<string, VariableValueDto> GetStartFormVariablesByKey(string key, string variableNames = default(string), bool? deserializeValues = default(bool?))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<Dictionary<string, VariableValueDto>> localVarResponse = GetStartFormVariablesByKeyWithHttpInfo(key, variableNames, deserializeValues);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Start Form Variables Retrieves the start form variables for the latest process definition which belongs to no tenant (only if they are defined via the  [Generated Task Form](https://docs.camunda.org/manual/7.17/user-guide/task-forms/#generated-task-forms) approach). The start form variables take form data specified on the start event into account. If form fields are defined, the variable types and default values of the form fields are taken into account.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <param name="variableNames">A comma-separated list of variable names. Allows restricting the list of requested variables to the variable names in the list. It is best practice to restrict the list of variables to the variables actually required by the form in order to minimize fetching of data. If the query parameter is ommitted all variables are fetched. If the query parameter contains non-existent variable names, the variable names are ignored. (optional)</param>
        /// <param name="deserializeValues">Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default true).  If set to true, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](http://jackson.codehaus.org/) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to false, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note**: While true is the default value for reasons of backward compatibility, we recommend setting this parameter to false when developing web applications that are independent of the Java process applications deployed to the engine. (optional, default to true)</param>
        /// <returns>ApiResponse of Dictionary&lt;string, VariableValueDto&gt;</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<Dictionary<string, VariableValueDto>> GetStartFormVariablesByKeyWithHttpInfo(string key, string variableNames = default(string), bool? deserializeValues = default(bool?))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'key' when calling ProcessDefinitionApi->GetStartFormVariablesByKey");

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(key)); // path parameter
            if (variableNames != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "variableNames", variableNames));
            }
            if (deserializeValues != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "deserializeValues", deserializeValues));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<Dictionary<string, VariableValueDto>>("/process-definition/key/{key}/form-variables", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetStartFormVariablesByKey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Start Form Variables Retrieves the start form variables for the latest process definition which belongs to no tenant (only if they are defined via the  [Generated Task Form](https://docs.camunda.org/manual/7.17/user-guide/task-forms/#generated-task-forms) approach). The start form variables take form data specified on the start event into account. If form fields are defined, the variable types and default values of the form fields are taken into account.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <param name="variableNames">A comma-separated list of variable names. Allows restricting the list of requested variables to the variable names in the list. It is best practice to restrict the list of variables to the variables actually required by the form in order to minimize fetching of data. If the query parameter is ommitted all variables are fetched. If the query parameter contains non-existent variable names, the variable names are ignored. (optional)</param>
        /// <param name="deserializeValues">Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default true).  If set to true, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](http://jackson.codehaus.org/) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to false, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note**: While true is the default value for reasons of backward compatibility, we recommend setting this parameter to false when developing web applications that are independent of the Java process applications deployed to the engine. (optional, default to true)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Dictionary&lt;string, VariableValueDto&gt;</returns>
        public async System.Threading.Tasks.Task<Dictionary<string, VariableValueDto>> GetStartFormVariablesByKeyAsync(string key, string variableNames = default(string), bool? deserializeValues = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<Dictionary<string, VariableValueDto>> localVarResponse = await GetStartFormVariablesByKeyWithHttpInfoAsync(key, variableNames, deserializeValues, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Start Form Variables Retrieves the start form variables for the latest process definition which belongs to no tenant (only if they are defined via the  [Generated Task Form](https://docs.camunda.org/manual/7.17/user-guide/task-forms/#generated-task-forms) approach). The start form variables take form data specified on the start event into account. If form fields are defined, the variable types and default values of the form fields are taken into account.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <param name="variableNames">A comma-separated list of variable names. Allows restricting the list of requested variables to the variable names in the list. It is best practice to restrict the list of variables to the variables actually required by the form in order to minimize fetching of data. If the query parameter is ommitted all variables are fetched. If the query parameter contains non-existent variable names, the variable names are ignored. (optional)</param>
        /// <param name="deserializeValues">Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default true).  If set to true, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](http://jackson.codehaus.org/) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to false, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note**: While true is the default value for reasons of backward compatibility, we recommend setting this parameter to false when developing web applications that are independent of the Java process applications deployed to the engine. (optional, default to true)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, VariableValueDto&gt;)</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<Dictionary<string, VariableValueDto>>> GetStartFormVariablesByKeyWithHttpInfoAsync(string key, string variableNames = default(string), bool? deserializeValues = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'key' when calling ProcessDefinitionApi->GetStartFormVariablesByKey");


            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(key)); // path parameter
            if (variableNames != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "variableNames", variableNames));
            }
            if (deserializeValues != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "deserializeValues", deserializeValues));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Dictionary<string, VariableValueDto>>("/process-definition/key/{key}/form-variables", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetStartFormVariablesByKey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Start Form Variables Retrieves the start form variables for the latest process definition for a tenant (only if they are defined via the  [Generated Task Form](https://docs.camunda.org/manual/7.17/user-guide/task-forms/#generated-task-forms) approach). The start form variables take form data specified on the start event into account. If form fields are defined, the variable types and default values of the form fields are taken into account.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <param name="variableNames">A comma-separated list of variable names. Allows restricting the list of requested variables to the variable names in the list. It is best practice to restrict the list of variables to the variables actually required by the form in order to minimize fetching of data. If the query parameter is ommitted all variables are fetched. If the query parameter contains non-existent variable names, the variable names are ignored. (optional)</param>
        /// <param name="deserializeValues">Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default true).  If set to true, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](http://jackson.codehaus.org/) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to false, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note**: While true is the default value for reasons of backward compatibility, we recommend setting this parameter to false when developing web applications that are independent of the Java process applications deployed to the engine. (optional, default to true)</param>
        /// <returns>Dictionary&lt;string, VariableValueDto&gt;</returns>
        public Dictionary<string, VariableValueDto> GetStartFormVariablesByKeyAndTenantId(string key, string tenantId, string variableNames = default(string), bool? deserializeValues = default(bool?))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<Dictionary<string, VariableValueDto>> localVarResponse = GetStartFormVariablesByKeyAndTenantIdWithHttpInfo(key, tenantId, variableNames, deserializeValues);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Start Form Variables Retrieves the start form variables for the latest process definition for a tenant (only if they are defined via the  [Generated Task Form](https://docs.camunda.org/manual/7.17/user-guide/task-forms/#generated-task-forms) approach). The start form variables take form data specified on the start event into account. If form fields are defined, the variable types and default values of the form fields are taken into account.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <param name="variableNames">A comma-separated list of variable names. Allows restricting the list of requested variables to the variable names in the list. It is best practice to restrict the list of variables to the variables actually required by the form in order to minimize fetching of data. If the query parameter is ommitted all variables are fetched. If the query parameter contains non-existent variable names, the variable names are ignored. (optional)</param>
        /// <param name="deserializeValues">Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default true).  If set to true, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](http://jackson.codehaus.org/) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to false, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note**: While true is the default value for reasons of backward compatibility, we recommend setting this parameter to false when developing web applications that are independent of the Java process applications deployed to the engine. (optional, default to true)</param>
        /// <returns>ApiResponse of Dictionary&lt;string, VariableValueDto&gt;</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<Dictionary<string, VariableValueDto>> GetStartFormVariablesByKeyAndTenantIdWithHttpInfo(string key, string tenantId, string variableNames = default(string), bool? deserializeValues = default(bool?))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'key' when calling ProcessDefinitionApi->GetStartFormVariablesByKeyAndTenantId");

            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'tenantId' when calling ProcessDefinitionApi->GetStartFormVariablesByKeyAndTenantId");

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(key)); // path parameter
            localVarRequestOptions.PathParameters.Add("tenant-id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            if (variableNames != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "variableNames", variableNames));
            }
            if (deserializeValues != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "deserializeValues", deserializeValues));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<Dictionary<string, VariableValueDto>>("/process-definition/key/{key}/tenant-id/{tenant-id}/form-variables", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetStartFormVariablesByKeyAndTenantId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Start Form Variables Retrieves the start form variables for the latest process definition for a tenant (only if they are defined via the  [Generated Task Form](https://docs.camunda.org/manual/7.17/user-guide/task-forms/#generated-task-forms) approach). The start form variables take form data specified on the start event into account. If form fields are defined, the variable types and default values of the form fields are taken into account.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <param name="variableNames">A comma-separated list of variable names. Allows restricting the list of requested variables to the variable names in the list. It is best practice to restrict the list of variables to the variables actually required by the form in order to minimize fetching of data. If the query parameter is ommitted all variables are fetched. If the query parameter contains non-existent variable names, the variable names are ignored. (optional)</param>
        /// <param name="deserializeValues">Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default true).  If set to true, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](http://jackson.codehaus.org/) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to false, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note**: While true is the default value for reasons of backward compatibility, we recommend setting this parameter to false when developing web applications that are independent of the Java process applications deployed to the engine. (optional, default to true)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Dictionary&lt;string, VariableValueDto&gt;</returns>
        public async System.Threading.Tasks.Task<Dictionary<string, VariableValueDto>> GetStartFormVariablesByKeyAndTenantIdAsync(string key, string tenantId, string variableNames = default(string), bool? deserializeValues = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<Dictionary<string, VariableValueDto>> localVarResponse = await GetStartFormVariablesByKeyAndTenantIdWithHttpInfoAsync(key, tenantId, variableNames, deserializeValues, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Start Form Variables Retrieves the start form variables for the latest process definition for a tenant (only if they are defined via the  [Generated Task Form](https://docs.camunda.org/manual/7.17/user-guide/task-forms/#generated-task-forms) approach). The start form variables take form data specified on the start event into account. If form fields are defined, the variable types and default values of the form fields are taken into account.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <param name="variableNames">A comma-separated list of variable names. Allows restricting the list of requested variables to the variable names in the list. It is best practice to restrict the list of variables to the variables actually required by the form in order to minimize fetching of data. If the query parameter is ommitted all variables are fetched. If the query parameter contains non-existent variable names, the variable names are ignored. (optional)</param>
        /// <param name="deserializeValues">Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default true).  If set to true, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](http://jackson.codehaus.org/) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to false, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note**: While true is the default value for reasons of backward compatibility, we recommend setting this parameter to false when developing web applications that are independent of the Java process applications deployed to the engine. (optional, default to true)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, VariableValueDto&gt;)</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<Dictionary<string, VariableValueDto>>> GetStartFormVariablesByKeyAndTenantIdWithHttpInfoAsync(string key, string tenantId, string variableNames = default(string), bool? deserializeValues = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'key' when calling ProcessDefinitionApi->GetStartFormVariablesByKeyAndTenantId");

            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'tenantId' when calling ProcessDefinitionApi->GetStartFormVariablesByKeyAndTenantId");


            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(key)); // path parameter
            localVarRequestOptions.PathParameters.Add("tenant-id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            if (variableNames != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "variableNames", variableNames));
            }
            if (deserializeValues != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "deserializeValues", deserializeValues));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Dictionary<string, VariableValueDto>>("/process-definition/key/{key}/tenant-id/{tenant-id}/form-variables", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetStartFormVariablesByKeyAndTenantId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Static Called Process Definitions For the given process, returns a list of called process definitions corresponding to the &#x60;CalledProcessDefinition&#x60; interface in the engine. The list contains all process definitions that are referenced statically by call activities in the given process. This endpoint does not resolve process definitions that are referenced with expressions. Each called process definition contains a list of call activity ids, which specifies the call activities that are calling that process. This endpoint does not resolve references to case definitions.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition.</param>
        /// <returns>List&lt;CalledProcessDefinitionDto&gt;</returns>
        public List<CalledProcessDefinitionDto> GetStaticCalledProcessDefinitions(string id)
        {
            Camunda.OpenApi.Client.Client.ApiResponse<List<CalledProcessDefinitionDto>> localVarResponse = GetStaticCalledProcessDefinitionsWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Static Called Process Definitions For the given process, returns a list of called process definitions corresponding to the &#x60;CalledProcessDefinition&#x60; interface in the engine. The list contains all process definitions that are referenced statically by call activities in the given process. This endpoint does not resolve process definitions that are referenced with expressions. Each called process definition contains a list of call activity ids, which specifies the call activities that are calling that process. This endpoint does not resolve references to case definitions.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition.</param>
        /// <returns>ApiResponse of List&lt;CalledProcessDefinitionDto&gt;</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<List<CalledProcessDefinitionDto>> GetStaticCalledProcessDefinitionsWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling ProcessDefinitionApi->GetStaticCalledProcessDefinitions");

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<CalledProcessDefinitionDto>>("/process-definition/{id}/static-called-process-definitions", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetStaticCalledProcessDefinitions", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Static Called Process Definitions For the given process, returns a list of called process definitions corresponding to the &#x60;CalledProcessDefinition&#x60; interface in the engine. The list contains all process definitions that are referenced statically by call activities in the given process. This endpoint does not resolve process definitions that are referenced with expressions. Each called process definition contains a list of call activity ids, which specifies the call activities that are calling that process. This endpoint does not resolve references to case definitions.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;CalledProcessDefinitionDto&gt;</returns>
        public async System.Threading.Tasks.Task<List<CalledProcessDefinitionDto>> GetStaticCalledProcessDefinitionsAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<List<CalledProcessDefinitionDto>> localVarResponse = await GetStaticCalledProcessDefinitionsWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Static Called Process Definitions For the given process, returns a list of called process definitions corresponding to the &#x60;CalledProcessDefinition&#x60; interface in the engine. The list contains all process definitions that are referenced statically by call activities in the given process. This endpoint does not resolve process definitions that are referenced with expressions. Each called process definition contains a list of call activity ids, which specifies the call activities that are calling that process. This endpoint does not resolve references to case definitions.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;CalledProcessDefinitionDto&gt;)</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<List<CalledProcessDefinitionDto>>> GetStaticCalledProcessDefinitionsWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling ProcessDefinitionApi->GetStaticCalledProcessDefinitions");


            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<CalledProcessDefinitionDto>>("/process-definition/{id}/static-called-process-definitions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetStaticCalledProcessDefinitions", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Restart Process Instance Restarts process instances that were canceled or terminated synchronously. Can also restart completed process instances. It will create a new instance using the original instance information. To execute the restart asynchronously, use the [Restart Process Instance Async](https://docs.camunda.org/manual/7.17/reference/rest/process-definition/post-restart-process-instance-async/) method.  For more information about the difference between synchronous and asynchronous execution, please refer to the related section of the [User Guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/process-instance-restart/#execution).
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition of the process instances to restart.</param>
        /// <param name="restartProcessInstanceDto"> (optional)</param>
        /// <returns></returns>
        public void RestartProcessInstance(string id, RestartProcessInstanceDto restartProcessInstanceDto = default(RestartProcessInstanceDto))
        {
            RestartProcessInstanceWithHttpInfo(id, restartProcessInstanceDto);
        }

        /// <summary>
        /// Restart Process Instance Restarts process instances that were canceled or terminated synchronously. Can also restart completed process instances. It will create a new instance using the original instance information. To execute the restart asynchronously, use the [Restart Process Instance Async](https://docs.camunda.org/manual/7.17/reference/rest/process-definition/post-restart-process-instance-async/) method.  For more information about the difference between synchronous and asynchronous execution, please refer to the related section of the [User Guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/process-instance-restart/#execution).
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition of the process instances to restart.</param>
        /// <param name="restartProcessInstanceDto"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<Object> RestartProcessInstanceWithHttpInfo(string id, RestartProcessInstanceDto restartProcessInstanceDto = default(RestartProcessInstanceDto))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling ProcessDefinitionApi->RestartProcessInstance");

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = restartProcessInstanceDto;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/process-definition/{id}/restart", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RestartProcessInstance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Restart Process Instance Restarts process instances that were canceled or terminated synchronously. Can also restart completed process instances. It will create a new instance using the original instance information. To execute the restart asynchronously, use the [Restart Process Instance Async](https://docs.camunda.org/manual/7.17/reference/rest/process-definition/post-restart-process-instance-async/) method.  For more information about the difference between synchronous and asynchronous execution, please refer to the related section of the [User Guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/process-instance-restart/#execution).
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition of the process instances to restart.</param>
        /// <param name="restartProcessInstanceDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RestartProcessInstanceAsync(string id, RestartProcessInstanceDto restartProcessInstanceDto = default(RestartProcessInstanceDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await RestartProcessInstanceWithHttpInfoAsync(id, restartProcessInstanceDto, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Restart Process Instance Restarts process instances that were canceled or terminated synchronously. Can also restart completed process instances. It will create a new instance using the original instance information. To execute the restart asynchronously, use the [Restart Process Instance Async](https://docs.camunda.org/manual/7.17/reference/rest/process-definition/post-restart-process-instance-async/) method.  For more information about the difference between synchronous and asynchronous execution, please refer to the related section of the [User Guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/process-instance-restart/#execution).
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition of the process instances to restart.</param>
        /// <param name="restartProcessInstanceDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<Object>> RestartProcessInstanceWithHttpInfoAsync(string id, RestartProcessInstanceDto restartProcessInstanceDto = default(RestartProcessInstanceDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling ProcessDefinitionApi->RestartProcessInstance");


            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = restartProcessInstanceDto;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/process-definition/{id}/restart", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RestartProcessInstance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Restart Process Instance Async Restarts process instances that were canceled or terminated asynchronously. Can also restart completed process instances. It will create a new instance using the original instance information. To execute the restart asynchronously, use the [Restart Process Instance](https://docs.camunda.org/manual/7.17/reference/rest/process-definition/post-restart-process-instance-sync/) method.  For more information about the difference between synchronous and asynchronous execution, please refer to the related section of the [User Guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/process-instance-restart/#execution).
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition of the process instances to restart.</param>
        /// <param name="restartProcessInstanceDto"> (optional)</param>
        /// <returns>BatchDto</returns>
        public BatchDto RestartProcessInstanceAsyncOperation(string id, RestartProcessInstanceDto restartProcessInstanceDto = default(RestartProcessInstanceDto))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<BatchDto> localVarResponse = RestartProcessInstanceAsyncOperationWithHttpInfo(id, restartProcessInstanceDto);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Restart Process Instance Async Restarts process instances that were canceled or terminated asynchronously. Can also restart completed process instances. It will create a new instance using the original instance information. To execute the restart asynchronously, use the [Restart Process Instance](https://docs.camunda.org/manual/7.17/reference/rest/process-definition/post-restart-process-instance-sync/) method.  For more information about the difference between synchronous and asynchronous execution, please refer to the related section of the [User Guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/process-instance-restart/#execution).
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition of the process instances to restart.</param>
        /// <param name="restartProcessInstanceDto"> (optional)</param>
        /// <returns>ApiResponse of BatchDto</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<BatchDto> RestartProcessInstanceAsyncOperationWithHttpInfo(string id, RestartProcessInstanceDto restartProcessInstanceDto = default(RestartProcessInstanceDto))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling ProcessDefinitionApi->RestartProcessInstanceAsyncOperation");

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = restartProcessInstanceDto;


            // make the HTTP request
            var localVarResponse = this.Client.Post<BatchDto>("/process-definition/{id}/restart-async", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RestartProcessInstanceAsyncOperation", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Restart Process Instance Async Restarts process instances that were canceled or terminated asynchronously. Can also restart completed process instances. It will create a new instance using the original instance information. To execute the restart asynchronously, use the [Restart Process Instance](https://docs.camunda.org/manual/7.17/reference/rest/process-definition/post-restart-process-instance-sync/) method.  For more information about the difference between synchronous and asynchronous execution, please refer to the related section of the [User Guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/process-instance-restart/#execution).
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition of the process instances to restart.</param>
        /// <param name="restartProcessInstanceDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchDto</returns>
        public async System.Threading.Tasks.Task<BatchDto> RestartProcessInstanceAsyncOperationAsync(string id, RestartProcessInstanceDto restartProcessInstanceDto = default(RestartProcessInstanceDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<BatchDto> localVarResponse = await RestartProcessInstanceAsyncOperationWithHttpInfoAsync(id, restartProcessInstanceDto, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Restart Process Instance Async Restarts process instances that were canceled or terminated asynchronously. Can also restart completed process instances. It will create a new instance using the original instance information. To execute the restart asynchronously, use the [Restart Process Instance](https://docs.camunda.org/manual/7.17/reference/rest/process-definition/post-restart-process-instance-sync/) method.  For more information about the difference between synchronous and asynchronous execution, please refer to the related section of the [User Guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/process-instance-restart/#execution).
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition of the process instances to restart.</param>
        /// <param name="restartProcessInstanceDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchDto)</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<BatchDto>> RestartProcessInstanceAsyncOperationWithHttpInfoAsync(string id, RestartProcessInstanceDto restartProcessInstanceDto = default(RestartProcessInstanceDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling ProcessDefinitionApi->RestartProcessInstanceAsyncOperation");


            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = restartProcessInstanceDto;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<BatchDto>("/process-definition/{id}/restart-async", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RestartProcessInstanceAsyncOperation", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Start Instance Instantiates a given process definition. Process variables and business key may be supplied in the request body.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition to be retrieved.</param>
        /// <param name="startProcessInstanceDto"> (optional)</param>
        /// <returns>ProcessInstanceWithVariablesDto</returns>
        public ProcessInstanceWithVariablesDto StartProcessInstance(string id, StartProcessInstanceDto startProcessInstanceDto = default(StartProcessInstanceDto))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<ProcessInstanceWithVariablesDto> localVarResponse = StartProcessInstanceWithHttpInfo(id, startProcessInstanceDto);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Start Instance Instantiates a given process definition. Process variables and business key may be supplied in the request body.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition to be retrieved.</param>
        /// <param name="startProcessInstanceDto"> (optional)</param>
        /// <returns>ApiResponse of ProcessInstanceWithVariablesDto</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<ProcessInstanceWithVariablesDto> StartProcessInstanceWithHttpInfo(string id, StartProcessInstanceDto startProcessInstanceDto = default(StartProcessInstanceDto))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling ProcessDefinitionApi->StartProcessInstance");

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = startProcessInstanceDto;


            // make the HTTP request
            var localVarResponse = this.Client.Post<ProcessInstanceWithVariablesDto>("/process-definition/{id}/start", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StartProcessInstance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Start Instance Instantiates a given process definition. Process variables and business key may be supplied in the request body.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition to be retrieved.</param>
        /// <param name="startProcessInstanceDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProcessInstanceWithVariablesDto</returns>
        public async System.Threading.Tasks.Task<ProcessInstanceWithVariablesDto> StartProcessInstanceAsync(string id, StartProcessInstanceDto startProcessInstanceDto = default(StartProcessInstanceDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<ProcessInstanceWithVariablesDto> localVarResponse = await StartProcessInstanceWithHttpInfoAsync(id, startProcessInstanceDto, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Start Instance Instantiates a given process definition. Process variables and business key may be supplied in the request body.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition to be retrieved.</param>
        /// <param name="startProcessInstanceDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProcessInstanceWithVariablesDto)</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<ProcessInstanceWithVariablesDto>> StartProcessInstanceWithHttpInfoAsync(string id, StartProcessInstanceDto startProcessInstanceDto = default(StartProcessInstanceDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling ProcessDefinitionApi->StartProcessInstance");


            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = startProcessInstanceDto;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<ProcessInstanceWithVariablesDto>("/process-definition/{id}/start", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StartProcessInstance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Start Instance Instantiates a given process definition, starts the latest version of the process definition which belongs to no tenant. Process variables and business key may be supplied in the request body.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <param name="startProcessInstanceDto"> (optional)</param>
        /// <returns>ProcessInstanceWithVariablesDto</returns>
        public ProcessInstanceWithVariablesDto StartProcessInstanceByKey(string key, StartProcessInstanceDto startProcessInstanceDto = default(StartProcessInstanceDto))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<ProcessInstanceWithVariablesDto> localVarResponse = StartProcessInstanceByKeyWithHttpInfo(key, startProcessInstanceDto);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Start Instance Instantiates a given process definition, starts the latest version of the process definition which belongs to no tenant. Process variables and business key may be supplied in the request body.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <param name="startProcessInstanceDto"> (optional)</param>
        /// <returns>ApiResponse of ProcessInstanceWithVariablesDto</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<ProcessInstanceWithVariablesDto> StartProcessInstanceByKeyWithHttpInfo(string key, StartProcessInstanceDto startProcessInstanceDto = default(StartProcessInstanceDto))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'key' when calling ProcessDefinitionApi->StartProcessInstanceByKey");

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(key)); // path parameter
            localVarRequestOptions.Data = startProcessInstanceDto;


            // make the HTTP request
            var localVarResponse = this.Client.Post<ProcessInstanceWithVariablesDto>("/process-definition/key/{key}/start", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StartProcessInstanceByKey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Start Instance Instantiates a given process definition, starts the latest version of the process definition which belongs to no tenant. Process variables and business key may be supplied in the request body.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <param name="startProcessInstanceDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProcessInstanceWithVariablesDto</returns>
        public async System.Threading.Tasks.Task<ProcessInstanceWithVariablesDto> StartProcessInstanceByKeyAsync(string key, StartProcessInstanceDto startProcessInstanceDto = default(StartProcessInstanceDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<ProcessInstanceWithVariablesDto> localVarResponse = await StartProcessInstanceByKeyWithHttpInfoAsync(key, startProcessInstanceDto, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Start Instance Instantiates a given process definition, starts the latest version of the process definition which belongs to no tenant. Process variables and business key may be supplied in the request body.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <param name="startProcessInstanceDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProcessInstanceWithVariablesDto)</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<ProcessInstanceWithVariablesDto>> StartProcessInstanceByKeyWithHttpInfoAsync(string key, StartProcessInstanceDto startProcessInstanceDto = default(StartProcessInstanceDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'key' when calling ProcessDefinitionApi->StartProcessInstanceByKey");


            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(key)); // path parameter
            localVarRequestOptions.Data = startProcessInstanceDto;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<ProcessInstanceWithVariablesDto>("/process-definition/key/{key}/start", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StartProcessInstanceByKey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Start Instance Instantiates a given process definition, starts the latest version of the process definition for tenant. Process variables and business key may be supplied in the request body.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <param name="startProcessInstanceDto"> (optional)</param>
        /// <returns>ProcessInstanceWithVariablesDto</returns>
        public ProcessInstanceWithVariablesDto StartProcessInstanceByKeyAndTenantId(string key, string tenantId, StartProcessInstanceDto startProcessInstanceDto = default(StartProcessInstanceDto))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<ProcessInstanceWithVariablesDto> localVarResponse = StartProcessInstanceByKeyAndTenantIdWithHttpInfo(key, tenantId, startProcessInstanceDto);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Start Instance Instantiates a given process definition, starts the latest version of the process definition for tenant. Process variables and business key may be supplied in the request body.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <param name="startProcessInstanceDto"> (optional)</param>
        /// <returns>ApiResponse of ProcessInstanceWithVariablesDto</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<ProcessInstanceWithVariablesDto> StartProcessInstanceByKeyAndTenantIdWithHttpInfo(string key, string tenantId, StartProcessInstanceDto startProcessInstanceDto = default(StartProcessInstanceDto))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'key' when calling ProcessDefinitionApi->StartProcessInstanceByKeyAndTenantId");

            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'tenantId' when calling ProcessDefinitionApi->StartProcessInstanceByKeyAndTenantId");

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(key)); // path parameter
            localVarRequestOptions.PathParameters.Add("tenant-id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.Data = startProcessInstanceDto;


            // make the HTTP request
            var localVarResponse = this.Client.Post<ProcessInstanceWithVariablesDto>("/process-definition/key/{key}/tenant-id/{tenant-id}/start", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StartProcessInstanceByKeyAndTenantId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Start Instance Instantiates a given process definition, starts the latest version of the process definition for tenant. Process variables and business key may be supplied in the request body.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <param name="startProcessInstanceDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProcessInstanceWithVariablesDto</returns>
        public async System.Threading.Tasks.Task<ProcessInstanceWithVariablesDto> StartProcessInstanceByKeyAndTenantIdAsync(string key, string tenantId, StartProcessInstanceDto startProcessInstanceDto = default(StartProcessInstanceDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<ProcessInstanceWithVariablesDto> localVarResponse = await StartProcessInstanceByKeyAndTenantIdWithHttpInfoAsync(key, tenantId, startProcessInstanceDto, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Start Instance Instantiates a given process definition, starts the latest version of the process definition for tenant. Process variables and business key may be supplied in the request body.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be retrieved.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <param name="startProcessInstanceDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProcessInstanceWithVariablesDto)</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<ProcessInstanceWithVariablesDto>> StartProcessInstanceByKeyAndTenantIdWithHttpInfoAsync(string key, string tenantId, StartProcessInstanceDto startProcessInstanceDto = default(StartProcessInstanceDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'key' when calling ProcessDefinitionApi->StartProcessInstanceByKeyAndTenantId");

            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'tenantId' when calling ProcessDefinitionApi->StartProcessInstanceByKeyAndTenantId");


            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(key)); // path parameter
            localVarRequestOptions.PathParameters.Add("tenant-id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.Data = startProcessInstanceDto;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<ProcessInstanceWithVariablesDto>("/process-definition/key/{key}/tenant-id/{tenant-id}/start", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StartProcessInstanceByKeyAndTenantId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Submit Start Form Starts a process instance using a set of process variables and the business key. If the start event has Form Field Metadata defined, the process engine will perform backend validation for any form fields which have validators defined. See [Documentation on Generated Task Forms](https://docs.camunda.org/manual/7.17/user-guide/task-forms/#generated-task-forms).
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition to submit the form for.</param>
        /// <param name="startProcessInstanceFormDto"> (optional)</param>
        /// <returns>ProcessInstanceDto</returns>
        public ProcessInstanceDto SubmitForm(string id, StartProcessInstanceFormDto startProcessInstanceFormDto = default(StartProcessInstanceFormDto))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<ProcessInstanceDto> localVarResponse = SubmitFormWithHttpInfo(id, startProcessInstanceFormDto);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Submit Start Form Starts a process instance using a set of process variables and the business key. If the start event has Form Field Metadata defined, the process engine will perform backend validation for any form fields which have validators defined. See [Documentation on Generated Task Forms](https://docs.camunda.org/manual/7.17/user-guide/task-forms/#generated-task-forms).
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition to submit the form for.</param>
        /// <param name="startProcessInstanceFormDto"> (optional)</param>
        /// <returns>ApiResponse of ProcessInstanceDto</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<ProcessInstanceDto> SubmitFormWithHttpInfo(string id, StartProcessInstanceFormDto startProcessInstanceFormDto = default(StartProcessInstanceFormDto))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling ProcessDefinitionApi->SubmitForm");

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = startProcessInstanceFormDto;


            // make the HTTP request
            var localVarResponse = this.Client.Post<ProcessInstanceDto>("/process-definition/{id}/submit-form", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubmitForm", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Submit Start Form Starts a process instance using a set of process variables and the business key. If the start event has Form Field Metadata defined, the process engine will perform backend validation for any form fields which have validators defined. See [Documentation on Generated Task Forms](https://docs.camunda.org/manual/7.17/user-guide/task-forms/#generated-task-forms).
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition to submit the form for.</param>
        /// <param name="startProcessInstanceFormDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProcessInstanceDto</returns>
        public async System.Threading.Tasks.Task<ProcessInstanceDto> SubmitFormAsync(string id, StartProcessInstanceFormDto startProcessInstanceFormDto = default(StartProcessInstanceFormDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<ProcessInstanceDto> localVarResponse = await SubmitFormWithHttpInfoAsync(id, startProcessInstanceFormDto, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Submit Start Form Starts a process instance using a set of process variables and the business key. If the start event has Form Field Metadata defined, the process engine will perform backend validation for any form fields which have validators defined. See [Documentation on Generated Task Forms](https://docs.camunda.org/manual/7.17/user-guide/task-forms/#generated-task-forms).
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition to submit the form for.</param>
        /// <param name="startProcessInstanceFormDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProcessInstanceDto)</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<ProcessInstanceDto>> SubmitFormWithHttpInfoAsync(string id, StartProcessInstanceFormDto startProcessInstanceFormDto = default(StartProcessInstanceFormDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling ProcessDefinitionApi->SubmitForm");


            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = startProcessInstanceFormDto;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<ProcessInstanceDto>("/process-definition/{id}/submit-form", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubmitForm", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Submit Start Form Starts the latest version of the process definition which belongs to no tenant using a set of process variables and the business key. If the start event has Form Field Metadata defined, the process engine will perform backend validation for any form fields which have validators defined. See [Documentation on Generated Task Forms](https://docs.camunda.org/manual/7.17/user-guide/task-forms/#generated-task-forms).
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition to submit the form for.</param>
        /// <param name="startProcessInstanceFormDto"> (optional)</param>
        /// <returns>ProcessInstanceDto</returns>
        public ProcessInstanceDto SubmitFormByKey(string key, StartProcessInstanceFormDto startProcessInstanceFormDto = default(StartProcessInstanceFormDto))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<ProcessInstanceDto> localVarResponse = SubmitFormByKeyWithHttpInfo(key, startProcessInstanceFormDto);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Submit Start Form Starts the latest version of the process definition which belongs to no tenant using a set of process variables and the business key. If the start event has Form Field Metadata defined, the process engine will perform backend validation for any form fields which have validators defined. See [Documentation on Generated Task Forms](https://docs.camunda.org/manual/7.17/user-guide/task-forms/#generated-task-forms).
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition to submit the form for.</param>
        /// <param name="startProcessInstanceFormDto"> (optional)</param>
        /// <returns>ApiResponse of ProcessInstanceDto</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<ProcessInstanceDto> SubmitFormByKeyWithHttpInfo(string key, StartProcessInstanceFormDto startProcessInstanceFormDto = default(StartProcessInstanceFormDto))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'key' when calling ProcessDefinitionApi->SubmitFormByKey");

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(key)); // path parameter
            localVarRequestOptions.Data = startProcessInstanceFormDto;


            // make the HTTP request
            var localVarResponse = this.Client.Post<ProcessInstanceDto>("/process-definition/key/{key}/submit-form", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubmitFormByKey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Submit Start Form Starts the latest version of the process definition which belongs to no tenant using a set of process variables and the business key. If the start event has Form Field Metadata defined, the process engine will perform backend validation for any form fields which have validators defined. See [Documentation on Generated Task Forms](https://docs.camunda.org/manual/7.17/user-guide/task-forms/#generated-task-forms).
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition to submit the form for.</param>
        /// <param name="startProcessInstanceFormDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProcessInstanceDto</returns>
        public async System.Threading.Tasks.Task<ProcessInstanceDto> SubmitFormByKeyAsync(string key, StartProcessInstanceFormDto startProcessInstanceFormDto = default(StartProcessInstanceFormDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<ProcessInstanceDto> localVarResponse = await SubmitFormByKeyWithHttpInfoAsync(key, startProcessInstanceFormDto, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Submit Start Form Starts the latest version of the process definition which belongs to no tenant using a set of process variables and the business key. If the start event has Form Field Metadata defined, the process engine will perform backend validation for any form fields which have validators defined. See [Documentation on Generated Task Forms](https://docs.camunda.org/manual/7.17/user-guide/task-forms/#generated-task-forms).
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition to submit the form for.</param>
        /// <param name="startProcessInstanceFormDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProcessInstanceDto)</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<ProcessInstanceDto>> SubmitFormByKeyWithHttpInfoAsync(string key, StartProcessInstanceFormDto startProcessInstanceFormDto = default(StartProcessInstanceFormDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'key' when calling ProcessDefinitionApi->SubmitFormByKey");


            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(key)); // path parameter
            localVarRequestOptions.Data = startProcessInstanceFormDto;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<ProcessInstanceDto>("/process-definition/key/{key}/submit-form", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubmitFormByKey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Submit Start Form Starts the latest version of the process definition for a tenant using a set of process variables and the business key. If the start event has Form Field Metadata defined, the process engine will perform backend validation for any form fields which have validators defined. See [Documentation on Generated Task Forms](https://docs.camunda.org/manual/7.17/user-guide/task-forms/#generated-task-forms).
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition to submit the form for.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <param name="startProcessInstanceFormDto"> (optional)</param>
        /// <returns>ProcessInstanceDto</returns>
        public ProcessInstanceDto SubmitFormByKeyAndTenantId(string key, string tenantId, StartProcessInstanceFormDto startProcessInstanceFormDto = default(StartProcessInstanceFormDto))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<ProcessInstanceDto> localVarResponse = SubmitFormByKeyAndTenantIdWithHttpInfo(key, tenantId, startProcessInstanceFormDto);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Submit Start Form Starts the latest version of the process definition for a tenant using a set of process variables and the business key. If the start event has Form Field Metadata defined, the process engine will perform backend validation for any form fields which have validators defined. See [Documentation on Generated Task Forms](https://docs.camunda.org/manual/7.17/user-guide/task-forms/#generated-task-forms).
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition to submit the form for.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <param name="startProcessInstanceFormDto"> (optional)</param>
        /// <returns>ApiResponse of ProcessInstanceDto</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<ProcessInstanceDto> SubmitFormByKeyAndTenantIdWithHttpInfo(string key, string tenantId, StartProcessInstanceFormDto startProcessInstanceFormDto = default(StartProcessInstanceFormDto))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'key' when calling ProcessDefinitionApi->SubmitFormByKeyAndTenantId");

            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'tenantId' when calling ProcessDefinitionApi->SubmitFormByKeyAndTenantId");

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(key)); // path parameter
            localVarRequestOptions.PathParameters.Add("tenant-id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.Data = startProcessInstanceFormDto;


            // make the HTTP request
            var localVarResponse = this.Client.Post<ProcessInstanceDto>("/process-definition/key/{key}/tenant-id/{tenant-id}/submit-form", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubmitFormByKeyAndTenantId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Submit Start Form Starts the latest version of the process definition for a tenant using a set of process variables and the business key. If the start event has Form Field Metadata defined, the process engine will perform backend validation for any form fields which have validators defined. See [Documentation on Generated Task Forms](https://docs.camunda.org/manual/7.17/user-guide/task-forms/#generated-task-forms).
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition to submit the form for.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <param name="startProcessInstanceFormDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProcessInstanceDto</returns>
        public async System.Threading.Tasks.Task<ProcessInstanceDto> SubmitFormByKeyAndTenantIdAsync(string key, string tenantId, StartProcessInstanceFormDto startProcessInstanceFormDto = default(StartProcessInstanceFormDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<ProcessInstanceDto> localVarResponse = await SubmitFormByKeyAndTenantIdWithHttpInfoAsync(key, tenantId, startProcessInstanceFormDto, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Submit Start Form Starts the latest version of the process definition for a tenant using a set of process variables and the business key. If the start event has Form Field Metadata defined, the process engine will perform backend validation for any form fields which have validators defined. See [Documentation on Generated Task Forms](https://docs.camunda.org/manual/7.17/user-guide/task-forms/#generated-task-forms).
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition to submit the form for.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <param name="startProcessInstanceFormDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProcessInstanceDto)</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<ProcessInstanceDto>> SubmitFormByKeyAndTenantIdWithHttpInfoAsync(string key, string tenantId, StartProcessInstanceFormDto startProcessInstanceFormDto = default(StartProcessInstanceFormDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'key' when calling ProcessDefinitionApi->SubmitFormByKeyAndTenantId");

            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'tenantId' when calling ProcessDefinitionApi->SubmitFormByKeyAndTenantId");


            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(key)); // path parameter
            localVarRequestOptions.PathParameters.Add("tenant-id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.Data = startProcessInstanceFormDto;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<ProcessInstanceDto>("/process-definition/key/{key}/tenant-id/{tenant-id}/submit-form", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubmitFormByKeyAndTenantId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update History Time to Live Updates history time to live for process definition. The field is used within [History cleanup](https://docs.camunda.org/manual/7.17/user-guide/process-engine/history/#history-cleanup).
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition to change history time to live.</param>
        /// <param name="historyTimeToLiveDto"> (optional)</param>
        /// <returns></returns>
        public void UpdateHistoryTimeToLiveByProcessDefinitionId(string id, HistoryTimeToLiveDto historyTimeToLiveDto = default(HistoryTimeToLiveDto))
        {
            UpdateHistoryTimeToLiveByProcessDefinitionIdWithHttpInfo(id, historyTimeToLiveDto);
        }

        /// <summary>
        /// Update History Time to Live Updates history time to live for process definition. The field is used within [History cleanup](https://docs.camunda.org/manual/7.17/user-guide/process-engine/history/#history-cleanup).
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition to change history time to live.</param>
        /// <param name="historyTimeToLiveDto"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<Object> UpdateHistoryTimeToLiveByProcessDefinitionIdWithHttpInfo(string id, HistoryTimeToLiveDto historyTimeToLiveDto = default(HistoryTimeToLiveDto))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling ProcessDefinitionApi->UpdateHistoryTimeToLiveByProcessDefinitionId");

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = historyTimeToLiveDto;


            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/process-definition/{id}/history-time-to-live", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateHistoryTimeToLiveByProcessDefinitionId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update History Time to Live Updates history time to live for process definition. The field is used within [History cleanup](https://docs.camunda.org/manual/7.17/user-guide/process-engine/history/#history-cleanup).
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition to change history time to live.</param>
        /// <param name="historyTimeToLiveDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateHistoryTimeToLiveByProcessDefinitionIdAsync(string id, HistoryTimeToLiveDto historyTimeToLiveDto = default(HistoryTimeToLiveDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await UpdateHistoryTimeToLiveByProcessDefinitionIdWithHttpInfoAsync(id, historyTimeToLiveDto, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Update History Time to Live Updates history time to live for process definition. The field is used within [History cleanup](https://docs.camunda.org/manual/7.17/user-guide/process-engine/history/#history-cleanup).
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition to change history time to live.</param>
        /// <param name="historyTimeToLiveDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<Object>> UpdateHistoryTimeToLiveByProcessDefinitionIdWithHttpInfoAsync(string id, HistoryTimeToLiveDto historyTimeToLiveDto = default(HistoryTimeToLiveDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling ProcessDefinitionApi->UpdateHistoryTimeToLiveByProcessDefinitionId");


            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = historyTimeToLiveDto;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/process-definition/{id}/history-time-to-live", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateHistoryTimeToLiveByProcessDefinitionId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update History Time to Live Updates history time to live for the latest version of the process definition which belongs to no tenant. The field is used within [History cleanup](https://docs.camunda.org/manual/7.17/user-guide/process-engine/history/#history-cleanup).
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition to change history time to live.</param>
        /// <param name="historyTimeToLiveDto"> (optional)</param>
        /// <returns></returns>
        public void UpdateHistoryTimeToLiveByProcessDefinitionKey(string key, HistoryTimeToLiveDto historyTimeToLiveDto = default(HistoryTimeToLiveDto))
        {
            UpdateHistoryTimeToLiveByProcessDefinitionKeyWithHttpInfo(key, historyTimeToLiveDto);
        }

        /// <summary>
        /// Update History Time to Live Updates history time to live for the latest version of the process definition which belongs to no tenant. The field is used within [History cleanup](https://docs.camunda.org/manual/7.17/user-guide/process-engine/history/#history-cleanup).
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition to change history time to live.</param>
        /// <param name="historyTimeToLiveDto"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<Object> UpdateHistoryTimeToLiveByProcessDefinitionKeyWithHttpInfo(string key, HistoryTimeToLiveDto historyTimeToLiveDto = default(HistoryTimeToLiveDto))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'key' when calling ProcessDefinitionApi->UpdateHistoryTimeToLiveByProcessDefinitionKey");

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(key)); // path parameter
            localVarRequestOptions.Data = historyTimeToLiveDto;


            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/process-definition/key/{key}/history-time-to-live", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateHistoryTimeToLiveByProcessDefinitionKey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update History Time to Live Updates history time to live for the latest version of the process definition which belongs to no tenant. The field is used within [History cleanup](https://docs.camunda.org/manual/7.17/user-guide/process-engine/history/#history-cleanup).
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition to change history time to live.</param>
        /// <param name="historyTimeToLiveDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateHistoryTimeToLiveByProcessDefinitionKeyAsync(string key, HistoryTimeToLiveDto historyTimeToLiveDto = default(HistoryTimeToLiveDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await UpdateHistoryTimeToLiveByProcessDefinitionKeyWithHttpInfoAsync(key, historyTimeToLiveDto, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Update History Time to Live Updates history time to live for the latest version of the process definition which belongs to no tenant. The field is used within [History cleanup](https://docs.camunda.org/manual/7.17/user-guide/process-engine/history/#history-cleanup).
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition to change history time to live.</param>
        /// <param name="historyTimeToLiveDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<Object>> UpdateHistoryTimeToLiveByProcessDefinitionKeyWithHttpInfoAsync(string key, HistoryTimeToLiveDto historyTimeToLiveDto = default(HistoryTimeToLiveDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'key' when calling ProcessDefinitionApi->UpdateHistoryTimeToLiveByProcessDefinitionKey");


            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(key)); // path parameter
            localVarRequestOptions.Data = historyTimeToLiveDto;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/process-definition/key/{key}/history-time-to-live", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateHistoryTimeToLiveByProcessDefinitionKey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update History Time to Live Updates history time to live for the latest version of the process definition for a tenant. The field is used within [History cleanup](https://docs.camunda.org/manual/7.17/user-guide/process-engine/history/#history-cleanup).
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition to change history time to live.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <param name="historyTimeToLiveDto"> (optional)</param>
        /// <returns></returns>
        public void UpdateHistoryTimeToLiveByProcessDefinitionKeyAndTenantId(string key, string tenantId, HistoryTimeToLiveDto historyTimeToLiveDto = default(HistoryTimeToLiveDto))
        {
            UpdateHistoryTimeToLiveByProcessDefinitionKeyAndTenantIdWithHttpInfo(key, tenantId, historyTimeToLiveDto);
        }

        /// <summary>
        /// Update History Time to Live Updates history time to live for the latest version of the process definition for a tenant. The field is used within [History cleanup](https://docs.camunda.org/manual/7.17/user-guide/process-engine/history/#history-cleanup).
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition to change history time to live.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <param name="historyTimeToLiveDto"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<Object> UpdateHistoryTimeToLiveByProcessDefinitionKeyAndTenantIdWithHttpInfo(string key, string tenantId, HistoryTimeToLiveDto historyTimeToLiveDto = default(HistoryTimeToLiveDto))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'key' when calling ProcessDefinitionApi->UpdateHistoryTimeToLiveByProcessDefinitionKeyAndTenantId");

            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'tenantId' when calling ProcessDefinitionApi->UpdateHistoryTimeToLiveByProcessDefinitionKeyAndTenantId");

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(key)); // path parameter
            localVarRequestOptions.PathParameters.Add("tenant-id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.Data = historyTimeToLiveDto;


            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/process-definition/key/{key}/tenant-id/{tenant-id}/history-time-to-live", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateHistoryTimeToLiveByProcessDefinitionKeyAndTenantId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update History Time to Live Updates history time to live for the latest version of the process definition for a tenant. The field is used within [History cleanup](https://docs.camunda.org/manual/7.17/user-guide/process-engine/history/#history-cleanup).
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition to change history time to live.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <param name="historyTimeToLiveDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateHistoryTimeToLiveByProcessDefinitionKeyAndTenantIdAsync(string key, string tenantId, HistoryTimeToLiveDto historyTimeToLiveDto = default(HistoryTimeToLiveDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await UpdateHistoryTimeToLiveByProcessDefinitionKeyAndTenantIdWithHttpInfoAsync(key, tenantId, historyTimeToLiveDto, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Update History Time to Live Updates history time to live for the latest version of the process definition for a tenant. The field is used within [History cleanup](https://docs.camunda.org/manual/7.17/user-guide/process-engine/history/#history-cleanup).
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition to change history time to live.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <param name="historyTimeToLiveDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<Object>> UpdateHistoryTimeToLiveByProcessDefinitionKeyAndTenantIdWithHttpInfoAsync(string key, string tenantId, HistoryTimeToLiveDto historyTimeToLiveDto = default(HistoryTimeToLiveDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'key' when calling ProcessDefinitionApi->UpdateHistoryTimeToLiveByProcessDefinitionKeyAndTenantId");

            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'tenantId' when calling ProcessDefinitionApi->UpdateHistoryTimeToLiveByProcessDefinitionKeyAndTenantId");


            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(key)); // path parameter
            localVarRequestOptions.PathParameters.Add("tenant-id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.Data = historyTimeToLiveDto;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/process-definition/key/{key}/tenant-id/{tenant-id}/history-time-to-live", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateHistoryTimeToLiveByProcessDefinitionKeyAndTenantId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Activate/Suspend By Key Activates or suspends process definitions with the given process definition key.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDefinitionSuspensionStateDto">**Note**: Unallowed property is &#x60;processDefinitionId&#x60;. (optional)</param>
        /// <returns></returns>
        public void UpdateProcessDefinitionSuspensionState(ProcessDefinitionSuspensionStateDto processDefinitionSuspensionStateDto = default(ProcessDefinitionSuspensionStateDto))
        {
            UpdateProcessDefinitionSuspensionStateWithHttpInfo(processDefinitionSuspensionStateDto);
        }

        /// <summary>
        /// Activate/Suspend By Key Activates or suspends process definitions with the given process definition key.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDefinitionSuspensionStateDto">**Note**: Unallowed property is &#x60;processDefinitionId&#x60;. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<Object> UpdateProcessDefinitionSuspensionStateWithHttpInfo(ProcessDefinitionSuspensionStateDto processDefinitionSuspensionStateDto = default(ProcessDefinitionSuspensionStateDto))
        {
            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = processDefinitionSuspensionStateDto;


            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/process-definition/suspended", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateProcessDefinitionSuspensionState", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Activate/Suspend By Key Activates or suspends process definitions with the given process definition key.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDefinitionSuspensionStateDto">**Note**: Unallowed property is &#x60;processDefinitionId&#x60;. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateProcessDefinitionSuspensionStateAsync(ProcessDefinitionSuspensionStateDto processDefinitionSuspensionStateDto = default(ProcessDefinitionSuspensionStateDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await UpdateProcessDefinitionSuspensionStateWithHttpInfoAsync(processDefinitionSuspensionStateDto, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Activate/Suspend By Key Activates or suspends process definitions with the given process definition key.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDefinitionSuspensionStateDto">**Note**: Unallowed property is &#x60;processDefinitionId&#x60;. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<Object>> UpdateProcessDefinitionSuspensionStateWithHttpInfoAsync(ProcessDefinitionSuspensionStateDto processDefinitionSuspensionStateDto = default(ProcessDefinitionSuspensionStateDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = processDefinitionSuspensionStateDto;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/process-definition/suspended", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateProcessDefinitionSuspensionState", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Activate/Suspend By Id Activates or suspends a given process definition by id.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition to activate or suspend.</param>
        /// <param name="processDefinitionSuspensionStateDto">**Note**: Unallowed properties are &#x60;processDefinitionId&#x60; and &#x60;processDefinitionKey&#x60;. (optional)</param>
        /// <returns></returns>
        public void UpdateProcessDefinitionSuspensionStateById(string id, ProcessDefinitionSuspensionStateDto processDefinitionSuspensionStateDto = default(ProcessDefinitionSuspensionStateDto))
        {
            UpdateProcessDefinitionSuspensionStateByIdWithHttpInfo(id, processDefinitionSuspensionStateDto);
        }

        /// <summary>
        /// Activate/Suspend By Id Activates or suspends a given process definition by id.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition to activate or suspend.</param>
        /// <param name="processDefinitionSuspensionStateDto">**Note**: Unallowed properties are &#x60;processDefinitionId&#x60; and &#x60;processDefinitionKey&#x60;. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<Object> UpdateProcessDefinitionSuspensionStateByIdWithHttpInfo(string id, ProcessDefinitionSuspensionStateDto processDefinitionSuspensionStateDto = default(ProcessDefinitionSuspensionStateDto))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling ProcessDefinitionApi->UpdateProcessDefinitionSuspensionStateById");

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = processDefinitionSuspensionStateDto;


            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/process-definition/{id}/suspended", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateProcessDefinitionSuspensionStateById", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Activate/Suspend By Id Activates or suspends a given process definition by id.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition to activate or suspend.</param>
        /// <param name="processDefinitionSuspensionStateDto">**Note**: Unallowed properties are &#x60;processDefinitionId&#x60; and &#x60;processDefinitionKey&#x60;. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateProcessDefinitionSuspensionStateByIdAsync(string id, ProcessDefinitionSuspensionStateDto processDefinitionSuspensionStateDto = default(ProcessDefinitionSuspensionStateDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await UpdateProcessDefinitionSuspensionStateByIdWithHttpInfoAsync(id, processDefinitionSuspensionStateDto, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Activate/Suspend By Id Activates or suspends a given process definition by id.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition to activate or suspend.</param>
        /// <param name="processDefinitionSuspensionStateDto">**Note**: Unallowed properties are &#x60;processDefinitionId&#x60; and &#x60;processDefinitionKey&#x60;. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<Object>> UpdateProcessDefinitionSuspensionStateByIdWithHttpInfoAsync(string id, ProcessDefinitionSuspensionStateDto processDefinitionSuspensionStateDto = default(ProcessDefinitionSuspensionStateDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling ProcessDefinitionApi->UpdateProcessDefinitionSuspensionStateById");


            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = processDefinitionSuspensionStateDto;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/process-definition/{id}/suspended", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateProcessDefinitionSuspensionStateById", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Activate/Suspend by Id Activates or suspends a given process definition by latest version of process definition key which belongs to no tenant.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be activated/suspended.</param>
        /// <param name="processDefinitionSuspensionStateDto">**Note**: Unallowed properties are &#x60;processDefinitionId&#x60; and &#x60;processDefinitionKey&#x60;. (optional)</param>
        /// <returns></returns>
        public void UpdateProcessDefinitionSuspensionStateByKey(string key, ProcessDefinitionSuspensionStateDto processDefinitionSuspensionStateDto = default(ProcessDefinitionSuspensionStateDto))
        {
            UpdateProcessDefinitionSuspensionStateByKeyWithHttpInfo(key, processDefinitionSuspensionStateDto);
        }

        /// <summary>
        /// Activate/Suspend by Id Activates or suspends a given process definition by latest version of process definition key which belongs to no tenant.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be activated/suspended.</param>
        /// <param name="processDefinitionSuspensionStateDto">**Note**: Unallowed properties are &#x60;processDefinitionId&#x60; and &#x60;processDefinitionKey&#x60;. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<Object> UpdateProcessDefinitionSuspensionStateByKeyWithHttpInfo(string key, ProcessDefinitionSuspensionStateDto processDefinitionSuspensionStateDto = default(ProcessDefinitionSuspensionStateDto))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'key' when calling ProcessDefinitionApi->UpdateProcessDefinitionSuspensionStateByKey");

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(key)); // path parameter
            localVarRequestOptions.Data = processDefinitionSuspensionStateDto;


            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/process-definition/key/{key}/suspended", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateProcessDefinitionSuspensionStateByKey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Activate/Suspend by Id Activates or suspends a given process definition by latest version of process definition key which belongs to no tenant.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be activated/suspended.</param>
        /// <param name="processDefinitionSuspensionStateDto">**Note**: Unallowed properties are &#x60;processDefinitionId&#x60; and &#x60;processDefinitionKey&#x60;. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateProcessDefinitionSuspensionStateByKeyAsync(string key, ProcessDefinitionSuspensionStateDto processDefinitionSuspensionStateDto = default(ProcessDefinitionSuspensionStateDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await UpdateProcessDefinitionSuspensionStateByKeyWithHttpInfoAsync(key, processDefinitionSuspensionStateDto, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Activate/Suspend by Id Activates or suspends a given process definition by latest version of process definition key which belongs to no tenant.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be activated/suspended.</param>
        /// <param name="processDefinitionSuspensionStateDto">**Note**: Unallowed properties are &#x60;processDefinitionId&#x60; and &#x60;processDefinitionKey&#x60;. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<Object>> UpdateProcessDefinitionSuspensionStateByKeyWithHttpInfoAsync(string key, ProcessDefinitionSuspensionStateDto processDefinitionSuspensionStateDto = default(ProcessDefinitionSuspensionStateDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'key' when calling ProcessDefinitionApi->UpdateProcessDefinitionSuspensionStateByKey");


            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(key)); // path parameter
            localVarRequestOptions.Data = processDefinitionSuspensionStateDto;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/process-definition/key/{key}/suspended", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateProcessDefinitionSuspensionStateByKey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Activate/Suspend by Id Activates or suspends a given process definition by the latest version of the process definition for tenant.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be activated/suspended.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <param name="processDefinitionSuspensionStateDto">**Note**: Unallowed properties are &#x60;processDefinitionId&#x60; and &#x60;processDefinitionKey&#x60;. (optional)</param>
        /// <returns></returns>
        public void UpdateProcessDefinitionSuspensionStateByKeyAndTenantId(string key, string tenantId, ProcessDefinitionSuspensionStateDto processDefinitionSuspensionStateDto = default(ProcessDefinitionSuspensionStateDto))
        {
            UpdateProcessDefinitionSuspensionStateByKeyAndTenantIdWithHttpInfo(key, tenantId, processDefinitionSuspensionStateDto);
        }

        /// <summary>
        /// Activate/Suspend by Id Activates or suspends a given process definition by the latest version of the process definition for tenant.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be activated/suspended.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <param name="processDefinitionSuspensionStateDto">**Note**: Unallowed properties are &#x60;processDefinitionId&#x60; and &#x60;processDefinitionKey&#x60;. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<Object> UpdateProcessDefinitionSuspensionStateByKeyAndTenantIdWithHttpInfo(string key, string tenantId, ProcessDefinitionSuspensionStateDto processDefinitionSuspensionStateDto = default(ProcessDefinitionSuspensionStateDto))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'key' when calling ProcessDefinitionApi->UpdateProcessDefinitionSuspensionStateByKeyAndTenantId");

            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'tenantId' when calling ProcessDefinitionApi->UpdateProcessDefinitionSuspensionStateByKeyAndTenantId");

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(key)); // path parameter
            localVarRequestOptions.PathParameters.Add("tenant-id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.Data = processDefinitionSuspensionStateDto;


            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/process-definition/key/{key}/tenant-id/{tenant-id}/suspended", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateProcessDefinitionSuspensionStateByKeyAndTenantId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Activate/Suspend by Id Activates or suspends a given process definition by the latest version of the process definition for tenant.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be activated/suspended.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <param name="processDefinitionSuspensionStateDto">**Note**: Unallowed properties are &#x60;processDefinitionId&#x60; and &#x60;processDefinitionKey&#x60;. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateProcessDefinitionSuspensionStateByKeyAndTenantIdAsync(string key, string tenantId, ProcessDefinitionSuspensionStateDto processDefinitionSuspensionStateDto = default(ProcessDefinitionSuspensionStateDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await UpdateProcessDefinitionSuspensionStateByKeyAndTenantIdWithHttpInfoAsync(key, tenantId, processDefinitionSuspensionStateDto, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Activate/Suspend by Id Activates or suspends a given process definition by the latest version of the process definition for tenant.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the process definition (the latest version thereof) to be activated/suspended.</param>
        /// <param name="tenantId">The id of the tenant the process definition belongs to.</param>
        /// <param name="processDefinitionSuspensionStateDto">**Note**: Unallowed properties are &#x60;processDefinitionId&#x60; and &#x60;processDefinitionKey&#x60;. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<Object>> UpdateProcessDefinitionSuspensionStateByKeyAndTenantIdWithHttpInfoAsync(string key, string tenantId, ProcessDefinitionSuspensionStateDto processDefinitionSuspensionStateDto = default(ProcessDefinitionSuspensionStateDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'key' when calling ProcessDefinitionApi->UpdateProcessDefinitionSuspensionStateByKeyAndTenantId");

            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'tenantId' when calling ProcessDefinitionApi->UpdateProcessDefinitionSuspensionStateByKeyAndTenantId");


            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(key)); // path parameter
            localVarRequestOptions.PathParameters.Add("tenant-id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.Data = processDefinitionSuspensionStateDto;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/process-definition/key/{key}/tenant-id/{tenant-id}/suspended", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateProcessDefinitionSuspensionStateByKeyAndTenantId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
