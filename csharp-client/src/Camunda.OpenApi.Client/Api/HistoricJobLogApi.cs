/*
 * Camunda Platform REST API
 *
 * OpenApi Spec for Camunda Platform REST API.
 *
 * The version of the OpenAPI document: 7.17.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using Camunda.OpenApi.Client.Client;
using Camunda.OpenApi.Client.Model;

namespace Camunda.OpenApi.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IHistoricJobLogApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get Job Log
        /// </summary>
        /// <remarks>
        /// Retrieves a historic job log by id.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the log entry.</param>
        /// <returns>HistoricJobLogDto</returns>
        HistoricJobLogDto GetHistoricJobLog(string id);

        /// <summary>
        /// Get Job Log
        /// </summary>
        /// <remarks>
        /// Retrieves a historic job log by id.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the log entry.</param>
        /// <returns>ApiResponse of HistoricJobLogDto</returns>
        ApiResponse<HistoricJobLogDto> GetHistoricJobLogWithHttpInfo(string id);
        /// <summary>
        /// Get Job Logs
        /// </summary>
        /// <remarks>
        /// Queries for historic job logs that fulfill the given parameters. The size of the result set can be retrieved by using the [Get Job Log Count](https://docs.camunda.org/manual/7.17/reference/rest/history/job-log/get-job-log-query-count/) method.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logId">Filter by historic job log id. (optional)</param>
        /// <param name="jobId">Filter by job id. (optional)</param>
        /// <param name="jobExceptionMessage">Filter by job exception message. (optional)</param>
        /// <param name="jobDefinitionId">Filter by job definition id. (optional)</param>
        /// <param name="jobDefinitionType">Filter by job definition type. See the [User Guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/the-job-executor/#job-creation) for more information about job definition types. (optional)</param>
        /// <param name="jobDefinitionConfiguration">Filter by job definition configuration. (optional)</param>
        /// <param name="activityIdIn">Only include historic job logs which belong to one of the passed activity ids. (optional)</param>
        /// <param name="failedActivityIdIn">Only include historic job logs which belong to failures of one of the passed activity ids. (optional)</param>
        /// <param name="executionIdIn">Only include historic job logs which belong to one of the passed execution ids. (optional)</param>
        /// <param name="processInstanceId">Filter by process instance id. (optional)</param>
        /// <param name="processDefinitionId">Filter by process definition id. (optional)</param>
        /// <param name="processDefinitionKey">Filter by process definition key. (optional)</param>
        /// <param name="deploymentId">Filter by deployment id. (optional)</param>
        /// <param name="tenantIdIn">Only include historic job log entries which belong to one of the passed and comma- separated tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include historic job log entries that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="hostname">Filter by hostname. (optional)</param>
        /// <param name="jobPriorityLowerThanOrEquals">Only include logs for which the associated job had a priority lower than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)</param>
        /// <param name="jobPriorityHigherThanOrEquals">Only include logs for which the associated job had a priority higher than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)</param>
        /// <param name="creationLog">Only include creation logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="failureLog">Only include failure logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="successLog">Only include success logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="deletionLog">Only include deletion logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <returns>List&lt;HistoricJobLogDto&gt;</returns>
        List<HistoricJobLogDto> GetHistoricJobLogs(string logId = default(string), string jobId = default(string), string jobExceptionMessage = default(string), string jobDefinitionId = default(string), string jobDefinitionType = default(string), string jobDefinitionConfiguration = default(string), string activityIdIn = default(string), string failedActivityIdIn = default(string), string executionIdIn = default(string), string processInstanceId = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string deploymentId = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), string hostname = default(string), long? jobPriorityLowerThanOrEquals = default(long?), long? jobPriorityHigherThanOrEquals = default(long?), bool? creationLog = default(bool?), bool? failureLog = default(bool?), bool? successLog = default(bool?), bool? deletionLog = default(bool?), string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?));

        /// <summary>
        /// Get Job Logs
        /// </summary>
        /// <remarks>
        /// Queries for historic job logs that fulfill the given parameters. The size of the result set can be retrieved by using the [Get Job Log Count](https://docs.camunda.org/manual/7.17/reference/rest/history/job-log/get-job-log-query-count/) method.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logId">Filter by historic job log id. (optional)</param>
        /// <param name="jobId">Filter by job id. (optional)</param>
        /// <param name="jobExceptionMessage">Filter by job exception message. (optional)</param>
        /// <param name="jobDefinitionId">Filter by job definition id. (optional)</param>
        /// <param name="jobDefinitionType">Filter by job definition type. See the [User Guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/the-job-executor/#job-creation) for more information about job definition types. (optional)</param>
        /// <param name="jobDefinitionConfiguration">Filter by job definition configuration. (optional)</param>
        /// <param name="activityIdIn">Only include historic job logs which belong to one of the passed activity ids. (optional)</param>
        /// <param name="failedActivityIdIn">Only include historic job logs which belong to failures of one of the passed activity ids. (optional)</param>
        /// <param name="executionIdIn">Only include historic job logs which belong to one of the passed execution ids. (optional)</param>
        /// <param name="processInstanceId">Filter by process instance id. (optional)</param>
        /// <param name="processDefinitionId">Filter by process definition id. (optional)</param>
        /// <param name="processDefinitionKey">Filter by process definition key. (optional)</param>
        /// <param name="deploymentId">Filter by deployment id. (optional)</param>
        /// <param name="tenantIdIn">Only include historic job log entries which belong to one of the passed and comma- separated tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include historic job log entries that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="hostname">Filter by hostname. (optional)</param>
        /// <param name="jobPriorityLowerThanOrEquals">Only include logs for which the associated job had a priority lower than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)</param>
        /// <param name="jobPriorityHigherThanOrEquals">Only include logs for which the associated job had a priority higher than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)</param>
        /// <param name="creationLog">Only include creation logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="failureLog">Only include failure logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="successLog">Only include success logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="deletionLog">Only include deletion logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <returns>ApiResponse of List&lt;HistoricJobLogDto&gt;</returns>
        ApiResponse<List<HistoricJobLogDto>> GetHistoricJobLogsWithHttpInfo(string logId = default(string), string jobId = default(string), string jobExceptionMessage = default(string), string jobDefinitionId = default(string), string jobDefinitionType = default(string), string jobDefinitionConfiguration = default(string), string activityIdIn = default(string), string failedActivityIdIn = default(string), string executionIdIn = default(string), string processInstanceId = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string deploymentId = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), string hostname = default(string), long? jobPriorityLowerThanOrEquals = default(long?), long? jobPriorityHigherThanOrEquals = default(long?), bool? creationLog = default(bool?), bool? failureLog = default(bool?), bool? successLog = default(bool?), bool? deletionLog = default(bool?), string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?));
        /// <summary>
        /// Get Job Log Count
        /// </summary>
        /// <remarks>
        /// Queries for the number of historic job logs that fulfill the given parameters. Takes the same parameters as the [Get Job Logs](https://docs.camunda.org/manual/7.17/reference/rest/history/job-log/get-job-log-query/) method.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logId">Filter by historic job log id. (optional)</param>
        /// <param name="jobId">Filter by job id. (optional)</param>
        /// <param name="jobExceptionMessage">Filter by job exception message. (optional)</param>
        /// <param name="jobDefinitionId">Filter by job definition id. (optional)</param>
        /// <param name="jobDefinitionType">Filter by job definition type. See the [User Guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/the-job-executor/#job-creation) for more information about job definition types. (optional)</param>
        /// <param name="jobDefinitionConfiguration">Filter by job definition configuration. (optional)</param>
        /// <param name="activityIdIn">Only include historic job logs which belong to one of the passed activity ids. (optional)</param>
        /// <param name="failedActivityIdIn">Only include historic job logs which belong to failures of one of the passed activity ids. (optional)</param>
        /// <param name="executionIdIn">Only include historic job logs which belong to one of the passed execution ids. (optional)</param>
        /// <param name="processInstanceId">Filter by process instance id. (optional)</param>
        /// <param name="processDefinitionId">Filter by process definition id. (optional)</param>
        /// <param name="processDefinitionKey">Filter by process definition key. (optional)</param>
        /// <param name="deploymentId">Filter by deployment id. (optional)</param>
        /// <param name="tenantIdIn">Only include historic job log entries which belong to one of the passed and comma- separated tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include historic job log entries that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="hostname">Filter by hostname. (optional)</param>
        /// <param name="jobPriorityLowerThanOrEquals">Only include logs for which the associated job had a priority lower than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)</param>
        /// <param name="jobPriorityHigherThanOrEquals">Only include logs for which the associated job had a priority higher than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)</param>
        /// <param name="creationLog">Only include creation logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="failureLog">Only include failure logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="successLog">Only include success logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="deletionLog">Only include deletion logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <returns>CountResultDto</returns>
        CountResultDto GetHistoricJobLogsCount(string logId = default(string), string jobId = default(string), string jobExceptionMessage = default(string), string jobDefinitionId = default(string), string jobDefinitionType = default(string), string jobDefinitionConfiguration = default(string), string activityIdIn = default(string), string failedActivityIdIn = default(string), string executionIdIn = default(string), string processInstanceId = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string deploymentId = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), string hostname = default(string), long? jobPriorityLowerThanOrEquals = default(long?), long? jobPriorityHigherThanOrEquals = default(long?), bool? creationLog = default(bool?), bool? failureLog = default(bool?), bool? successLog = default(bool?), bool? deletionLog = default(bool?));

        /// <summary>
        /// Get Job Log Count
        /// </summary>
        /// <remarks>
        /// Queries for the number of historic job logs that fulfill the given parameters. Takes the same parameters as the [Get Job Logs](https://docs.camunda.org/manual/7.17/reference/rest/history/job-log/get-job-log-query/) method.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logId">Filter by historic job log id. (optional)</param>
        /// <param name="jobId">Filter by job id. (optional)</param>
        /// <param name="jobExceptionMessage">Filter by job exception message. (optional)</param>
        /// <param name="jobDefinitionId">Filter by job definition id. (optional)</param>
        /// <param name="jobDefinitionType">Filter by job definition type. See the [User Guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/the-job-executor/#job-creation) for more information about job definition types. (optional)</param>
        /// <param name="jobDefinitionConfiguration">Filter by job definition configuration. (optional)</param>
        /// <param name="activityIdIn">Only include historic job logs which belong to one of the passed activity ids. (optional)</param>
        /// <param name="failedActivityIdIn">Only include historic job logs which belong to failures of one of the passed activity ids. (optional)</param>
        /// <param name="executionIdIn">Only include historic job logs which belong to one of the passed execution ids. (optional)</param>
        /// <param name="processInstanceId">Filter by process instance id. (optional)</param>
        /// <param name="processDefinitionId">Filter by process definition id. (optional)</param>
        /// <param name="processDefinitionKey">Filter by process definition key. (optional)</param>
        /// <param name="deploymentId">Filter by deployment id. (optional)</param>
        /// <param name="tenantIdIn">Only include historic job log entries which belong to one of the passed and comma- separated tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include historic job log entries that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="hostname">Filter by hostname. (optional)</param>
        /// <param name="jobPriorityLowerThanOrEquals">Only include logs for which the associated job had a priority lower than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)</param>
        /// <param name="jobPriorityHigherThanOrEquals">Only include logs for which the associated job had a priority higher than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)</param>
        /// <param name="creationLog">Only include creation logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="failureLog">Only include failure logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="successLog">Only include success logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="deletionLog">Only include deletion logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <returns>ApiResponse of CountResultDto</returns>
        ApiResponse<CountResultDto> GetHistoricJobLogsCountWithHttpInfo(string logId = default(string), string jobId = default(string), string jobExceptionMessage = default(string), string jobDefinitionId = default(string), string jobDefinitionType = default(string), string jobDefinitionConfiguration = default(string), string activityIdIn = default(string), string failedActivityIdIn = default(string), string executionIdIn = default(string), string processInstanceId = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string deploymentId = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), string hostname = default(string), long? jobPriorityLowerThanOrEquals = default(long?), long? jobPriorityHigherThanOrEquals = default(long?), bool? creationLog = default(bool?), bool? failureLog = default(bool?), bool? successLog = default(bool?), bool? deletionLog = default(bool?));
        /// <summary>
        /// Get Job Log Exception Stacktrace
        /// </summary>
        /// <remarks>
        /// Retrieves the corresponding exception stacktrace to the passed historic job log by id.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the historic job log to get the exception stacktrace for.</param>
        /// <returns>Object</returns>
        Object GetStacktraceHistoricJobLog(string id);

        /// <summary>
        /// Get Job Log Exception Stacktrace
        /// </summary>
        /// <remarks>
        /// Retrieves the corresponding exception stacktrace to the passed historic job log by id.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the historic job log to get the exception stacktrace for.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GetStacktraceHistoricJobLogWithHttpInfo(string id);
        /// <summary>
        /// Get Job Logs (POST)
        /// </summary>
        /// <remarks>
        /// Queries for historic job logs that fulfill the given parameters. This method is slightly more powerful than the [Get Job Logs](https://docs.camunda.org/manual/7.17/reference/rest/history/job-log/get-job-log-query/) method because it allows filtering by historic job logs values of the different types &#x60;String&#x60;, &#x60;Number&#x60; or &#x60;Boolean&#x60;.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="historicJobLogQueryDto"> (optional)</param>
        /// <returns>List&lt;HistoricJobLogDto&gt;</returns>
        List<HistoricJobLogDto> QueryHistoricJobLogs(int? firstResult = default(int?), int? maxResults = default(int?), HistoricJobLogQueryDto historicJobLogQueryDto = default(HistoricJobLogQueryDto));

        /// <summary>
        /// Get Job Logs (POST)
        /// </summary>
        /// <remarks>
        /// Queries for historic job logs that fulfill the given parameters. This method is slightly more powerful than the [Get Job Logs](https://docs.camunda.org/manual/7.17/reference/rest/history/job-log/get-job-log-query/) method because it allows filtering by historic job logs values of the different types &#x60;String&#x60;, &#x60;Number&#x60; or &#x60;Boolean&#x60;.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="historicJobLogQueryDto"> (optional)</param>
        /// <returns>ApiResponse of List&lt;HistoricJobLogDto&gt;</returns>
        ApiResponse<List<HistoricJobLogDto>> QueryHistoricJobLogsWithHttpInfo(int? firstResult = default(int?), int? maxResults = default(int?), HistoricJobLogQueryDto historicJobLogQueryDto = default(HistoricJobLogQueryDto));
        /// <summary>
        /// Get Job Log Count (POST)
        /// </summary>
        /// <remarks>
        /// Queries for the number of historic job logs that fulfill the given parameters. This method takes the same message body as the [Get Job Logs (POST)](https://docs.camunda.org/manual/7.17/reference/rest/history/job-log/post-job-log-query/) method and therefore it is slightly more powerful than the [Get Job Log Count](https://docs.camunda.org/manual/7.17/reference/rest/history/job-log/get-job-log-query-count/) method.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="historicJobLogQueryDto"> (optional)</param>
        /// <returns>CountResultDto</returns>
        CountResultDto QueryHistoricJobLogsCount(HistoricJobLogQueryDto historicJobLogQueryDto = default(HistoricJobLogQueryDto));

        /// <summary>
        /// Get Job Log Count (POST)
        /// </summary>
        /// <remarks>
        /// Queries for the number of historic job logs that fulfill the given parameters. This method takes the same message body as the [Get Job Logs (POST)](https://docs.camunda.org/manual/7.17/reference/rest/history/job-log/post-job-log-query/) method and therefore it is slightly more powerful than the [Get Job Log Count](https://docs.camunda.org/manual/7.17/reference/rest/history/job-log/get-job-log-query-count/) method.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="historicJobLogQueryDto"> (optional)</param>
        /// <returns>ApiResponse of CountResultDto</returns>
        ApiResponse<CountResultDto> QueryHistoricJobLogsCountWithHttpInfo(HistoricJobLogQueryDto historicJobLogQueryDto = default(HistoricJobLogQueryDto));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IHistoricJobLogApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get Job Log
        /// </summary>
        /// <remarks>
        /// Retrieves a historic job log by id.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the log entry.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HistoricJobLogDto</returns>
        System.Threading.Tasks.Task<HistoricJobLogDto> GetHistoricJobLogAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Job Log
        /// </summary>
        /// <remarks>
        /// Retrieves a historic job log by id.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the log entry.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HistoricJobLogDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<HistoricJobLogDto>> GetHistoricJobLogWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Job Logs
        /// </summary>
        /// <remarks>
        /// Queries for historic job logs that fulfill the given parameters. The size of the result set can be retrieved by using the [Get Job Log Count](https://docs.camunda.org/manual/7.17/reference/rest/history/job-log/get-job-log-query-count/) method.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logId">Filter by historic job log id. (optional)</param>
        /// <param name="jobId">Filter by job id. (optional)</param>
        /// <param name="jobExceptionMessage">Filter by job exception message. (optional)</param>
        /// <param name="jobDefinitionId">Filter by job definition id. (optional)</param>
        /// <param name="jobDefinitionType">Filter by job definition type. See the [User Guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/the-job-executor/#job-creation) for more information about job definition types. (optional)</param>
        /// <param name="jobDefinitionConfiguration">Filter by job definition configuration. (optional)</param>
        /// <param name="activityIdIn">Only include historic job logs which belong to one of the passed activity ids. (optional)</param>
        /// <param name="failedActivityIdIn">Only include historic job logs which belong to failures of one of the passed activity ids. (optional)</param>
        /// <param name="executionIdIn">Only include historic job logs which belong to one of the passed execution ids. (optional)</param>
        /// <param name="processInstanceId">Filter by process instance id. (optional)</param>
        /// <param name="processDefinitionId">Filter by process definition id. (optional)</param>
        /// <param name="processDefinitionKey">Filter by process definition key. (optional)</param>
        /// <param name="deploymentId">Filter by deployment id. (optional)</param>
        /// <param name="tenantIdIn">Only include historic job log entries which belong to one of the passed and comma- separated tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include historic job log entries that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="hostname">Filter by hostname. (optional)</param>
        /// <param name="jobPriorityLowerThanOrEquals">Only include logs for which the associated job had a priority lower than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)</param>
        /// <param name="jobPriorityHigherThanOrEquals">Only include logs for which the associated job had a priority higher than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)</param>
        /// <param name="creationLog">Only include creation logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="failureLog">Only include failure logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="successLog">Only include success logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="deletionLog">Only include deletion logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;HistoricJobLogDto&gt;</returns>
        System.Threading.Tasks.Task<List<HistoricJobLogDto>> GetHistoricJobLogsAsync(string logId = default(string), string jobId = default(string), string jobExceptionMessage = default(string), string jobDefinitionId = default(string), string jobDefinitionType = default(string), string jobDefinitionConfiguration = default(string), string activityIdIn = default(string), string failedActivityIdIn = default(string), string executionIdIn = default(string), string processInstanceId = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string deploymentId = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), string hostname = default(string), long? jobPriorityLowerThanOrEquals = default(long?), long? jobPriorityHigherThanOrEquals = default(long?), bool? creationLog = default(bool?), bool? failureLog = default(bool?), bool? successLog = default(bool?), bool? deletionLog = default(bool?), string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Job Logs
        /// </summary>
        /// <remarks>
        /// Queries for historic job logs that fulfill the given parameters. The size of the result set can be retrieved by using the [Get Job Log Count](https://docs.camunda.org/manual/7.17/reference/rest/history/job-log/get-job-log-query-count/) method.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logId">Filter by historic job log id. (optional)</param>
        /// <param name="jobId">Filter by job id. (optional)</param>
        /// <param name="jobExceptionMessage">Filter by job exception message. (optional)</param>
        /// <param name="jobDefinitionId">Filter by job definition id. (optional)</param>
        /// <param name="jobDefinitionType">Filter by job definition type. See the [User Guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/the-job-executor/#job-creation) for more information about job definition types. (optional)</param>
        /// <param name="jobDefinitionConfiguration">Filter by job definition configuration. (optional)</param>
        /// <param name="activityIdIn">Only include historic job logs which belong to one of the passed activity ids. (optional)</param>
        /// <param name="failedActivityIdIn">Only include historic job logs which belong to failures of one of the passed activity ids. (optional)</param>
        /// <param name="executionIdIn">Only include historic job logs which belong to one of the passed execution ids. (optional)</param>
        /// <param name="processInstanceId">Filter by process instance id. (optional)</param>
        /// <param name="processDefinitionId">Filter by process definition id. (optional)</param>
        /// <param name="processDefinitionKey">Filter by process definition key. (optional)</param>
        /// <param name="deploymentId">Filter by deployment id. (optional)</param>
        /// <param name="tenantIdIn">Only include historic job log entries which belong to one of the passed and comma- separated tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include historic job log entries that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="hostname">Filter by hostname. (optional)</param>
        /// <param name="jobPriorityLowerThanOrEquals">Only include logs for which the associated job had a priority lower than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)</param>
        /// <param name="jobPriorityHigherThanOrEquals">Only include logs for which the associated job had a priority higher than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)</param>
        /// <param name="creationLog">Only include creation logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="failureLog">Only include failure logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="successLog">Only include success logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="deletionLog">Only include deletion logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;HistoricJobLogDto&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<HistoricJobLogDto>>> GetHistoricJobLogsWithHttpInfoAsync(string logId = default(string), string jobId = default(string), string jobExceptionMessage = default(string), string jobDefinitionId = default(string), string jobDefinitionType = default(string), string jobDefinitionConfiguration = default(string), string activityIdIn = default(string), string failedActivityIdIn = default(string), string executionIdIn = default(string), string processInstanceId = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string deploymentId = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), string hostname = default(string), long? jobPriorityLowerThanOrEquals = default(long?), long? jobPriorityHigherThanOrEquals = default(long?), bool? creationLog = default(bool?), bool? failureLog = default(bool?), bool? successLog = default(bool?), bool? deletionLog = default(bool?), string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Job Log Count
        /// </summary>
        /// <remarks>
        /// Queries for the number of historic job logs that fulfill the given parameters. Takes the same parameters as the [Get Job Logs](https://docs.camunda.org/manual/7.17/reference/rest/history/job-log/get-job-log-query/) method.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logId">Filter by historic job log id. (optional)</param>
        /// <param name="jobId">Filter by job id. (optional)</param>
        /// <param name="jobExceptionMessage">Filter by job exception message. (optional)</param>
        /// <param name="jobDefinitionId">Filter by job definition id. (optional)</param>
        /// <param name="jobDefinitionType">Filter by job definition type. See the [User Guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/the-job-executor/#job-creation) for more information about job definition types. (optional)</param>
        /// <param name="jobDefinitionConfiguration">Filter by job definition configuration. (optional)</param>
        /// <param name="activityIdIn">Only include historic job logs which belong to one of the passed activity ids. (optional)</param>
        /// <param name="failedActivityIdIn">Only include historic job logs which belong to failures of one of the passed activity ids. (optional)</param>
        /// <param name="executionIdIn">Only include historic job logs which belong to one of the passed execution ids. (optional)</param>
        /// <param name="processInstanceId">Filter by process instance id. (optional)</param>
        /// <param name="processDefinitionId">Filter by process definition id. (optional)</param>
        /// <param name="processDefinitionKey">Filter by process definition key. (optional)</param>
        /// <param name="deploymentId">Filter by deployment id. (optional)</param>
        /// <param name="tenantIdIn">Only include historic job log entries which belong to one of the passed and comma- separated tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include historic job log entries that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="hostname">Filter by hostname. (optional)</param>
        /// <param name="jobPriorityLowerThanOrEquals">Only include logs for which the associated job had a priority lower than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)</param>
        /// <param name="jobPriorityHigherThanOrEquals">Only include logs for which the associated job had a priority higher than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)</param>
        /// <param name="creationLog">Only include creation logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="failureLog">Only include failure logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="successLog">Only include success logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="deletionLog">Only include deletion logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CountResultDto</returns>
        System.Threading.Tasks.Task<CountResultDto> GetHistoricJobLogsCountAsync(string logId = default(string), string jobId = default(string), string jobExceptionMessage = default(string), string jobDefinitionId = default(string), string jobDefinitionType = default(string), string jobDefinitionConfiguration = default(string), string activityIdIn = default(string), string failedActivityIdIn = default(string), string executionIdIn = default(string), string processInstanceId = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string deploymentId = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), string hostname = default(string), long? jobPriorityLowerThanOrEquals = default(long?), long? jobPriorityHigherThanOrEquals = default(long?), bool? creationLog = default(bool?), bool? failureLog = default(bool?), bool? successLog = default(bool?), bool? deletionLog = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Job Log Count
        /// </summary>
        /// <remarks>
        /// Queries for the number of historic job logs that fulfill the given parameters. Takes the same parameters as the [Get Job Logs](https://docs.camunda.org/manual/7.17/reference/rest/history/job-log/get-job-log-query/) method.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logId">Filter by historic job log id. (optional)</param>
        /// <param name="jobId">Filter by job id. (optional)</param>
        /// <param name="jobExceptionMessage">Filter by job exception message. (optional)</param>
        /// <param name="jobDefinitionId">Filter by job definition id. (optional)</param>
        /// <param name="jobDefinitionType">Filter by job definition type. See the [User Guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/the-job-executor/#job-creation) for more information about job definition types. (optional)</param>
        /// <param name="jobDefinitionConfiguration">Filter by job definition configuration. (optional)</param>
        /// <param name="activityIdIn">Only include historic job logs which belong to one of the passed activity ids. (optional)</param>
        /// <param name="failedActivityIdIn">Only include historic job logs which belong to failures of one of the passed activity ids. (optional)</param>
        /// <param name="executionIdIn">Only include historic job logs which belong to one of the passed execution ids. (optional)</param>
        /// <param name="processInstanceId">Filter by process instance id. (optional)</param>
        /// <param name="processDefinitionId">Filter by process definition id. (optional)</param>
        /// <param name="processDefinitionKey">Filter by process definition key. (optional)</param>
        /// <param name="deploymentId">Filter by deployment id. (optional)</param>
        /// <param name="tenantIdIn">Only include historic job log entries which belong to one of the passed and comma- separated tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include historic job log entries that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="hostname">Filter by hostname. (optional)</param>
        /// <param name="jobPriorityLowerThanOrEquals">Only include logs for which the associated job had a priority lower than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)</param>
        /// <param name="jobPriorityHigherThanOrEquals">Only include logs for which the associated job had a priority higher than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)</param>
        /// <param name="creationLog">Only include creation logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="failureLog">Only include failure logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="successLog">Only include success logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="deletionLog">Only include deletion logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CountResultDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<CountResultDto>> GetHistoricJobLogsCountWithHttpInfoAsync(string logId = default(string), string jobId = default(string), string jobExceptionMessage = default(string), string jobDefinitionId = default(string), string jobDefinitionType = default(string), string jobDefinitionConfiguration = default(string), string activityIdIn = default(string), string failedActivityIdIn = default(string), string executionIdIn = default(string), string processInstanceId = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string deploymentId = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), string hostname = default(string), long? jobPriorityLowerThanOrEquals = default(long?), long? jobPriorityHigherThanOrEquals = default(long?), bool? creationLog = default(bool?), bool? failureLog = default(bool?), bool? successLog = default(bool?), bool? deletionLog = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Job Log Exception Stacktrace
        /// </summary>
        /// <remarks>
        /// Retrieves the corresponding exception stacktrace to the passed historic job log by id.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the historic job log to get the exception stacktrace for.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GetStacktraceHistoricJobLogAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Job Log Exception Stacktrace
        /// </summary>
        /// <remarks>
        /// Retrieves the corresponding exception stacktrace to the passed historic job log by id.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the historic job log to get the exception stacktrace for.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetStacktraceHistoricJobLogWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Job Logs (POST)
        /// </summary>
        /// <remarks>
        /// Queries for historic job logs that fulfill the given parameters. This method is slightly more powerful than the [Get Job Logs](https://docs.camunda.org/manual/7.17/reference/rest/history/job-log/get-job-log-query/) method because it allows filtering by historic job logs values of the different types &#x60;String&#x60;, &#x60;Number&#x60; or &#x60;Boolean&#x60;.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="historicJobLogQueryDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;HistoricJobLogDto&gt;</returns>
        System.Threading.Tasks.Task<List<HistoricJobLogDto>> QueryHistoricJobLogsAsync(int? firstResult = default(int?), int? maxResults = default(int?), HistoricJobLogQueryDto historicJobLogQueryDto = default(HistoricJobLogQueryDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Job Logs (POST)
        /// </summary>
        /// <remarks>
        /// Queries for historic job logs that fulfill the given parameters. This method is slightly more powerful than the [Get Job Logs](https://docs.camunda.org/manual/7.17/reference/rest/history/job-log/get-job-log-query/) method because it allows filtering by historic job logs values of the different types &#x60;String&#x60;, &#x60;Number&#x60; or &#x60;Boolean&#x60;.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="historicJobLogQueryDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;HistoricJobLogDto&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<HistoricJobLogDto>>> QueryHistoricJobLogsWithHttpInfoAsync(int? firstResult = default(int?), int? maxResults = default(int?), HistoricJobLogQueryDto historicJobLogQueryDto = default(HistoricJobLogQueryDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Job Log Count (POST)
        /// </summary>
        /// <remarks>
        /// Queries for the number of historic job logs that fulfill the given parameters. This method takes the same message body as the [Get Job Logs (POST)](https://docs.camunda.org/manual/7.17/reference/rest/history/job-log/post-job-log-query/) method and therefore it is slightly more powerful than the [Get Job Log Count](https://docs.camunda.org/manual/7.17/reference/rest/history/job-log/get-job-log-query-count/) method.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="historicJobLogQueryDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CountResultDto</returns>
        System.Threading.Tasks.Task<CountResultDto> QueryHistoricJobLogsCountAsync(HistoricJobLogQueryDto historicJobLogQueryDto = default(HistoricJobLogQueryDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Job Log Count (POST)
        /// </summary>
        /// <remarks>
        /// Queries for the number of historic job logs that fulfill the given parameters. This method takes the same message body as the [Get Job Logs (POST)](https://docs.camunda.org/manual/7.17/reference/rest/history/job-log/post-job-log-query/) method and therefore it is slightly more powerful than the [Get Job Log Count](https://docs.camunda.org/manual/7.17/reference/rest/history/job-log/get-job-log-query-count/) method.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="historicJobLogQueryDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CountResultDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<CountResultDto>> QueryHistoricJobLogsCountWithHttpInfoAsync(HistoricJobLogQueryDto historicJobLogQueryDto = default(HistoricJobLogQueryDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IHistoricJobLogApi : IHistoricJobLogApiSync, IHistoricJobLogApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class HistoricJobLogApi : IDisposable, IHistoricJobLogApi
    {
        private Camunda.OpenApi.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="HistoricJobLogApi"/> class.
        /// **IMPORTANT** This will also create an istance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHander</see>.
        /// </summary>
        /// <returns></returns>
        public HistoricJobLogApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="HistoricJobLogApi"/> class.
        /// **IMPORTANT** This will also create an istance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHander</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public HistoricJobLogApi(string basePath)
        {
            this.Configuration = Camunda.OpenApi.Client.Client.Configuration.MergeConfigurations(
                Camunda.OpenApi.Client.Client.GlobalConfiguration.Instance,
                new Camunda.OpenApi.Client.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new Camunda.OpenApi.Client.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = Camunda.OpenApi.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="HistoricJobLogApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an istance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHander</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public HistoricJobLogApi(Camunda.OpenApi.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Camunda.OpenApi.Client.Client.Configuration.MergeConfigurations(
                Camunda.OpenApi.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new Camunda.OpenApi.Client.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = Camunda.OpenApi.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="HistoricJobLogApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public HistoricJobLogApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="HistoricJobLogApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public HistoricJobLogApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = Camunda.OpenApi.Client.Client.Configuration.MergeConfigurations(
                Camunda.OpenApi.Client.Client.GlobalConfiguration.Instance,
                new Camunda.OpenApi.Client.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new Camunda.OpenApi.Client.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = Camunda.OpenApi.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="HistoricJobLogApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public HistoricJobLogApi(HttpClient client, Camunda.OpenApi.Client.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = Camunda.OpenApi.Client.Client.Configuration.MergeConfigurations(
                Camunda.OpenApi.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new Camunda.OpenApi.Client.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = Camunda.OpenApi.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="HistoricJobLogApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public HistoricJobLogApi(Camunda.OpenApi.Client.Client.ISynchronousClient client, Camunda.OpenApi.Client.Client.IAsynchronousClient asyncClient, Camunda.OpenApi.Client.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Camunda.OpenApi.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public Camunda.OpenApi.Client.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Camunda.OpenApi.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Camunda.OpenApi.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Camunda.OpenApi.Client.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Camunda.OpenApi.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get Job Log Retrieves a historic job log by id.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the log entry.</param>
        /// <returns>HistoricJobLogDto</returns>
        public HistoricJobLogDto GetHistoricJobLog(string id)
        {
            Camunda.OpenApi.Client.Client.ApiResponse<HistoricJobLogDto> localVarResponse = GetHistoricJobLogWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Job Log Retrieves a historic job log by id.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the log entry.</param>
        /// <returns>ApiResponse of HistoricJobLogDto</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<HistoricJobLogDto> GetHistoricJobLogWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling HistoricJobLogApi->GetHistoricJobLog");

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<HistoricJobLogDto>("/history/job-log/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetHistoricJobLog", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Job Log Retrieves a historic job log by id.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the log entry.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HistoricJobLogDto</returns>
        public async System.Threading.Tasks.Task<HistoricJobLogDto> GetHistoricJobLogAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<HistoricJobLogDto> localVarResponse = await GetHistoricJobLogWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Job Log Retrieves a historic job log by id.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the log entry.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HistoricJobLogDto)</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<HistoricJobLogDto>> GetHistoricJobLogWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling HistoricJobLogApi->GetHistoricJobLog");


            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<HistoricJobLogDto>("/history/job-log/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetHistoricJobLog", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Job Logs Queries for historic job logs that fulfill the given parameters. The size of the result set can be retrieved by using the [Get Job Log Count](https://docs.camunda.org/manual/7.17/reference/rest/history/job-log/get-job-log-query-count/) method.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logId">Filter by historic job log id. (optional)</param>
        /// <param name="jobId">Filter by job id. (optional)</param>
        /// <param name="jobExceptionMessage">Filter by job exception message. (optional)</param>
        /// <param name="jobDefinitionId">Filter by job definition id. (optional)</param>
        /// <param name="jobDefinitionType">Filter by job definition type. See the [User Guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/the-job-executor/#job-creation) for more information about job definition types. (optional)</param>
        /// <param name="jobDefinitionConfiguration">Filter by job definition configuration. (optional)</param>
        /// <param name="activityIdIn">Only include historic job logs which belong to one of the passed activity ids. (optional)</param>
        /// <param name="failedActivityIdIn">Only include historic job logs which belong to failures of one of the passed activity ids. (optional)</param>
        /// <param name="executionIdIn">Only include historic job logs which belong to one of the passed execution ids. (optional)</param>
        /// <param name="processInstanceId">Filter by process instance id. (optional)</param>
        /// <param name="processDefinitionId">Filter by process definition id. (optional)</param>
        /// <param name="processDefinitionKey">Filter by process definition key. (optional)</param>
        /// <param name="deploymentId">Filter by deployment id. (optional)</param>
        /// <param name="tenantIdIn">Only include historic job log entries which belong to one of the passed and comma- separated tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include historic job log entries that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="hostname">Filter by hostname. (optional)</param>
        /// <param name="jobPriorityLowerThanOrEquals">Only include logs for which the associated job had a priority lower than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)</param>
        /// <param name="jobPriorityHigherThanOrEquals">Only include logs for which the associated job had a priority higher than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)</param>
        /// <param name="creationLog">Only include creation logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="failureLog">Only include failure logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="successLog">Only include success logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="deletionLog">Only include deletion logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <returns>List&lt;HistoricJobLogDto&gt;</returns>
        public List<HistoricJobLogDto> GetHistoricJobLogs(string logId = default(string), string jobId = default(string), string jobExceptionMessage = default(string), string jobDefinitionId = default(string), string jobDefinitionType = default(string), string jobDefinitionConfiguration = default(string), string activityIdIn = default(string), string failedActivityIdIn = default(string), string executionIdIn = default(string), string processInstanceId = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string deploymentId = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), string hostname = default(string), long? jobPriorityLowerThanOrEquals = default(long?), long? jobPriorityHigherThanOrEquals = default(long?), bool? creationLog = default(bool?), bool? failureLog = default(bool?), bool? successLog = default(bool?), bool? deletionLog = default(bool?), string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<List<HistoricJobLogDto>> localVarResponse = GetHistoricJobLogsWithHttpInfo(logId, jobId, jobExceptionMessage, jobDefinitionId, jobDefinitionType, jobDefinitionConfiguration, activityIdIn, failedActivityIdIn, executionIdIn, processInstanceId, processDefinitionId, processDefinitionKey, deploymentId, tenantIdIn, withoutTenantId, hostname, jobPriorityLowerThanOrEquals, jobPriorityHigherThanOrEquals, creationLog, failureLog, successLog, deletionLog, sortBy, sortOrder, firstResult, maxResults);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Job Logs Queries for historic job logs that fulfill the given parameters. The size of the result set can be retrieved by using the [Get Job Log Count](https://docs.camunda.org/manual/7.17/reference/rest/history/job-log/get-job-log-query-count/) method.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logId">Filter by historic job log id. (optional)</param>
        /// <param name="jobId">Filter by job id. (optional)</param>
        /// <param name="jobExceptionMessage">Filter by job exception message. (optional)</param>
        /// <param name="jobDefinitionId">Filter by job definition id. (optional)</param>
        /// <param name="jobDefinitionType">Filter by job definition type. See the [User Guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/the-job-executor/#job-creation) for more information about job definition types. (optional)</param>
        /// <param name="jobDefinitionConfiguration">Filter by job definition configuration. (optional)</param>
        /// <param name="activityIdIn">Only include historic job logs which belong to one of the passed activity ids. (optional)</param>
        /// <param name="failedActivityIdIn">Only include historic job logs which belong to failures of one of the passed activity ids. (optional)</param>
        /// <param name="executionIdIn">Only include historic job logs which belong to one of the passed execution ids. (optional)</param>
        /// <param name="processInstanceId">Filter by process instance id. (optional)</param>
        /// <param name="processDefinitionId">Filter by process definition id. (optional)</param>
        /// <param name="processDefinitionKey">Filter by process definition key. (optional)</param>
        /// <param name="deploymentId">Filter by deployment id. (optional)</param>
        /// <param name="tenantIdIn">Only include historic job log entries which belong to one of the passed and comma- separated tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include historic job log entries that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="hostname">Filter by hostname. (optional)</param>
        /// <param name="jobPriorityLowerThanOrEquals">Only include logs for which the associated job had a priority lower than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)</param>
        /// <param name="jobPriorityHigherThanOrEquals">Only include logs for which the associated job had a priority higher than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)</param>
        /// <param name="creationLog">Only include creation logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="failureLog">Only include failure logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="successLog">Only include success logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="deletionLog">Only include deletion logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <returns>ApiResponse of List&lt;HistoricJobLogDto&gt;</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<List<HistoricJobLogDto>> GetHistoricJobLogsWithHttpInfo(string logId = default(string), string jobId = default(string), string jobExceptionMessage = default(string), string jobDefinitionId = default(string), string jobDefinitionType = default(string), string jobDefinitionConfiguration = default(string), string activityIdIn = default(string), string failedActivityIdIn = default(string), string executionIdIn = default(string), string processInstanceId = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string deploymentId = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), string hostname = default(string), long? jobPriorityLowerThanOrEquals = default(long?), long? jobPriorityHigherThanOrEquals = default(long?), bool? creationLog = default(bool?), bool? failureLog = default(bool?), bool? successLog = default(bool?), bool? deletionLog = default(bool?), string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?))
        {
            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (logId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "logId", logId));
            }
            if (jobId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "jobId", jobId));
            }
            if (jobExceptionMessage != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "jobExceptionMessage", jobExceptionMessage));
            }
            if (jobDefinitionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "jobDefinitionId", jobDefinitionId));
            }
            if (jobDefinitionType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "jobDefinitionType", jobDefinitionType));
            }
            if (jobDefinitionConfiguration != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "jobDefinitionConfiguration", jobDefinitionConfiguration));
            }
            if (activityIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "activityIdIn", activityIdIn));
            }
            if (failedActivityIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "failedActivityIdIn", failedActivityIdIn));
            }
            if (executionIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "executionIdIn", executionIdIn));
            }
            if (processInstanceId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processInstanceId", processInstanceId));
            }
            if (processDefinitionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processDefinitionId", processDefinitionId));
            }
            if (processDefinitionKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processDefinitionKey", processDefinitionKey));
            }
            if (deploymentId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "deploymentId", deploymentId));
            }
            if (tenantIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "tenantIdIn", tenantIdIn));
            }
            if (withoutTenantId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "withoutTenantId", withoutTenantId));
            }
            if (hostname != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "hostname", hostname));
            }
            if (jobPriorityLowerThanOrEquals != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "jobPriorityLowerThanOrEquals", jobPriorityLowerThanOrEquals));
            }
            if (jobPriorityHigherThanOrEquals != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "jobPriorityHigherThanOrEquals", jobPriorityHigherThanOrEquals));
            }
            if (creationLog != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "creationLog", creationLog));
            }
            if (failureLog != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "failureLog", failureLog));
            }
            if (successLog != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "successLog", successLog));
            }
            if (deletionLog != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "deletionLog", deletionLog));
            }
            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "sortBy", sortBy));
            }
            if (sortOrder != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "sortOrder", sortOrder));
            }
            if (firstResult != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "firstResult", firstResult));
            }
            if (maxResults != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "maxResults", maxResults));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<HistoricJobLogDto>>("/history/job-log", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetHistoricJobLogs", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Job Logs Queries for historic job logs that fulfill the given parameters. The size of the result set can be retrieved by using the [Get Job Log Count](https://docs.camunda.org/manual/7.17/reference/rest/history/job-log/get-job-log-query-count/) method.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logId">Filter by historic job log id. (optional)</param>
        /// <param name="jobId">Filter by job id. (optional)</param>
        /// <param name="jobExceptionMessage">Filter by job exception message. (optional)</param>
        /// <param name="jobDefinitionId">Filter by job definition id. (optional)</param>
        /// <param name="jobDefinitionType">Filter by job definition type. See the [User Guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/the-job-executor/#job-creation) for more information about job definition types. (optional)</param>
        /// <param name="jobDefinitionConfiguration">Filter by job definition configuration. (optional)</param>
        /// <param name="activityIdIn">Only include historic job logs which belong to one of the passed activity ids. (optional)</param>
        /// <param name="failedActivityIdIn">Only include historic job logs which belong to failures of one of the passed activity ids. (optional)</param>
        /// <param name="executionIdIn">Only include historic job logs which belong to one of the passed execution ids. (optional)</param>
        /// <param name="processInstanceId">Filter by process instance id. (optional)</param>
        /// <param name="processDefinitionId">Filter by process definition id. (optional)</param>
        /// <param name="processDefinitionKey">Filter by process definition key. (optional)</param>
        /// <param name="deploymentId">Filter by deployment id. (optional)</param>
        /// <param name="tenantIdIn">Only include historic job log entries which belong to one of the passed and comma- separated tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include historic job log entries that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="hostname">Filter by hostname. (optional)</param>
        /// <param name="jobPriorityLowerThanOrEquals">Only include logs for which the associated job had a priority lower than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)</param>
        /// <param name="jobPriorityHigherThanOrEquals">Only include logs for which the associated job had a priority higher than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)</param>
        /// <param name="creationLog">Only include creation logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="failureLog">Only include failure logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="successLog">Only include success logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="deletionLog">Only include deletion logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;HistoricJobLogDto&gt;</returns>
        public async System.Threading.Tasks.Task<List<HistoricJobLogDto>> GetHistoricJobLogsAsync(string logId = default(string), string jobId = default(string), string jobExceptionMessage = default(string), string jobDefinitionId = default(string), string jobDefinitionType = default(string), string jobDefinitionConfiguration = default(string), string activityIdIn = default(string), string failedActivityIdIn = default(string), string executionIdIn = default(string), string processInstanceId = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string deploymentId = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), string hostname = default(string), long? jobPriorityLowerThanOrEquals = default(long?), long? jobPriorityHigherThanOrEquals = default(long?), bool? creationLog = default(bool?), bool? failureLog = default(bool?), bool? successLog = default(bool?), bool? deletionLog = default(bool?), string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<List<HistoricJobLogDto>> localVarResponse = await GetHistoricJobLogsWithHttpInfoAsync(logId, jobId, jobExceptionMessage, jobDefinitionId, jobDefinitionType, jobDefinitionConfiguration, activityIdIn, failedActivityIdIn, executionIdIn, processInstanceId, processDefinitionId, processDefinitionKey, deploymentId, tenantIdIn, withoutTenantId, hostname, jobPriorityLowerThanOrEquals, jobPriorityHigherThanOrEquals, creationLog, failureLog, successLog, deletionLog, sortBy, sortOrder, firstResult, maxResults, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Job Logs Queries for historic job logs that fulfill the given parameters. The size of the result set can be retrieved by using the [Get Job Log Count](https://docs.camunda.org/manual/7.17/reference/rest/history/job-log/get-job-log-query-count/) method.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logId">Filter by historic job log id. (optional)</param>
        /// <param name="jobId">Filter by job id. (optional)</param>
        /// <param name="jobExceptionMessage">Filter by job exception message. (optional)</param>
        /// <param name="jobDefinitionId">Filter by job definition id. (optional)</param>
        /// <param name="jobDefinitionType">Filter by job definition type. See the [User Guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/the-job-executor/#job-creation) for more information about job definition types. (optional)</param>
        /// <param name="jobDefinitionConfiguration">Filter by job definition configuration. (optional)</param>
        /// <param name="activityIdIn">Only include historic job logs which belong to one of the passed activity ids. (optional)</param>
        /// <param name="failedActivityIdIn">Only include historic job logs which belong to failures of one of the passed activity ids. (optional)</param>
        /// <param name="executionIdIn">Only include historic job logs which belong to one of the passed execution ids. (optional)</param>
        /// <param name="processInstanceId">Filter by process instance id. (optional)</param>
        /// <param name="processDefinitionId">Filter by process definition id. (optional)</param>
        /// <param name="processDefinitionKey">Filter by process definition key. (optional)</param>
        /// <param name="deploymentId">Filter by deployment id. (optional)</param>
        /// <param name="tenantIdIn">Only include historic job log entries which belong to one of the passed and comma- separated tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include historic job log entries that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="hostname">Filter by hostname. (optional)</param>
        /// <param name="jobPriorityLowerThanOrEquals">Only include logs for which the associated job had a priority lower than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)</param>
        /// <param name="jobPriorityHigherThanOrEquals">Only include logs for which the associated job had a priority higher than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)</param>
        /// <param name="creationLog">Only include creation logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="failureLog">Only include failure logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="successLog">Only include success logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="deletionLog">Only include deletion logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;HistoricJobLogDto&gt;)</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<List<HistoricJobLogDto>>> GetHistoricJobLogsWithHttpInfoAsync(string logId = default(string), string jobId = default(string), string jobExceptionMessage = default(string), string jobDefinitionId = default(string), string jobDefinitionType = default(string), string jobDefinitionConfiguration = default(string), string activityIdIn = default(string), string failedActivityIdIn = default(string), string executionIdIn = default(string), string processInstanceId = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string deploymentId = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), string hostname = default(string), long? jobPriorityLowerThanOrEquals = default(long?), long? jobPriorityHigherThanOrEquals = default(long?), bool? creationLog = default(bool?), bool? failureLog = default(bool?), bool? successLog = default(bool?), bool? deletionLog = default(bool?), string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (logId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "logId", logId));
            }
            if (jobId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "jobId", jobId));
            }
            if (jobExceptionMessage != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "jobExceptionMessage", jobExceptionMessage));
            }
            if (jobDefinitionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "jobDefinitionId", jobDefinitionId));
            }
            if (jobDefinitionType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "jobDefinitionType", jobDefinitionType));
            }
            if (jobDefinitionConfiguration != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "jobDefinitionConfiguration", jobDefinitionConfiguration));
            }
            if (activityIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "activityIdIn", activityIdIn));
            }
            if (failedActivityIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "failedActivityIdIn", failedActivityIdIn));
            }
            if (executionIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "executionIdIn", executionIdIn));
            }
            if (processInstanceId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processInstanceId", processInstanceId));
            }
            if (processDefinitionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processDefinitionId", processDefinitionId));
            }
            if (processDefinitionKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processDefinitionKey", processDefinitionKey));
            }
            if (deploymentId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "deploymentId", deploymentId));
            }
            if (tenantIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "tenantIdIn", tenantIdIn));
            }
            if (withoutTenantId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "withoutTenantId", withoutTenantId));
            }
            if (hostname != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "hostname", hostname));
            }
            if (jobPriorityLowerThanOrEquals != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "jobPriorityLowerThanOrEquals", jobPriorityLowerThanOrEquals));
            }
            if (jobPriorityHigherThanOrEquals != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "jobPriorityHigherThanOrEquals", jobPriorityHigherThanOrEquals));
            }
            if (creationLog != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "creationLog", creationLog));
            }
            if (failureLog != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "failureLog", failureLog));
            }
            if (successLog != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "successLog", successLog));
            }
            if (deletionLog != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "deletionLog", deletionLog));
            }
            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "sortBy", sortBy));
            }
            if (sortOrder != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "sortOrder", sortOrder));
            }
            if (firstResult != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "firstResult", firstResult));
            }
            if (maxResults != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "maxResults", maxResults));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<HistoricJobLogDto>>("/history/job-log", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetHistoricJobLogs", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Job Log Count Queries for the number of historic job logs that fulfill the given parameters. Takes the same parameters as the [Get Job Logs](https://docs.camunda.org/manual/7.17/reference/rest/history/job-log/get-job-log-query/) method.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logId">Filter by historic job log id. (optional)</param>
        /// <param name="jobId">Filter by job id. (optional)</param>
        /// <param name="jobExceptionMessage">Filter by job exception message. (optional)</param>
        /// <param name="jobDefinitionId">Filter by job definition id. (optional)</param>
        /// <param name="jobDefinitionType">Filter by job definition type. See the [User Guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/the-job-executor/#job-creation) for more information about job definition types. (optional)</param>
        /// <param name="jobDefinitionConfiguration">Filter by job definition configuration. (optional)</param>
        /// <param name="activityIdIn">Only include historic job logs which belong to one of the passed activity ids. (optional)</param>
        /// <param name="failedActivityIdIn">Only include historic job logs which belong to failures of one of the passed activity ids. (optional)</param>
        /// <param name="executionIdIn">Only include historic job logs which belong to one of the passed execution ids. (optional)</param>
        /// <param name="processInstanceId">Filter by process instance id. (optional)</param>
        /// <param name="processDefinitionId">Filter by process definition id. (optional)</param>
        /// <param name="processDefinitionKey">Filter by process definition key. (optional)</param>
        /// <param name="deploymentId">Filter by deployment id. (optional)</param>
        /// <param name="tenantIdIn">Only include historic job log entries which belong to one of the passed and comma- separated tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include historic job log entries that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="hostname">Filter by hostname. (optional)</param>
        /// <param name="jobPriorityLowerThanOrEquals">Only include logs for which the associated job had a priority lower than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)</param>
        /// <param name="jobPriorityHigherThanOrEquals">Only include logs for which the associated job had a priority higher than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)</param>
        /// <param name="creationLog">Only include creation logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="failureLog">Only include failure logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="successLog">Only include success logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="deletionLog">Only include deletion logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <returns>CountResultDto</returns>
        public CountResultDto GetHistoricJobLogsCount(string logId = default(string), string jobId = default(string), string jobExceptionMessage = default(string), string jobDefinitionId = default(string), string jobDefinitionType = default(string), string jobDefinitionConfiguration = default(string), string activityIdIn = default(string), string failedActivityIdIn = default(string), string executionIdIn = default(string), string processInstanceId = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string deploymentId = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), string hostname = default(string), long? jobPriorityLowerThanOrEquals = default(long?), long? jobPriorityHigherThanOrEquals = default(long?), bool? creationLog = default(bool?), bool? failureLog = default(bool?), bool? successLog = default(bool?), bool? deletionLog = default(bool?))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<CountResultDto> localVarResponse = GetHistoricJobLogsCountWithHttpInfo(logId, jobId, jobExceptionMessage, jobDefinitionId, jobDefinitionType, jobDefinitionConfiguration, activityIdIn, failedActivityIdIn, executionIdIn, processInstanceId, processDefinitionId, processDefinitionKey, deploymentId, tenantIdIn, withoutTenantId, hostname, jobPriorityLowerThanOrEquals, jobPriorityHigherThanOrEquals, creationLog, failureLog, successLog, deletionLog);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Job Log Count Queries for the number of historic job logs that fulfill the given parameters. Takes the same parameters as the [Get Job Logs](https://docs.camunda.org/manual/7.17/reference/rest/history/job-log/get-job-log-query/) method.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logId">Filter by historic job log id. (optional)</param>
        /// <param name="jobId">Filter by job id. (optional)</param>
        /// <param name="jobExceptionMessage">Filter by job exception message. (optional)</param>
        /// <param name="jobDefinitionId">Filter by job definition id. (optional)</param>
        /// <param name="jobDefinitionType">Filter by job definition type. See the [User Guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/the-job-executor/#job-creation) for more information about job definition types. (optional)</param>
        /// <param name="jobDefinitionConfiguration">Filter by job definition configuration. (optional)</param>
        /// <param name="activityIdIn">Only include historic job logs which belong to one of the passed activity ids. (optional)</param>
        /// <param name="failedActivityIdIn">Only include historic job logs which belong to failures of one of the passed activity ids. (optional)</param>
        /// <param name="executionIdIn">Only include historic job logs which belong to one of the passed execution ids. (optional)</param>
        /// <param name="processInstanceId">Filter by process instance id. (optional)</param>
        /// <param name="processDefinitionId">Filter by process definition id. (optional)</param>
        /// <param name="processDefinitionKey">Filter by process definition key. (optional)</param>
        /// <param name="deploymentId">Filter by deployment id. (optional)</param>
        /// <param name="tenantIdIn">Only include historic job log entries which belong to one of the passed and comma- separated tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include historic job log entries that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="hostname">Filter by hostname. (optional)</param>
        /// <param name="jobPriorityLowerThanOrEquals">Only include logs for which the associated job had a priority lower than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)</param>
        /// <param name="jobPriorityHigherThanOrEquals">Only include logs for which the associated job had a priority higher than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)</param>
        /// <param name="creationLog">Only include creation logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="failureLog">Only include failure logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="successLog">Only include success logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="deletionLog">Only include deletion logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <returns>ApiResponse of CountResultDto</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<CountResultDto> GetHistoricJobLogsCountWithHttpInfo(string logId = default(string), string jobId = default(string), string jobExceptionMessage = default(string), string jobDefinitionId = default(string), string jobDefinitionType = default(string), string jobDefinitionConfiguration = default(string), string activityIdIn = default(string), string failedActivityIdIn = default(string), string executionIdIn = default(string), string processInstanceId = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string deploymentId = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), string hostname = default(string), long? jobPriorityLowerThanOrEquals = default(long?), long? jobPriorityHigherThanOrEquals = default(long?), bool? creationLog = default(bool?), bool? failureLog = default(bool?), bool? successLog = default(bool?), bool? deletionLog = default(bool?))
        {
            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (logId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "logId", logId));
            }
            if (jobId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "jobId", jobId));
            }
            if (jobExceptionMessage != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "jobExceptionMessage", jobExceptionMessage));
            }
            if (jobDefinitionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "jobDefinitionId", jobDefinitionId));
            }
            if (jobDefinitionType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "jobDefinitionType", jobDefinitionType));
            }
            if (jobDefinitionConfiguration != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "jobDefinitionConfiguration", jobDefinitionConfiguration));
            }
            if (activityIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "activityIdIn", activityIdIn));
            }
            if (failedActivityIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "failedActivityIdIn", failedActivityIdIn));
            }
            if (executionIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "executionIdIn", executionIdIn));
            }
            if (processInstanceId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processInstanceId", processInstanceId));
            }
            if (processDefinitionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processDefinitionId", processDefinitionId));
            }
            if (processDefinitionKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processDefinitionKey", processDefinitionKey));
            }
            if (deploymentId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "deploymentId", deploymentId));
            }
            if (tenantIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "tenantIdIn", tenantIdIn));
            }
            if (withoutTenantId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "withoutTenantId", withoutTenantId));
            }
            if (hostname != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "hostname", hostname));
            }
            if (jobPriorityLowerThanOrEquals != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "jobPriorityLowerThanOrEquals", jobPriorityLowerThanOrEquals));
            }
            if (jobPriorityHigherThanOrEquals != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "jobPriorityHigherThanOrEquals", jobPriorityHigherThanOrEquals));
            }
            if (creationLog != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "creationLog", creationLog));
            }
            if (failureLog != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "failureLog", failureLog));
            }
            if (successLog != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "successLog", successLog));
            }
            if (deletionLog != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "deletionLog", deletionLog));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<CountResultDto>("/history/job-log/count", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetHistoricJobLogsCount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Job Log Count Queries for the number of historic job logs that fulfill the given parameters. Takes the same parameters as the [Get Job Logs](https://docs.camunda.org/manual/7.17/reference/rest/history/job-log/get-job-log-query/) method.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logId">Filter by historic job log id. (optional)</param>
        /// <param name="jobId">Filter by job id. (optional)</param>
        /// <param name="jobExceptionMessage">Filter by job exception message. (optional)</param>
        /// <param name="jobDefinitionId">Filter by job definition id. (optional)</param>
        /// <param name="jobDefinitionType">Filter by job definition type. See the [User Guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/the-job-executor/#job-creation) for more information about job definition types. (optional)</param>
        /// <param name="jobDefinitionConfiguration">Filter by job definition configuration. (optional)</param>
        /// <param name="activityIdIn">Only include historic job logs which belong to one of the passed activity ids. (optional)</param>
        /// <param name="failedActivityIdIn">Only include historic job logs which belong to failures of one of the passed activity ids. (optional)</param>
        /// <param name="executionIdIn">Only include historic job logs which belong to one of the passed execution ids. (optional)</param>
        /// <param name="processInstanceId">Filter by process instance id. (optional)</param>
        /// <param name="processDefinitionId">Filter by process definition id. (optional)</param>
        /// <param name="processDefinitionKey">Filter by process definition key. (optional)</param>
        /// <param name="deploymentId">Filter by deployment id. (optional)</param>
        /// <param name="tenantIdIn">Only include historic job log entries which belong to one of the passed and comma- separated tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include historic job log entries that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="hostname">Filter by hostname. (optional)</param>
        /// <param name="jobPriorityLowerThanOrEquals">Only include logs for which the associated job had a priority lower than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)</param>
        /// <param name="jobPriorityHigherThanOrEquals">Only include logs for which the associated job had a priority higher than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)</param>
        /// <param name="creationLog">Only include creation logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="failureLog">Only include failure logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="successLog">Only include success logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="deletionLog">Only include deletion logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CountResultDto</returns>
        public async System.Threading.Tasks.Task<CountResultDto> GetHistoricJobLogsCountAsync(string logId = default(string), string jobId = default(string), string jobExceptionMessage = default(string), string jobDefinitionId = default(string), string jobDefinitionType = default(string), string jobDefinitionConfiguration = default(string), string activityIdIn = default(string), string failedActivityIdIn = default(string), string executionIdIn = default(string), string processInstanceId = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string deploymentId = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), string hostname = default(string), long? jobPriorityLowerThanOrEquals = default(long?), long? jobPriorityHigherThanOrEquals = default(long?), bool? creationLog = default(bool?), bool? failureLog = default(bool?), bool? successLog = default(bool?), bool? deletionLog = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<CountResultDto> localVarResponse = await GetHistoricJobLogsCountWithHttpInfoAsync(logId, jobId, jobExceptionMessage, jobDefinitionId, jobDefinitionType, jobDefinitionConfiguration, activityIdIn, failedActivityIdIn, executionIdIn, processInstanceId, processDefinitionId, processDefinitionKey, deploymentId, tenantIdIn, withoutTenantId, hostname, jobPriorityLowerThanOrEquals, jobPriorityHigherThanOrEquals, creationLog, failureLog, successLog, deletionLog, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Job Log Count Queries for the number of historic job logs that fulfill the given parameters. Takes the same parameters as the [Get Job Logs](https://docs.camunda.org/manual/7.17/reference/rest/history/job-log/get-job-log-query/) method.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logId">Filter by historic job log id. (optional)</param>
        /// <param name="jobId">Filter by job id. (optional)</param>
        /// <param name="jobExceptionMessage">Filter by job exception message. (optional)</param>
        /// <param name="jobDefinitionId">Filter by job definition id. (optional)</param>
        /// <param name="jobDefinitionType">Filter by job definition type. See the [User Guide](https://docs.camunda.org/manual/7.17/user-guide/process-engine/the-job-executor/#job-creation) for more information about job definition types. (optional)</param>
        /// <param name="jobDefinitionConfiguration">Filter by job definition configuration. (optional)</param>
        /// <param name="activityIdIn">Only include historic job logs which belong to one of the passed activity ids. (optional)</param>
        /// <param name="failedActivityIdIn">Only include historic job logs which belong to failures of one of the passed activity ids. (optional)</param>
        /// <param name="executionIdIn">Only include historic job logs which belong to one of the passed execution ids. (optional)</param>
        /// <param name="processInstanceId">Filter by process instance id. (optional)</param>
        /// <param name="processDefinitionId">Filter by process definition id. (optional)</param>
        /// <param name="processDefinitionKey">Filter by process definition key. (optional)</param>
        /// <param name="deploymentId">Filter by deployment id. (optional)</param>
        /// <param name="tenantIdIn">Only include historic job log entries which belong to one of the passed and comma- separated tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include historic job log entries that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="hostname">Filter by hostname. (optional)</param>
        /// <param name="jobPriorityLowerThanOrEquals">Only include logs for which the associated job had a priority lower than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)</param>
        /// <param name="jobPriorityHigherThanOrEquals">Only include logs for which the associated job had a priority higher than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)</param>
        /// <param name="creationLog">Only include creation logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="failureLog">Only include failure logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="successLog">Only include success logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="deletionLog">Only include deletion logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CountResultDto)</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<CountResultDto>> GetHistoricJobLogsCountWithHttpInfoAsync(string logId = default(string), string jobId = default(string), string jobExceptionMessage = default(string), string jobDefinitionId = default(string), string jobDefinitionType = default(string), string jobDefinitionConfiguration = default(string), string activityIdIn = default(string), string failedActivityIdIn = default(string), string executionIdIn = default(string), string processInstanceId = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string deploymentId = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), string hostname = default(string), long? jobPriorityLowerThanOrEquals = default(long?), long? jobPriorityHigherThanOrEquals = default(long?), bool? creationLog = default(bool?), bool? failureLog = default(bool?), bool? successLog = default(bool?), bool? deletionLog = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (logId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "logId", logId));
            }
            if (jobId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "jobId", jobId));
            }
            if (jobExceptionMessage != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "jobExceptionMessage", jobExceptionMessage));
            }
            if (jobDefinitionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "jobDefinitionId", jobDefinitionId));
            }
            if (jobDefinitionType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "jobDefinitionType", jobDefinitionType));
            }
            if (jobDefinitionConfiguration != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "jobDefinitionConfiguration", jobDefinitionConfiguration));
            }
            if (activityIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "activityIdIn", activityIdIn));
            }
            if (failedActivityIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "failedActivityIdIn", failedActivityIdIn));
            }
            if (executionIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "executionIdIn", executionIdIn));
            }
            if (processInstanceId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processInstanceId", processInstanceId));
            }
            if (processDefinitionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processDefinitionId", processDefinitionId));
            }
            if (processDefinitionKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processDefinitionKey", processDefinitionKey));
            }
            if (deploymentId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "deploymentId", deploymentId));
            }
            if (tenantIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "tenantIdIn", tenantIdIn));
            }
            if (withoutTenantId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "withoutTenantId", withoutTenantId));
            }
            if (hostname != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "hostname", hostname));
            }
            if (jobPriorityLowerThanOrEquals != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "jobPriorityLowerThanOrEquals", jobPriorityLowerThanOrEquals));
            }
            if (jobPriorityHigherThanOrEquals != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "jobPriorityHigherThanOrEquals", jobPriorityHigherThanOrEquals));
            }
            if (creationLog != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "creationLog", creationLog));
            }
            if (failureLog != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "failureLog", failureLog));
            }
            if (successLog != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "successLog", successLog));
            }
            if (deletionLog != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "deletionLog", deletionLog));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<CountResultDto>("/history/job-log/count", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetHistoricJobLogsCount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Job Log Exception Stacktrace Retrieves the corresponding exception stacktrace to the passed historic job log by id.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the historic job log to get the exception stacktrace for.</param>
        /// <returns>Object</returns>
        public Object GetStacktraceHistoricJobLog(string id)
        {
            Camunda.OpenApi.Client.Client.ApiResponse<Object> localVarResponse = GetStacktraceHistoricJobLogWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Job Log Exception Stacktrace Retrieves the corresponding exception stacktrace to the passed historic job log by id.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the historic job log to get the exception stacktrace for.</param>
        /// <returns>ApiResponse of Object</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<Object> GetStacktraceHistoricJobLogWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling HistoricJobLogApi->GetStacktraceHistoricJobLog");

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/history/job-log/{id}/stacktrace", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetStacktraceHistoricJobLog", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Job Log Exception Stacktrace Retrieves the corresponding exception stacktrace to the passed historic job log by id.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the historic job log to get the exception stacktrace for.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetStacktraceHistoricJobLogAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<Object> localVarResponse = await GetStacktraceHistoricJobLogWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Job Log Exception Stacktrace Retrieves the corresponding exception stacktrace to the passed historic job log by id.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the historic job log to get the exception stacktrace for.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<Object>> GetStacktraceHistoricJobLogWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling HistoricJobLogApi->GetStacktraceHistoricJobLog");


            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/history/job-log/{id}/stacktrace", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetStacktraceHistoricJobLog", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Job Logs (POST) Queries for historic job logs that fulfill the given parameters. This method is slightly more powerful than the [Get Job Logs](https://docs.camunda.org/manual/7.17/reference/rest/history/job-log/get-job-log-query/) method because it allows filtering by historic job logs values of the different types &#x60;String&#x60;, &#x60;Number&#x60; or &#x60;Boolean&#x60;.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="historicJobLogQueryDto"> (optional)</param>
        /// <returns>List&lt;HistoricJobLogDto&gt;</returns>
        public List<HistoricJobLogDto> QueryHistoricJobLogs(int? firstResult = default(int?), int? maxResults = default(int?), HistoricJobLogQueryDto historicJobLogQueryDto = default(HistoricJobLogQueryDto))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<List<HistoricJobLogDto>> localVarResponse = QueryHistoricJobLogsWithHttpInfo(firstResult, maxResults, historicJobLogQueryDto);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Job Logs (POST) Queries for historic job logs that fulfill the given parameters. This method is slightly more powerful than the [Get Job Logs](https://docs.camunda.org/manual/7.17/reference/rest/history/job-log/get-job-log-query/) method because it allows filtering by historic job logs values of the different types &#x60;String&#x60;, &#x60;Number&#x60; or &#x60;Boolean&#x60;.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="historicJobLogQueryDto"> (optional)</param>
        /// <returns>ApiResponse of List&lt;HistoricJobLogDto&gt;</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<List<HistoricJobLogDto>> QueryHistoricJobLogsWithHttpInfo(int? firstResult = default(int?), int? maxResults = default(int?), HistoricJobLogQueryDto historicJobLogQueryDto = default(HistoricJobLogQueryDto))
        {
            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (firstResult != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "firstResult", firstResult));
            }
            if (maxResults != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "maxResults", maxResults));
            }
            localVarRequestOptions.Data = historicJobLogQueryDto;


            // make the HTTP request
            var localVarResponse = this.Client.Post<List<HistoricJobLogDto>>("/history/job-log", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QueryHistoricJobLogs", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Job Logs (POST) Queries for historic job logs that fulfill the given parameters. This method is slightly more powerful than the [Get Job Logs](https://docs.camunda.org/manual/7.17/reference/rest/history/job-log/get-job-log-query/) method because it allows filtering by historic job logs values of the different types &#x60;String&#x60;, &#x60;Number&#x60; or &#x60;Boolean&#x60;.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="historicJobLogQueryDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;HistoricJobLogDto&gt;</returns>
        public async System.Threading.Tasks.Task<List<HistoricJobLogDto>> QueryHistoricJobLogsAsync(int? firstResult = default(int?), int? maxResults = default(int?), HistoricJobLogQueryDto historicJobLogQueryDto = default(HistoricJobLogQueryDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<List<HistoricJobLogDto>> localVarResponse = await QueryHistoricJobLogsWithHttpInfoAsync(firstResult, maxResults, historicJobLogQueryDto, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Job Logs (POST) Queries for historic job logs that fulfill the given parameters. This method is slightly more powerful than the [Get Job Logs](https://docs.camunda.org/manual/7.17/reference/rest/history/job-log/get-job-log-query/) method because it allows filtering by historic job logs values of the different types &#x60;String&#x60;, &#x60;Number&#x60; or &#x60;Boolean&#x60;.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="historicJobLogQueryDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;HistoricJobLogDto&gt;)</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<List<HistoricJobLogDto>>> QueryHistoricJobLogsWithHttpInfoAsync(int? firstResult = default(int?), int? maxResults = default(int?), HistoricJobLogQueryDto historicJobLogQueryDto = default(HistoricJobLogQueryDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (firstResult != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "firstResult", firstResult));
            }
            if (maxResults != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "maxResults", maxResults));
            }
            localVarRequestOptions.Data = historicJobLogQueryDto;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<List<HistoricJobLogDto>>("/history/job-log", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QueryHistoricJobLogs", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Job Log Count (POST) Queries for the number of historic job logs that fulfill the given parameters. This method takes the same message body as the [Get Job Logs (POST)](https://docs.camunda.org/manual/7.17/reference/rest/history/job-log/post-job-log-query/) method and therefore it is slightly more powerful than the [Get Job Log Count](https://docs.camunda.org/manual/7.17/reference/rest/history/job-log/get-job-log-query-count/) method.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="historicJobLogQueryDto"> (optional)</param>
        /// <returns>CountResultDto</returns>
        public CountResultDto QueryHistoricJobLogsCount(HistoricJobLogQueryDto historicJobLogQueryDto = default(HistoricJobLogQueryDto))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<CountResultDto> localVarResponse = QueryHistoricJobLogsCountWithHttpInfo(historicJobLogQueryDto);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Job Log Count (POST) Queries for the number of historic job logs that fulfill the given parameters. This method takes the same message body as the [Get Job Logs (POST)](https://docs.camunda.org/manual/7.17/reference/rest/history/job-log/post-job-log-query/) method and therefore it is slightly more powerful than the [Get Job Log Count](https://docs.camunda.org/manual/7.17/reference/rest/history/job-log/get-job-log-query-count/) method.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="historicJobLogQueryDto"> (optional)</param>
        /// <returns>ApiResponse of CountResultDto</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<CountResultDto> QueryHistoricJobLogsCountWithHttpInfo(HistoricJobLogQueryDto historicJobLogQueryDto = default(HistoricJobLogQueryDto))
        {
            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = historicJobLogQueryDto;


            // make the HTTP request
            var localVarResponse = this.Client.Post<CountResultDto>("/history/job-log/count", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QueryHistoricJobLogsCount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Job Log Count (POST) Queries for the number of historic job logs that fulfill the given parameters. This method takes the same message body as the [Get Job Logs (POST)](https://docs.camunda.org/manual/7.17/reference/rest/history/job-log/post-job-log-query/) method and therefore it is slightly more powerful than the [Get Job Log Count](https://docs.camunda.org/manual/7.17/reference/rest/history/job-log/get-job-log-query-count/) method.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="historicJobLogQueryDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CountResultDto</returns>
        public async System.Threading.Tasks.Task<CountResultDto> QueryHistoricJobLogsCountAsync(HistoricJobLogQueryDto historicJobLogQueryDto = default(HistoricJobLogQueryDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<CountResultDto> localVarResponse = await QueryHistoricJobLogsCountWithHttpInfoAsync(historicJobLogQueryDto, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Job Log Count (POST) Queries for the number of historic job logs that fulfill the given parameters. This method takes the same message body as the [Get Job Logs (POST)](https://docs.camunda.org/manual/7.17/reference/rest/history/job-log/post-job-log-query/) method and therefore it is slightly more powerful than the [Get Job Log Count](https://docs.camunda.org/manual/7.17/reference/rest/history/job-log/get-job-log-query-count/) method.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="historicJobLogQueryDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CountResultDto)</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<CountResultDto>> QueryHistoricJobLogsCountWithHttpInfoAsync(HistoricJobLogQueryDto historicJobLogQueryDto = default(HistoricJobLogQueryDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = historicJobLogQueryDto;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<CountResultDto>("/history/job-log/count", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QueryHistoricJobLogsCount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
