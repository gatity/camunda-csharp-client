/*
 * Camunda Platform REST API
 *
 * OpenApi Spec for Camunda Platform REST API.
 *
 * The version of the OpenAPI document: 7.16.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using Camunda.OpenApi.Client.Client;
using Camunda.OpenApi.Client.Model;

namespace Camunda.OpenApi.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IHistoricUserOperationLogApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Clear Annotation of an User Operation Log (Historic)
        /// </summary>
        /// <remarks>
        /// Clear the annotation which was previously set for auditing reasons.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationId">The operation id of the operation log to be updated.</param>
        /// <returns></returns>
        void ClearAnnotationUserOperationLog(string operationId);

        /// <summary>
        /// Clear Annotation of an User Operation Log (Historic)
        /// </summary>
        /// <remarks>
        /// Clear the annotation which was previously set for auditing reasons.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationId">The operation id of the operation log to be updated.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ClearAnnotationUserOperationLogWithHttpInfo(string operationId);
        /// <summary>
        /// Get User Operation Log Count
        /// </summary>
        /// <remarks>
        /// Queries for the number of user operation log entries that fulfill the given parameters. Takes the same parameters as the [Get User Operation Log (Historic)](https://docs.camunda.org/manual/7.16/reference/rest/history/user-operation-log/get-user-operation-log-query/) method.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">Filter by deployment id. (optional)</param>
        /// <param name="processDefinitionId">Filter by process definition id. (optional)</param>
        /// <param name="processDefinitionKey">Filter by process definition key. (optional)</param>
        /// <param name="processInstanceId">Filter by process instance id. (optional)</param>
        /// <param name="executionId">Filter by execution id. (optional)</param>
        /// <param name="caseDefinitionId">Filter by case definition id. (optional)</param>
        /// <param name="caseInstanceId">Filter by case instance id. (optional)</param>
        /// <param name="caseExecutionId">Filter by case execution id. (optional)</param>
        /// <param name="taskId">Only include operations on this task. (optional)</param>
        /// <param name="externalTaskId">Only include operations on this external task. (optional)</param>
        /// <param name="batchId">Only include operations on this batch. (optional)</param>
        /// <param name="jobId">Filter by job id. (optional)</param>
        /// <param name="jobDefinitionId">Filter by job definition id. (optional)</param>
        /// <param name="userId">Only include operations of this user. (optional)</param>
        /// <param name="operationId">Filter by the id of the operation. This allows fetching of multiple entries which are part of a composite operation. (optional)</param>
        /// <param name="operationType">Filter by the type of the operation like &#x60;Claim&#x60; or &#x60;Delegate&#x60;. See the [Javadoc](https://docs.camunda.org/manual/7.16/reference/javadoc/?org/camunda/bpm/engine/history/UserOperationLogEntry.html) for a list of available operation types. (optional)</param>
        /// <param name="entityType">Filter by the type of the entity that was affected by this operation, possible values are &#x60;Task&#x60;, &#x60;Attachment&#x60; or &#x60;IdentityLink&#x60;. (optional)</param>
        /// <param name="entityTypeIn">Filter by a comma-separated list of types of the entities that was affected by this operation, possible values are &#x60;Task&#x60;, &#x60;Attachment&#x60; or &#x60;IdentityLink&#x60;. (optional)</param>
        /// <param name="category">Filter by the category that this operation is associated with, possible values are &#x60;TaskWorker&#x60;, &#x60;Admin&#x60; or &#x60;Operator&#x60;. (optional)</param>
        /// <param name="categoryIn">Filter by a comma-separated list of categories that this operation is associated with, possible values are &#x60;TaskWorker&#x60;, &#x60;Admin&#x60; or &#x60;Operator&#x60;. (optional)</param>
        /// <param name="property">Only include operations that changed this property, e.g., &#x60;owner&#x60; or &#x60;assignee&#x60;. (optional)</param>
        /// <param name="afterTimestamp">Restrict to entries that were created after the given timestamp. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the timestamp must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., 2013-01-23T14:42:45.000+0200. (optional)</param>
        /// <param name="beforeTimestamp">Restrict to entries that were created before the given timestamp. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the timestamp must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., 2013-01-23T14:42:45.000+0200. (optional)</param>
        /// <returns>CountResultDto</returns>
        CountResultDto QueryUserOperationCount(string deploymentId = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string processInstanceId = default(string), string executionId = default(string), string caseDefinitionId = default(string), string caseInstanceId = default(string), string caseExecutionId = default(string), string taskId = default(string), string externalTaskId = default(string), string batchId = default(string), string jobId = default(string), string jobDefinitionId = default(string), string userId = default(string), string operationId = default(string), string operationType = default(string), string entityType = default(string), string entityTypeIn = default(string), string category = default(string), string categoryIn = default(string), string property = default(string), DateTime? afterTimestamp = default(DateTime?), DateTime? beforeTimestamp = default(DateTime?));

        /// <summary>
        /// Get User Operation Log Count
        /// </summary>
        /// <remarks>
        /// Queries for the number of user operation log entries that fulfill the given parameters. Takes the same parameters as the [Get User Operation Log (Historic)](https://docs.camunda.org/manual/7.16/reference/rest/history/user-operation-log/get-user-operation-log-query/) method.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">Filter by deployment id. (optional)</param>
        /// <param name="processDefinitionId">Filter by process definition id. (optional)</param>
        /// <param name="processDefinitionKey">Filter by process definition key. (optional)</param>
        /// <param name="processInstanceId">Filter by process instance id. (optional)</param>
        /// <param name="executionId">Filter by execution id. (optional)</param>
        /// <param name="caseDefinitionId">Filter by case definition id. (optional)</param>
        /// <param name="caseInstanceId">Filter by case instance id. (optional)</param>
        /// <param name="caseExecutionId">Filter by case execution id. (optional)</param>
        /// <param name="taskId">Only include operations on this task. (optional)</param>
        /// <param name="externalTaskId">Only include operations on this external task. (optional)</param>
        /// <param name="batchId">Only include operations on this batch. (optional)</param>
        /// <param name="jobId">Filter by job id. (optional)</param>
        /// <param name="jobDefinitionId">Filter by job definition id. (optional)</param>
        /// <param name="userId">Only include operations of this user. (optional)</param>
        /// <param name="operationId">Filter by the id of the operation. This allows fetching of multiple entries which are part of a composite operation. (optional)</param>
        /// <param name="operationType">Filter by the type of the operation like &#x60;Claim&#x60; or &#x60;Delegate&#x60;. See the [Javadoc](https://docs.camunda.org/manual/7.16/reference/javadoc/?org/camunda/bpm/engine/history/UserOperationLogEntry.html) for a list of available operation types. (optional)</param>
        /// <param name="entityType">Filter by the type of the entity that was affected by this operation, possible values are &#x60;Task&#x60;, &#x60;Attachment&#x60; or &#x60;IdentityLink&#x60;. (optional)</param>
        /// <param name="entityTypeIn">Filter by a comma-separated list of types of the entities that was affected by this operation, possible values are &#x60;Task&#x60;, &#x60;Attachment&#x60; or &#x60;IdentityLink&#x60;. (optional)</param>
        /// <param name="category">Filter by the category that this operation is associated with, possible values are &#x60;TaskWorker&#x60;, &#x60;Admin&#x60; or &#x60;Operator&#x60;. (optional)</param>
        /// <param name="categoryIn">Filter by a comma-separated list of categories that this operation is associated with, possible values are &#x60;TaskWorker&#x60;, &#x60;Admin&#x60; or &#x60;Operator&#x60;. (optional)</param>
        /// <param name="property">Only include operations that changed this property, e.g., &#x60;owner&#x60; or &#x60;assignee&#x60;. (optional)</param>
        /// <param name="afterTimestamp">Restrict to entries that were created after the given timestamp. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the timestamp must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., 2013-01-23T14:42:45.000+0200. (optional)</param>
        /// <param name="beforeTimestamp">Restrict to entries that were created before the given timestamp. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the timestamp must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., 2013-01-23T14:42:45.000+0200. (optional)</param>
        /// <returns>ApiResponse of CountResultDto</returns>
        ApiResponse<CountResultDto> QueryUserOperationCountWithHttpInfo(string deploymentId = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string processInstanceId = default(string), string executionId = default(string), string caseDefinitionId = default(string), string caseInstanceId = default(string), string caseExecutionId = default(string), string taskId = default(string), string externalTaskId = default(string), string batchId = default(string), string jobId = default(string), string jobDefinitionId = default(string), string userId = default(string), string operationId = default(string), string operationType = default(string), string entityType = default(string), string entityTypeIn = default(string), string category = default(string), string categoryIn = default(string), string property = default(string), DateTime? afterTimestamp = default(DateTime?), DateTime? beforeTimestamp = default(DateTime?));
        /// <summary>
        /// Get User Operation Log (Historic)
        /// </summary>
        /// <remarks>
        /// Queries for user operation log entries that fulfill the given parameters. The size of the result set can be retrieved by using the [Get User Operation Log Count](https://docs.camunda.org/manual/7.16/reference/rest/history/user-operation-log/get-user-operation-log-query-count/) method.  Note that the properties of operation log entries are interpreted as restrictions on the entities they apply to. That means, if a single process instance is updated, the field &#x60;processInstanceId&#x60; is populated. If a single operation updates all process instances of the same process definition, the field &#x60;processInstanceId&#x60; is &#x60;null&#x60; (a &#x60;null&#x60; restriction is viewed as a wildcard, i.e., matches a process instance with any id) and the field &#x60;processDefinitionId&#x60; is populated. This way, which entities were changed by a user operation can easily be reconstructed.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">Filter by deployment id. (optional)</param>
        /// <param name="processDefinitionId">Filter by process definition id. (optional)</param>
        /// <param name="processDefinitionKey">Filter by process definition key. (optional)</param>
        /// <param name="processInstanceId">Filter by process instance id. (optional)</param>
        /// <param name="executionId">Filter by execution id. (optional)</param>
        /// <param name="caseDefinitionId">Filter by case definition id. (optional)</param>
        /// <param name="caseInstanceId">Filter by case instance id. (optional)</param>
        /// <param name="caseExecutionId">Filter by case execution id. (optional)</param>
        /// <param name="taskId">Only include operations on this task. (optional)</param>
        /// <param name="externalTaskId">Only include operations on this external task. (optional)</param>
        /// <param name="batchId">Only include operations on this batch. (optional)</param>
        /// <param name="jobId">Filter by job id. (optional)</param>
        /// <param name="jobDefinitionId">Filter by job definition id. (optional)</param>
        /// <param name="userId">Only include operations of this user. (optional)</param>
        /// <param name="operationId">Filter by the id of the operation. This allows fetching of multiple entries which are part of a composite operation. (optional)</param>
        /// <param name="operationType">Filter by the type of the operation like &#x60;Claim&#x60; or &#x60;Delegate&#x60;. See the [Javadoc](https://docs.camunda.org/manual/7.16/reference/javadoc/?org/camunda/bpm/engine/history/UserOperationLogEntry.html) for a list of available operation types. (optional)</param>
        /// <param name="entityType">Filter by the type of the entity that was affected by this operation, possible values are &#x60;Task&#x60;, &#x60;Attachment&#x60; or &#x60;IdentityLink&#x60;. (optional)</param>
        /// <param name="entityTypeIn">Filter by a comma-separated list of types of the entities that was affected by this operation, possible values are &#x60;Task&#x60;, &#x60;Attachment&#x60; or &#x60;IdentityLink&#x60;. (optional)</param>
        /// <param name="category">Filter by the category that this operation is associated with, possible values are &#x60;TaskWorker&#x60;, &#x60;Admin&#x60; or &#x60;Operator&#x60;. (optional)</param>
        /// <param name="categoryIn">Filter by a comma-separated list of categories that this operation is associated with, possible values are &#x60;TaskWorker&#x60;, &#x60;Admin&#x60; or &#x60;Operator&#x60;. (optional)</param>
        /// <param name="property">Only include operations that changed this property, e.g., &#x60;owner&#x60; or &#x60;assignee&#x60;. (optional)</param>
        /// <param name="afterTimestamp">Restrict to entries that were created after the given timestamp. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the timestamp must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., 2013-01-23T14:42:45.000+0200. (optional)</param>
        /// <param name="beforeTimestamp">Restrict to entries that were created before the given timestamp. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the timestamp must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., 2013-01-23T14:42:45.000+0200. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <returns>List&lt;UserOperationLogEntryDto&gt;</returns>
        List<UserOperationLogEntryDto> QueryUserOperationEntries(string deploymentId = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string processInstanceId = default(string), string executionId = default(string), string caseDefinitionId = default(string), string caseInstanceId = default(string), string caseExecutionId = default(string), string taskId = default(string), string externalTaskId = default(string), string batchId = default(string), string jobId = default(string), string jobDefinitionId = default(string), string userId = default(string), string operationId = default(string), string operationType = default(string), string entityType = default(string), string entityTypeIn = default(string), string category = default(string), string categoryIn = default(string), string property = default(string), DateTime? afterTimestamp = default(DateTime?), DateTime? beforeTimestamp = default(DateTime?), string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?));

        /// <summary>
        /// Get User Operation Log (Historic)
        /// </summary>
        /// <remarks>
        /// Queries for user operation log entries that fulfill the given parameters. The size of the result set can be retrieved by using the [Get User Operation Log Count](https://docs.camunda.org/manual/7.16/reference/rest/history/user-operation-log/get-user-operation-log-query-count/) method.  Note that the properties of operation log entries are interpreted as restrictions on the entities they apply to. That means, if a single process instance is updated, the field &#x60;processInstanceId&#x60; is populated. If a single operation updates all process instances of the same process definition, the field &#x60;processInstanceId&#x60; is &#x60;null&#x60; (a &#x60;null&#x60; restriction is viewed as a wildcard, i.e., matches a process instance with any id) and the field &#x60;processDefinitionId&#x60; is populated. This way, which entities were changed by a user operation can easily be reconstructed.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">Filter by deployment id. (optional)</param>
        /// <param name="processDefinitionId">Filter by process definition id. (optional)</param>
        /// <param name="processDefinitionKey">Filter by process definition key. (optional)</param>
        /// <param name="processInstanceId">Filter by process instance id. (optional)</param>
        /// <param name="executionId">Filter by execution id. (optional)</param>
        /// <param name="caseDefinitionId">Filter by case definition id. (optional)</param>
        /// <param name="caseInstanceId">Filter by case instance id. (optional)</param>
        /// <param name="caseExecutionId">Filter by case execution id. (optional)</param>
        /// <param name="taskId">Only include operations on this task. (optional)</param>
        /// <param name="externalTaskId">Only include operations on this external task. (optional)</param>
        /// <param name="batchId">Only include operations on this batch. (optional)</param>
        /// <param name="jobId">Filter by job id. (optional)</param>
        /// <param name="jobDefinitionId">Filter by job definition id. (optional)</param>
        /// <param name="userId">Only include operations of this user. (optional)</param>
        /// <param name="operationId">Filter by the id of the operation. This allows fetching of multiple entries which are part of a composite operation. (optional)</param>
        /// <param name="operationType">Filter by the type of the operation like &#x60;Claim&#x60; or &#x60;Delegate&#x60;. See the [Javadoc](https://docs.camunda.org/manual/7.16/reference/javadoc/?org/camunda/bpm/engine/history/UserOperationLogEntry.html) for a list of available operation types. (optional)</param>
        /// <param name="entityType">Filter by the type of the entity that was affected by this operation, possible values are &#x60;Task&#x60;, &#x60;Attachment&#x60; or &#x60;IdentityLink&#x60;. (optional)</param>
        /// <param name="entityTypeIn">Filter by a comma-separated list of types of the entities that was affected by this operation, possible values are &#x60;Task&#x60;, &#x60;Attachment&#x60; or &#x60;IdentityLink&#x60;. (optional)</param>
        /// <param name="category">Filter by the category that this operation is associated with, possible values are &#x60;TaskWorker&#x60;, &#x60;Admin&#x60; or &#x60;Operator&#x60;. (optional)</param>
        /// <param name="categoryIn">Filter by a comma-separated list of categories that this operation is associated with, possible values are &#x60;TaskWorker&#x60;, &#x60;Admin&#x60; or &#x60;Operator&#x60;. (optional)</param>
        /// <param name="property">Only include operations that changed this property, e.g., &#x60;owner&#x60; or &#x60;assignee&#x60;. (optional)</param>
        /// <param name="afterTimestamp">Restrict to entries that were created after the given timestamp. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the timestamp must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., 2013-01-23T14:42:45.000+0200. (optional)</param>
        /// <param name="beforeTimestamp">Restrict to entries that were created before the given timestamp. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the timestamp must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., 2013-01-23T14:42:45.000+0200. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <returns>ApiResponse of List&lt;UserOperationLogEntryDto&gt;</returns>
        ApiResponse<List<UserOperationLogEntryDto>> QueryUserOperationEntriesWithHttpInfo(string deploymentId = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string processInstanceId = default(string), string executionId = default(string), string caseDefinitionId = default(string), string caseInstanceId = default(string), string caseExecutionId = default(string), string taskId = default(string), string externalTaskId = default(string), string batchId = default(string), string jobId = default(string), string jobDefinitionId = default(string), string userId = default(string), string operationId = default(string), string operationType = default(string), string entityType = default(string), string entityTypeIn = default(string), string category = default(string), string categoryIn = default(string), string property = default(string), DateTime? afterTimestamp = default(DateTime?), DateTime? beforeTimestamp = default(DateTime?), string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?));
        /// <summary>
        /// Set Annotation to an User Operation Log (Historic)
        /// </summary>
        /// <remarks>
        /// Set an annotation for auditing reasons.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationId">The operation id of the operation log to be updated.</param>
        /// <param name="annotationDto"> (optional)</param>
        /// <returns></returns>
        void SetAnnotationUserOperationLog(string operationId, AnnotationDto annotationDto = default(AnnotationDto));

        /// <summary>
        /// Set Annotation to an User Operation Log (Historic)
        /// </summary>
        /// <remarks>
        /// Set an annotation for auditing reasons.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationId">The operation id of the operation log to be updated.</param>
        /// <param name="annotationDto"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SetAnnotationUserOperationLogWithHttpInfo(string operationId, AnnotationDto annotationDto = default(AnnotationDto));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IHistoricUserOperationLogApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Clear Annotation of an User Operation Log (Historic)
        /// </summary>
        /// <remarks>
        /// Clear the annotation which was previously set for auditing reasons.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationId">The operation id of the operation log to be updated.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ClearAnnotationUserOperationLogAsync(string operationId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Clear Annotation of an User Operation Log (Historic)
        /// </summary>
        /// <remarks>
        /// Clear the annotation which was previously set for auditing reasons.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationId">The operation id of the operation log to be updated.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ClearAnnotationUserOperationLogWithHttpInfoAsync(string operationId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get User Operation Log Count
        /// </summary>
        /// <remarks>
        /// Queries for the number of user operation log entries that fulfill the given parameters. Takes the same parameters as the [Get User Operation Log (Historic)](https://docs.camunda.org/manual/7.16/reference/rest/history/user-operation-log/get-user-operation-log-query/) method.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">Filter by deployment id. (optional)</param>
        /// <param name="processDefinitionId">Filter by process definition id. (optional)</param>
        /// <param name="processDefinitionKey">Filter by process definition key. (optional)</param>
        /// <param name="processInstanceId">Filter by process instance id. (optional)</param>
        /// <param name="executionId">Filter by execution id. (optional)</param>
        /// <param name="caseDefinitionId">Filter by case definition id. (optional)</param>
        /// <param name="caseInstanceId">Filter by case instance id. (optional)</param>
        /// <param name="caseExecutionId">Filter by case execution id. (optional)</param>
        /// <param name="taskId">Only include operations on this task. (optional)</param>
        /// <param name="externalTaskId">Only include operations on this external task. (optional)</param>
        /// <param name="batchId">Only include operations on this batch. (optional)</param>
        /// <param name="jobId">Filter by job id. (optional)</param>
        /// <param name="jobDefinitionId">Filter by job definition id. (optional)</param>
        /// <param name="userId">Only include operations of this user. (optional)</param>
        /// <param name="operationId">Filter by the id of the operation. This allows fetching of multiple entries which are part of a composite operation. (optional)</param>
        /// <param name="operationType">Filter by the type of the operation like &#x60;Claim&#x60; or &#x60;Delegate&#x60;. See the [Javadoc](https://docs.camunda.org/manual/7.16/reference/javadoc/?org/camunda/bpm/engine/history/UserOperationLogEntry.html) for a list of available operation types. (optional)</param>
        /// <param name="entityType">Filter by the type of the entity that was affected by this operation, possible values are &#x60;Task&#x60;, &#x60;Attachment&#x60; or &#x60;IdentityLink&#x60;. (optional)</param>
        /// <param name="entityTypeIn">Filter by a comma-separated list of types of the entities that was affected by this operation, possible values are &#x60;Task&#x60;, &#x60;Attachment&#x60; or &#x60;IdentityLink&#x60;. (optional)</param>
        /// <param name="category">Filter by the category that this operation is associated with, possible values are &#x60;TaskWorker&#x60;, &#x60;Admin&#x60; or &#x60;Operator&#x60;. (optional)</param>
        /// <param name="categoryIn">Filter by a comma-separated list of categories that this operation is associated with, possible values are &#x60;TaskWorker&#x60;, &#x60;Admin&#x60; or &#x60;Operator&#x60;. (optional)</param>
        /// <param name="property">Only include operations that changed this property, e.g., &#x60;owner&#x60; or &#x60;assignee&#x60;. (optional)</param>
        /// <param name="afterTimestamp">Restrict to entries that were created after the given timestamp. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the timestamp must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., 2013-01-23T14:42:45.000+0200. (optional)</param>
        /// <param name="beforeTimestamp">Restrict to entries that were created before the given timestamp. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the timestamp must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., 2013-01-23T14:42:45.000+0200. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CountResultDto</returns>
        System.Threading.Tasks.Task<CountResultDto> QueryUserOperationCountAsync(string deploymentId = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string processInstanceId = default(string), string executionId = default(string), string caseDefinitionId = default(string), string caseInstanceId = default(string), string caseExecutionId = default(string), string taskId = default(string), string externalTaskId = default(string), string batchId = default(string), string jobId = default(string), string jobDefinitionId = default(string), string userId = default(string), string operationId = default(string), string operationType = default(string), string entityType = default(string), string entityTypeIn = default(string), string category = default(string), string categoryIn = default(string), string property = default(string), DateTime? afterTimestamp = default(DateTime?), DateTime? beforeTimestamp = default(DateTime?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get User Operation Log Count
        /// </summary>
        /// <remarks>
        /// Queries for the number of user operation log entries that fulfill the given parameters. Takes the same parameters as the [Get User Operation Log (Historic)](https://docs.camunda.org/manual/7.16/reference/rest/history/user-operation-log/get-user-operation-log-query/) method.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">Filter by deployment id. (optional)</param>
        /// <param name="processDefinitionId">Filter by process definition id. (optional)</param>
        /// <param name="processDefinitionKey">Filter by process definition key. (optional)</param>
        /// <param name="processInstanceId">Filter by process instance id. (optional)</param>
        /// <param name="executionId">Filter by execution id. (optional)</param>
        /// <param name="caseDefinitionId">Filter by case definition id. (optional)</param>
        /// <param name="caseInstanceId">Filter by case instance id. (optional)</param>
        /// <param name="caseExecutionId">Filter by case execution id. (optional)</param>
        /// <param name="taskId">Only include operations on this task. (optional)</param>
        /// <param name="externalTaskId">Only include operations on this external task. (optional)</param>
        /// <param name="batchId">Only include operations on this batch. (optional)</param>
        /// <param name="jobId">Filter by job id. (optional)</param>
        /// <param name="jobDefinitionId">Filter by job definition id. (optional)</param>
        /// <param name="userId">Only include operations of this user. (optional)</param>
        /// <param name="operationId">Filter by the id of the operation. This allows fetching of multiple entries which are part of a composite operation. (optional)</param>
        /// <param name="operationType">Filter by the type of the operation like &#x60;Claim&#x60; or &#x60;Delegate&#x60;. See the [Javadoc](https://docs.camunda.org/manual/7.16/reference/javadoc/?org/camunda/bpm/engine/history/UserOperationLogEntry.html) for a list of available operation types. (optional)</param>
        /// <param name="entityType">Filter by the type of the entity that was affected by this operation, possible values are &#x60;Task&#x60;, &#x60;Attachment&#x60; or &#x60;IdentityLink&#x60;. (optional)</param>
        /// <param name="entityTypeIn">Filter by a comma-separated list of types of the entities that was affected by this operation, possible values are &#x60;Task&#x60;, &#x60;Attachment&#x60; or &#x60;IdentityLink&#x60;. (optional)</param>
        /// <param name="category">Filter by the category that this operation is associated with, possible values are &#x60;TaskWorker&#x60;, &#x60;Admin&#x60; or &#x60;Operator&#x60;. (optional)</param>
        /// <param name="categoryIn">Filter by a comma-separated list of categories that this operation is associated with, possible values are &#x60;TaskWorker&#x60;, &#x60;Admin&#x60; or &#x60;Operator&#x60;. (optional)</param>
        /// <param name="property">Only include operations that changed this property, e.g., &#x60;owner&#x60; or &#x60;assignee&#x60;. (optional)</param>
        /// <param name="afterTimestamp">Restrict to entries that were created after the given timestamp. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the timestamp must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., 2013-01-23T14:42:45.000+0200. (optional)</param>
        /// <param name="beforeTimestamp">Restrict to entries that were created before the given timestamp. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the timestamp must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., 2013-01-23T14:42:45.000+0200. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CountResultDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<CountResultDto>> QueryUserOperationCountWithHttpInfoAsync(string deploymentId = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string processInstanceId = default(string), string executionId = default(string), string caseDefinitionId = default(string), string caseInstanceId = default(string), string caseExecutionId = default(string), string taskId = default(string), string externalTaskId = default(string), string batchId = default(string), string jobId = default(string), string jobDefinitionId = default(string), string userId = default(string), string operationId = default(string), string operationType = default(string), string entityType = default(string), string entityTypeIn = default(string), string category = default(string), string categoryIn = default(string), string property = default(string), DateTime? afterTimestamp = default(DateTime?), DateTime? beforeTimestamp = default(DateTime?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get User Operation Log (Historic)
        /// </summary>
        /// <remarks>
        /// Queries for user operation log entries that fulfill the given parameters. The size of the result set can be retrieved by using the [Get User Operation Log Count](https://docs.camunda.org/manual/7.16/reference/rest/history/user-operation-log/get-user-operation-log-query-count/) method.  Note that the properties of operation log entries are interpreted as restrictions on the entities they apply to. That means, if a single process instance is updated, the field &#x60;processInstanceId&#x60; is populated. If a single operation updates all process instances of the same process definition, the field &#x60;processInstanceId&#x60; is &#x60;null&#x60; (a &#x60;null&#x60; restriction is viewed as a wildcard, i.e., matches a process instance with any id) and the field &#x60;processDefinitionId&#x60; is populated. This way, which entities were changed by a user operation can easily be reconstructed.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">Filter by deployment id. (optional)</param>
        /// <param name="processDefinitionId">Filter by process definition id. (optional)</param>
        /// <param name="processDefinitionKey">Filter by process definition key. (optional)</param>
        /// <param name="processInstanceId">Filter by process instance id. (optional)</param>
        /// <param name="executionId">Filter by execution id. (optional)</param>
        /// <param name="caseDefinitionId">Filter by case definition id. (optional)</param>
        /// <param name="caseInstanceId">Filter by case instance id. (optional)</param>
        /// <param name="caseExecutionId">Filter by case execution id. (optional)</param>
        /// <param name="taskId">Only include operations on this task. (optional)</param>
        /// <param name="externalTaskId">Only include operations on this external task. (optional)</param>
        /// <param name="batchId">Only include operations on this batch. (optional)</param>
        /// <param name="jobId">Filter by job id. (optional)</param>
        /// <param name="jobDefinitionId">Filter by job definition id. (optional)</param>
        /// <param name="userId">Only include operations of this user. (optional)</param>
        /// <param name="operationId">Filter by the id of the operation. This allows fetching of multiple entries which are part of a composite operation. (optional)</param>
        /// <param name="operationType">Filter by the type of the operation like &#x60;Claim&#x60; or &#x60;Delegate&#x60;. See the [Javadoc](https://docs.camunda.org/manual/7.16/reference/javadoc/?org/camunda/bpm/engine/history/UserOperationLogEntry.html) for a list of available operation types. (optional)</param>
        /// <param name="entityType">Filter by the type of the entity that was affected by this operation, possible values are &#x60;Task&#x60;, &#x60;Attachment&#x60; or &#x60;IdentityLink&#x60;. (optional)</param>
        /// <param name="entityTypeIn">Filter by a comma-separated list of types of the entities that was affected by this operation, possible values are &#x60;Task&#x60;, &#x60;Attachment&#x60; or &#x60;IdentityLink&#x60;. (optional)</param>
        /// <param name="category">Filter by the category that this operation is associated with, possible values are &#x60;TaskWorker&#x60;, &#x60;Admin&#x60; or &#x60;Operator&#x60;. (optional)</param>
        /// <param name="categoryIn">Filter by a comma-separated list of categories that this operation is associated with, possible values are &#x60;TaskWorker&#x60;, &#x60;Admin&#x60; or &#x60;Operator&#x60;. (optional)</param>
        /// <param name="property">Only include operations that changed this property, e.g., &#x60;owner&#x60; or &#x60;assignee&#x60;. (optional)</param>
        /// <param name="afterTimestamp">Restrict to entries that were created after the given timestamp. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the timestamp must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., 2013-01-23T14:42:45.000+0200. (optional)</param>
        /// <param name="beforeTimestamp">Restrict to entries that were created before the given timestamp. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the timestamp must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., 2013-01-23T14:42:45.000+0200. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;UserOperationLogEntryDto&gt;</returns>
        System.Threading.Tasks.Task<List<UserOperationLogEntryDto>> QueryUserOperationEntriesAsync(string deploymentId = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string processInstanceId = default(string), string executionId = default(string), string caseDefinitionId = default(string), string caseInstanceId = default(string), string caseExecutionId = default(string), string taskId = default(string), string externalTaskId = default(string), string batchId = default(string), string jobId = default(string), string jobDefinitionId = default(string), string userId = default(string), string operationId = default(string), string operationType = default(string), string entityType = default(string), string entityTypeIn = default(string), string category = default(string), string categoryIn = default(string), string property = default(string), DateTime? afterTimestamp = default(DateTime?), DateTime? beforeTimestamp = default(DateTime?), string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get User Operation Log (Historic)
        /// </summary>
        /// <remarks>
        /// Queries for user operation log entries that fulfill the given parameters. The size of the result set can be retrieved by using the [Get User Operation Log Count](https://docs.camunda.org/manual/7.16/reference/rest/history/user-operation-log/get-user-operation-log-query-count/) method.  Note that the properties of operation log entries are interpreted as restrictions on the entities they apply to. That means, if a single process instance is updated, the field &#x60;processInstanceId&#x60; is populated. If a single operation updates all process instances of the same process definition, the field &#x60;processInstanceId&#x60; is &#x60;null&#x60; (a &#x60;null&#x60; restriction is viewed as a wildcard, i.e., matches a process instance with any id) and the field &#x60;processDefinitionId&#x60; is populated. This way, which entities were changed by a user operation can easily be reconstructed.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">Filter by deployment id. (optional)</param>
        /// <param name="processDefinitionId">Filter by process definition id. (optional)</param>
        /// <param name="processDefinitionKey">Filter by process definition key. (optional)</param>
        /// <param name="processInstanceId">Filter by process instance id. (optional)</param>
        /// <param name="executionId">Filter by execution id. (optional)</param>
        /// <param name="caseDefinitionId">Filter by case definition id. (optional)</param>
        /// <param name="caseInstanceId">Filter by case instance id. (optional)</param>
        /// <param name="caseExecutionId">Filter by case execution id. (optional)</param>
        /// <param name="taskId">Only include operations on this task. (optional)</param>
        /// <param name="externalTaskId">Only include operations on this external task. (optional)</param>
        /// <param name="batchId">Only include operations on this batch. (optional)</param>
        /// <param name="jobId">Filter by job id. (optional)</param>
        /// <param name="jobDefinitionId">Filter by job definition id. (optional)</param>
        /// <param name="userId">Only include operations of this user. (optional)</param>
        /// <param name="operationId">Filter by the id of the operation. This allows fetching of multiple entries which are part of a composite operation. (optional)</param>
        /// <param name="operationType">Filter by the type of the operation like &#x60;Claim&#x60; or &#x60;Delegate&#x60;. See the [Javadoc](https://docs.camunda.org/manual/7.16/reference/javadoc/?org/camunda/bpm/engine/history/UserOperationLogEntry.html) for a list of available operation types. (optional)</param>
        /// <param name="entityType">Filter by the type of the entity that was affected by this operation, possible values are &#x60;Task&#x60;, &#x60;Attachment&#x60; or &#x60;IdentityLink&#x60;. (optional)</param>
        /// <param name="entityTypeIn">Filter by a comma-separated list of types of the entities that was affected by this operation, possible values are &#x60;Task&#x60;, &#x60;Attachment&#x60; or &#x60;IdentityLink&#x60;. (optional)</param>
        /// <param name="category">Filter by the category that this operation is associated with, possible values are &#x60;TaskWorker&#x60;, &#x60;Admin&#x60; or &#x60;Operator&#x60;. (optional)</param>
        /// <param name="categoryIn">Filter by a comma-separated list of categories that this operation is associated with, possible values are &#x60;TaskWorker&#x60;, &#x60;Admin&#x60; or &#x60;Operator&#x60;. (optional)</param>
        /// <param name="property">Only include operations that changed this property, e.g., &#x60;owner&#x60; or &#x60;assignee&#x60;. (optional)</param>
        /// <param name="afterTimestamp">Restrict to entries that were created after the given timestamp. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the timestamp must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., 2013-01-23T14:42:45.000+0200. (optional)</param>
        /// <param name="beforeTimestamp">Restrict to entries that were created before the given timestamp. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the timestamp must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., 2013-01-23T14:42:45.000+0200. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;UserOperationLogEntryDto&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<UserOperationLogEntryDto>>> QueryUserOperationEntriesWithHttpInfoAsync(string deploymentId = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string processInstanceId = default(string), string executionId = default(string), string caseDefinitionId = default(string), string caseInstanceId = default(string), string caseExecutionId = default(string), string taskId = default(string), string externalTaskId = default(string), string batchId = default(string), string jobId = default(string), string jobDefinitionId = default(string), string userId = default(string), string operationId = default(string), string operationType = default(string), string entityType = default(string), string entityTypeIn = default(string), string category = default(string), string categoryIn = default(string), string property = default(string), DateTime? afterTimestamp = default(DateTime?), DateTime? beforeTimestamp = default(DateTime?), string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Set Annotation to an User Operation Log (Historic)
        /// </summary>
        /// <remarks>
        /// Set an annotation for auditing reasons.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationId">The operation id of the operation log to be updated.</param>
        /// <param name="annotationDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SetAnnotationUserOperationLogAsync(string operationId, AnnotationDto annotationDto = default(AnnotationDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Set Annotation to an User Operation Log (Historic)
        /// </summary>
        /// <remarks>
        /// Set an annotation for auditing reasons.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationId">The operation id of the operation log to be updated.</param>
        /// <param name="annotationDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SetAnnotationUserOperationLogWithHttpInfoAsync(string operationId, AnnotationDto annotationDto = default(AnnotationDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IHistoricUserOperationLogApi : IHistoricUserOperationLogApiSync, IHistoricUserOperationLogApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class HistoricUserOperationLogApi : IDisposable, IHistoricUserOperationLogApi
    {
        private Camunda.OpenApi.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="HistoricUserOperationLogApi"/> class.
        /// **IMPORTANT** This will also create an istance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHander</see>.
        /// </summary>
        /// <returns></returns>
        public HistoricUserOperationLogApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="HistoricUserOperationLogApi"/> class.
        /// **IMPORTANT** This will also create an istance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHander</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public HistoricUserOperationLogApi(string basePath)
        {
            this.Configuration = Camunda.OpenApi.Client.Client.Configuration.MergeConfigurations(
                Camunda.OpenApi.Client.Client.GlobalConfiguration.Instance,
                new Camunda.OpenApi.Client.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new Camunda.OpenApi.Client.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = Camunda.OpenApi.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="HistoricUserOperationLogApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an istance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHander</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public HistoricUserOperationLogApi(Camunda.OpenApi.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Camunda.OpenApi.Client.Client.Configuration.MergeConfigurations(
                Camunda.OpenApi.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new Camunda.OpenApi.Client.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = Camunda.OpenApi.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="HistoricUserOperationLogApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public HistoricUserOperationLogApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="HistoricUserOperationLogApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public HistoricUserOperationLogApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = Camunda.OpenApi.Client.Client.Configuration.MergeConfigurations(
                Camunda.OpenApi.Client.Client.GlobalConfiguration.Instance,
                new Camunda.OpenApi.Client.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new Camunda.OpenApi.Client.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = Camunda.OpenApi.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="HistoricUserOperationLogApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public HistoricUserOperationLogApi(HttpClient client, Camunda.OpenApi.Client.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = Camunda.OpenApi.Client.Client.Configuration.MergeConfigurations(
                Camunda.OpenApi.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new Camunda.OpenApi.Client.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = Camunda.OpenApi.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="HistoricUserOperationLogApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public HistoricUserOperationLogApi(Camunda.OpenApi.Client.Client.ISynchronousClient client, Camunda.OpenApi.Client.Client.IAsynchronousClient asyncClient, Camunda.OpenApi.Client.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Camunda.OpenApi.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public Camunda.OpenApi.Client.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Camunda.OpenApi.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Camunda.OpenApi.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Camunda.OpenApi.Client.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Camunda.OpenApi.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Clear Annotation of an User Operation Log (Historic) Clear the annotation which was previously set for auditing reasons.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationId">The operation id of the operation log to be updated.</param>
        /// <returns></returns>
        public void ClearAnnotationUserOperationLog(string operationId)
        {
            ClearAnnotationUserOperationLogWithHttpInfo(operationId);
        }

        /// <summary>
        /// Clear Annotation of an User Operation Log (Historic) Clear the annotation which was previously set for auditing reasons.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationId">The operation id of the operation log to be updated.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<Object> ClearAnnotationUserOperationLogWithHttpInfo(string operationId)
        {
            // verify the required parameter 'operationId' is set
            if (operationId == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'operationId' when calling HistoricUserOperationLogApi->ClearAnnotationUserOperationLog");

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("operationId", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(operationId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/history/user-operation/{operationId}/clear-annotation", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ClearAnnotationUserOperationLog", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Clear Annotation of an User Operation Log (Historic) Clear the annotation which was previously set for auditing reasons.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationId">The operation id of the operation log to be updated.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ClearAnnotationUserOperationLogAsync(string operationId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ClearAnnotationUserOperationLogWithHttpInfoAsync(operationId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Clear Annotation of an User Operation Log (Historic) Clear the annotation which was previously set for auditing reasons.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationId">The operation id of the operation log to be updated.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<Object>> ClearAnnotationUserOperationLogWithHttpInfoAsync(string operationId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'operationId' is set
            if (operationId == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'operationId' when calling HistoricUserOperationLogApi->ClearAnnotationUserOperationLog");


            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("operationId", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(operationId)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/history/user-operation/{operationId}/clear-annotation", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ClearAnnotationUserOperationLog", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get User Operation Log Count Queries for the number of user operation log entries that fulfill the given parameters. Takes the same parameters as the [Get User Operation Log (Historic)](https://docs.camunda.org/manual/7.16/reference/rest/history/user-operation-log/get-user-operation-log-query/) method.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">Filter by deployment id. (optional)</param>
        /// <param name="processDefinitionId">Filter by process definition id. (optional)</param>
        /// <param name="processDefinitionKey">Filter by process definition key. (optional)</param>
        /// <param name="processInstanceId">Filter by process instance id. (optional)</param>
        /// <param name="executionId">Filter by execution id. (optional)</param>
        /// <param name="caseDefinitionId">Filter by case definition id. (optional)</param>
        /// <param name="caseInstanceId">Filter by case instance id. (optional)</param>
        /// <param name="caseExecutionId">Filter by case execution id. (optional)</param>
        /// <param name="taskId">Only include operations on this task. (optional)</param>
        /// <param name="externalTaskId">Only include operations on this external task. (optional)</param>
        /// <param name="batchId">Only include operations on this batch. (optional)</param>
        /// <param name="jobId">Filter by job id. (optional)</param>
        /// <param name="jobDefinitionId">Filter by job definition id. (optional)</param>
        /// <param name="userId">Only include operations of this user. (optional)</param>
        /// <param name="operationId">Filter by the id of the operation. This allows fetching of multiple entries which are part of a composite operation. (optional)</param>
        /// <param name="operationType">Filter by the type of the operation like &#x60;Claim&#x60; or &#x60;Delegate&#x60;. See the [Javadoc](https://docs.camunda.org/manual/7.16/reference/javadoc/?org/camunda/bpm/engine/history/UserOperationLogEntry.html) for a list of available operation types. (optional)</param>
        /// <param name="entityType">Filter by the type of the entity that was affected by this operation, possible values are &#x60;Task&#x60;, &#x60;Attachment&#x60; or &#x60;IdentityLink&#x60;. (optional)</param>
        /// <param name="entityTypeIn">Filter by a comma-separated list of types of the entities that was affected by this operation, possible values are &#x60;Task&#x60;, &#x60;Attachment&#x60; or &#x60;IdentityLink&#x60;. (optional)</param>
        /// <param name="category">Filter by the category that this operation is associated with, possible values are &#x60;TaskWorker&#x60;, &#x60;Admin&#x60; or &#x60;Operator&#x60;. (optional)</param>
        /// <param name="categoryIn">Filter by a comma-separated list of categories that this operation is associated with, possible values are &#x60;TaskWorker&#x60;, &#x60;Admin&#x60; or &#x60;Operator&#x60;. (optional)</param>
        /// <param name="property">Only include operations that changed this property, e.g., &#x60;owner&#x60; or &#x60;assignee&#x60;. (optional)</param>
        /// <param name="afterTimestamp">Restrict to entries that were created after the given timestamp. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the timestamp must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., 2013-01-23T14:42:45.000+0200. (optional)</param>
        /// <param name="beforeTimestamp">Restrict to entries that were created before the given timestamp. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the timestamp must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., 2013-01-23T14:42:45.000+0200. (optional)</param>
        /// <returns>CountResultDto</returns>
        public CountResultDto QueryUserOperationCount(string deploymentId = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string processInstanceId = default(string), string executionId = default(string), string caseDefinitionId = default(string), string caseInstanceId = default(string), string caseExecutionId = default(string), string taskId = default(string), string externalTaskId = default(string), string batchId = default(string), string jobId = default(string), string jobDefinitionId = default(string), string userId = default(string), string operationId = default(string), string operationType = default(string), string entityType = default(string), string entityTypeIn = default(string), string category = default(string), string categoryIn = default(string), string property = default(string), DateTime? afterTimestamp = default(DateTime?), DateTime? beforeTimestamp = default(DateTime?))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<CountResultDto> localVarResponse = QueryUserOperationCountWithHttpInfo(deploymentId, processDefinitionId, processDefinitionKey, processInstanceId, executionId, caseDefinitionId, caseInstanceId, caseExecutionId, taskId, externalTaskId, batchId, jobId, jobDefinitionId, userId, operationId, operationType, entityType, entityTypeIn, category, categoryIn, property, afterTimestamp, beforeTimestamp);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get User Operation Log Count Queries for the number of user operation log entries that fulfill the given parameters. Takes the same parameters as the [Get User Operation Log (Historic)](https://docs.camunda.org/manual/7.16/reference/rest/history/user-operation-log/get-user-operation-log-query/) method.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">Filter by deployment id. (optional)</param>
        /// <param name="processDefinitionId">Filter by process definition id. (optional)</param>
        /// <param name="processDefinitionKey">Filter by process definition key. (optional)</param>
        /// <param name="processInstanceId">Filter by process instance id. (optional)</param>
        /// <param name="executionId">Filter by execution id. (optional)</param>
        /// <param name="caseDefinitionId">Filter by case definition id. (optional)</param>
        /// <param name="caseInstanceId">Filter by case instance id. (optional)</param>
        /// <param name="caseExecutionId">Filter by case execution id. (optional)</param>
        /// <param name="taskId">Only include operations on this task. (optional)</param>
        /// <param name="externalTaskId">Only include operations on this external task. (optional)</param>
        /// <param name="batchId">Only include operations on this batch. (optional)</param>
        /// <param name="jobId">Filter by job id. (optional)</param>
        /// <param name="jobDefinitionId">Filter by job definition id. (optional)</param>
        /// <param name="userId">Only include operations of this user. (optional)</param>
        /// <param name="operationId">Filter by the id of the operation. This allows fetching of multiple entries which are part of a composite operation. (optional)</param>
        /// <param name="operationType">Filter by the type of the operation like &#x60;Claim&#x60; or &#x60;Delegate&#x60;. See the [Javadoc](https://docs.camunda.org/manual/7.16/reference/javadoc/?org/camunda/bpm/engine/history/UserOperationLogEntry.html) for a list of available operation types. (optional)</param>
        /// <param name="entityType">Filter by the type of the entity that was affected by this operation, possible values are &#x60;Task&#x60;, &#x60;Attachment&#x60; or &#x60;IdentityLink&#x60;. (optional)</param>
        /// <param name="entityTypeIn">Filter by a comma-separated list of types of the entities that was affected by this operation, possible values are &#x60;Task&#x60;, &#x60;Attachment&#x60; or &#x60;IdentityLink&#x60;. (optional)</param>
        /// <param name="category">Filter by the category that this operation is associated with, possible values are &#x60;TaskWorker&#x60;, &#x60;Admin&#x60; or &#x60;Operator&#x60;. (optional)</param>
        /// <param name="categoryIn">Filter by a comma-separated list of categories that this operation is associated with, possible values are &#x60;TaskWorker&#x60;, &#x60;Admin&#x60; or &#x60;Operator&#x60;. (optional)</param>
        /// <param name="property">Only include operations that changed this property, e.g., &#x60;owner&#x60; or &#x60;assignee&#x60;. (optional)</param>
        /// <param name="afterTimestamp">Restrict to entries that were created after the given timestamp. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the timestamp must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., 2013-01-23T14:42:45.000+0200. (optional)</param>
        /// <param name="beforeTimestamp">Restrict to entries that were created before the given timestamp. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the timestamp must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., 2013-01-23T14:42:45.000+0200. (optional)</param>
        /// <returns>ApiResponse of CountResultDto</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<CountResultDto> QueryUserOperationCountWithHttpInfo(string deploymentId = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string processInstanceId = default(string), string executionId = default(string), string caseDefinitionId = default(string), string caseInstanceId = default(string), string caseExecutionId = default(string), string taskId = default(string), string externalTaskId = default(string), string batchId = default(string), string jobId = default(string), string jobDefinitionId = default(string), string userId = default(string), string operationId = default(string), string operationType = default(string), string entityType = default(string), string entityTypeIn = default(string), string category = default(string), string categoryIn = default(string), string property = default(string), DateTime? afterTimestamp = default(DateTime?), DateTime? beforeTimestamp = default(DateTime?))
        {
            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (deploymentId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "deploymentId", deploymentId));
            }
            if (processDefinitionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processDefinitionId", processDefinitionId));
            }
            if (processDefinitionKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processDefinitionKey", processDefinitionKey));
            }
            if (processInstanceId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processInstanceId", processInstanceId));
            }
            if (executionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "executionId", executionId));
            }
            if (caseDefinitionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "caseDefinitionId", caseDefinitionId));
            }
            if (caseInstanceId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "caseInstanceId", caseInstanceId));
            }
            if (caseExecutionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "caseExecutionId", caseExecutionId));
            }
            if (taskId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "taskId", taskId));
            }
            if (externalTaskId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "externalTaskId", externalTaskId));
            }
            if (batchId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "batchId", batchId));
            }
            if (jobId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "jobId", jobId));
            }
            if (jobDefinitionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "jobDefinitionId", jobDefinitionId));
            }
            if (userId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "userId", userId));
            }
            if (operationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "operationId", operationId));
            }
            if (operationType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "operationType", operationType));
            }
            if (entityType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "entityType", entityType));
            }
            if (entityTypeIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "entityTypeIn", entityTypeIn));
            }
            if (category != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "category", category));
            }
            if (categoryIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "categoryIn", categoryIn));
            }
            if (property != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "property", property));
            }
            if (afterTimestamp != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "afterTimestamp", afterTimestamp));
            }
            if (beforeTimestamp != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "beforeTimestamp", beforeTimestamp));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<CountResultDto>("/history/user-operation/count", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QueryUserOperationCount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get User Operation Log Count Queries for the number of user operation log entries that fulfill the given parameters. Takes the same parameters as the [Get User Operation Log (Historic)](https://docs.camunda.org/manual/7.16/reference/rest/history/user-operation-log/get-user-operation-log-query/) method.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">Filter by deployment id. (optional)</param>
        /// <param name="processDefinitionId">Filter by process definition id. (optional)</param>
        /// <param name="processDefinitionKey">Filter by process definition key. (optional)</param>
        /// <param name="processInstanceId">Filter by process instance id. (optional)</param>
        /// <param name="executionId">Filter by execution id. (optional)</param>
        /// <param name="caseDefinitionId">Filter by case definition id. (optional)</param>
        /// <param name="caseInstanceId">Filter by case instance id. (optional)</param>
        /// <param name="caseExecutionId">Filter by case execution id. (optional)</param>
        /// <param name="taskId">Only include operations on this task. (optional)</param>
        /// <param name="externalTaskId">Only include operations on this external task. (optional)</param>
        /// <param name="batchId">Only include operations on this batch. (optional)</param>
        /// <param name="jobId">Filter by job id. (optional)</param>
        /// <param name="jobDefinitionId">Filter by job definition id. (optional)</param>
        /// <param name="userId">Only include operations of this user. (optional)</param>
        /// <param name="operationId">Filter by the id of the operation. This allows fetching of multiple entries which are part of a composite operation. (optional)</param>
        /// <param name="operationType">Filter by the type of the operation like &#x60;Claim&#x60; or &#x60;Delegate&#x60;. See the [Javadoc](https://docs.camunda.org/manual/7.16/reference/javadoc/?org/camunda/bpm/engine/history/UserOperationLogEntry.html) for a list of available operation types. (optional)</param>
        /// <param name="entityType">Filter by the type of the entity that was affected by this operation, possible values are &#x60;Task&#x60;, &#x60;Attachment&#x60; or &#x60;IdentityLink&#x60;. (optional)</param>
        /// <param name="entityTypeIn">Filter by a comma-separated list of types of the entities that was affected by this operation, possible values are &#x60;Task&#x60;, &#x60;Attachment&#x60; or &#x60;IdentityLink&#x60;. (optional)</param>
        /// <param name="category">Filter by the category that this operation is associated with, possible values are &#x60;TaskWorker&#x60;, &#x60;Admin&#x60; or &#x60;Operator&#x60;. (optional)</param>
        /// <param name="categoryIn">Filter by a comma-separated list of categories that this operation is associated with, possible values are &#x60;TaskWorker&#x60;, &#x60;Admin&#x60; or &#x60;Operator&#x60;. (optional)</param>
        /// <param name="property">Only include operations that changed this property, e.g., &#x60;owner&#x60; or &#x60;assignee&#x60;. (optional)</param>
        /// <param name="afterTimestamp">Restrict to entries that were created after the given timestamp. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the timestamp must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., 2013-01-23T14:42:45.000+0200. (optional)</param>
        /// <param name="beforeTimestamp">Restrict to entries that were created before the given timestamp. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the timestamp must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., 2013-01-23T14:42:45.000+0200. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CountResultDto</returns>
        public async System.Threading.Tasks.Task<CountResultDto> QueryUserOperationCountAsync(string deploymentId = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string processInstanceId = default(string), string executionId = default(string), string caseDefinitionId = default(string), string caseInstanceId = default(string), string caseExecutionId = default(string), string taskId = default(string), string externalTaskId = default(string), string batchId = default(string), string jobId = default(string), string jobDefinitionId = default(string), string userId = default(string), string operationId = default(string), string operationType = default(string), string entityType = default(string), string entityTypeIn = default(string), string category = default(string), string categoryIn = default(string), string property = default(string), DateTime? afterTimestamp = default(DateTime?), DateTime? beforeTimestamp = default(DateTime?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<CountResultDto> localVarResponse = await QueryUserOperationCountWithHttpInfoAsync(deploymentId, processDefinitionId, processDefinitionKey, processInstanceId, executionId, caseDefinitionId, caseInstanceId, caseExecutionId, taskId, externalTaskId, batchId, jobId, jobDefinitionId, userId, operationId, operationType, entityType, entityTypeIn, category, categoryIn, property, afterTimestamp, beforeTimestamp, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get User Operation Log Count Queries for the number of user operation log entries that fulfill the given parameters. Takes the same parameters as the [Get User Operation Log (Historic)](https://docs.camunda.org/manual/7.16/reference/rest/history/user-operation-log/get-user-operation-log-query/) method.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">Filter by deployment id. (optional)</param>
        /// <param name="processDefinitionId">Filter by process definition id. (optional)</param>
        /// <param name="processDefinitionKey">Filter by process definition key. (optional)</param>
        /// <param name="processInstanceId">Filter by process instance id. (optional)</param>
        /// <param name="executionId">Filter by execution id. (optional)</param>
        /// <param name="caseDefinitionId">Filter by case definition id. (optional)</param>
        /// <param name="caseInstanceId">Filter by case instance id. (optional)</param>
        /// <param name="caseExecutionId">Filter by case execution id. (optional)</param>
        /// <param name="taskId">Only include operations on this task. (optional)</param>
        /// <param name="externalTaskId">Only include operations on this external task. (optional)</param>
        /// <param name="batchId">Only include operations on this batch. (optional)</param>
        /// <param name="jobId">Filter by job id. (optional)</param>
        /// <param name="jobDefinitionId">Filter by job definition id. (optional)</param>
        /// <param name="userId">Only include operations of this user. (optional)</param>
        /// <param name="operationId">Filter by the id of the operation. This allows fetching of multiple entries which are part of a composite operation. (optional)</param>
        /// <param name="operationType">Filter by the type of the operation like &#x60;Claim&#x60; or &#x60;Delegate&#x60;. See the [Javadoc](https://docs.camunda.org/manual/7.16/reference/javadoc/?org/camunda/bpm/engine/history/UserOperationLogEntry.html) for a list of available operation types. (optional)</param>
        /// <param name="entityType">Filter by the type of the entity that was affected by this operation, possible values are &#x60;Task&#x60;, &#x60;Attachment&#x60; or &#x60;IdentityLink&#x60;. (optional)</param>
        /// <param name="entityTypeIn">Filter by a comma-separated list of types of the entities that was affected by this operation, possible values are &#x60;Task&#x60;, &#x60;Attachment&#x60; or &#x60;IdentityLink&#x60;. (optional)</param>
        /// <param name="category">Filter by the category that this operation is associated with, possible values are &#x60;TaskWorker&#x60;, &#x60;Admin&#x60; or &#x60;Operator&#x60;. (optional)</param>
        /// <param name="categoryIn">Filter by a comma-separated list of categories that this operation is associated with, possible values are &#x60;TaskWorker&#x60;, &#x60;Admin&#x60; or &#x60;Operator&#x60;. (optional)</param>
        /// <param name="property">Only include operations that changed this property, e.g., &#x60;owner&#x60; or &#x60;assignee&#x60;. (optional)</param>
        /// <param name="afterTimestamp">Restrict to entries that were created after the given timestamp. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the timestamp must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., 2013-01-23T14:42:45.000+0200. (optional)</param>
        /// <param name="beforeTimestamp">Restrict to entries that were created before the given timestamp. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the timestamp must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., 2013-01-23T14:42:45.000+0200. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CountResultDto)</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<CountResultDto>> QueryUserOperationCountWithHttpInfoAsync(string deploymentId = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string processInstanceId = default(string), string executionId = default(string), string caseDefinitionId = default(string), string caseInstanceId = default(string), string caseExecutionId = default(string), string taskId = default(string), string externalTaskId = default(string), string batchId = default(string), string jobId = default(string), string jobDefinitionId = default(string), string userId = default(string), string operationId = default(string), string operationType = default(string), string entityType = default(string), string entityTypeIn = default(string), string category = default(string), string categoryIn = default(string), string property = default(string), DateTime? afterTimestamp = default(DateTime?), DateTime? beforeTimestamp = default(DateTime?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (deploymentId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "deploymentId", deploymentId));
            }
            if (processDefinitionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processDefinitionId", processDefinitionId));
            }
            if (processDefinitionKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processDefinitionKey", processDefinitionKey));
            }
            if (processInstanceId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processInstanceId", processInstanceId));
            }
            if (executionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "executionId", executionId));
            }
            if (caseDefinitionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "caseDefinitionId", caseDefinitionId));
            }
            if (caseInstanceId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "caseInstanceId", caseInstanceId));
            }
            if (caseExecutionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "caseExecutionId", caseExecutionId));
            }
            if (taskId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "taskId", taskId));
            }
            if (externalTaskId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "externalTaskId", externalTaskId));
            }
            if (batchId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "batchId", batchId));
            }
            if (jobId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "jobId", jobId));
            }
            if (jobDefinitionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "jobDefinitionId", jobDefinitionId));
            }
            if (userId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "userId", userId));
            }
            if (operationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "operationId", operationId));
            }
            if (operationType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "operationType", operationType));
            }
            if (entityType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "entityType", entityType));
            }
            if (entityTypeIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "entityTypeIn", entityTypeIn));
            }
            if (category != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "category", category));
            }
            if (categoryIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "categoryIn", categoryIn));
            }
            if (property != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "property", property));
            }
            if (afterTimestamp != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "afterTimestamp", afterTimestamp));
            }
            if (beforeTimestamp != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "beforeTimestamp", beforeTimestamp));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<CountResultDto>("/history/user-operation/count", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QueryUserOperationCount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get User Operation Log (Historic) Queries for user operation log entries that fulfill the given parameters. The size of the result set can be retrieved by using the [Get User Operation Log Count](https://docs.camunda.org/manual/7.16/reference/rest/history/user-operation-log/get-user-operation-log-query-count/) method.  Note that the properties of operation log entries are interpreted as restrictions on the entities they apply to. That means, if a single process instance is updated, the field &#x60;processInstanceId&#x60; is populated. If a single operation updates all process instances of the same process definition, the field &#x60;processInstanceId&#x60; is &#x60;null&#x60; (a &#x60;null&#x60; restriction is viewed as a wildcard, i.e., matches a process instance with any id) and the field &#x60;processDefinitionId&#x60; is populated. This way, which entities were changed by a user operation can easily be reconstructed.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">Filter by deployment id. (optional)</param>
        /// <param name="processDefinitionId">Filter by process definition id. (optional)</param>
        /// <param name="processDefinitionKey">Filter by process definition key. (optional)</param>
        /// <param name="processInstanceId">Filter by process instance id. (optional)</param>
        /// <param name="executionId">Filter by execution id. (optional)</param>
        /// <param name="caseDefinitionId">Filter by case definition id. (optional)</param>
        /// <param name="caseInstanceId">Filter by case instance id. (optional)</param>
        /// <param name="caseExecutionId">Filter by case execution id. (optional)</param>
        /// <param name="taskId">Only include operations on this task. (optional)</param>
        /// <param name="externalTaskId">Only include operations on this external task. (optional)</param>
        /// <param name="batchId">Only include operations on this batch. (optional)</param>
        /// <param name="jobId">Filter by job id. (optional)</param>
        /// <param name="jobDefinitionId">Filter by job definition id. (optional)</param>
        /// <param name="userId">Only include operations of this user. (optional)</param>
        /// <param name="operationId">Filter by the id of the operation. This allows fetching of multiple entries which are part of a composite operation. (optional)</param>
        /// <param name="operationType">Filter by the type of the operation like &#x60;Claim&#x60; or &#x60;Delegate&#x60;. See the [Javadoc](https://docs.camunda.org/manual/7.16/reference/javadoc/?org/camunda/bpm/engine/history/UserOperationLogEntry.html) for a list of available operation types. (optional)</param>
        /// <param name="entityType">Filter by the type of the entity that was affected by this operation, possible values are &#x60;Task&#x60;, &#x60;Attachment&#x60; or &#x60;IdentityLink&#x60;. (optional)</param>
        /// <param name="entityTypeIn">Filter by a comma-separated list of types of the entities that was affected by this operation, possible values are &#x60;Task&#x60;, &#x60;Attachment&#x60; or &#x60;IdentityLink&#x60;. (optional)</param>
        /// <param name="category">Filter by the category that this operation is associated with, possible values are &#x60;TaskWorker&#x60;, &#x60;Admin&#x60; or &#x60;Operator&#x60;. (optional)</param>
        /// <param name="categoryIn">Filter by a comma-separated list of categories that this operation is associated with, possible values are &#x60;TaskWorker&#x60;, &#x60;Admin&#x60; or &#x60;Operator&#x60;. (optional)</param>
        /// <param name="property">Only include operations that changed this property, e.g., &#x60;owner&#x60; or &#x60;assignee&#x60;. (optional)</param>
        /// <param name="afterTimestamp">Restrict to entries that were created after the given timestamp. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the timestamp must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., 2013-01-23T14:42:45.000+0200. (optional)</param>
        /// <param name="beforeTimestamp">Restrict to entries that were created before the given timestamp. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the timestamp must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., 2013-01-23T14:42:45.000+0200. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <returns>List&lt;UserOperationLogEntryDto&gt;</returns>
        public List<UserOperationLogEntryDto> QueryUserOperationEntries(string deploymentId = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string processInstanceId = default(string), string executionId = default(string), string caseDefinitionId = default(string), string caseInstanceId = default(string), string caseExecutionId = default(string), string taskId = default(string), string externalTaskId = default(string), string batchId = default(string), string jobId = default(string), string jobDefinitionId = default(string), string userId = default(string), string operationId = default(string), string operationType = default(string), string entityType = default(string), string entityTypeIn = default(string), string category = default(string), string categoryIn = default(string), string property = default(string), DateTime? afterTimestamp = default(DateTime?), DateTime? beforeTimestamp = default(DateTime?), string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<List<UserOperationLogEntryDto>> localVarResponse = QueryUserOperationEntriesWithHttpInfo(deploymentId, processDefinitionId, processDefinitionKey, processInstanceId, executionId, caseDefinitionId, caseInstanceId, caseExecutionId, taskId, externalTaskId, batchId, jobId, jobDefinitionId, userId, operationId, operationType, entityType, entityTypeIn, category, categoryIn, property, afterTimestamp, beforeTimestamp, sortBy, sortOrder, firstResult, maxResults);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get User Operation Log (Historic) Queries for user operation log entries that fulfill the given parameters. The size of the result set can be retrieved by using the [Get User Operation Log Count](https://docs.camunda.org/manual/7.16/reference/rest/history/user-operation-log/get-user-operation-log-query-count/) method.  Note that the properties of operation log entries are interpreted as restrictions on the entities they apply to. That means, if a single process instance is updated, the field &#x60;processInstanceId&#x60; is populated. If a single operation updates all process instances of the same process definition, the field &#x60;processInstanceId&#x60; is &#x60;null&#x60; (a &#x60;null&#x60; restriction is viewed as a wildcard, i.e., matches a process instance with any id) and the field &#x60;processDefinitionId&#x60; is populated. This way, which entities were changed by a user operation can easily be reconstructed.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">Filter by deployment id. (optional)</param>
        /// <param name="processDefinitionId">Filter by process definition id. (optional)</param>
        /// <param name="processDefinitionKey">Filter by process definition key. (optional)</param>
        /// <param name="processInstanceId">Filter by process instance id. (optional)</param>
        /// <param name="executionId">Filter by execution id. (optional)</param>
        /// <param name="caseDefinitionId">Filter by case definition id. (optional)</param>
        /// <param name="caseInstanceId">Filter by case instance id. (optional)</param>
        /// <param name="caseExecutionId">Filter by case execution id. (optional)</param>
        /// <param name="taskId">Only include operations on this task. (optional)</param>
        /// <param name="externalTaskId">Only include operations on this external task. (optional)</param>
        /// <param name="batchId">Only include operations on this batch. (optional)</param>
        /// <param name="jobId">Filter by job id. (optional)</param>
        /// <param name="jobDefinitionId">Filter by job definition id. (optional)</param>
        /// <param name="userId">Only include operations of this user. (optional)</param>
        /// <param name="operationId">Filter by the id of the operation. This allows fetching of multiple entries which are part of a composite operation. (optional)</param>
        /// <param name="operationType">Filter by the type of the operation like &#x60;Claim&#x60; or &#x60;Delegate&#x60;. See the [Javadoc](https://docs.camunda.org/manual/7.16/reference/javadoc/?org/camunda/bpm/engine/history/UserOperationLogEntry.html) for a list of available operation types. (optional)</param>
        /// <param name="entityType">Filter by the type of the entity that was affected by this operation, possible values are &#x60;Task&#x60;, &#x60;Attachment&#x60; or &#x60;IdentityLink&#x60;. (optional)</param>
        /// <param name="entityTypeIn">Filter by a comma-separated list of types of the entities that was affected by this operation, possible values are &#x60;Task&#x60;, &#x60;Attachment&#x60; or &#x60;IdentityLink&#x60;. (optional)</param>
        /// <param name="category">Filter by the category that this operation is associated with, possible values are &#x60;TaskWorker&#x60;, &#x60;Admin&#x60; or &#x60;Operator&#x60;. (optional)</param>
        /// <param name="categoryIn">Filter by a comma-separated list of categories that this operation is associated with, possible values are &#x60;TaskWorker&#x60;, &#x60;Admin&#x60; or &#x60;Operator&#x60;. (optional)</param>
        /// <param name="property">Only include operations that changed this property, e.g., &#x60;owner&#x60; or &#x60;assignee&#x60;. (optional)</param>
        /// <param name="afterTimestamp">Restrict to entries that were created after the given timestamp. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the timestamp must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., 2013-01-23T14:42:45.000+0200. (optional)</param>
        /// <param name="beforeTimestamp">Restrict to entries that were created before the given timestamp. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the timestamp must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., 2013-01-23T14:42:45.000+0200. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <returns>ApiResponse of List&lt;UserOperationLogEntryDto&gt;</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<List<UserOperationLogEntryDto>> QueryUserOperationEntriesWithHttpInfo(string deploymentId = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string processInstanceId = default(string), string executionId = default(string), string caseDefinitionId = default(string), string caseInstanceId = default(string), string caseExecutionId = default(string), string taskId = default(string), string externalTaskId = default(string), string batchId = default(string), string jobId = default(string), string jobDefinitionId = default(string), string userId = default(string), string operationId = default(string), string operationType = default(string), string entityType = default(string), string entityTypeIn = default(string), string category = default(string), string categoryIn = default(string), string property = default(string), DateTime? afterTimestamp = default(DateTime?), DateTime? beforeTimestamp = default(DateTime?), string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?))
        {
            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (deploymentId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "deploymentId", deploymentId));
            }
            if (processDefinitionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processDefinitionId", processDefinitionId));
            }
            if (processDefinitionKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processDefinitionKey", processDefinitionKey));
            }
            if (processInstanceId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processInstanceId", processInstanceId));
            }
            if (executionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "executionId", executionId));
            }
            if (caseDefinitionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "caseDefinitionId", caseDefinitionId));
            }
            if (caseInstanceId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "caseInstanceId", caseInstanceId));
            }
            if (caseExecutionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "caseExecutionId", caseExecutionId));
            }
            if (taskId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "taskId", taskId));
            }
            if (externalTaskId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "externalTaskId", externalTaskId));
            }
            if (batchId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "batchId", batchId));
            }
            if (jobId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "jobId", jobId));
            }
            if (jobDefinitionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "jobDefinitionId", jobDefinitionId));
            }
            if (userId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "userId", userId));
            }
            if (operationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "operationId", operationId));
            }
            if (operationType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "operationType", operationType));
            }
            if (entityType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "entityType", entityType));
            }
            if (entityTypeIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "entityTypeIn", entityTypeIn));
            }
            if (category != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "category", category));
            }
            if (categoryIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "categoryIn", categoryIn));
            }
            if (property != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "property", property));
            }
            if (afterTimestamp != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "afterTimestamp", afterTimestamp));
            }
            if (beforeTimestamp != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "beforeTimestamp", beforeTimestamp));
            }
            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "sortBy", sortBy));
            }
            if (sortOrder != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "sortOrder", sortOrder));
            }
            if (firstResult != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "firstResult", firstResult));
            }
            if (maxResults != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "maxResults", maxResults));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<UserOperationLogEntryDto>>("/history/user-operation", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QueryUserOperationEntries", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get User Operation Log (Historic) Queries for user operation log entries that fulfill the given parameters. The size of the result set can be retrieved by using the [Get User Operation Log Count](https://docs.camunda.org/manual/7.16/reference/rest/history/user-operation-log/get-user-operation-log-query-count/) method.  Note that the properties of operation log entries are interpreted as restrictions on the entities they apply to. That means, if a single process instance is updated, the field &#x60;processInstanceId&#x60; is populated. If a single operation updates all process instances of the same process definition, the field &#x60;processInstanceId&#x60; is &#x60;null&#x60; (a &#x60;null&#x60; restriction is viewed as a wildcard, i.e., matches a process instance with any id) and the field &#x60;processDefinitionId&#x60; is populated. This way, which entities were changed by a user operation can easily be reconstructed.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">Filter by deployment id. (optional)</param>
        /// <param name="processDefinitionId">Filter by process definition id. (optional)</param>
        /// <param name="processDefinitionKey">Filter by process definition key. (optional)</param>
        /// <param name="processInstanceId">Filter by process instance id. (optional)</param>
        /// <param name="executionId">Filter by execution id. (optional)</param>
        /// <param name="caseDefinitionId">Filter by case definition id. (optional)</param>
        /// <param name="caseInstanceId">Filter by case instance id. (optional)</param>
        /// <param name="caseExecutionId">Filter by case execution id. (optional)</param>
        /// <param name="taskId">Only include operations on this task. (optional)</param>
        /// <param name="externalTaskId">Only include operations on this external task. (optional)</param>
        /// <param name="batchId">Only include operations on this batch. (optional)</param>
        /// <param name="jobId">Filter by job id. (optional)</param>
        /// <param name="jobDefinitionId">Filter by job definition id. (optional)</param>
        /// <param name="userId">Only include operations of this user. (optional)</param>
        /// <param name="operationId">Filter by the id of the operation. This allows fetching of multiple entries which are part of a composite operation. (optional)</param>
        /// <param name="operationType">Filter by the type of the operation like &#x60;Claim&#x60; or &#x60;Delegate&#x60;. See the [Javadoc](https://docs.camunda.org/manual/7.16/reference/javadoc/?org/camunda/bpm/engine/history/UserOperationLogEntry.html) for a list of available operation types. (optional)</param>
        /// <param name="entityType">Filter by the type of the entity that was affected by this operation, possible values are &#x60;Task&#x60;, &#x60;Attachment&#x60; or &#x60;IdentityLink&#x60;. (optional)</param>
        /// <param name="entityTypeIn">Filter by a comma-separated list of types of the entities that was affected by this operation, possible values are &#x60;Task&#x60;, &#x60;Attachment&#x60; or &#x60;IdentityLink&#x60;. (optional)</param>
        /// <param name="category">Filter by the category that this operation is associated with, possible values are &#x60;TaskWorker&#x60;, &#x60;Admin&#x60; or &#x60;Operator&#x60;. (optional)</param>
        /// <param name="categoryIn">Filter by a comma-separated list of categories that this operation is associated with, possible values are &#x60;TaskWorker&#x60;, &#x60;Admin&#x60; or &#x60;Operator&#x60;. (optional)</param>
        /// <param name="property">Only include operations that changed this property, e.g., &#x60;owner&#x60; or &#x60;assignee&#x60;. (optional)</param>
        /// <param name="afterTimestamp">Restrict to entries that were created after the given timestamp. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the timestamp must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., 2013-01-23T14:42:45.000+0200. (optional)</param>
        /// <param name="beforeTimestamp">Restrict to entries that were created before the given timestamp. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the timestamp must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., 2013-01-23T14:42:45.000+0200. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;UserOperationLogEntryDto&gt;</returns>
        public async System.Threading.Tasks.Task<List<UserOperationLogEntryDto>> QueryUserOperationEntriesAsync(string deploymentId = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string processInstanceId = default(string), string executionId = default(string), string caseDefinitionId = default(string), string caseInstanceId = default(string), string caseExecutionId = default(string), string taskId = default(string), string externalTaskId = default(string), string batchId = default(string), string jobId = default(string), string jobDefinitionId = default(string), string userId = default(string), string operationId = default(string), string operationType = default(string), string entityType = default(string), string entityTypeIn = default(string), string category = default(string), string categoryIn = default(string), string property = default(string), DateTime? afterTimestamp = default(DateTime?), DateTime? beforeTimestamp = default(DateTime?), string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<List<UserOperationLogEntryDto>> localVarResponse = await QueryUserOperationEntriesWithHttpInfoAsync(deploymentId, processDefinitionId, processDefinitionKey, processInstanceId, executionId, caseDefinitionId, caseInstanceId, caseExecutionId, taskId, externalTaskId, batchId, jobId, jobDefinitionId, userId, operationId, operationType, entityType, entityTypeIn, category, categoryIn, property, afterTimestamp, beforeTimestamp, sortBy, sortOrder, firstResult, maxResults, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get User Operation Log (Historic) Queries for user operation log entries that fulfill the given parameters. The size of the result set can be retrieved by using the [Get User Operation Log Count](https://docs.camunda.org/manual/7.16/reference/rest/history/user-operation-log/get-user-operation-log-query-count/) method.  Note that the properties of operation log entries are interpreted as restrictions on the entities they apply to. That means, if a single process instance is updated, the field &#x60;processInstanceId&#x60; is populated. If a single operation updates all process instances of the same process definition, the field &#x60;processInstanceId&#x60; is &#x60;null&#x60; (a &#x60;null&#x60; restriction is viewed as a wildcard, i.e., matches a process instance with any id) and the field &#x60;processDefinitionId&#x60; is populated. This way, which entities were changed by a user operation can easily be reconstructed.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">Filter by deployment id. (optional)</param>
        /// <param name="processDefinitionId">Filter by process definition id. (optional)</param>
        /// <param name="processDefinitionKey">Filter by process definition key. (optional)</param>
        /// <param name="processInstanceId">Filter by process instance id. (optional)</param>
        /// <param name="executionId">Filter by execution id. (optional)</param>
        /// <param name="caseDefinitionId">Filter by case definition id. (optional)</param>
        /// <param name="caseInstanceId">Filter by case instance id. (optional)</param>
        /// <param name="caseExecutionId">Filter by case execution id. (optional)</param>
        /// <param name="taskId">Only include operations on this task. (optional)</param>
        /// <param name="externalTaskId">Only include operations on this external task. (optional)</param>
        /// <param name="batchId">Only include operations on this batch. (optional)</param>
        /// <param name="jobId">Filter by job id. (optional)</param>
        /// <param name="jobDefinitionId">Filter by job definition id. (optional)</param>
        /// <param name="userId">Only include operations of this user. (optional)</param>
        /// <param name="operationId">Filter by the id of the operation. This allows fetching of multiple entries which are part of a composite operation. (optional)</param>
        /// <param name="operationType">Filter by the type of the operation like &#x60;Claim&#x60; or &#x60;Delegate&#x60;. See the [Javadoc](https://docs.camunda.org/manual/7.16/reference/javadoc/?org/camunda/bpm/engine/history/UserOperationLogEntry.html) for a list of available operation types. (optional)</param>
        /// <param name="entityType">Filter by the type of the entity that was affected by this operation, possible values are &#x60;Task&#x60;, &#x60;Attachment&#x60; or &#x60;IdentityLink&#x60;. (optional)</param>
        /// <param name="entityTypeIn">Filter by a comma-separated list of types of the entities that was affected by this operation, possible values are &#x60;Task&#x60;, &#x60;Attachment&#x60; or &#x60;IdentityLink&#x60;. (optional)</param>
        /// <param name="category">Filter by the category that this operation is associated with, possible values are &#x60;TaskWorker&#x60;, &#x60;Admin&#x60; or &#x60;Operator&#x60;. (optional)</param>
        /// <param name="categoryIn">Filter by a comma-separated list of categories that this operation is associated with, possible values are &#x60;TaskWorker&#x60;, &#x60;Admin&#x60; or &#x60;Operator&#x60;. (optional)</param>
        /// <param name="property">Only include operations that changed this property, e.g., &#x60;owner&#x60; or &#x60;assignee&#x60;. (optional)</param>
        /// <param name="afterTimestamp">Restrict to entries that were created after the given timestamp. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the timestamp must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., 2013-01-23T14:42:45.000+0200. (optional)</param>
        /// <param name="beforeTimestamp">Restrict to entries that were created before the given timestamp. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the timestamp must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., 2013-01-23T14:42:45.000+0200. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;UserOperationLogEntryDto&gt;)</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<List<UserOperationLogEntryDto>>> QueryUserOperationEntriesWithHttpInfoAsync(string deploymentId = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string processInstanceId = default(string), string executionId = default(string), string caseDefinitionId = default(string), string caseInstanceId = default(string), string caseExecutionId = default(string), string taskId = default(string), string externalTaskId = default(string), string batchId = default(string), string jobId = default(string), string jobDefinitionId = default(string), string userId = default(string), string operationId = default(string), string operationType = default(string), string entityType = default(string), string entityTypeIn = default(string), string category = default(string), string categoryIn = default(string), string property = default(string), DateTime? afterTimestamp = default(DateTime?), DateTime? beforeTimestamp = default(DateTime?), string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (deploymentId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "deploymentId", deploymentId));
            }
            if (processDefinitionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processDefinitionId", processDefinitionId));
            }
            if (processDefinitionKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processDefinitionKey", processDefinitionKey));
            }
            if (processInstanceId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processInstanceId", processInstanceId));
            }
            if (executionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "executionId", executionId));
            }
            if (caseDefinitionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "caseDefinitionId", caseDefinitionId));
            }
            if (caseInstanceId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "caseInstanceId", caseInstanceId));
            }
            if (caseExecutionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "caseExecutionId", caseExecutionId));
            }
            if (taskId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "taskId", taskId));
            }
            if (externalTaskId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "externalTaskId", externalTaskId));
            }
            if (batchId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "batchId", batchId));
            }
            if (jobId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "jobId", jobId));
            }
            if (jobDefinitionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "jobDefinitionId", jobDefinitionId));
            }
            if (userId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "userId", userId));
            }
            if (operationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "operationId", operationId));
            }
            if (operationType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "operationType", operationType));
            }
            if (entityType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "entityType", entityType));
            }
            if (entityTypeIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "entityTypeIn", entityTypeIn));
            }
            if (category != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "category", category));
            }
            if (categoryIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "categoryIn", categoryIn));
            }
            if (property != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "property", property));
            }
            if (afterTimestamp != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "afterTimestamp", afterTimestamp));
            }
            if (beforeTimestamp != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "beforeTimestamp", beforeTimestamp));
            }
            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "sortBy", sortBy));
            }
            if (sortOrder != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "sortOrder", sortOrder));
            }
            if (firstResult != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "firstResult", firstResult));
            }
            if (maxResults != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "maxResults", maxResults));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<UserOperationLogEntryDto>>("/history/user-operation", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QueryUserOperationEntries", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set Annotation to an User Operation Log (Historic) Set an annotation for auditing reasons.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationId">The operation id of the operation log to be updated.</param>
        /// <param name="annotationDto"> (optional)</param>
        /// <returns></returns>
        public void SetAnnotationUserOperationLog(string operationId, AnnotationDto annotationDto = default(AnnotationDto))
        {
            SetAnnotationUserOperationLogWithHttpInfo(operationId, annotationDto);
        }

        /// <summary>
        /// Set Annotation to an User Operation Log (Historic) Set an annotation for auditing reasons.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationId">The operation id of the operation log to be updated.</param>
        /// <param name="annotationDto"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<Object> SetAnnotationUserOperationLogWithHttpInfo(string operationId, AnnotationDto annotationDto = default(AnnotationDto))
        {
            // verify the required parameter 'operationId' is set
            if (operationId == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'operationId' when calling HistoricUserOperationLogApi->SetAnnotationUserOperationLog");

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("operationId", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(operationId)); // path parameter
            localVarRequestOptions.Data = annotationDto;


            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/history/user-operation/{operationId}/set-annotation", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetAnnotationUserOperationLog", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set Annotation to an User Operation Log (Historic) Set an annotation for auditing reasons.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationId">The operation id of the operation log to be updated.</param>
        /// <param name="annotationDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SetAnnotationUserOperationLogAsync(string operationId, AnnotationDto annotationDto = default(AnnotationDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await SetAnnotationUserOperationLogWithHttpInfoAsync(operationId, annotationDto, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Set Annotation to an User Operation Log (Historic) Set an annotation for auditing reasons.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationId">The operation id of the operation log to be updated.</param>
        /// <param name="annotationDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<Object>> SetAnnotationUserOperationLogWithHttpInfoAsync(string operationId, AnnotationDto annotationDto = default(AnnotationDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'operationId' is set
            if (operationId == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'operationId' when calling HistoricUserOperationLogApi->SetAnnotationUserOperationLog");


            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("operationId", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(operationId)); // path parameter
            localVarRequestOptions.Data = annotationDto;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/history/user-operation/{operationId}/set-annotation", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetAnnotationUserOperationLog", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
