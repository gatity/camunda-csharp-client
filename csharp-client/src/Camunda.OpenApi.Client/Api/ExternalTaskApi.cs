/*
 * Camunda Platform REST API
 *
 * OpenApi Spec for Camunda Platform REST API.
 *
 * The version of the OpenAPI document: 7.15.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Camunda.OpenApi.Client.Client;
using Camunda.OpenApi.Client.Model;

namespace Camunda.OpenApi.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IExternalTaskApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Lock an external task by a given id for a specified worker and amount of time.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the external task.</param>
        /// <param name="lockExternalTaskDto"> (optional)</param>
        /// <returns></returns>
        void CallLock(string id, LockExternalTaskDto lockExternalTaskDto = default(LockExternalTaskDto));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Lock an external task by a given id for a specified worker and amount of time.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the external task.</param>
        /// <param name="lockExternalTaskDto"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CallLockWithHttpInfo(string id, LockExternalTaskDto lockExternalTaskDto = default(LockExternalTaskDto));
        /// <summary>
        /// Complete
        /// </summary>
        /// <remarks>
        /// Completes an external task by id and updates process variables.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to complete.</param>
        /// <param name="completeExternalTaskDto"> (optional)</param>
        /// <returns></returns>
        void CompleteExternalTaskResource(string id, CompleteExternalTaskDto completeExternalTaskDto = default(CompleteExternalTaskDto));

        /// <summary>
        /// Complete
        /// </summary>
        /// <remarks>
        /// Completes an external task by id and updates process variables.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to complete.</param>
        /// <param name="completeExternalTaskDto"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CompleteExternalTaskResourceWithHttpInfo(string id, CompleteExternalTaskDto completeExternalTaskDto = default(CompleteExternalTaskDto));
        /// <summary>
        /// Extend Lock
        /// </summary>
        /// <remarks>
        /// Extends the timeout of the lock by a given amount of time.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the external task.</param>
        /// <param name="extendLockOnExternalTaskDto"> (optional)</param>
        /// <returns></returns>
        void ExtendLock(string id, ExtendLockOnExternalTaskDto extendLockOnExternalTaskDto = default(ExtendLockOnExternalTaskDto));

        /// <summary>
        /// Extend Lock
        /// </summary>
        /// <remarks>
        /// Extends the timeout of the lock by a given amount of time.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the external task.</param>
        /// <param name="extendLockOnExternalTaskDto"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ExtendLockWithHttpInfo(string id, ExtendLockOnExternalTaskDto extendLockOnExternalTaskDto = default(ExtendLockOnExternalTaskDto));
        /// <summary>
        /// Fetch and Lock
        /// </summary>
        /// <remarks>
        /// Fetches and locks a specific number of external tasks for execution by a worker. Query can be restricted to specific task topics and for each task topic an individual lock time can be provided.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fetchExternalTasksDto"> (optional)</param>
        /// <returns>List&lt;LockedExternalTaskDto&gt;</returns>
        List<LockedExternalTaskDto> FetchAndLock(FetchExternalTasksDto fetchExternalTasksDto = default(FetchExternalTasksDto));

        /// <summary>
        /// Fetch and Lock
        /// </summary>
        /// <remarks>
        /// Fetches and locks a specific number of external tasks for execution by a worker. Query can be restricted to specific task topics and for each task topic an individual lock time can be provided.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fetchExternalTasksDto"> (optional)</param>
        /// <returns>ApiResponse of List&lt;LockedExternalTaskDto&gt;</returns>
        ApiResponse<List<LockedExternalTaskDto>> FetchAndLockWithHttpInfo(FetchExternalTasksDto fetchExternalTasksDto = default(FetchExternalTasksDto));
        /// <summary>
        /// Get
        /// </summary>
        /// <remarks>
        /// Retrieves an external task by id, corresponding to the &#x60;ExternalTask&#x60; interface in the engine.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the external task to be retrieved.</param>
        /// <returns>ExternalTaskDto</returns>
        ExternalTaskDto GetExternalTask(string id);

        /// <summary>
        /// Get
        /// </summary>
        /// <remarks>
        /// Retrieves an external task by id, corresponding to the &#x60;ExternalTask&#x60; interface in the engine.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the external task to be retrieved.</param>
        /// <returns>ApiResponse of ExternalTaskDto</returns>
        ApiResponse<ExternalTaskDto> GetExternalTaskWithHttpInfo(string id);
        /// <summary>
        /// Get Error Details
        /// </summary>
        /// <remarks>
        /// Retrieves the error details in the context of a running external task by id.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the external task for which the error details should be retrieved.</param>
        /// <returns>string</returns>
        string GetExternalTaskErrorDetails(string id);

        /// <summary>
        /// Get Error Details
        /// </summary>
        /// <remarks>
        /// Retrieves the error details in the context of a running external task by id.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the external task for which the error details should be retrieved.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> GetExternalTaskErrorDetailsWithHttpInfo(string id);
        /// <summary>
        /// Get List
        /// </summary>
        /// <remarks>
        /// Queries for the external tasks that fulfill given parameters. Parameters may be static as well as dynamic runtime properties of executions. The size of the result set can be retrieved by using the [Get External Task Count](https://docs.camunda.org/manual/7.15/reference/rest/external-task/get-query-count/) method.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalTaskId">Filter by an external task&#39;s id. (optional)</param>
        /// <param name="externalTaskIdIn">Filter by the comma-separated list of external task ids. (optional)</param>
        /// <param name="topicName">Filter by an external task topic. (optional)</param>
        /// <param name="workerId">Filter by the id of the worker that the task was most recently locked by. (optional)</param>
        /// <param name="locked">Only include external tasks that are currently locked (i.e., they have a lock time and it has not expired). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="notLocked">Only include external tasks that are currently not locked (i.e., they have no lock or it has expired). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="withRetriesLeft">Only include external tasks that have a positive (&amp;gt; 0) number of retries (or &#x60;null&#x60;). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="noRetriesLeft">Only include external tasks that have 0 retries. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="lockExpirationAfter">Restrict to external tasks that have a lock that expires after a given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="lockExpirationBefore">Restrict to external tasks that have a lock that expires before a given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="activityId">Filter by the id of the activity that an external task is created for. (optional)</param>
        /// <param name="activityIdIn">Filter by the comma-separated list of ids of the activities that an external task is created for. (optional)</param>
        /// <param name="executionId">Filter by the id of the execution that an external task belongs to. (optional)</param>
        /// <param name="processInstanceId">Filter by the id of the process instance that an external task belongs to. (optional)</param>
        /// <param name="processInstanceIdIn">Filter by a comma-separated list of process instance ids that an external task may belong to. (optional)</param>
        /// <param name="processDefinitionId">Filter by the id of the process definition that an external task belongs to. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. An external task must have one of the given tenant ids. (optional)</param>
        /// <param name="active">Only include active tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="suspended">Only include suspended tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="priorityHigherThanOrEquals">Only include jobs with a priority higher than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)</param>
        /// <param name="priorityLowerThanOrEquals">Only include jobs with a priority lower than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <returns>List&lt;ExternalTaskDto&gt;</returns>
        List<ExternalTaskDto> GetExternalTasks(string externalTaskId = default(string), string externalTaskIdIn = default(string), string topicName = default(string), string workerId = default(string), bool? locked = default(bool?), bool? notLocked = default(bool?), bool? withRetriesLeft = default(bool?), bool? noRetriesLeft = default(bool?), DateTime? lockExpirationAfter = default(DateTime?), DateTime? lockExpirationBefore = default(DateTime?), string activityId = default(string), string activityIdIn = default(string), string executionId = default(string), string processInstanceId = default(string), string processInstanceIdIn = default(string), string processDefinitionId = default(string), string tenantIdIn = default(string), bool? active = default(bool?), bool? suspended = default(bool?), long? priorityHigherThanOrEquals = default(long?), long? priorityLowerThanOrEquals = default(long?), string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?));

        /// <summary>
        /// Get List
        /// </summary>
        /// <remarks>
        /// Queries for the external tasks that fulfill given parameters. Parameters may be static as well as dynamic runtime properties of executions. The size of the result set can be retrieved by using the [Get External Task Count](https://docs.camunda.org/manual/7.15/reference/rest/external-task/get-query-count/) method.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalTaskId">Filter by an external task&#39;s id. (optional)</param>
        /// <param name="externalTaskIdIn">Filter by the comma-separated list of external task ids. (optional)</param>
        /// <param name="topicName">Filter by an external task topic. (optional)</param>
        /// <param name="workerId">Filter by the id of the worker that the task was most recently locked by. (optional)</param>
        /// <param name="locked">Only include external tasks that are currently locked (i.e., they have a lock time and it has not expired). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="notLocked">Only include external tasks that are currently not locked (i.e., they have no lock or it has expired). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="withRetriesLeft">Only include external tasks that have a positive (&amp;gt; 0) number of retries (or &#x60;null&#x60;). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="noRetriesLeft">Only include external tasks that have 0 retries. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="lockExpirationAfter">Restrict to external tasks that have a lock that expires after a given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="lockExpirationBefore">Restrict to external tasks that have a lock that expires before a given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="activityId">Filter by the id of the activity that an external task is created for. (optional)</param>
        /// <param name="activityIdIn">Filter by the comma-separated list of ids of the activities that an external task is created for. (optional)</param>
        /// <param name="executionId">Filter by the id of the execution that an external task belongs to. (optional)</param>
        /// <param name="processInstanceId">Filter by the id of the process instance that an external task belongs to. (optional)</param>
        /// <param name="processInstanceIdIn">Filter by a comma-separated list of process instance ids that an external task may belong to. (optional)</param>
        /// <param name="processDefinitionId">Filter by the id of the process definition that an external task belongs to. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. An external task must have one of the given tenant ids. (optional)</param>
        /// <param name="active">Only include active tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="suspended">Only include suspended tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="priorityHigherThanOrEquals">Only include jobs with a priority higher than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)</param>
        /// <param name="priorityLowerThanOrEquals">Only include jobs with a priority lower than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <returns>ApiResponse of List&lt;ExternalTaskDto&gt;</returns>
        ApiResponse<List<ExternalTaskDto>> GetExternalTasksWithHttpInfo(string externalTaskId = default(string), string externalTaskIdIn = default(string), string topicName = default(string), string workerId = default(string), bool? locked = default(bool?), bool? notLocked = default(bool?), bool? withRetriesLeft = default(bool?), bool? noRetriesLeft = default(bool?), DateTime? lockExpirationAfter = default(DateTime?), DateTime? lockExpirationBefore = default(DateTime?), string activityId = default(string), string activityIdIn = default(string), string executionId = default(string), string processInstanceId = default(string), string processInstanceIdIn = default(string), string processDefinitionId = default(string), string tenantIdIn = default(string), bool? active = default(bool?), bool? suspended = default(bool?), long? priorityHigherThanOrEquals = default(long?), long? priorityLowerThanOrEquals = default(long?), string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?));
        /// <summary>
        /// Get List Count
        /// </summary>
        /// <remarks>
        /// Queries for the number of external tasks that fulfill given parameters. Takes the same parameters as the [Get External Tasks](https://docs.camunda.org/manual/7.15/reference/rest/external-task/get-query/) method.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalTaskId">Filter by an external task&#39;s id. (optional)</param>
        /// <param name="externalTaskIdIn">Filter by the comma-separated list of external task ids. (optional)</param>
        /// <param name="topicName">Filter by an external task topic. (optional)</param>
        /// <param name="workerId">Filter by the id of the worker that the task was most recently locked by. (optional)</param>
        /// <param name="locked">Only include external tasks that are currently locked (i.e., they have a lock time and it has not expired). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="notLocked">Only include external tasks that are currently not locked (i.e., they have no lock or it has expired). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="withRetriesLeft">Only include external tasks that have a positive (&amp;gt; 0) number of retries (or &#x60;null&#x60;). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="noRetriesLeft">Only include external tasks that have 0 retries. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="lockExpirationAfter">Restrict to external tasks that have a lock that expires after a given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="lockExpirationBefore">Restrict to external tasks that have a lock that expires before a given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="activityId">Filter by the id of the activity that an external task is created for. (optional)</param>
        /// <param name="activityIdIn">Filter by the comma-separated list of ids of the activities that an external task is created for. (optional)</param>
        /// <param name="executionId">Filter by the id of the execution that an external task belongs to. (optional)</param>
        /// <param name="processInstanceId">Filter by the id of the process instance that an external task belongs to. (optional)</param>
        /// <param name="processInstanceIdIn">Filter by a comma-separated list of process instance ids that an external task may belong to. (optional)</param>
        /// <param name="processDefinitionId">Filter by the id of the process definition that an external task belongs to. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. An external task must have one of the given tenant ids. (optional)</param>
        /// <param name="active">Only include active tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="suspended">Only include suspended tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="priorityHigherThanOrEquals">Only include jobs with a priority higher than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)</param>
        /// <param name="priorityLowerThanOrEquals">Only include jobs with a priority lower than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)</param>
        /// <returns>CountResultDto</returns>
        CountResultDto GetExternalTasksCount(string externalTaskId = default(string), string externalTaskIdIn = default(string), string topicName = default(string), string workerId = default(string), bool? locked = default(bool?), bool? notLocked = default(bool?), bool? withRetriesLeft = default(bool?), bool? noRetriesLeft = default(bool?), DateTime? lockExpirationAfter = default(DateTime?), DateTime? lockExpirationBefore = default(DateTime?), string activityId = default(string), string activityIdIn = default(string), string executionId = default(string), string processInstanceId = default(string), string processInstanceIdIn = default(string), string processDefinitionId = default(string), string tenantIdIn = default(string), bool? active = default(bool?), bool? suspended = default(bool?), long? priorityHigherThanOrEquals = default(long?), long? priorityLowerThanOrEquals = default(long?));

        /// <summary>
        /// Get List Count
        /// </summary>
        /// <remarks>
        /// Queries for the number of external tasks that fulfill given parameters. Takes the same parameters as the [Get External Tasks](https://docs.camunda.org/manual/7.15/reference/rest/external-task/get-query/) method.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalTaskId">Filter by an external task&#39;s id. (optional)</param>
        /// <param name="externalTaskIdIn">Filter by the comma-separated list of external task ids. (optional)</param>
        /// <param name="topicName">Filter by an external task topic. (optional)</param>
        /// <param name="workerId">Filter by the id of the worker that the task was most recently locked by. (optional)</param>
        /// <param name="locked">Only include external tasks that are currently locked (i.e., they have a lock time and it has not expired). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="notLocked">Only include external tasks that are currently not locked (i.e., they have no lock or it has expired). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="withRetriesLeft">Only include external tasks that have a positive (&amp;gt; 0) number of retries (or &#x60;null&#x60;). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="noRetriesLeft">Only include external tasks that have 0 retries. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="lockExpirationAfter">Restrict to external tasks that have a lock that expires after a given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="lockExpirationBefore">Restrict to external tasks that have a lock that expires before a given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="activityId">Filter by the id of the activity that an external task is created for. (optional)</param>
        /// <param name="activityIdIn">Filter by the comma-separated list of ids of the activities that an external task is created for. (optional)</param>
        /// <param name="executionId">Filter by the id of the execution that an external task belongs to. (optional)</param>
        /// <param name="processInstanceId">Filter by the id of the process instance that an external task belongs to. (optional)</param>
        /// <param name="processInstanceIdIn">Filter by a comma-separated list of process instance ids that an external task may belong to. (optional)</param>
        /// <param name="processDefinitionId">Filter by the id of the process definition that an external task belongs to. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. An external task must have one of the given tenant ids. (optional)</param>
        /// <param name="active">Only include active tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="suspended">Only include suspended tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="priorityHigherThanOrEquals">Only include jobs with a priority higher than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)</param>
        /// <param name="priorityLowerThanOrEquals">Only include jobs with a priority lower than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)</param>
        /// <returns>ApiResponse of CountResultDto</returns>
        ApiResponse<CountResultDto> GetExternalTasksCountWithHttpInfo(string externalTaskId = default(string), string externalTaskIdIn = default(string), string topicName = default(string), string workerId = default(string), bool? locked = default(bool?), bool? notLocked = default(bool?), bool? withRetriesLeft = default(bool?), bool? noRetriesLeft = default(bool?), DateTime? lockExpirationAfter = default(DateTime?), DateTime? lockExpirationBefore = default(DateTime?), string activityId = default(string), string activityIdIn = default(string), string executionId = default(string), string processInstanceId = default(string), string processInstanceIdIn = default(string), string processDefinitionId = default(string), string tenantIdIn = default(string), bool? active = default(bool?), bool? suspended = default(bool?), long? priorityHigherThanOrEquals = default(long?), long? priorityLowerThanOrEquals = default(long?));
        /// <summary>
        /// Get External Task Topic Names
        /// </summary>
        /// <remarks>
        /// Queries for distinct topic names of external tasks that fulfill given parameters. Query can be restricted to only tasks with retries left, tasks that are locked, or tasks that are unlocked. The parameters withLockedTasks and withUnlockedTasks are exclusive. Setting them both to true will return an empty list. Providing no parameters will return a list of all distinct topic names with external tasks.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="withLockedTasks">Only include external tasks that are currently locked (i.e., they have a lock time and it has not expired). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="withUnlockedTasks">Only include external tasks that are currently not locked (i.e., they have no lock or it has expired). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="withRetriesLeft">Only include external tasks that have a positive (&amp;gt; 0) number of retries (or &#x60;null&#x60;). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <returns>List&lt;string&gt;</returns>
        List<string> GetTopicNames(bool? withLockedTasks = default(bool?), bool? withUnlockedTasks = default(bool?), bool? withRetriesLeft = default(bool?));

        /// <summary>
        /// Get External Task Topic Names
        /// </summary>
        /// <remarks>
        /// Queries for distinct topic names of external tasks that fulfill given parameters. Query can be restricted to only tasks with retries left, tasks that are locked, or tasks that are unlocked. The parameters withLockedTasks and withUnlockedTasks are exclusive. Setting them both to true will return an empty list. Providing no parameters will return a list of all distinct topic names with external tasks.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="withLockedTasks">Only include external tasks that are currently locked (i.e., they have a lock time and it has not expired). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="withUnlockedTasks">Only include external tasks that are currently not locked (i.e., they have no lock or it has expired). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="withRetriesLeft">Only include external tasks that have a positive (&amp;gt; 0) number of retries (or &#x60;null&#x60;). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        ApiResponse<List<string>> GetTopicNamesWithHttpInfo(bool? withLockedTasks = default(bool?), bool? withUnlockedTasks = default(bool?), bool? withRetriesLeft = default(bool?));
        /// <summary>
        /// Handle BPMN Error
        /// </summary>
        /// <remarks>
        /// Reports a business error in the context of a running external task by id. The error code must be specified to identify the BPMN error handler.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the external task in which context a BPMN error is reported.</param>
        /// <param name="externalTaskBpmnError"> (optional)</param>
        /// <returns></returns>
        void HandleExternalTaskBpmnError(string id, ExternalTaskBpmnError externalTaskBpmnError = default(ExternalTaskBpmnError));

        /// <summary>
        /// Handle BPMN Error
        /// </summary>
        /// <remarks>
        /// Reports a business error in the context of a running external task by id. The error code must be specified to identify the BPMN error handler.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the external task in which context a BPMN error is reported.</param>
        /// <param name="externalTaskBpmnError"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> HandleExternalTaskBpmnErrorWithHttpInfo(string id, ExternalTaskBpmnError externalTaskBpmnError = default(ExternalTaskBpmnError));
        /// <summary>
        /// Handle Failure
        /// </summary>
        /// <remarks>
        /// Reports a failure to execute an external task by id. A number of retries and a timeout until the task can be retried can be specified. If retries are set to 0, an incident for this task is created.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the external task to report a failure for.</param>
        /// <param name="externalTaskFailureDto"> (optional)</param>
        /// <returns></returns>
        void HandleFailure(string id, ExternalTaskFailureDto externalTaskFailureDto = default(ExternalTaskFailureDto));

        /// <summary>
        /// Handle Failure
        /// </summary>
        /// <remarks>
        /// Reports a failure to execute an external task by id. A number of retries and a timeout until the task can be retried can be specified. If retries are set to 0, an incident for this task is created.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the external task to report a failure for.</param>
        /// <param name="externalTaskFailureDto"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> HandleFailureWithHttpInfo(string id, ExternalTaskFailureDto externalTaskFailureDto = default(ExternalTaskFailureDto));
        /// <summary>
        /// Get List (POST)
        /// </summary>
        /// <remarks>
        /// Queries for external tasks that fulfill given parameters in the form of a JSON object.  This method is slightly more powerful than the [Get External Tasks](https://docs.camunda.org/manual/7.15/reference/rest/external-task/get-query/) method because it allows to specify a hierarchical result sorting.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="externalTaskQueryDto"> (optional)</param>
        /// <returns>List&lt;ExternalTaskDto&gt;</returns>
        List<ExternalTaskDto> QueryExternalTasks(int? firstResult = default(int?), int? maxResults = default(int?), ExternalTaskQueryDto externalTaskQueryDto = default(ExternalTaskQueryDto));

        /// <summary>
        /// Get List (POST)
        /// </summary>
        /// <remarks>
        /// Queries for external tasks that fulfill given parameters in the form of a JSON object.  This method is slightly more powerful than the [Get External Tasks](https://docs.camunda.org/manual/7.15/reference/rest/external-task/get-query/) method because it allows to specify a hierarchical result sorting.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="externalTaskQueryDto"> (optional)</param>
        /// <returns>ApiResponse of List&lt;ExternalTaskDto&gt;</returns>
        ApiResponse<List<ExternalTaskDto>> QueryExternalTasksWithHttpInfo(int? firstResult = default(int?), int? maxResults = default(int?), ExternalTaskQueryDto externalTaskQueryDto = default(ExternalTaskQueryDto));
        /// <summary>
        /// Get List Count (POST)
        /// </summary>
        /// <remarks>
        /// Queries for the number of external tasks that fulfill given parameters. This method takes the same message body as the [Get External Tasks (POST)](https://docs.camunda.org/manual/7.15/reference/rest/external-task/post-query/) method.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalTaskQueryDto"> (optional)</param>
        /// <returns>CountResultDto</returns>
        CountResultDto QueryExternalTasksCount(ExternalTaskQueryDto externalTaskQueryDto = default(ExternalTaskQueryDto));

        /// <summary>
        /// Get List Count (POST)
        /// </summary>
        /// <remarks>
        /// Queries for the number of external tasks that fulfill given parameters. This method takes the same message body as the [Get External Tasks (POST)](https://docs.camunda.org/manual/7.15/reference/rest/external-task/post-query/) method.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalTaskQueryDto"> (optional)</param>
        /// <returns>ApiResponse of CountResultDto</returns>
        ApiResponse<CountResultDto> QueryExternalTasksCountWithHttpInfo(ExternalTaskQueryDto externalTaskQueryDto = default(ExternalTaskQueryDto));
        /// <summary>
        /// Set Priority
        /// </summary>
        /// <remarks>
        /// Sets the priority of an existing external task by id. The default value of a priority is 0.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the external task to set the priority for.</param>
        /// <param name="priorityDto"> (optional)</param>
        /// <returns></returns>
        void SetExternalTaskResourcePriority(string id, PriorityDto priorityDto = default(PriorityDto));

        /// <summary>
        /// Set Priority
        /// </summary>
        /// <remarks>
        /// Sets the priority of an existing external task by id. The default value of a priority is 0.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the external task to set the priority for.</param>
        /// <param name="priorityDto"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SetExternalTaskResourcePriorityWithHttpInfo(string id, PriorityDto priorityDto = default(PriorityDto));
        /// <summary>
        /// Set Retries
        /// </summary>
        /// <remarks>
        /// Sets the number of retries left to execute an external task by id. If retries are set to 0, an  incident is created.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the external task to set the number of retries for.</param>
        /// <param name="retriesDto"> (optional)</param>
        /// <returns></returns>
        void SetExternalTaskResourceRetries(string id, RetriesDto retriesDto = default(RetriesDto));

        /// <summary>
        /// Set Retries
        /// </summary>
        /// <remarks>
        /// Sets the number of retries left to execute an external task by id. If retries are set to 0, an  incident is created.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the external task to set the number of retries for.</param>
        /// <param name="retriesDto"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SetExternalTaskResourceRetriesWithHttpInfo(string id, RetriesDto retriesDto = default(RetriesDto));
        /// <summary>
        /// Set Retries Sync
        /// </summary>
        /// <remarks>
        /// Sets the number of retries left to execute external tasks by id synchronously. If retries are set to 0,  an incident is created.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setRetriesForExternalTasksDto"> (optional)</param>
        /// <returns></returns>
        void SetExternalTaskRetries(SetRetriesForExternalTasksDto setRetriesForExternalTasksDto = default(SetRetriesForExternalTasksDto));

        /// <summary>
        /// Set Retries Sync
        /// </summary>
        /// <remarks>
        /// Sets the number of retries left to execute external tasks by id synchronously. If retries are set to 0,  an incident is created.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setRetriesForExternalTasksDto"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SetExternalTaskRetriesWithHttpInfo(SetRetriesForExternalTasksDto setRetriesForExternalTasksDto = default(SetRetriesForExternalTasksDto));
        /// <summary>
        /// Set Retries Async
        /// </summary>
        /// <remarks>
        /// Sets the number of retries left to execute external tasks by id asynchronously. If retries are set to 0, an incident is created.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setRetriesForExternalTasksDto"> (optional)</param>
        /// <returns>BatchDto</returns>
        BatchDto SetExternalTaskRetriesAsyncOperation(SetRetriesForExternalTasksDto setRetriesForExternalTasksDto = default(SetRetriesForExternalTasksDto));

        /// <summary>
        /// Set Retries Async
        /// </summary>
        /// <remarks>
        /// Sets the number of retries left to execute external tasks by id asynchronously. If retries are set to 0, an incident is created.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setRetriesForExternalTasksDto"> (optional)</param>
        /// <returns>ApiResponse of BatchDto</returns>
        ApiResponse<BatchDto> SetExternalTaskRetriesAsyncOperationWithHttpInfo(SetRetriesForExternalTasksDto setRetriesForExternalTasksDto = default(SetRetriesForExternalTasksDto));
        /// <summary>
        /// Unlock
        /// </summary>
        /// <remarks>
        /// Unlocks an external task by id. Clears the task&#39;s lock expiration time and worker id.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the external task to unlock.</param>
        /// <returns></returns>
        void Unlock(string id);

        /// <summary>
        /// Unlock
        /// </summary>
        /// <remarks>
        /// Unlocks an external task by id. Clears the task&#39;s lock expiration time and worker id.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the external task to unlock.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UnlockWithHttpInfo(string id);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IExternalTaskApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Lock an external task by a given id for a specified worker and amount of time.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the external task.</param>
        /// <param name="lockExternalTaskDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CallLockAsync(string id, LockExternalTaskDto lockExternalTaskDto = default(LockExternalTaskDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Lock an external task by a given id for a specified worker and amount of time.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the external task.</param>
        /// <param name="lockExternalTaskDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CallLockWithHttpInfoAsync(string id, LockExternalTaskDto lockExternalTaskDto = default(LockExternalTaskDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Complete
        /// </summary>
        /// <remarks>
        /// Completes an external task by id and updates process variables.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to complete.</param>
        /// <param name="completeExternalTaskDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CompleteExternalTaskResourceAsync(string id, CompleteExternalTaskDto completeExternalTaskDto = default(CompleteExternalTaskDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Complete
        /// </summary>
        /// <remarks>
        /// Completes an external task by id and updates process variables.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to complete.</param>
        /// <param name="completeExternalTaskDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CompleteExternalTaskResourceWithHttpInfoAsync(string id, CompleteExternalTaskDto completeExternalTaskDto = default(CompleteExternalTaskDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Extend Lock
        /// </summary>
        /// <remarks>
        /// Extends the timeout of the lock by a given amount of time.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the external task.</param>
        /// <param name="extendLockOnExternalTaskDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ExtendLockAsync(string id, ExtendLockOnExternalTaskDto extendLockOnExternalTaskDto = default(ExtendLockOnExternalTaskDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Extend Lock
        /// </summary>
        /// <remarks>
        /// Extends the timeout of the lock by a given amount of time.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the external task.</param>
        /// <param name="extendLockOnExternalTaskDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ExtendLockWithHttpInfoAsync(string id, ExtendLockOnExternalTaskDto extendLockOnExternalTaskDto = default(ExtendLockOnExternalTaskDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Fetch and Lock
        /// </summary>
        /// <remarks>
        /// Fetches and locks a specific number of external tasks for execution by a worker. Query can be restricted to specific task topics and for each task topic an individual lock time can be provided.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fetchExternalTasksDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;LockedExternalTaskDto&gt;</returns>
        System.Threading.Tasks.Task<List<LockedExternalTaskDto>> FetchAndLockAsync(FetchExternalTasksDto fetchExternalTasksDto = default(FetchExternalTasksDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Fetch and Lock
        /// </summary>
        /// <remarks>
        /// Fetches and locks a specific number of external tasks for execution by a worker. Query can be restricted to specific task topics and for each task topic an individual lock time can be provided.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fetchExternalTasksDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;LockedExternalTaskDto&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<LockedExternalTaskDto>>> FetchAndLockWithHttpInfoAsync(FetchExternalTasksDto fetchExternalTasksDto = default(FetchExternalTasksDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get
        /// </summary>
        /// <remarks>
        /// Retrieves an external task by id, corresponding to the &#x60;ExternalTask&#x60; interface in the engine.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the external task to be retrieved.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ExternalTaskDto</returns>
        System.Threading.Tasks.Task<ExternalTaskDto> GetExternalTaskAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get
        /// </summary>
        /// <remarks>
        /// Retrieves an external task by id, corresponding to the &#x60;ExternalTask&#x60; interface in the engine.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the external task to be retrieved.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ExternalTaskDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<ExternalTaskDto>> GetExternalTaskWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Error Details
        /// </summary>
        /// <remarks>
        /// Retrieves the error details in the context of a running external task by id.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the external task for which the error details should be retrieved.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> GetExternalTaskErrorDetailsAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Error Details
        /// </summary>
        /// <remarks>
        /// Retrieves the error details in the context of a running external task by id.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the external task for which the error details should be retrieved.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> GetExternalTaskErrorDetailsWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get List
        /// </summary>
        /// <remarks>
        /// Queries for the external tasks that fulfill given parameters. Parameters may be static as well as dynamic runtime properties of executions. The size of the result set can be retrieved by using the [Get External Task Count](https://docs.camunda.org/manual/7.15/reference/rest/external-task/get-query-count/) method.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalTaskId">Filter by an external task&#39;s id. (optional)</param>
        /// <param name="externalTaskIdIn">Filter by the comma-separated list of external task ids. (optional)</param>
        /// <param name="topicName">Filter by an external task topic. (optional)</param>
        /// <param name="workerId">Filter by the id of the worker that the task was most recently locked by. (optional)</param>
        /// <param name="locked">Only include external tasks that are currently locked (i.e., they have a lock time and it has not expired). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="notLocked">Only include external tasks that are currently not locked (i.e., they have no lock or it has expired). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="withRetriesLeft">Only include external tasks that have a positive (&amp;gt; 0) number of retries (or &#x60;null&#x60;). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="noRetriesLeft">Only include external tasks that have 0 retries. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="lockExpirationAfter">Restrict to external tasks that have a lock that expires after a given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="lockExpirationBefore">Restrict to external tasks that have a lock that expires before a given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="activityId">Filter by the id of the activity that an external task is created for. (optional)</param>
        /// <param name="activityIdIn">Filter by the comma-separated list of ids of the activities that an external task is created for. (optional)</param>
        /// <param name="executionId">Filter by the id of the execution that an external task belongs to. (optional)</param>
        /// <param name="processInstanceId">Filter by the id of the process instance that an external task belongs to. (optional)</param>
        /// <param name="processInstanceIdIn">Filter by a comma-separated list of process instance ids that an external task may belong to. (optional)</param>
        /// <param name="processDefinitionId">Filter by the id of the process definition that an external task belongs to. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. An external task must have one of the given tenant ids. (optional)</param>
        /// <param name="active">Only include active tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="suspended">Only include suspended tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="priorityHigherThanOrEquals">Only include jobs with a priority higher than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)</param>
        /// <param name="priorityLowerThanOrEquals">Only include jobs with a priority lower than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ExternalTaskDto&gt;</returns>
        System.Threading.Tasks.Task<List<ExternalTaskDto>> GetExternalTasksAsync(string externalTaskId = default(string), string externalTaskIdIn = default(string), string topicName = default(string), string workerId = default(string), bool? locked = default(bool?), bool? notLocked = default(bool?), bool? withRetriesLeft = default(bool?), bool? noRetriesLeft = default(bool?), DateTime? lockExpirationAfter = default(DateTime?), DateTime? lockExpirationBefore = default(DateTime?), string activityId = default(string), string activityIdIn = default(string), string executionId = default(string), string processInstanceId = default(string), string processInstanceIdIn = default(string), string processDefinitionId = default(string), string tenantIdIn = default(string), bool? active = default(bool?), bool? suspended = default(bool?), long? priorityHigherThanOrEquals = default(long?), long? priorityLowerThanOrEquals = default(long?), string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get List
        /// </summary>
        /// <remarks>
        /// Queries for the external tasks that fulfill given parameters. Parameters may be static as well as dynamic runtime properties of executions. The size of the result set can be retrieved by using the [Get External Task Count](https://docs.camunda.org/manual/7.15/reference/rest/external-task/get-query-count/) method.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalTaskId">Filter by an external task&#39;s id. (optional)</param>
        /// <param name="externalTaskIdIn">Filter by the comma-separated list of external task ids. (optional)</param>
        /// <param name="topicName">Filter by an external task topic. (optional)</param>
        /// <param name="workerId">Filter by the id of the worker that the task was most recently locked by. (optional)</param>
        /// <param name="locked">Only include external tasks that are currently locked (i.e., they have a lock time and it has not expired). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="notLocked">Only include external tasks that are currently not locked (i.e., they have no lock or it has expired). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="withRetriesLeft">Only include external tasks that have a positive (&amp;gt; 0) number of retries (or &#x60;null&#x60;). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="noRetriesLeft">Only include external tasks that have 0 retries. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="lockExpirationAfter">Restrict to external tasks that have a lock that expires after a given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="lockExpirationBefore">Restrict to external tasks that have a lock that expires before a given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="activityId">Filter by the id of the activity that an external task is created for. (optional)</param>
        /// <param name="activityIdIn">Filter by the comma-separated list of ids of the activities that an external task is created for. (optional)</param>
        /// <param name="executionId">Filter by the id of the execution that an external task belongs to. (optional)</param>
        /// <param name="processInstanceId">Filter by the id of the process instance that an external task belongs to. (optional)</param>
        /// <param name="processInstanceIdIn">Filter by a comma-separated list of process instance ids that an external task may belong to. (optional)</param>
        /// <param name="processDefinitionId">Filter by the id of the process definition that an external task belongs to. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. An external task must have one of the given tenant ids. (optional)</param>
        /// <param name="active">Only include active tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="suspended">Only include suspended tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="priorityHigherThanOrEquals">Only include jobs with a priority higher than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)</param>
        /// <param name="priorityLowerThanOrEquals">Only include jobs with a priority lower than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ExternalTaskDto&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ExternalTaskDto>>> GetExternalTasksWithHttpInfoAsync(string externalTaskId = default(string), string externalTaskIdIn = default(string), string topicName = default(string), string workerId = default(string), bool? locked = default(bool?), bool? notLocked = default(bool?), bool? withRetriesLeft = default(bool?), bool? noRetriesLeft = default(bool?), DateTime? lockExpirationAfter = default(DateTime?), DateTime? lockExpirationBefore = default(DateTime?), string activityId = default(string), string activityIdIn = default(string), string executionId = default(string), string processInstanceId = default(string), string processInstanceIdIn = default(string), string processDefinitionId = default(string), string tenantIdIn = default(string), bool? active = default(bool?), bool? suspended = default(bool?), long? priorityHigherThanOrEquals = default(long?), long? priorityLowerThanOrEquals = default(long?), string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get List Count
        /// </summary>
        /// <remarks>
        /// Queries for the number of external tasks that fulfill given parameters. Takes the same parameters as the [Get External Tasks](https://docs.camunda.org/manual/7.15/reference/rest/external-task/get-query/) method.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalTaskId">Filter by an external task&#39;s id. (optional)</param>
        /// <param name="externalTaskIdIn">Filter by the comma-separated list of external task ids. (optional)</param>
        /// <param name="topicName">Filter by an external task topic. (optional)</param>
        /// <param name="workerId">Filter by the id of the worker that the task was most recently locked by. (optional)</param>
        /// <param name="locked">Only include external tasks that are currently locked (i.e., they have a lock time and it has not expired). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="notLocked">Only include external tasks that are currently not locked (i.e., they have no lock or it has expired). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="withRetriesLeft">Only include external tasks that have a positive (&amp;gt; 0) number of retries (or &#x60;null&#x60;). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="noRetriesLeft">Only include external tasks that have 0 retries. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="lockExpirationAfter">Restrict to external tasks that have a lock that expires after a given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="lockExpirationBefore">Restrict to external tasks that have a lock that expires before a given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="activityId">Filter by the id of the activity that an external task is created for. (optional)</param>
        /// <param name="activityIdIn">Filter by the comma-separated list of ids of the activities that an external task is created for. (optional)</param>
        /// <param name="executionId">Filter by the id of the execution that an external task belongs to. (optional)</param>
        /// <param name="processInstanceId">Filter by the id of the process instance that an external task belongs to. (optional)</param>
        /// <param name="processInstanceIdIn">Filter by a comma-separated list of process instance ids that an external task may belong to. (optional)</param>
        /// <param name="processDefinitionId">Filter by the id of the process definition that an external task belongs to. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. An external task must have one of the given tenant ids. (optional)</param>
        /// <param name="active">Only include active tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="suspended">Only include suspended tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="priorityHigherThanOrEquals">Only include jobs with a priority higher than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)</param>
        /// <param name="priorityLowerThanOrEquals">Only include jobs with a priority lower than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CountResultDto</returns>
        System.Threading.Tasks.Task<CountResultDto> GetExternalTasksCountAsync(string externalTaskId = default(string), string externalTaskIdIn = default(string), string topicName = default(string), string workerId = default(string), bool? locked = default(bool?), bool? notLocked = default(bool?), bool? withRetriesLeft = default(bool?), bool? noRetriesLeft = default(bool?), DateTime? lockExpirationAfter = default(DateTime?), DateTime? lockExpirationBefore = default(DateTime?), string activityId = default(string), string activityIdIn = default(string), string executionId = default(string), string processInstanceId = default(string), string processInstanceIdIn = default(string), string processDefinitionId = default(string), string tenantIdIn = default(string), bool? active = default(bool?), bool? suspended = default(bool?), long? priorityHigherThanOrEquals = default(long?), long? priorityLowerThanOrEquals = default(long?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get List Count
        /// </summary>
        /// <remarks>
        /// Queries for the number of external tasks that fulfill given parameters. Takes the same parameters as the [Get External Tasks](https://docs.camunda.org/manual/7.15/reference/rest/external-task/get-query/) method.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalTaskId">Filter by an external task&#39;s id. (optional)</param>
        /// <param name="externalTaskIdIn">Filter by the comma-separated list of external task ids. (optional)</param>
        /// <param name="topicName">Filter by an external task topic. (optional)</param>
        /// <param name="workerId">Filter by the id of the worker that the task was most recently locked by. (optional)</param>
        /// <param name="locked">Only include external tasks that are currently locked (i.e., they have a lock time and it has not expired). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="notLocked">Only include external tasks that are currently not locked (i.e., they have no lock or it has expired). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="withRetriesLeft">Only include external tasks that have a positive (&amp;gt; 0) number of retries (or &#x60;null&#x60;). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="noRetriesLeft">Only include external tasks that have 0 retries. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="lockExpirationAfter">Restrict to external tasks that have a lock that expires after a given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="lockExpirationBefore">Restrict to external tasks that have a lock that expires before a given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="activityId">Filter by the id of the activity that an external task is created for. (optional)</param>
        /// <param name="activityIdIn">Filter by the comma-separated list of ids of the activities that an external task is created for. (optional)</param>
        /// <param name="executionId">Filter by the id of the execution that an external task belongs to. (optional)</param>
        /// <param name="processInstanceId">Filter by the id of the process instance that an external task belongs to. (optional)</param>
        /// <param name="processInstanceIdIn">Filter by a comma-separated list of process instance ids that an external task may belong to. (optional)</param>
        /// <param name="processDefinitionId">Filter by the id of the process definition that an external task belongs to. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. An external task must have one of the given tenant ids. (optional)</param>
        /// <param name="active">Only include active tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="suspended">Only include suspended tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="priorityHigherThanOrEquals">Only include jobs with a priority higher than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)</param>
        /// <param name="priorityLowerThanOrEquals">Only include jobs with a priority lower than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CountResultDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<CountResultDto>> GetExternalTasksCountWithHttpInfoAsync(string externalTaskId = default(string), string externalTaskIdIn = default(string), string topicName = default(string), string workerId = default(string), bool? locked = default(bool?), bool? notLocked = default(bool?), bool? withRetriesLeft = default(bool?), bool? noRetriesLeft = default(bool?), DateTime? lockExpirationAfter = default(DateTime?), DateTime? lockExpirationBefore = default(DateTime?), string activityId = default(string), string activityIdIn = default(string), string executionId = default(string), string processInstanceId = default(string), string processInstanceIdIn = default(string), string processDefinitionId = default(string), string tenantIdIn = default(string), bool? active = default(bool?), bool? suspended = default(bool?), long? priorityHigherThanOrEquals = default(long?), long? priorityLowerThanOrEquals = default(long?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get External Task Topic Names
        /// </summary>
        /// <remarks>
        /// Queries for distinct topic names of external tasks that fulfill given parameters. Query can be restricted to only tasks with retries left, tasks that are locked, or tasks that are unlocked. The parameters withLockedTasks and withUnlockedTasks are exclusive. Setting them both to true will return an empty list. Providing no parameters will return a list of all distinct topic names with external tasks.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="withLockedTasks">Only include external tasks that are currently locked (i.e., they have a lock time and it has not expired). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="withUnlockedTasks">Only include external tasks that are currently not locked (i.e., they have no lock or it has expired). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="withRetriesLeft">Only include external tasks that have a positive (&amp;gt; 0) number of retries (or &#x60;null&#x60;). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        System.Threading.Tasks.Task<List<string>> GetTopicNamesAsync(bool? withLockedTasks = default(bool?), bool? withUnlockedTasks = default(bool?), bool? withRetriesLeft = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get External Task Topic Names
        /// </summary>
        /// <remarks>
        /// Queries for distinct topic names of external tasks that fulfill given parameters. Query can be restricted to only tasks with retries left, tasks that are locked, or tasks that are unlocked. The parameters withLockedTasks and withUnlockedTasks are exclusive. Setting them both to true will return an empty list. Providing no parameters will return a list of all distinct topic names with external tasks.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="withLockedTasks">Only include external tasks that are currently locked (i.e., they have a lock time and it has not expired). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="withUnlockedTasks">Only include external tasks that are currently not locked (i.e., they have no lock or it has expired). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="withRetriesLeft">Only include external tasks that have a positive (&amp;gt; 0) number of retries (or &#x60;null&#x60;). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<string>>> GetTopicNamesWithHttpInfoAsync(bool? withLockedTasks = default(bool?), bool? withUnlockedTasks = default(bool?), bool? withRetriesLeft = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Handle BPMN Error
        /// </summary>
        /// <remarks>
        /// Reports a business error in the context of a running external task by id. The error code must be specified to identify the BPMN error handler.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the external task in which context a BPMN error is reported.</param>
        /// <param name="externalTaskBpmnError"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task HandleExternalTaskBpmnErrorAsync(string id, ExternalTaskBpmnError externalTaskBpmnError = default(ExternalTaskBpmnError), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Handle BPMN Error
        /// </summary>
        /// <remarks>
        /// Reports a business error in the context of a running external task by id. The error code must be specified to identify the BPMN error handler.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the external task in which context a BPMN error is reported.</param>
        /// <param name="externalTaskBpmnError"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> HandleExternalTaskBpmnErrorWithHttpInfoAsync(string id, ExternalTaskBpmnError externalTaskBpmnError = default(ExternalTaskBpmnError), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Handle Failure
        /// </summary>
        /// <remarks>
        /// Reports a failure to execute an external task by id. A number of retries and a timeout until the task can be retried can be specified. If retries are set to 0, an incident for this task is created.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the external task to report a failure for.</param>
        /// <param name="externalTaskFailureDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task HandleFailureAsync(string id, ExternalTaskFailureDto externalTaskFailureDto = default(ExternalTaskFailureDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Handle Failure
        /// </summary>
        /// <remarks>
        /// Reports a failure to execute an external task by id. A number of retries and a timeout until the task can be retried can be specified. If retries are set to 0, an incident for this task is created.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the external task to report a failure for.</param>
        /// <param name="externalTaskFailureDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> HandleFailureWithHttpInfoAsync(string id, ExternalTaskFailureDto externalTaskFailureDto = default(ExternalTaskFailureDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get List (POST)
        /// </summary>
        /// <remarks>
        /// Queries for external tasks that fulfill given parameters in the form of a JSON object.  This method is slightly more powerful than the [Get External Tasks](https://docs.camunda.org/manual/7.15/reference/rest/external-task/get-query/) method because it allows to specify a hierarchical result sorting.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="externalTaskQueryDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ExternalTaskDto&gt;</returns>
        System.Threading.Tasks.Task<List<ExternalTaskDto>> QueryExternalTasksAsync(int? firstResult = default(int?), int? maxResults = default(int?), ExternalTaskQueryDto externalTaskQueryDto = default(ExternalTaskQueryDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get List (POST)
        /// </summary>
        /// <remarks>
        /// Queries for external tasks that fulfill given parameters in the form of a JSON object.  This method is slightly more powerful than the [Get External Tasks](https://docs.camunda.org/manual/7.15/reference/rest/external-task/get-query/) method because it allows to specify a hierarchical result sorting.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="externalTaskQueryDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ExternalTaskDto&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ExternalTaskDto>>> QueryExternalTasksWithHttpInfoAsync(int? firstResult = default(int?), int? maxResults = default(int?), ExternalTaskQueryDto externalTaskQueryDto = default(ExternalTaskQueryDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get List Count (POST)
        /// </summary>
        /// <remarks>
        /// Queries for the number of external tasks that fulfill given parameters. This method takes the same message body as the [Get External Tasks (POST)](https://docs.camunda.org/manual/7.15/reference/rest/external-task/post-query/) method.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalTaskQueryDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CountResultDto</returns>
        System.Threading.Tasks.Task<CountResultDto> QueryExternalTasksCountAsync(ExternalTaskQueryDto externalTaskQueryDto = default(ExternalTaskQueryDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get List Count (POST)
        /// </summary>
        /// <remarks>
        /// Queries for the number of external tasks that fulfill given parameters. This method takes the same message body as the [Get External Tasks (POST)](https://docs.camunda.org/manual/7.15/reference/rest/external-task/post-query/) method.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalTaskQueryDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CountResultDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<CountResultDto>> QueryExternalTasksCountWithHttpInfoAsync(ExternalTaskQueryDto externalTaskQueryDto = default(ExternalTaskQueryDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Set Priority
        /// </summary>
        /// <remarks>
        /// Sets the priority of an existing external task by id. The default value of a priority is 0.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the external task to set the priority for.</param>
        /// <param name="priorityDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SetExternalTaskResourcePriorityAsync(string id, PriorityDto priorityDto = default(PriorityDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Set Priority
        /// </summary>
        /// <remarks>
        /// Sets the priority of an existing external task by id. The default value of a priority is 0.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the external task to set the priority for.</param>
        /// <param name="priorityDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SetExternalTaskResourcePriorityWithHttpInfoAsync(string id, PriorityDto priorityDto = default(PriorityDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Set Retries
        /// </summary>
        /// <remarks>
        /// Sets the number of retries left to execute an external task by id. If retries are set to 0, an  incident is created.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the external task to set the number of retries for.</param>
        /// <param name="retriesDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SetExternalTaskResourceRetriesAsync(string id, RetriesDto retriesDto = default(RetriesDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Set Retries
        /// </summary>
        /// <remarks>
        /// Sets the number of retries left to execute an external task by id. If retries are set to 0, an  incident is created.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the external task to set the number of retries for.</param>
        /// <param name="retriesDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SetExternalTaskResourceRetriesWithHttpInfoAsync(string id, RetriesDto retriesDto = default(RetriesDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Set Retries Sync
        /// </summary>
        /// <remarks>
        /// Sets the number of retries left to execute external tasks by id synchronously. If retries are set to 0,  an incident is created.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setRetriesForExternalTasksDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SetExternalTaskRetriesAsync(SetRetriesForExternalTasksDto setRetriesForExternalTasksDto = default(SetRetriesForExternalTasksDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Set Retries Sync
        /// </summary>
        /// <remarks>
        /// Sets the number of retries left to execute external tasks by id synchronously. If retries are set to 0,  an incident is created.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setRetriesForExternalTasksDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SetExternalTaskRetriesWithHttpInfoAsync(SetRetriesForExternalTasksDto setRetriesForExternalTasksDto = default(SetRetriesForExternalTasksDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Set Retries Async
        /// </summary>
        /// <remarks>
        /// Sets the number of retries left to execute external tasks by id asynchronously. If retries are set to 0, an incident is created.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setRetriesForExternalTasksDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchDto</returns>
        System.Threading.Tasks.Task<BatchDto> SetExternalTaskRetriesAsyncOperationAsync(SetRetriesForExternalTasksDto setRetriesForExternalTasksDto = default(SetRetriesForExternalTasksDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Set Retries Async
        /// </summary>
        /// <remarks>
        /// Sets the number of retries left to execute external tasks by id asynchronously. If retries are set to 0, an incident is created.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setRetriesForExternalTasksDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<BatchDto>> SetExternalTaskRetriesAsyncOperationWithHttpInfoAsync(SetRetriesForExternalTasksDto setRetriesForExternalTasksDto = default(SetRetriesForExternalTasksDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Unlock
        /// </summary>
        /// <remarks>
        /// Unlocks an external task by id. Clears the task&#39;s lock expiration time and worker id.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the external task to unlock.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UnlockAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Unlock
        /// </summary>
        /// <remarks>
        /// Unlocks an external task by id. Clears the task&#39;s lock expiration time and worker id.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the external task to unlock.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UnlockWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IExternalTaskApi : IExternalTaskApiSync, IExternalTaskApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ExternalTaskApi : IExternalTaskApi
    {
        private Camunda.OpenApi.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ExternalTaskApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ExternalTaskApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ExternalTaskApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ExternalTaskApi(String basePath)
        {
            this.Configuration = Camunda.OpenApi.Client.Client.Configuration.MergeConfigurations(
                Camunda.OpenApi.Client.Client.GlobalConfiguration.Instance,
                new Camunda.OpenApi.Client.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Camunda.OpenApi.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Camunda.OpenApi.Client.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Camunda.OpenApi.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ExternalTaskApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ExternalTaskApi(Camunda.OpenApi.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Camunda.OpenApi.Client.Client.Configuration.MergeConfigurations(
                Camunda.OpenApi.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Camunda.OpenApi.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Camunda.OpenApi.Client.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Camunda.OpenApi.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ExternalTaskApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ExternalTaskApi(Camunda.OpenApi.Client.Client.ISynchronousClient client, Camunda.OpenApi.Client.Client.IAsynchronousClient asyncClient, Camunda.OpenApi.Client.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Camunda.OpenApi.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Camunda.OpenApi.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Camunda.OpenApi.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Camunda.OpenApi.Client.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Camunda.OpenApi.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  Lock an external task by a given id for a specified worker and amount of time.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the external task.</param>
        /// <param name="lockExternalTaskDto"> (optional)</param>
        /// <returns></returns>
        public void CallLock(string id, LockExternalTaskDto lockExternalTaskDto = default(LockExternalTaskDto))
        {
            CallLockWithHttpInfo(id, lockExternalTaskDto);
        }

        /// <summary>
        ///  Lock an external task by a given id for a specified worker and amount of time.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the external task.</param>
        /// <param name="lockExternalTaskDto"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<Object> CallLockWithHttpInfo(string id, LockExternalTaskDto lockExternalTaskDto = default(LockExternalTaskDto))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling ExternalTaskApi->CallLock");

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = lockExternalTaskDto;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/external-task/{id}/lock", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CallLock", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Lock an external task by a given id for a specified worker and amount of time.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the external task.</param>
        /// <param name="lockExternalTaskDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CallLockAsync(string id, LockExternalTaskDto lockExternalTaskDto = default(LockExternalTaskDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await CallLockWithHttpInfoAsync(id, lockExternalTaskDto, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  Lock an external task by a given id for a specified worker and amount of time.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the external task.</param>
        /// <param name="lockExternalTaskDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<Object>> CallLockWithHttpInfoAsync(string id, LockExternalTaskDto lockExternalTaskDto = default(LockExternalTaskDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling ExternalTaskApi->CallLock");


            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = lockExternalTaskDto;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/external-task/{id}/lock", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CallLock", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Complete Completes an external task by id and updates process variables.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to complete.</param>
        /// <param name="completeExternalTaskDto"> (optional)</param>
        /// <returns></returns>
        public void CompleteExternalTaskResource(string id, CompleteExternalTaskDto completeExternalTaskDto = default(CompleteExternalTaskDto))
        {
            CompleteExternalTaskResourceWithHttpInfo(id, completeExternalTaskDto);
        }

        /// <summary>
        /// Complete Completes an external task by id and updates process variables.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to complete.</param>
        /// <param name="completeExternalTaskDto"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<Object> CompleteExternalTaskResourceWithHttpInfo(string id, CompleteExternalTaskDto completeExternalTaskDto = default(CompleteExternalTaskDto))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling ExternalTaskApi->CompleteExternalTaskResource");

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = completeExternalTaskDto;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/external-task/{id}/complete", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CompleteExternalTaskResource", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Complete Completes an external task by id and updates process variables.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to complete.</param>
        /// <param name="completeExternalTaskDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CompleteExternalTaskResourceAsync(string id, CompleteExternalTaskDto completeExternalTaskDto = default(CompleteExternalTaskDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await CompleteExternalTaskResourceWithHttpInfoAsync(id, completeExternalTaskDto, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Complete Completes an external task by id and updates process variables.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to complete.</param>
        /// <param name="completeExternalTaskDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<Object>> CompleteExternalTaskResourceWithHttpInfoAsync(string id, CompleteExternalTaskDto completeExternalTaskDto = default(CompleteExternalTaskDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling ExternalTaskApi->CompleteExternalTaskResource");


            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = completeExternalTaskDto;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/external-task/{id}/complete", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CompleteExternalTaskResource", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Extend Lock Extends the timeout of the lock by a given amount of time.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the external task.</param>
        /// <param name="extendLockOnExternalTaskDto"> (optional)</param>
        /// <returns></returns>
        public void ExtendLock(string id, ExtendLockOnExternalTaskDto extendLockOnExternalTaskDto = default(ExtendLockOnExternalTaskDto))
        {
            ExtendLockWithHttpInfo(id, extendLockOnExternalTaskDto);
        }

        /// <summary>
        /// Extend Lock Extends the timeout of the lock by a given amount of time.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the external task.</param>
        /// <param name="extendLockOnExternalTaskDto"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<Object> ExtendLockWithHttpInfo(string id, ExtendLockOnExternalTaskDto extendLockOnExternalTaskDto = default(ExtendLockOnExternalTaskDto))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling ExternalTaskApi->ExtendLock");

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = extendLockOnExternalTaskDto;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/external-task/{id}/extendLock", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExtendLock", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Extend Lock Extends the timeout of the lock by a given amount of time.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the external task.</param>
        /// <param name="extendLockOnExternalTaskDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ExtendLockAsync(string id, ExtendLockOnExternalTaskDto extendLockOnExternalTaskDto = default(ExtendLockOnExternalTaskDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ExtendLockWithHttpInfoAsync(id, extendLockOnExternalTaskDto, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Extend Lock Extends the timeout of the lock by a given amount of time.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the external task.</param>
        /// <param name="extendLockOnExternalTaskDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<Object>> ExtendLockWithHttpInfoAsync(string id, ExtendLockOnExternalTaskDto extendLockOnExternalTaskDto = default(ExtendLockOnExternalTaskDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling ExternalTaskApi->ExtendLock");


            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = extendLockOnExternalTaskDto;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/external-task/{id}/extendLock", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExtendLock", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Fetch and Lock Fetches and locks a specific number of external tasks for execution by a worker. Query can be restricted to specific task topics and for each task topic an individual lock time can be provided.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fetchExternalTasksDto"> (optional)</param>
        /// <returns>List&lt;LockedExternalTaskDto&gt;</returns>
        public List<LockedExternalTaskDto> FetchAndLock(FetchExternalTasksDto fetchExternalTasksDto = default(FetchExternalTasksDto))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<List<LockedExternalTaskDto>> localVarResponse = FetchAndLockWithHttpInfo(fetchExternalTasksDto);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch and Lock Fetches and locks a specific number of external tasks for execution by a worker. Query can be restricted to specific task topics and for each task topic an individual lock time can be provided.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fetchExternalTasksDto"> (optional)</param>
        /// <returns>ApiResponse of List&lt;LockedExternalTaskDto&gt;</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<List<LockedExternalTaskDto>> FetchAndLockWithHttpInfo(FetchExternalTasksDto fetchExternalTasksDto = default(FetchExternalTasksDto))
        {
            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = fetchExternalTasksDto;


            // make the HTTP request
            var localVarResponse = this.Client.Post<List<LockedExternalTaskDto>>("/external-task/fetchAndLock", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FetchAndLock", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Fetch and Lock Fetches and locks a specific number of external tasks for execution by a worker. Query can be restricted to specific task topics and for each task topic an individual lock time can be provided.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fetchExternalTasksDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;LockedExternalTaskDto&gt;</returns>
        public async System.Threading.Tasks.Task<List<LockedExternalTaskDto>> FetchAndLockAsync(FetchExternalTasksDto fetchExternalTasksDto = default(FetchExternalTasksDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<List<LockedExternalTaskDto>> localVarResponse = await FetchAndLockWithHttpInfoAsync(fetchExternalTasksDto, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch and Lock Fetches and locks a specific number of external tasks for execution by a worker. Query can be restricted to specific task topics and for each task topic an individual lock time can be provided.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fetchExternalTasksDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;LockedExternalTaskDto&gt;)</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<List<LockedExternalTaskDto>>> FetchAndLockWithHttpInfoAsync(FetchExternalTasksDto fetchExternalTasksDto = default(FetchExternalTasksDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = fetchExternalTasksDto;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<List<LockedExternalTaskDto>>("/external-task/fetchAndLock", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FetchAndLock", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Retrieves an external task by id, corresponding to the &#x60;ExternalTask&#x60; interface in the engine.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the external task to be retrieved.</param>
        /// <returns>ExternalTaskDto</returns>
        public ExternalTaskDto GetExternalTask(string id)
        {
            Camunda.OpenApi.Client.Client.ApiResponse<ExternalTaskDto> localVarResponse = GetExternalTaskWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Retrieves an external task by id, corresponding to the &#x60;ExternalTask&#x60; interface in the engine.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the external task to be retrieved.</param>
        /// <returns>ApiResponse of ExternalTaskDto</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<ExternalTaskDto> GetExternalTaskWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling ExternalTaskApi->GetExternalTask");

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<ExternalTaskDto>("/external-task/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetExternalTask", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Retrieves an external task by id, corresponding to the &#x60;ExternalTask&#x60; interface in the engine.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the external task to be retrieved.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ExternalTaskDto</returns>
        public async System.Threading.Tasks.Task<ExternalTaskDto> GetExternalTaskAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<ExternalTaskDto> localVarResponse = await GetExternalTaskWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Retrieves an external task by id, corresponding to the &#x60;ExternalTask&#x60; interface in the engine.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the external task to be retrieved.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ExternalTaskDto)</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<ExternalTaskDto>> GetExternalTaskWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling ExternalTaskApi->GetExternalTask");


            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ExternalTaskDto>("/external-task/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetExternalTask", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Error Details Retrieves the error details in the context of a running external task by id.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the external task for which the error details should be retrieved.</param>
        /// <returns>string</returns>
        public string GetExternalTaskErrorDetails(string id)
        {
            Camunda.OpenApi.Client.Client.ApiResponse<string> localVarResponse = GetExternalTaskErrorDetailsWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Error Details Retrieves the error details in the context of a running external task by id.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the external task for which the error details should be retrieved.</param>
        /// <returns>ApiResponse of string</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<string> GetExternalTaskErrorDetailsWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling ExternalTaskApi->GetExternalTaskErrorDetails");

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<string>("/external-task/{id}/errorDetails", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetExternalTaskErrorDetails", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Error Details Retrieves the error details in the context of a running external task by id.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the external task for which the error details should be retrieved.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> GetExternalTaskErrorDetailsAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<string> localVarResponse = await GetExternalTaskErrorDetailsWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Error Details Retrieves the error details in the context of a running external task by id.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the external task for which the error details should be retrieved.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<string>> GetExternalTaskErrorDetailsWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling ExternalTaskApi->GetExternalTaskErrorDetails");


            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<string>("/external-task/{id}/errorDetails", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetExternalTaskErrorDetails", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get List Queries for the external tasks that fulfill given parameters. Parameters may be static as well as dynamic runtime properties of executions. The size of the result set can be retrieved by using the [Get External Task Count](https://docs.camunda.org/manual/7.15/reference/rest/external-task/get-query-count/) method.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalTaskId">Filter by an external task&#39;s id. (optional)</param>
        /// <param name="externalTaskIdIn">Filter by the comma-separated list of external task ids. (optional)</param>
        /// <param name="topicName">Filter by an external task topic. (optional)</param>
        /// <param name="workerId">Filter by the id of the worker that the task was most recently locked by. (optional)</param>
        /// <param name="locked">Only include external tasks that are currently locked (i.e., they have a lock time and it has not expired). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="notLocked">Only include external tasks that are currently not locked (i.e., they have no lock or it has expired). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="withRetriesLeft">Only include external tasks that have a positive (&amp;gt; 0) number of retries (or &#x60;null&#x60;). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="noRetriesLeft">Only include external tasks that have 0 retries. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="lockExpirationAfter">Restrict to external tasks that have a lock that expires after a given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="lockExpirationBefore">Restrict to external tasks that have a lock that expires before a given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="activityId">Filter by the id of the activity that an external task is created for. (optional)</param>
        /// <param name="activityIdIn">Filter by the comma-separated list of ids of the activities that an external task is created for. (optional)</param>
        /// <param name="executionId">Filter by the id of the execution that an external task belongs to. (optional)</param>
        /// <param name="processInstanceId">Filter by the id of the process instance that an external task belongs to. (optional)</param>
        /// <param name="processInstanceIdIn">Filter by a comma-separated list of process instance ids that an external task may belong to. (optional)</param>
        /// <param name="processDefinitionId">Filter by the id of the process definition that an external task belongs to. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. An external task must have one of the given tenant ids. (optional)</param>
        /// <param name="active">Only include active tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="suspended">Only include suspended tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="priorityHigherThanOrEquals">Only include jobs with a priority higher than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)</param>
        /// <param name="priorityLowerThanOrEquals">Only include jobs with a priority lower than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <returns>List&lt;ExternalTaskDto&gt;</returns>
        public List<ExternalTaskDto> GetExternalTasks(string externalTaskId = default(string), string externalTaskIdIn = default(string), string topicName = default(string), string workerId = default(string), bool? locked = default(bool?), bool? notLocked = default(bool?), bool? withRetriesLeft = default(bool?), bool? noRetriesLeft = default(bool?), DateTime? lockExpirationAfter = default(DateTime?), DateTime? lockExpirationBefore = default(DateTime?), string activityId = default(string), string activityIdIn = default(string), string executionId = default(string), string processInstanceId = default(string), string processInstanceIdIn = default(string), string processDefinitionId = default(string), string tenantIdIn = default(string), bool? active = default(bool?), bool? suspended = default(bool?), long? priorityHigherThanOrEquals = default(long?), long? priorityLowerThanOrEquals = default(long?), string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<List<ExternalTaskDto>> localVarResponse = GetExternalTasksWithHttpInfo(externalTaskId, externalTaskIdIn, topicName, workerId, locked, notLocked, withRetriesLeft, noRetriesLeft, lockExpirationAfter, lockExpirationBefore, activityId, activityIdIn, executionId, processInstanceId, processInstanceIdIn, processDefinitionId, tenantIdIn, active, suspended, priorityHigherThanOrEquals, priorityLowerThanOrEquals, sortBy, sortOrder, firstResult, maxResults);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get List Queries for the external tasks that fulfill given parameters. Parameters may be static as well as dynamic runtime properties of executions. The size of the result set can be retrieved by using the [Get External Task Count](https://docs.camunda.org/manual/7.15/reference/rest/external-task/get-query-count/) method.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalTaskId">Filter by an external task&#39;s id. (optional)</param>
        /// <param name="externalTaskIdIn">Filter by the comma-separated list of external task ids. (optional)</param>
        /// <param name="topicName">Filter by an external task topic. (optional)</param>
        /// <param name="workerId">Filter by the id of the worker that the task was most recently locked by. (optional)</param>
        /// <param name="locked">Only include external tasks that are currently locked (i.e., they have a lock time and it has not expired). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="notLocked">Only include external tasks that are currently not locked (i.e., they have no lock or it has expired). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="withRetriesLeft">Only include external tasks that have a positive (&amp;gt; 0) number of retries (or &#x60;null&#x60;). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="noRetriesLeft">Only include external tasks that have 0 retries. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="lockExpirationAfter">Restrict to external tasks that have a lock that expires after a given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="lockExpirationBefore">Restrict to external tasks that have a lock that expires before a given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="activityId">Filter by the id of the activity that an external task is created for. (optional)</param>
        /// <param name="activityIdIn">Filter by the comma-separated list of ids of the activities that an external task is created for. (optional)</param>
        /// <param name="executionId">Filter by the id of the execution that an external task belongs to. (optional)</param>
        /// <param name="processInstanceId">Filter by the id of the process instance that an external task belongs to. (optional)</param>
        /// <param name="processInstanceIdIn">Filter by a comma-separated list of process instance ids that an external task may belong to. (optional)</param>
        /// <param name="processDefinitionId">Filter by the id of the process definition that an external task belongs to. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. An external task must have one of the given tenant ids. (optional)</param>
        /// <param name="active">Only include active tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="suspended">Only include suspended tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="priorityHigherThanOrEquals">Only include jobs with a priority higher than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)</param>
        /// <param name="priorityLowerThanOrEquals">Only include jobs with a priority lower than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <returns>ApiResponse of List&lt;ExternalTaskDto&gt;</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<List<ExternalTaskDto>> GetExternalTasksWithHttpInfo(string externalTaskId = default(string), string externalTaskIdIn = default(string), string topicName = default(string), string workerId = default(string), bool? locked = default(bool?), bool? notLocked = default(bool?), bool? withRetriesLeft = default(bool?), bool? noRetriesLeft = default(bool?), DateTime? lockExpirationAfter = default(DateTime?), DateTime? lockExpirationBefore = default(DateTime?), string activityId = default(string), string activityIdIn = default(string), string executionId = default(string), string processInstanceId = default(string), string processInstanceIdIn = default(string), string processDefinitionId = default(string), string tenantIdIn = default(string), bool? active = default(bool?), bool? suspended = default(bool?), long? priorityHigherThanOrEquals = default(long?), long? priorityLowerThanOrEquals = default(long?), string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?))
        {
            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (externalTaskId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "externalTaskId", externalTaskId));
            }
            if (externalTaskIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "externalTaskIdIn", externalTaskIdIn));
            }
            if (topicName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "topicName", topicName));
            }
            if (workerId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "workerId", workerId));
            }
            if (locked != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "locked", locked));
            }
            if (notLocked != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "notLocked", notLocked));
            }
            if (withRetriesLeft != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "withRetriesLeft", withRetriesLeft));
            }
            if (noRetriesLeft != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "noRetriesLeft", noRetriesLeft));
            }
            if (lockExpirationAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "lockExpirationAfter", lockExpirationAfter));
            }
            if (lockExpirationBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "lockExpirationBefore", lockExpirationBefore));
            }
            if (activityId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "activityId", activityId));
            }
            if (activityIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "activityIdIn", activityIdIn));
            }
            if (executionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "executionId", executionId));
            }
            if (processInstanceId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processInstanceId", processInstanceId));
            }
            if (processInstanceIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processInstanceIdIn", processInstanceIdIn));
            }
            if (processDefinitionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processDefinitionId", processDefinitionId));
            }
            if (tenantIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "tenantIdIn", tenantIdIn));
            }
            if (active != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "active", active));
            }
            if (suspended != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "suspended", suspended));
            }
            if (priorityHigherThanOrEquals != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "priorityHigherThanOrEquals", priorityHigherThanOrEquals));
            }
            if (priorityLowerThanOrEquals != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "priorityLowerThanOrEquals", priorityLowerThanOrEquals));
            }
            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "sortBy", sortBy));
            }
            if (sortOrder != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "sortOrder", sortOrder));
            }
            if (firstResult != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "firstResult", firstResult));
            }
            if (maxResults != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "maxResults", maxResults));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<ExternalTaskDto>>("/external-task", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetExternalTasks", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get List Queries for the external tasks that fulfill given parameters. Parameters may be static as well as dynamic runtime properties of executions. The size of the result set can be retrieved by using the [Get External Task Count](https://docs.camunda.org/manual/7.15/reference/rest/external-task/get-query-count/) method.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalTaskId">Filter by an external task&#39;s id. (optional)</param>
        /// <param name="externalTaskIdIn">Filter by the comma-separated list of external task ids. (optional)</param>
        /// <param name="topicName">Filter by an external task topic. (optional)</param>
        /// <param name="workerId">Filter by the id of the worker that the task was most recently locked by. (optional)</param>
        /// <param name="locked">Only include external tasks that are currently locked (i.e., they have a lock time and it has not expired). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="notLocked">Only include external tasks that are currently not locked (i.e., they have no lock or it has expired). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="withRetriesLeft">Only include external tasks that have a positive (&amp;gt; 0) number of retries (or &#x60;null&#x60;). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="noRetriesLeft">Only include external tasks that have 0 retries. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="lockExpirationAfter">Restrict to external tasks that have a lock that expires after a given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="lockExpirationBefore">Restrict to external tasks that have a lock that expires before a given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="activityId">Filter by the id of the activity that an external task is created for. (optional)</param>
        /// <param name="activityIdIn">Filter by the comma-separated list of ids of the activities that an external task is created for. (optional)</param>
        /// <param name="executionId">Filter by the id of the execution that an external task belongs to. (optional)</param>
        /// <param name="processInstanceId">Filter by the id of the process instance that an external task belongs to. (optional)</param>
        /// <param name="processInstanceIdIn">Filter by a comma-separated list of process instance ids that an external task may belong to. (optional)</param>
        /// <param name="processDefinitionId">Filter by the id of the process definition that an external task belongs to. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. An external task must have one of the given tenant ids. (optional)</param>
        /// <param name="active">Only include active tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="suspended">Only include suspended tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="priorityHigherThanOrEquals">Only include jobs with a priority higher than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)</param>
        /// <param name="priorityLowerThanOrEquals">Only include jobs with a priority lower than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ExternalTaskDto&gt;</returns>
        public async System.Threading.Tasks.Task<List<ExternalTaskDto>> GetExternalTasksAsync(string externalTaskId = default(string), string externalTaskIdIn = default(string), string topicName = default(string), string workerId = default(string), bool? locked = default(bool?), bool? notLocked = default(bool?), bool? withRetriesLeft = default(bool?), bool? noRetriesLeft = default(bool?), DateTime? lockExpirationAfter = default(DateTime?), DateTime? lockExpirationBefore = default(DateTime?), string activityId = default(string), string activityIdIn = default(string), string executionId = default(string), string processInstanceId = default(string), string processInstanceIdIn = default(string), string processDefinitionId = default(string), string tenantIdIn = default(string), bool? active = default(bool?), bool? suspended = default(bool?), long? priorityHigherThanOrEquals = default(long?), long? priorityLowerThanOrEquals = default(long?), string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<List<ExternalTaskDto>> localVarResponse = await GetExternalTasksWithHttpInfoAsync(externalTaskId, externalTaskIdIn, topicName, workerId, locked, notLocked, withRetriesLeft, noRetriesLeft, lockExpirationAfter, lockExpirationBefore, activityId, activityIdIn, executionId, processInstanceId, processInstanceIdIn, processDefinitionId, tenantIdIn, active, suspended, priorityHigherThanOrEquals, priorityLowerThanOrEquals, sortBy, sortOrder, firstResult, maxResults, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get List Queries for the external tasks that fulfill given parameters. Parameters may be static as well as dynamic runtime properties of executions. The size of the result set can be retrieved by using the [Get External Task Count](https://docs.camunda.org/manual/7.15/reference/rest/external-task/get-query-count/) method.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalTaskId">Filter by an external task&#39;s id. (optional)</param>
        /// <param name="externalTaskIdIn">Filter by the comma-separated list of external task ids. (optional)</param>
        /// <param name="topicName">Filter by an external task topic. (optional)</param>
        /// <param name="workerId">Filter by the id of the worker that the task was most recently locked by. (optional)</param>
        /// <param name="locked">Only include external tasks that are currently locked (i.e., they have a lock time and it has not expired). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="notLocked">Only include external tasks that are currently not locked (i.e., they have no lock or it has expired). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="withRetriesLeft">Only include external tasks that have a positive (&amp;gt; 0) number of retries (or &#x60;null&#x60;). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="noRetriesLeft">Only include external tasks that have 0 retries. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="lockExpirationAfter">Restrict to external tasks that have a lock that expires after a given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="lockExpirationBefore">Restrict to external tasks that have a lock that expires before a given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="activityId">Filter by the id of the activity that an external task is created for. (optional)</param>
        /// <param name="activityIdIn">Filter by the comma-separated list of ids of the activities that an external task is created for. (optional)</param>
        /// <param name="executionId">Filter by the id of the execution that an external task belongs to. (optional)</param>
        /// <param name="processInstanceId">Filter by the id of the process instance that an external task belongs to. (optional)</param>
        /// <param name="processInstanceIdIn">Filter by a comma-separated list of process instance ids that an external task may belong to. (optional)</param>
        /// <param name="processDefinitionId">Filter by the id of the process definition that an external task belongs to. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. An external task must have one of the given tenant ids. (optional)</param>
        /// <param name="active">Only include active tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="suspended">Only include suspended tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="priorityHigherThanOrEquals">Only include jobs with a priority higher than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)</param>
        /// <param name="priorityLowerThanOrEquals">Only include jobs with a priority lower than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ExternalTaskDto&gt;)</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<List<ExternalTaskDto>>> GetExternalTasksWithHttpInfoAsync(string externalTaskId = default(string), string externalTaskIdIn = default(string), string topicName = default(string), string workerId = default(string), bool? locked = default(bool?), bool? notLocked = default(bool?), bool? withRetriesLeft = default(bool?), bool? noRetriesLeft = default(bool?), DateTime? lockExpirationAfter = default(DateTime?), DateTime? lockExpirationBefore = default(DateTime?), string activityId = default(string), string activityIdIn = default(string), string executionId = default(string), string processInstanceId = default(string), string processInstanceIdIn = default(string), string processDefinitionId = default(string), string tenantIdIn = default(string), bool? active = default(bool?), bool? suspended = default(bool?), long? priorityHigherThanOrEquals = default(long?), long? priorityLowerThanOrEquals = default(long?), string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (externalTaskId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "externalTaskId", externalTaskId));
            }
            if (externalTaskIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "externalTaskIdIn", externalTaskIdIn));
            }
            if (topicName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "topicName", topicName));
            }
            if (workerId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "workerId", workerId));
            }
            if (locked != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "locked", locked));
            }
            if (notLocked != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "notLocked", notLocked));
            }
            if (withRetriesLeft != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "withRetriesLeft", withRetriesLeft));
            }
            if (noRetriesLeft != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "noRetriesLeft", noRetriesLeft));
            }
            if (lockExpirationAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "lockExpirationAfter", lockExpirationAfter));
            }
            if (lockExpirationBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "lockExpirationBefore", lockExpirationBefore));
            }
            if (activityId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "activityId", activityId));
            }
            if (activityIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "activityIdIn", activityIdIn));
            }
            if (executionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "executionId", executionId));
            }
            if (processInstanceId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processInstanceId", processInstanceId));
            }
            if (processInstanceIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processInstanceIdIn", processInstanceIdIn));
            }
            if (processDefinitionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processDefinitionId", processDefinitionId));
            }
            if (tenantIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "tenantIdIn", tenantIdIn));
            }
            if (active != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "active", active));
            }
            if (suspended != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "suspended", suspended));
            }
            if (priorityHigherThanOrEquals != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "priorityHigherThanOrEquals", priorityHigherThanOrEquals));
            }
            if (priorityLowerThanOrEquals != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "priorityLowerThanOrEquals", priorityLowerThanOrEquals));
            }
            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "sortBy", sortBy));
            }
            if (sortOrder != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "sortOrder", sortOrder));
            }
            if (firstResult != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "firstResult", firstResult));
            }
            if (maxResults != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "maxResults", maxResults));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<ExternalTaskDto>>("/external-task", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetExternalTasks", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get List Count Queries for the number of external tasks that fulfill given parameters. Takes the same parameters as the [Get External Tasks](https://docs.camunda.org/manual/7.15/reference/rest/external-task/get-query/) method.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalTaskId">Filter by an external task&#39;s id. (optional)</param>
        /// <param name="externalTaskIdIn">Filter by the comma-separated list of external task ids. (optional)</param>
        /// <param name="topicName">Filter by an external task topic. (optional)</param>
        /// <param name="workerId">Filter by the id of the worker that the task was most recently locked by. (optional)</param>
        /// <param name="locked">Only include external tasks that are currently locked (i.e., they have a lock time and it has not expired). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="notLocked">Only include external tasks that are currently not locked (i.e., they have no lock or it has expired). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="withRetriesLeft">Only include external tasks that have a positive (&amp;gt; 0) number of retries (or &#x60;null&#x60;). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="noRetriesLeft">Only include external tasks that have 0 retries. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="lockExpirationAfter">Restrict to external tasks that have a lock that expires after a given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="lockExpirationBefore">Restrict to external tasks that have a lock that expires before a given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="activityId">Filter by the id of the activity that an external task is created for. (optional)</param>
        /// <param name="activityIdIn">Filter by the comma-separated list of ids of the activities that an external task is created for. (optional)</param>
        /// <param name="executionId">Filter by the id of the execution that an external task belongs to. (optional)</param>
        /// <param name="processInstanceId">Filter by the id of the process instance that an external task belongs to. (optional)</param>
        /// <param name="processInstanceIdIn">Filter by a comma-separated list of process instance ids that an external task may belong to. (optional)</param>
        /// <param name="processDefinitionId">Filter by the id of the process definition that an external task belongs to. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. An external task must have one of the given tenant ids. (optional)</param>
        /// <param name="active">Only include active tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="suspended">Only include suspended tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="priorityHigherThanOrEquals">Only include jobs with a priority higher than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)</param>
        /// <param name="priorityLowerThanOrEquals">Only include jobs with a priority lower than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)</param>
        /// <returns>CountResultDto</returns>
        public CountResultDto GetExternalTasksCount(string externalTaskId = default(string), string externalTaskIdIn = default(string), string topicName = default(string), string workerId = default(string), bool? locked = default(bool?), bool? notLocked = default(bool?), bool? withRetriesLeft = default(bool?), bool? noRetriesLeft = default(bool?), DateTime? lockExpirationAfter = default(DateTime?), DateTime? lockExpirationBefore = default(DateTime?), string activityId = default(string), string activityIdIn = default(string), string executionId = default(string), string processInstanceId = default(string), string processInstanceIdIn = default(string), string processDefinitionId = default(string), string tenantIdIn = default(string), bool? active = default(bool?), bool? suspended = default(bool?), long? priorityHigherThanOrEquals = default(long?), long? priorityLowerThanOrEquals = default(long?))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<CountResultDto> localVarResponse = GetExternalTasksCountWithHttpInfo(externalTaskId, externalTaskIdIn, topicName, workerId, locked, notLocked, withRetriesLeft, noRetriesLeft, lockExpirationAfter, lockExpirationBefore, activityId, activityIdIn, executionId, processInstanceId, processInstanceIdIn, processDefinitionId, tenantIdIn, active, suspended, priorityHigherThanOrEquals, priorityLowerThanOrEquals);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get List Count Queries for the number of external tasks that fulfill given parameters. Takes the same parameters as the [Get External Tasks](https://docs.camunda.org/manual/7.15/reference/rest/external-task/get-query/) method.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalTaskId">Filter by an external task&#39;s id. (optional)</param>
        /// <param name="externalTaskIdIn">Filter by the comma-separated list of external task ids. (optional)</param>
        /// <param name="topicName">Filter by an external task topic. (optional)</param>
        /// <param name="workerId">Filter by the id of the worker that the task was most recently locked by. (optional)</param>
        /// <param name="locked">Only include external tasks that are currently locked (i.e., they have a lock time and it has not expired). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="notLocked">Only include external tasks that are currently not locked (i.e., they have no lock or it has expired). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="withRetriesLeft">Only include external tasks that have a positive (&amp;gt; 0) number of retries (or &#x60;null&#x60;). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="noRetriesLeft">Only include external tasks that have 0 retries. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="lockExpirationAfter">Restrict to external tasks that have a lock that expires after a given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="lockExpirationBefore">Restrict to external tasks that have a lock that expires before a given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="activityId">Filter by the id of the activity that an external task is created for. (optional)</param>
        /// <param name="activityIdIn">Filter by the comma-separated list of ids of the activities that an external task is created for. (optional)</param>
        /// <param name="executionId">Filter by the id of the execution that an external task belongs to. (optional)</param>
        /// <param name="processInstanceId">Filter by the id of the process instance that an external task belongs to. (optional)</param>
        /// <param name="processInstanceIdIn">Filter by a comma-separated list of process instance ids that an external task may belong to. (optional)</param>
        /// <param name="processDefinitionId">Filter by the id of the process definition that an external task belongs to. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. An external task must have one of the given tenant ids. (optional)</param>
        /// <param name="active">Only include active tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="suspended">Only include suspended tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="priorityHigherThanOrEquals">Only include jobs with a priority higher than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)</param>
        /// <param name="priorityLowerThanOrEquals">Only include jobs with a priority lower than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)</param>
        /// <returns>ApiResponse of CountResultDto</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<CountResultDto> GetExternalTasksCountWithHttpInfo(string externalTaskId = default(string), string externalTaskIdIn = default(string), string topicName = default(string), string workerId = default(string), bool? locked = default(bool?), bool? notLocked = default(bool?), bool? withRetriesLeft = default(bool?), bool? noRetriesLeft = default(bool?), DateTime? lockExpirationAfter = default(DateTime?), DateTime? lockExpirationBefore = default(DateTime?), string activityId = default(string), string activityIdIn = default(string), string executionId = default(string), string processInstanceId = default(string), string processInstanceIdIn = default(string), string processDefinitionId = default(string), string tenantIdIn = default(string), bool? active = default(bool?), bool? suspended = default(bool?), long? priorityHigherThanOrEquals = default(long?), long? priorityLowerThanOrEquals = default(long?))
        {
            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (externalTaskId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "externalTaskId", externalTaskId));
            }
            if (externalTaskIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "externalTaskIdIn", externalTaskIdIn));
            }
            if (topicName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "topicName", topicName));
            }
            if (workerId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "workerId", workerId));
            }
            if (locked != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "locked", locked));
            }
            if (notLocked != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "notLocked", notLocked));
            }
            if (withRetriesLeft != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "withRetriesLeft", withRetriesLeft));
            }
            if (noRetriesLeft != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "noRetriesLeft", noRetriesLeft));
            }
            if (lockExpirationAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "lockExpirationAfter", lockExpirationAfter));
            }
            if (lockExpirationBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "lockExpirationBefore", lockExpirationBefore));
            }
            if (activityId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "activityId", activityId));
            }
            if (activityIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "activityIdIn", activityIdIn));
            }
            if (executionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "executionId", executionId));
            }
            if (processInstanceId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processInstanceId", processInstanceId));
            }
            if (processInstanceIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processInstanceIdIn", processInstanceIdIn));
            }
            if (processDefinitionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processDefinitionId", processDefinitionId));
            }
            if (tenantIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "tenantIdIn", tenantIdIn));
            }
            if (active != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "active", active));
            }
            if (suspended != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "suspended", suspended));
            }
            if (priorityHigherThanOrEquals != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "priorityHigherThanOrEquals", priorityHigherThanOrEquals));
            }
            if (priorityLowerThanOrEquals != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "priorityLowerThanOrEquals", priorityLowerThanOrEquals));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<CountResultDto>("/external-task/count", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetExternalTasksCount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get List Count Queries for the number of external tasks that fulfill given parameters. Takes the same parameters as the [Get External Tasks](https://docs.camunda.org/manual/7.15/reference/rest/external-task/get-query/) method.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalTaskId">Filter by an external task&#39;s id. (optional)</param>
        /// <param name="externalTaskIdIn">Filter by the comma-separated list of external task ids. (optional)</param>
        /// <param name="topicName">Filter by an external task topic. (optional)</param>
        /// <param name="workerId">Filter by the id of the worker that the task was most recently locked by. (optional)</param>
        /// <param name="locked">Only include external tasks that are currently locked (i.e., they have a lock time and it has not expired). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="notLocked">Only include external tasks that are currently not locked (i.e., they have no lock or it has expired). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="withRetriesLeft">Only include external tasks that have a positive (&amp;gt; 0) number of retries (or &#x60;null&#x60;). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="noRetriesLeft">Only include external tasks that have 0 retries. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="lockExpirationAfter">Restrict to external tasks that have a lock that expires after a given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="lockExpirationBefore">Restrict to external tasks that have a lock that expires before a given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="activityId">Filter by the id of the activity that an external task is created for. (optional)</param>
        /// <param name="activityIdIn">Filter by the comma-separated list of ids of the activities that an external task is created for. (optional)</param>
        /// <param name="executionId">Filter by the id of the execution that an external task belongs to. (optional)</param>
        /// <param name="processInstanceId">Filter by the id of the process instance that an external task belongs to. (optional)</param>
        /// <param name="processInstanceIdIn">Filter by a comma-separated list of process instance ids that an external task may belong to. (optional)</param>
        /// <param name="processDefinitionId">Filter by the id of the process definition that an external task belongs to. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. An external task must have one of the given tenant ids. (optional)</param>
        /// <param name="active">Only include active tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="suspended">Only include suspended tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="priorityHigherThanOrEquals">Only include jobs with a priority higher than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)</param>
        /// <param name="priorityLowerThanOrEquals">Only include jobs with a priority lower than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CountResultDto</returns>
        public async System.Threading.Tasks.Task<CountResultDto> GetExternalTasksCountAsync(string externalTaskId = default(string), string externalTaskIdIn = default(string), string topicName = default(string), string workerId = default(string), bool? locked = default(bool?), bool? notLocked = default(bool?), bool? withRetriesLeft = default(bool?), bool? noRetriesLeft = default(bool?), DateTime? lockExpirationAfter = default(DateTime?), DateTime? lockExpirationBefore = default(DateTime?), string activityId = default(string), string activityIdIn = default(string), string executionId = default(string), string processInstanceId = default(string), string processInstanceIdIn = default(string), string processDefinitionId = default(string), string tenantIdIn = default(string), bool? active = default(bool?), bool? suspended = default(bool?), long? priorityHigherThanOrEquals = default(long?), long? priorityLowerThanOrEquals = default(long?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<CountResultDto> localVarResponse = await GetExternalTasksCountWithHttpInfoAsync(externalTaskId, externalTaskIdIn, topicName, workerId, locked, notLocked, withRetriesLeft, noRetriesLeft, lockExpirationAfter, lockExpirationBefore, activityId, activityIdIn, executionId, processInstanceId, processInstanceIdIn, processDefinitionId, tenantIdIn, active, suspended, priorityHigherThanOrEquals, priorityLowerThanOrEquals, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get List Count Queries for the number of external tasks that fulfill given parameters. Takes the same parameters as the [Get External Tasks](https://docs.camunda.org/manual/7.15/reference/rest/external-task/get-query/) method.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalTaskId">Filter by an external task&#39;s id. (optional)</param>
        /// <param name="externalTaskIdIn">Filter by the comma-separated list of external task ids. (optional)</param>
        /// <param name="topicName">Filter by an external task topic. (optional)</param>
        /// <param name="workerId">Filter by the id of the worker that the task was most recently locked by. (optional)</param>
        /// <param name="locked">Only include external tasks that are currently locked (i.e., they have a lock time and it has not expired). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="notLocked">Only include external tasks that are currently not locked (i.e., they have no lock or it has expired). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="withRetriesLeft">Only include external tasks that have a positive (&amp;gt; 0) number of retries (or &#x60;null&#x60;). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="noRetriesLeft">Only include external tasks that have 0 retries. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="lockExpirationAfter">Restrict to external tasks that have a lock that expires after a given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="lockExpirationBefore">Restrict to external tasks that have a lock that expires before a given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="activityId">Filter by the id of the activity that an external task is created for. (optional)</param>
        /// <param name="activityIdIn">Filter by the comma-separated list of ids of the activities that an external task is created for. (optional)</param>
        /// <param name="executionId">Filter by the id of the execution that an external task belongs to. (optional)</param>
        /// <param name="processInstanceId">Filter by the id of the process instance that an external task belongs to. (optional)</param>
        /// <param name="processInstanceIdIn">Filter by a comma-separated list of process instance ids that an external task may belong to. (optional)</param>
        /// <param name="processDefinitionId">Filter by the id of the process definition that an external task belongs to. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. An external task must have one of the given tenant ids. (optional)</param>
        /// <param name="active">Only include active tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="suspended">Only include suspended tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="priorityHigherThanOrEquals">Only include jobs with a priority higher than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)</param>
        /// <param name="priorityLowerThanOrEquals">Only include jobs with a priority lower than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CountResultDto)</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<CountResultDto>> GetExternalTasksCountWithHttpInfoAsync(string externalTaskId = default(string), string externalTaskIdIn = default(string), string topicName = default(string), string workerId = default(string), bool? locked = default(bool?), bool? notLocked = default(bool?), bool? withRetriesLeft = default(bool?), bool? noRetriesLeft = default(bool?), DateTime? lockExpirationAfter = default(DateTime?), DateTime? lockExpirationBefore = default(DateTime?), string activityId = default(string), string activityIdIn = default(string), string executionId = default(string), string processInstanceId = default(string), string processInstanceIdIn = default(string), string processDefinitionId = default(string), string tenantIdIn = default(string), bool? active = default(bool?), bool? suspended = default(bool?), long? priorityHigherThanOrEquals = default(long?), long? priorityLowerThanOrEquals = default(long?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (externalTaskId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "externalTaskId", externalTaskId));
            }
            if (externalTaskIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "externalTaskIdIn", externalTaskIdIn));
            }
            if (topicName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "topicName", topicName));
            }
            if (workerId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "workerId", workerId));
            }
            if (locked != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "locked", locked));
            }
            if (notLocked != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "notLocked", notLocked));
            }
            if (withRetriesLeft != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "withRetriesLeft", withRetriesLeft));
            }
            if (noRetriesLeft != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "noRetriesLeft", noRetriesLeft));
            }
            if (lockExpirationAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "lockExpirationAfter", lockExpirationAfter));
            }
            if (lockExpirationBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "lockExpirationBefore", lockExpirationBefore));
            }
            if (activityId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "activityId", activityId));
            }
            if (activityIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "activityIdIn", activityIdIn));
            }
            if (executionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "executionId", executionId));
            }
            if (processInstanceId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processInstanceId", processInstanceId));
            }
            if (processInstanceIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processInstanceIdIn", processInstanceIdIn));
            }
            if (processDefinitionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processDefinitionId", processDefinitionId));
            }
            if (tenantIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "tenantIdIn", tenantIdIn));
            }
            if (active != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "active", active));
            }
            if (suspended != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "suspended", suspended));
            }
            if (priorityHigherThanOrEquals != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "priorityHigherThanOrEquals", priorityHigherThanOrEquals));
            }
            if (priorityLowerThanOrEquals != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "priorityLowerThanOrEquals", priorityLowerThanOrEquals));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<CountResultDto>("/external-task/count", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetExternalTasksCount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get External Task Topic Names Queries for distinct topic names of external tasks that fulfill given parameters. Query can be restricted to only tasks with retries left, tasks that are locked, or tasks that are unlocked. The parameters withLockedTasks and withUnlockedTasks are exclusive. Setting them both to true will return an empty list. Providing no parameters will return a list of all distinct topic names with external tasks.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="withLockedTasks">Only include external tasks that are currently locked (i.e., they have a lock time and it has not expired). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="withUnlockedTasks">Only include external tasks that are currently not locked (i.e., they have no lock or it has expired). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="withRetriesLeft">Only include external tasks that have a positive (&amp;gt; 0) number of retries (or &#x60;null&#x60;). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <returns>List&lt;string&gt;</returns>
        public List<string> GetTopicNames(bool? withLockedTasks = default(bool?), bool? withUnlockedTasks = default(bool?), bool? withRetriesLeft = default(bool?))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<List<string>> localVarResponse = GetTopicNamesWithHttpInfo(withLockedTasks, withUnlockedTasks, withRetriesLeft);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get External Task Topic Names Queries for distinct topic names of external tasks that fulfill given parameters. Query can be restricted to only tasks with retries left, tasks that are locked, or tasks that are unlocked. The parameters withLockedTasks and withUnlockedTasks are exclusive. Setting them both to true will return an empty list. Providing no parameters will return a list of all distinct topic names with external tasks.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="withLockedTasks">Only include external tasks that are currently locked (i.e., they have a lock time and it has not expired). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="withUnlockedTasks">Only include external tasks that are currently not locked (i.e., they have no lock or it has expired). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="withRetriesLeft">Only include external tasks that have a positive (&amp;gt; 0) number of retries (or &#x60;null&#x60;). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<List<string>> GetTopicNamesWithHttpInfo(bool? withLockedTasks = default(bool?), bool? withUnlockedTasks = default(bool?), bool? withRetriesLeft = default(bool?))
        {
            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (withLockedTasks != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "withLockedTasks", withLockedTasks));
            }
            if (withUnlockedTasks != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "withUnlockedTasks", withUnlockedTasks));
            }
            if (withRetriesLeft != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "withRetriesLeft", withRetriesLeft));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<string>>("/external-task/topic-names", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTopicNames", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get External Task Topic Names Queries for distinct topic names of external tasks that fulfill given parameters. Query can be restricted to only tasks with retries left, tasks that are locked, or tasks that are unlocked. The parameters withLockedTasks and withUnlockedTasks are exclusive. Setting them both to true will return an empty list. Providing no parameters will return a list of all distinct topic names with external tasks.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="withLockedTasks">Only include external tasks that are currently locked (i.e., they have a lock time and it has not expired). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="withUnlockedTasks">Only include external tasks that are currently not locked (i.e., they have no lock or it has expired). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="withRetriesLeft">Only include external tasks that have a positive (&amp;gt; 0) number of retries (or &#x60;null&#x60;). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        public async System.Threading.Tasks.Task<List<string>> GetTopicNamesAsync(bool? withLockedTasks = default(bool?), bool? withUnlockedTasks = default(bool?), bool? withRetriesLeft = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<List<string>> localVarResponse = await GetTopicNamesWithHttpInfoAsync(withLockedTasks, withUnlockedTasks, withRetriesLeft, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get External Task Topic Names Queries for distinct topic names of external tasks that fulfill given parameters. Query can be restricted to only tasks with retries left, tasks that are locked, or tasks that are unlocked. The parameters withLockedTasks and withUnlockedTasks are exclusive. Setting them both to true will return an empty list. Providing no parameters will return a list of all distinct topic names with external tasks.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="withLockedTasks">Only include external tasks that are currently locked (i.e., they have a lock time and it has not expired). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="withUnlockedTasks">Only include external tasks that are currently not locked (i.e., they have no lock or it has expired). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="withRetriesLeft">Only include external tasks that have a positive (&amp;gt; 0) number of retries (or &#x60;null&#x60;). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<List<string>>> GetTopicNamesWithHttpInfoAsync(bool? withLockedTasks = default(bool?), bool? withUnlockedTasks = default(bool?), bool? withRetriesLeft = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (withLockedTasks != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "withLockedTasks", withLockedTasks));
            }
            if (withUnlockedTasks != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "withUnlockedTasks", withUnlockedTasks));
            }
            if (withRetriesLeft != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "withRetriesLeft", withRetriesLeft));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<string>>("/external-task/topic-names", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTopicNames", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Handle BPMN Error Reports a business error in the context of a running external task by id. The error code must be specified to identify the BPMN error handler.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the external task in which context a BPMN error is reported.</param>
        /// <param name="externalTaskBpmnError"> (optional)</param>
        /// <returns></returns>
        public void HandleExternalTaskBpmnError(string id, ExternalTaskBpmnError externalTaskBpmnError = default(ExternalTaskBpmnError))
        {
            HandleExternalTaskBpmnErrorWithHttpInfo(id, externalTaskBpmnError);
        }

        /// <summary>
        /// Handle BPMN Error Reports a business error in the context of a running external task by id. The error code must be specified to identify the BPMN error handler.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the external task in which context a BPMN error is reported.</param>
        /// <param name="externalTaskBpmnError"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<Object> HandleExternalTaskBpmnErrorWithHttpInfo(string id, ExternalTaskBpmnError externalTaskBpmnError = default(ExternalTaskBpmnError))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling ExternalTaskApi->HandleExternalTaskBpmnError");

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = externalTaskBpmnError;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/external-task/{id}/bpmnError", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("HandleExternalTaskBpmnError", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Handle BPMN Error Reports a business error in the context of a running external task by id. The error code must be specified to identify the BPMN error handler.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the external task in which context a BPMN error is reported.</param>
        /// <param name="externalTaskBpmnError"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task HandleExternalTaskBpmnErrorAsync(string id, ExternalTaskBpmnError externalTaskBpmnError = default(ExternalTaskBpmnError), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await HandleExternalTaskBpmnErrorWithHttpInfoAsync(id, externalTaskBpmnError, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Handle BPMN Error Reports a business error in the context of a running external task by id. The error code must be specified to identify the BPMN error handler.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the external task in which context a BPMN error is reported.</param>
        /// <param name="externalTaskBpmnError"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<Object>> HandleExternalTaskBpmnErrorWithHttpInfoAsync(string id, ExternalTaskBpmnError externalTaskBpmnError = default(ExternalTaskBpmnError), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling ExternalTaskApi->HandleExternalTaskBpmnError");


            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = externalTaskBpmnError;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/external-task/{id}/bpmnError", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("HandleExternalTaskBpmnError", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Handle Failure Reports a failure to execute an external task by id. A number of retries and a timeout until the task can be retried can be specified. If retries are set to 0, an incident for this task is created.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the external task to report a failure for.</param>
        /// <param name="externalTaskFailureDto"> (optional)</param>
        /// <returns></returns>
        public void HandleFailure(string id, ExternalTaskFailureDto externalTaskFailureDto = default(ExternalTaskFailureDto))
        {
            HandleFailureWithHttpInfo(id, externalTaskFailureDto);
        }

        /// <summary>
        /// Handle Failure Reports a failure to execute an external task by id. A number of retries and a timeout until the task can be retried can be specified. If retries are set to 0, an incident for this task is created.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the external task to report a failure for.</param>
        /// <param name="externalTaskFailureDto"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<Object> HandleFailureWithHttpInfo(string id, ExternalTaskFailureDto externalTaskFailureDto = default(ExternalTaskFailureDto))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling ExternalTaskApi->HandleFailure");

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = externalTaskFailureDto;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/external-task/{id}/failure", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("HandleFailure", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Handle Failure Reports a failure to execute an external task by id. A number of retries and a timeout until the task can be retried can be specified. If retries are set to 0, an incident for this task is created.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the external task to report a failure for.</param>
        /// <param name="externalTaskFailureDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task HandleFailureAsync(string id, ExternalTaskFailureDto externalTaskFailureDto = default(ExternalTaskFailureDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await HandleFailureWithHttpInfoAsync(id, externalTaskFailureDto, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Handle Failure Reports a failure to execute an external task by id. A number of retries and a timeout until the task can be retried can be specified. If retries are set to 0, an incident for this task is created.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the external task to report a failure for.</param>
        /// <param name="externalTaskFailureDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<Object>> HandleFailureWithHttpInfoAsync(string id, ExternalTaskFailureDto externalTaskFailureDto = default(ExternalTaskFailureDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling ExternalTaskApi->HandleFailure");


            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = externalTaskFailureDto;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/external-task/{id}/failure", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("HandleFailure", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get List (POST) Queries for external tasks that fulfill given parameters in the form of a JSON object.  This method is slightly more powerful than the [Get External Tasks](https://docs.camunda.org/manual/7.15/reference/rest/external-task/get-query/) method because it allows to specify a hierarchical result sorting.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="externalTaskQueryDto"> (optional)</param>
        /// <returns>List&lt;ExternalTaskDto&gt;</returns>
        public List<ExternalTaskDto> QueryExternalTasks(int? firstResult = default(int?), int? maxResults = default(int?), ExternalTaskQueryDto externalTaskQueryDto = default(ExternalTaskQueryDto))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<List<ExternalTaskDto>> localVarResponse = QueryExternalTasksWithHttpInfo(firstResult, maxResults, externalTaskQueryDto);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get List (POST) Queries for external tasks that fulfill given parameters in the form of a JSON object.  This method is slightly more powerful than the [Get External Tasks](https://docs.camunda.org/manual/7.15/reference/rest/external-task/get-query/) method because it allows to specify a hierarchical result sorting.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="externalTaskQueryDto"> (optional)</param>
        /// <returns>ApiResponse of List&lt;ExternalTaskDto&gt;</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<List<ExternalTaskDto>> QueryExternalTasksWithHttpInfo(int? firstResult = default(int?), int? maxResults = default(int?), ExternalTaskQueryDto externalTaskQueryDto = default(ExternalTaskQueryDto))
        {
            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (firstResult != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "firstResult", firstResult));
            }
            if (maxResults != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "maxResults", maxResults));
            }
            localVarRequestOptions.Data = externalTaskQueryDto;


            // make the HTTP request
            var localVarResponse = this.Client.Post<List<ExternalTaskDto>>("/external-task", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QueryExternalTasks", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get List (POST) Queries for external tasks that fulfill given parameters in the form of a JSON object.  This method is slightly more powerful than the [Get External Tasks](https://docs.camunda.org/manual/7.15/reference/rest/external-task/get-query/) method because it allows to specify a hierarchical result sorting.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="externalTaskQueryDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ExternalTaskDto&gt;</returns>
        public async System.Threading.Tasks.Task<List<ExternalTaskDto>> QueryExternalTasksAsync(int? firstResult = default(int?), int? maxResults = default(int?), ExternalTaskQueryDto externalTaskQueryDto = default(ExternalTaskQueryDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<List<ExternalTaskDto>> localVarResponse = await QueryExternalTasksWithHttpInfoAsync(firstResult, maxResults, externalTaskQueryDto, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get List (POST) Queries for external tasks that fulfill given parameters in the form of a JSON object.  This method is slightly more powerful than the [Get External Tasks](https://docs.camunda.org/manual/7.15/reference/rest/external-task/get-query/) method because it allows to specify a hierarchical result sorting.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="externalTaskQueryDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ExternalTaskDto&gt;)</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<List<ExternalTaskDto>>> QueryExternalTasksWithHttpInfoAsync(int? firstResult = default(int?), int? maxResults = default(int?), ExternalTaskQueryDto externalTaskQueryDto = default(ExternalTaskQueryDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (firstResult != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "firstResult", firstResult));
            }
            if (maxResults != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "maxResults", maxResults));
            }
            localVarRequestOptions.Data = externalTaskQueryDto;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<List<ExternalTaskDto>>("/external-task", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QueryExternalTasks", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get List Count (POST) Queries for the number of external tasks that fulfill given parameters. This method takes the same message body as the [Get External Tasks (POST)](https://docs.camunda.org/manual/7.15/reference/rest/external-task/post-query/) method.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalTaskQueryDto"> (optional)</param>
        /// <returns>CountResultDto</returns>
        public CountResultDto QueryExternalTasksCount(ExternalTaskQueryDto externalTaskQueryDto = default(ExternalTaskQueryDto))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<CountResultDto> localVarResponse = QueryExternalTasksCountWithHttpInfo(externalTaskQueryDto);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get List Count (POST) Queries for the number of external tasks that fulfill given parameters. This method takes the same message body as the [Get External Tasks (POST)](https://docs.camunda.org/manual/7.15/reference/rest/external-task/post-query/) method.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalTaskQueryDto"> (optional)</param>
        /// <returns>ApiResponse of CountResultDto</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<CountResultDto> QueryExternalTasksCountWithHttpInfo(ExternalTaskQueryDto externalTaskQueryDto = default(ExternalTaskQueryDto))
        {
            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = externalTaskQueryDto;


            // make the HTTP request
            var localVarResponse = this.Client.Post<CountResultDto>("/external-task/count", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QueryExternalTasksCount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get List Count (POST) Queries for the number of external tasks that fulfill given parameters. This method takes the same message body as the [Get External Tasks (POST)](https://docs.camunda.org/manual/7.15/reference/rest/external-task/post-query/) method.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalTaskQueryDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CountResultDto</returns>
        public async System.Threading.Tasks.Task<CountResultDto> QueryExternalTasksCountAsync(ExternalTaskQueryDto externalTaskQueryDto = default(ExternalTaskQueryDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<CountResultDto> localVarResponse = await QueryExternalTasksCountWithHttpInfoAsync(externalTaskQueryDto, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get List Count (POST) Queries for the number of external tasks that fulfill given parameters. This method takes the same message body as the [Get External Tasks (POST)](https://docs.camunda.org/manual/7.15/reference/rest/external-task/post-query/) method.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalTaskQueryDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CountResultDto)</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<CountResultDto>> QueryExternalTasksCountWithHttpInfoAsync(ExternalTaskQueryDto externalTaskQueryDto = default(ExternalTaskQueryDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = externalTaskQueryDto;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<CountResultDto>("/external-task/count", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QueryExternalTasksCount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set Priority Sets the priority of an existing external task by id. The default value of a priority is 0.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the external task to set the priority for.</param>
        /// <param name="priorityDto"> (optional)</param>
        /// <returns></returns>
        public void SetExternalTaskResourcePriority(string id, PriorityDto priorityDto = default(PriorityDto))
        {
            SetExternalTaskResourcePriorityWithHttpInfo(id, priorityDto);
        }

        /// <summary>
        /// Set Priority Sets the priority of an existing external task by id. The default value of a priority is 0.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the external task to set the priority for.</param>
        /// <param name="priorityDto"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<Object> SetExternalTaskResourcePriorityWithHttpInfo(string id, PriorityDto priorityDto = default(PriorityDto))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling ExternalTaskApi->SetExternalTaskResourcePriority");

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = priorityDto;


            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/external-task/{id}/priority", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetExternalTaskResourcePriority", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set Priority Sets the priority of an existing external task by id. The default value of a priority is 0.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the external task to set the priority for.</param>
        /// <param name="priorityDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SetExternalTaskResourcePriorityAsync(string id, PriorityDto priorityDto = default(PriorityDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await SetExternalTaskResourcePriorityWithHttpInfoAsync(id, priorityDto, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Set Priority Sets the priority of an existing external task by id. The default value of a priority is 0.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the external task to set the priority for.</param>
        /// <param name="priorityDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<Object>> SetExternalTaskResourcePriorityWithHttpInfoAsync(string id, PriorityDto priorityDto = default(PriorityDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling ExternalTaskApi->SetExternalTaskResourcePriority");


            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = priorityDto;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/external-task/{id}/priority", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetExternalTaskResourcePriority", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set Retries Sets the number of retries left to execute an external task by id. If retries are set to 0, an  incident is created.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the external task to set the number of retries for.</param>
        /// <param name="retriesDto"> (optional)</param>
        /// <returns></returns>
        public void SetExternalTaskResourceRetries(string id, RetriesDto retriesDto = default(RetriesDto))
        {
            SetExternalTaskResourceRetriesWithHttpInfo(id, retriesDto);
        }

        /// <summary>
        /// Set Retries Sets the number of retries left to execute an external task by id. If retries are set to 0, an  incident is created.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the external task to set the number of retries for.</param>
        /// <param name="retriesDto"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<Object> SetExternalTaskResourceRetriesWithHttpInfo(string id, RetriesDto retriesDto = default(RetriesDto))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling ExternalTaskApi->SetExternalTaskResourceRetries");

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = retriesDto;


            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/external-task/{id}/retries", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetExternalTaskResourceRetries", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set Retries Sets the number of retries left to execute an external task by id. If retries are set to 0, an  incident is created.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the external task to set the number of retries for.</param>
        /// <param name="retriesDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SetExternalTaskResourceRetriesAsync(string id, RetriesDto retriesDto = default(RetriesDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await SetExternalTaskResourceRetriesWithHttpInfoAsync(id, retriesDto, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Set Retries Sets the number of retries left to execute an external task by id. If retries are set to 0, an  incident is created.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the external task to set the number of retries for.</param>
        /// <param name="retriesDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<Object>> SetExternalTaskResourceRetriesWithHttpInfoAsync(string id, RetriesDto retriesDto = default(RetriesDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling ExternalTaskApi->SetExternalTaskResourceRetries");


            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = retriesDto;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/external-task/{id}/retries", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetExternalTaskResourceRetries", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set Retries Sync Sets the number of retries left to execute external tasks by id synchronously. If retries are set to 0,  an incident is created.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setRetriesForExternalTasksDto"> (optional)</param>
        /// <returns></returns>
        public void SetExternalTaskRetries(SetRetriesForExternalTasksDto setRetriesForExternalTasksDto = default(SetRetriesForExternalTasksDto))
        {
            SetExternalTaskRetriesWithHttpInfo(setRetriesForExternalTasksDto);
        }

        /// <summary>
        /// Set Retries Sync Sets the number of retries left to execute external tasks by id synchronously. If retries are set to 0,  an incident is created.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setRetriesForExternalTasksDto"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<Object> SetExternalTaskRetriesWithHttpInfo(SetRetriesForExternalTasksDto setRetriesForExternalTasksDto = default(SetRetriesForExternalTasksDto))
        {
            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = setRetriesForExternalTasksDto;


            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/external-task/retries", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetExternalTaskRetries", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set Retries Sync Sets the number of retries left to execute external tasks by id synchronously. If retries are set to 0,  an incident is created.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setRetriesForExternalTasksDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SetExternalTaskRetriesAsync(SetRetriesForExternalTasksDto setRetriesForExternalTasksDto = default(SetRetriesForExternalTasksDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await SetExternalTaskRetriesWithHttpInfoAsync(setRetriesForExternalTasksDto, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Set Retries Sync Sets the number of retries left to execute external tasks by id synchronously. If retries are set to 0,  an incident is created.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setRetriesForExternalTasksDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<Object>> SetExternalTaskRetriesWithHttpInfoAsync(SetRetriesForExternalTasksDto setRetriesForExternalTasksDto = default(SetRetriesForExternalTasksDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = setRetriesForExternalTasksDto;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/external-task/retries", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetExternalTaskRetries", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set Retries Async Sets the number of retries left to execute external tasks by id asynchronously. If retries are set to 0, an incident is created.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setRetriesForExternalTasksDto"> (optional)</param>
        /// <returns>BatchDto</returns>
        public BatchDto SetExternalTaskRetriesAsyncOperation(SetRetriesForExternalTasksDto setRetriesForExternalTasksDto = default(SetRetriesForExternalTasksDto))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<BatchDto> localVarResponse = SetExternalTaskRetriesAsyncOperationWithHttpInfo(setRetriesForExternalTasksDto);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Set Retries Async Sets the number of retries left to execute external tasks by id asynchronously. If retries are set to 0, an incident is created.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setRetriesForExternalTasksDto"> (optional)</param>
        /// <returns>ApiResponse of BatchDto</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<BatchDto> SetExternalTaskRetriesAsyncOperationWithHttpInfo(SetRetriesForExternalTasksDto setRetriesForExternalTasksDto = default(SetRetriesForExternalTasksDto))
        {
            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = setRetriesForExternalTasksDto;


            // make the HTTP request
            var localVarResponse = this.Client.Post<BatchDto>("/external-task/retries-async", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetExternalTaskRetriesAsyncOperation", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set Retries Async Sets the number of retries left to execute external tasks by id asynchronously. If retries are set to 0, an incident is created.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setRetriesForExternalTasksDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchDto</returns>
        public async System.Threading.Tasks.Task<BatchDto> SetExternalTaskRetriesAsyncOperationAsync(SetRetriesForExternalTasksDto setRetriesForExternalTasksDto = default(SetRetriesForExternalTasksDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<BatchDto> localVarResponse = await SetExternalTaskRetriesAsyncOperationWithHttpInfoAsync(setRetriesForExternalTasksDto, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Set Retries Async Sets the number of retries left to execute external tasks by id asynchronously. If retries are set to 0, an incident is created.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setRetriesForExternalTasksDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchDto)</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<BatchDto>> SetExternalTaskRetriesAsyncOperationWithHttpInfoAsync(SetRetriesForExternalTasksDto setRetriesForExternalTasksDto = default(SetRetriesForExternalTasksDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = setRetriesForExternalTasksDto;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<BatchDto>("/external-task/retries-async", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetExternalTaskRetriesAsyncOperation", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Unlock Unlocks an external task by id. Clears the task&#39;s lock expiration time and worker id.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the external task to unlock.</param>
        /// <returns></returns>
        public void Unlock(string id)
        {
            UnlockWithHttpInfo(id);
        }

        /// <summary>
        /// Unlock Unlocks an external task by id. Clears the task&#39;s lock expiration time and worker id.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the external task to unlock.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<Object> UnlockWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling ExternalTaskApi->Unlock");

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/external-task/{id}/unlock", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Unlock", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Unlock Unlocks an external task by id. Clears the task&#39;s lock expiration time and worker id.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the external task to unlock.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UnlockAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await UnlockWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Unlock Unlocks an external task by id. Clears the task&#39;s lock expiration time and worker id.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the external task to unlock.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<Object>> UnlockWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling ExternalTaskApi->Unlock");


            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/external-task/{id}/unlock", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Unlock", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
