/*
 * Camunda Platform REST API
 *
 * OpenApi Spec for Camunda Platform REST API.
 *
 * The version of the OpenAPI document: 7.16.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Camunda.OpenApi.Client.Client;
using Camunda.OpenApi.Client.Model;

namespace Camunda.OpenApi.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IHistoricVariableInstanceApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete Variable Instance
        /// </summary>
        /// <remarks>
        /// Deletes a historic variable instance by id.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the variable instance.</param>
        /// <returns></returns>
        void DeleteHistoricVariableInstance(string id);

        /// <summary>
        /// Delete Variable Instance
        /// </summary>
        /// <remarks>
        /// Deletes a historic variable instance by id.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the variable instance.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteHistoricVariableInstanceWithHttpInfo(string id);
        /// <summary>
        /// Get Variable Instance
        /// </summary>
        /// <remarks>
        /// Retrieves a historic variable by id.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the variable instance.</param>
        /// <param name="deserializeValues">Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note:** While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine. (optional)</param>
        /// <returns>HistoricVariableInstanceDto</returns>
        HistoricVariableInstanceDto GetHistoricVariableInstance(string id, bool? deserializeValues = default(bool?));

        /// <summary>
        /// Get Variable Instance
        /// </summary>
        /// <remarks>
        /// Retrieves a historic variable by id.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the variable instance.</param>
        /// <param name="deserializeValues">Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note:** While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine. (optional)</param>
        /// <returns>ApiResponse of HistoricVariableInstanceDto</returns>
        ApiResponse<HistoricVariableInstanceDto> GetHistoricVariableInstanceWithHttpInfo(string id, bool? deserializeValues = default(bool?));
        /// <summary>
        /// Get Variable Instance (Binary)
        /// </summary>
        /// <remarks>
        /// Retrieves the content of a historic variable by id. Applicable for variables that are serialized as binary data.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the variable instance.</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetHistoricVariableInstanceBinary(string id);

        /// <summary>
        /// Get Variable Instance (Binary)
        /// </summary>
        /// <remarks>
        /// Retrieves the content of a historic variable by id. Applicable for variables that are serialized as binary data.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the variable instance.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetHistoricVariableInstanceBinaryWithHttpInfo(string id);
        /// <summary>
        /// Get Variable Instances
        /// </summary>
        /// <remarks>
        /// Queries for historic variable instances that fulfill the given parameters. The size of the result set can be retrieved by using the [Get Variable Instance Count](https://docs.camunda.org/manual/7.16/reference/rest/history/variable-instance/get-variable-instance-query-count/) method.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variableName">Filter by variable name. (optional)</param>
        /// <param name="variableNameLike">Restrict to variables with a name like the parameter. (optional)</param>
        /// <param name="variableValue">Filter by variable value. Is treated as a &#x60;String&#x60; object on server side. (optional)</param>
        /// <param name="variableNamesIgnoreCase">Match the variable name provided in &#x60;variableName&#x60; and &#x60;variableNameLike&#x60; case- insensitively. If set to &#x60;true&#x60; **variableName** and **variablename** are treated as equal. (optional)</param>
        /// <param name="variableValuesIgnoreCase">Match the variable value provided in &#x60;variableValue&#x60; case-insensitively. If set to &#x60;true&#x60; **variableValue** and **variablevalue** are treated as equal. (optional)</param>
        /// <param name="variableTypeIn">Only include historic variable instances which belong to one of the passed and comma- separated variable types. A list of all supported variable types can be found [here](https://docs.camunda.org/manual/7.16/user-guide/process-engine/variables/#supported-variable-values). **Note:** All non-primitive variables are associated with the type &#39;serializable&#39;. (optional)</param>
        /// <param name="includeDeleted">Include variables that has already been deleted during the execution. (optional)</param>
        /// <param name="processInstanceId">Filter by the process instance the variable belongs to. (optional)</param>
        /// <param name="processInstanceIdIn">Only include historic variable instances which belong to one of the passed and comma-separated process instance ids. (optional)</param>
        /// <param name="processDefinitionId">Filter by the process definition the variable belongs to. (optional)</param>
        /// <param name="processDefinitionKey">Filter by a key of the process definition the variable belongs to. (optional)</param>
        /// <param name="executionIdIn">Only include historic variable instances which belong to one of the passed and and comma-separated execution ids. (optional)</param>
        /// <param name="caseInstanceId">Filter by the case instance the variable belongs to. (optional)</param>
        /// <param name="caseExecutionIdIn">Only include historic variable instances which belong to one of the passed and and comma-separated case execution ids. (optional)</param>
        /// <param name="caseActivityIdIn">Only include historic variable instances which belong to one of the passed and and comma-separated case activity ids. (optional)</param>
        /// <param name="taskIdIn">Only include historic variable instances which belong to one of the passed and and comma-separated task ids. (optional)</param>
        /// <param name="activityInstanceIdIn">Only include historic variable instances which belong to one of the passed and and comma-separated activity instance ids. (optional)</param>
        /// <param name="tenantIdIn">Only include historic variable instances which belong to one of the passed and comma- separated tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include historic variable instances that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="deserializeValues">Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note:** While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine. (optional)</param>
        /// <returns>List&lt;HistoricVariableInstanceDto&gt;</returns>
        List<HistoricVariableInstanceDto> GetHistoricVariableInstances(string variableName = default(string), string variableNameLike = default(string), Object variableValue = default(Object), bool? variableNamesIgnoreCase = default(bool?), bool? variableValuesIgnoreCase = default(bool?), string variableTypeIn = default(string), bool? includeDeleted = default(bool?), string processInstanceId = default(string), string processInstanceIdIn = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string executionIdIn = default(string), string caseInstanceId = default(string), string caseExecutionIdIn = default(string), string caseActivityIdIn = default(string), string taskIdIn = default(string), string activityInstanceIdIn = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?), bool? deserializeValues = default(bool?));

        /// <summary>
        /// Get Variable Instances
        /// </summary>
        /// <remarks>
        /// Queries for historic variable instances that fulfill the given parameters. The size of the result set can be retrieved by using the [Get Variable Instance Count](https://docs.camunda.org/manual/7.16/reference/rest/history/variable-instance/get-variable-instance-query-count/) method.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variableName">Filter by variable name. (optional)</param>
        /// <param name="variableNameLike">Restrict to variables with a name like the parameter. (optional)</param>
        /// <param name="variableValue">Filter by variable value. Is treated as a &#x60;String&#x60; object on server side. (optional)</param>
        /// <param name="variableNamesIgnoreCase">Match the variable name provided in &#x60;variableName&#x60; and &#x60;variableNameLike&#x60; case- insensitively. If set to &#x60;true&#x60; **variableName** and **variablename** are treated as equal. (optional)</param>
        /// <param name="variableValuesIgnoreCase">Match the variable value provided in &#x60;variableValue&#x60; case-insensitively. If set to &#x60;true&#x60; **variableValue** and **variablevalue** are treated as equal. (optional)</param>
        /// <param name="variableTypeIn">Only include historic variable instances which belong to one of the passed and comma- separated variable types. A list of all supported variable types can be found [here](https://docs.camunda.org/manual/7.16/user-guide/process-engine/variables/#supported-variable-values). **Note:** All non-primitive variables are associated with the type &#39;serializable&#39;. (optional)</param>
        /// <param name="includeDeleted">Include variables that has already been deleted during the execution. (optional)</param>
        /// <param name="processInstanceId">Filter by the process instance the variable belongs to. (optional)</param>
        /// <param name="processInstanceIdIn">Only include historic variable instances which belong to one of the passed and comma-separated process instance ids. (optional)</param>
        /// <param name="processDefinitionId">Filter by the process definition the variable belongs to. (optional)</param>
        /// <param name="processDefinitionKey">Filter by a key of the process definition the variable belongs to. (optional)</param>
        /// <param name="executionIdIn">Only include historic variable instances which belong to one of the passed and and comma-separated execution ids. (optional)</param>
        /// <param name="caseInstanceId">Filter by the case instance the variable belongs to. (optional)</param>
        /// <param name="caseExecutionIdIn">Only include historic variable instances which belong to one of the passed and and comma-separated case execution ids. (optional)</param>
        /// <param name="caseActivityIdIn">Only include historic variable instances which belong to one of the passed and and comma-separated case activity ids. (optional)</param>
        /// <param name="taskIdIn">Only include historic variable instances which belong to one of the passed and and comma-separated task ids. (optional)</param>
        /// <param name="activityInstanceIdIn">Only include historic variable instances which belong to one of the passed and and comma-separated activity instance ids. (optional)</param>
        /// <param name="tenantIdIn">Only include historic variable instances which belong to one of the passed and comma- separated tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include historic variable instances that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="deserializeValues">Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note:** While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine. (optional)</param>
        /// <returns>ApiResponse of List&lt;HistoricVariableInstanceDto&gt;</returns>
        ApiResponse<List<HistoricVariableInstanceDto>> GetHistoricVariableInstancesWithHttpInfo(string variableName = default(string), string variableNameLike = default(string), Object variableValue = default(Object), bool? variableNamesIgnoreCase = default(bool?), bool? variableValuesIgnoreCase = default(bool?), string variableTypeIn = default(string), bool? includeDeleted = default(bool?), string processInstanceId = default(string), string processInstanceIdIn = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string executionIdIn = default(string), string caseInstanceId = default(string), string caseExecutionIdIn = default(string), string caseActivityIdIn = default(string), string taskIdIn = default(string), string activityInstanceIdIn = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?), bool? deserializeValues = default(bool?));
        /// <summary>
        /// Get Variable Instance Count
        /// </summary>
        /// <remarks>
        /// Queries for the number of historic variable instances that fulfill the given parameters. Takes the same parameters as the [Get Variable Instances](https://docs.camunda.org/manual/7.16/reference/rest/history/variable-instance/get-variable-instance-query/) method.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variableName">Filter by variable name. (optional)</param>
        /// <param name="variableNameLike">Restrict to variables with a name like the parameter. (optional)</param>
        /// <param name="variableValue">Filter by variable value. Is treated as a &#x60;String&#x60; object on server side. (optional)</param>
        /// <param name="variableNamesIgnoreCase">Match the variable name provided in &#x60;variableName&#x60; and &#x60;variableNameLike&#x60; case- insensitively. If set to &#x60;true&#x60; **variableName** and **variablename** are treated as equal. (optional)</param>
        /// <param name="variableValuesIgnoreCase">Match the variable value provided in &#x60;variableValue&#x60; case-insensitively. If set to &#x60;true&#x60; **variableValue** and **variablevalue** are treated as equal. (optional)</param>
        /// <param name="variableTypeIn">Only include historic variable instances which belong to one of the passed and comma- separated variable types. A list of all supported variable types can be found [here](https://docs.camunda.org/manual/7.16/user-guide/process-engine/variables/#supported-variable-values). **Note:** All non-primitive variables are associated with the type &#39;serializable&#39;. (optional)</param>
        /// <param name="includeDeleted">Include variables that has already been deleted during the execution. (optional)</param>
        /// <param name="processInstanceId">Filter by the process instance the variable belongs to. (optional)</param>
        /// <param name="processInstanceIdIn">Only include historic variable instances which belong to one of the passed and comma-separated process instance ids. (optional)</param>
        /// <param name="processDefinitionId">Filter by the process definition the variable belongs to. (optional)</param>
        /// <param name="processDefinitionKey">Filter by a key of the process definition the variable belongs to. (optional)</param>
        /// <param name="executionIdIn">Only include historic variable instances which belong to one of the passed and and comma-separated execution ids. (optional)</param>
        /// <param name="caseInstanceId">Filter by the case instance the variable belongs to. (optional)</param>
        /// <param name="caseExecutionIdIn">Only include historic variable instances which belong to one of the passed and and comma-separated case execution ids. (optional)</param>
        /// <param name="caseActivityIdIn">Only include historic variable instances which belong to one of the passed and and comma-separated case activity ids. (optional)</param>
        /// <param name="taskIdIn">Only include historic variable instances which belong to one of the passed and and comma-separated task ids. (optional)</param>
        /// <param name="activityInstanceIdIn">Only include historic variable instances which belong to one of the passed and and comma-separated activity instance ids. (optional)</param>
        /// <param name="tenantIdIn">Only include historic variable instances which belong to one of the passed and comma- separated tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include historic variable instances that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <returns>CountResultDto</returns>
        CountResultDto GetHistoricVariableInstancesCount(string variableName = default(string), string variableNameLike = default(string), Object variableValue = default(Object), bool? variableNamesIgnoreCase = default(bool?), bool? variableValuesIgnoreCase = default(bool?), string variableTypeIn = default(string), bool? includeDeleted = default(bool?), string processInstanceId = default(string), string processInstanceIdIn = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string executionIdIn = default(string), string caseInstanceId = default(string), string caseExecutionIdIn = default(string), string caseActivityIdIn = default(string), string taskIdIn = default(string), string activityInstanceIdIn = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?));

        /// <summary>
        /// Get Variable Instance Count
        /// </summary>
        /// <remarks>
        /// Queries for the number of historic variable instances that fulfill the given parameters. Takes the same parameters as the [Get Variable Instances](https://docs.camunda.org/manual/7.16/reference/rest/history/variable-instance/get-variable-instance-query/) method.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variableName">Filter by variable name. (optional)</param>
        /// <param name="variableNameLike">Restrict to variables with a name like the parameter. (optional)</param>
        /// <param name="variableValue">Filter by variable value. Is treated as a &#x60;String&#x60; object on server side. (optional)</param>
        /// <param name="variableNamesIgnoreCase">Match the variable name provided in &#x60;variableName&#x60; and &#x60;variableNameLike&#x60; case- insensitively. If set to &#x60;true&#x60; **variableName** and **variablename** are treated as equal. (optional)</param>
        /// <param name="variableValuesIgnoreCase">Match the variable value provided in &#x60;variableValue&#x60; case-insensitively. If set to &#x60;true&#x60; **variableValue** and **variablevalue** are treated as equal. (optional)</param>
        /// <param name="variableTypeIn">Only include historic variable instances which belong to one of the passed and comma- separated variable types. A list of all supported variable types can be found [here](https://docs.camunda.org/manual/7.16/user-guide/process-engine/variables/#supported-variable-values). **Note:** All non-primitive variables are associated with the type &#39;serializable&#39;. (optional)</param>
        /// <param name="includeDeleted">Include variables that has already been deleted during the execution. (optional)</param>
        /// <param name="processInstanceId">Filter by the process instance the variable belongs to. (optional)</param>
        /// <param name="processInstanceIdIn">Only include historic variable instances which belong to one of the passed and comma-separated process instance ids. (optional)</param>
        /// <param name="processDefinitionId">Filter by the process definition the variable belongs to. (optional)</param>
        /// <param name="processDefinitionKey">Filter by a key of the process definition the variable belongs to. (optional)</param>
        /// <param name="executionIdIn">Only include historic variable instances which belong to one of the passed and and comma-separated execution ids. (optional)</param>
        /// <param name="caseInstanceId">Filter by the case instance the variable belongs to. (optional)</param>
        /// <param name="caseExecutionIdIn">Only include historic variable instances which belong to one of the passed and and comma-separated case execution ids. (optional)</param>
        /// <param name="caseActivityIdIn">Only include historic variable instances which belong to one of the passed and and comma-separated case activity ids. (optional)</param>
        /// <param name="taskIdIn">Only include historic variable instances which belong to one of the passed and and comma-separated task ids. (optional)</param>
        /// <param name="activityInstanceIdIn">Only include historic variable instances which belong to one of the passed and and comma-separated activity instance ids. (optional)</param>
        /// <param name="tenantIdIn">Only include historic variable instances which belong to one of the passed and comma- separated tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include historic variable instances that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <returns>ApiResponse of CountResultDto</returns>
        ApiResponse<CountResultDto> GetHistoricVariableInstancesCountWithHttpInfo(string variableName = default(string), string variableNameLike = default(string), Object variableValue = default(Object), bool? variableNamesIgnoreCase = default(bool?), bool? variableValuesIgnoreCase = default(bool?), string variableTypeIn = default(string), bool? includeDeleted = default(bool?), string processInstanceId = default(string), string processInstanceIdIn = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string executionIdIn = default(string), string caseInstanceId = default(string), string caseExecutionIdIn = default(string), string caseActivityIdIn = default(string), string taskIdIn = default(string), string activityInstanceIdIn = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?));
        /// <summary>
        /// Get Variable Instances (POST)
        /// </summary>
        /// <remarks>
        /// Queries for historic variable instances that fulfill the given parameters. This method is slightly more powerful than the [Get Variable Instances](https://docs.camunda.org/manual/7.16/reference/rest/history/variable-instance/get-variable-instance-query/) method because it allows filtering by variable values of the different types &#x60;String&#x60;, &#x60;Number&#x60; or &#x60;Boolean&#x60;.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="deserializeValues">Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note:** While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine. (optional)</param>
        /// <param name="historicVariableInstanceQueryDto"> (optional)</param>
        /// <returns>List&lt;HistoricVariableInstanceDto&gt;</returns>
        List<HistoricVariableInstanceDto> QueryHistoricVariableInstances(int? firstResult = default(int?), int? maxResults = default(int?), bool? deserializeValues = default(bool?), HistoricVariableInstanceQueryDto historicVariableInstanceQueryDto = default(HistoricVariableInstanceQueryDto));

        /// <summary>
        /// Get Variable Instances (POST)
        /// </summary>
        /// <remarks>
        /// Queries for historic variable instances that fulfill the given parameters. This method is slightly more powerful than the [Get Variable Instances](https://docs.camunda.org/manual/7.16/reference/rest/history/variable-instance/get-variable-instance-query/) method because it allows filtering by variable values of the different types &#x60;String&#x60;, &#x60;Number&#x60; or &#x60;Boolean&#x60;.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="deserializeValues">Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note:** While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine. (optional)</param>
        /// <param name="historicVariableInstanceQueryDto"> (optional)</param>
        /// <returns>ApiResponse of List&lt;HistoricVariableInstanceDto&gt;</returns>
        ApiResponse<List<HistoricVariableInstanceDto>> QueryHistoricVariableInstancesWithHttpInfo(int? firstResult = default(int?), int? maxResults = default(int?), bool? deserializeValues = default(bool?), HistoricVariableInstanceQueryDto historicVariableInstanceQueryDto = default(HistoricVariableInstanceQueryDto));
        /// <summary>
        /// Get Variable Instance Count (POST)
        /// </summary>
        /// <remarks>
        /// Queries for historic variable instances that fulfill the given parameters. This method takes the same message body as the [Get Variable Instances (POST)](https://docs.camunda.org/manual/7.16/reference/rest/history/variable-instance/post-variable-instance-query/) method and therefore it is more powerful regarding variable values than the [Get Variable Instance Count](https://docs.camunda.org/manual/7.16/reference/rest/history/variable-instance/get-variable-instance-query-count/) method.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="historicVariableInstanceQueryDto"> (optional)</param>
        /// <returns>CountResultDto</returns>
        CountResultDto QueryHistoricVariableInstancesCount(HistoricVariableInstanceQueryDto historicVariableInstanceQueryDto = default(HistoricVariableInstanceQueryDto));

        /// <summary>
        /// Get Variable Instance Count (POST)
        /// </summary>
        /// <remarks>
        /// Queries for historic variable instances that fulfill the given parameters. This method takes the same message body as the [Get Variable Instances (POST)](https://docs.camunda.org/manual/7.16/reference/rest/history/variable-instance/post-variable-instance-query/) method and therefore it is more powerful regarding variable values than the [Get Variable Instance Count](https://docs.camunda.org/manual/7.16/reference/rest/history/variable-instance/get-variable-instance-query-count/) method.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="historicVariableInstanceQueryDto"> (optional)</param>
        /// <returns>ApiResponse of CountResultDto</returns>
        ApiResponse<CountResultDto> QueryHistoricVariableInstancesCountWithHttpInfo(HistoricVariableInstanceQueryDto historicVariableInstanceQueryDto = default(HistoricVariableInstanceQueryDto));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IHistoricVariableInstanceApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Delete Variable Instance
        /// </summary>
        /// <remarks>
        /// Deletes a historic variable instance by id.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the variable instance.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteHistoricVariableInstanceAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Variable Instance
        /// </summary>
        /// <remarks>
        /// Deletes a historic variable instance by id.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the variable instance.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteHistoricVariableInstanceWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Variable Instance
        /// </summary>
        /// <remarks>
        /// Retrieves a historic variable by id.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the variable instance.</param>
        /// <param name="deserializeValues">Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note:** While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HistoricVariableInstanceDto</returns>
        System.Threading.Tasks.Task<HistoricVariableInstanceDto> GetHistoricVariableInstanceAsync(string id, bool? deserializeValues = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Variable Instance
        /// </summary>
        /// <remarks>
        /// Retrieves a historic variable by id.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the variable instance.</param>
        /// <param name="deserializeValues">Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note:** While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HistoricVariableInstanceDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<HistoricVariableInstanceDto>> GetHistoricVariableInstanceWithHttpInfoAsync(string id, bool? deserializeValues = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Variable Instance (Binary)
        /// </summary>
        /// <remarks>
        /// Retrieves the content of a historic variable by id. Applicable for variables that are serialized as binary data.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the variable instance.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetHistoricVariableInstanceBinaryAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Variable Instance (Binary)
        /// </summary>
        /// <remarks>
        /// Retrieves the content of a historic variable by id. Applicable for variables that are serialized as binary data.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the variable instance.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetHistoricVariableInstanceBinaryWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Variable Instances
        /// </summary>
        /// <remarks>
        /// Queries for historic variable instances that fulfill the given parameters. The size of the result set can be retrieved by using the [Get Variable Instance Count](https://docs.camunda.org/manual/7.16/reference/rest/history/variable-instance/get-variable-instance-query-count/) method.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variableName">Filter by variable name. (optional)</param>
        /// <param name="variableNameLike">Restrict to variables with a name like the parameter. (optional)</param>
        /// <param name="variableValue">Filter by variable value. Is treated as a &#x60;String&#x60; object on server side. (optional)</param>
        /// <param name="variableNamesIgnoreCase">Match the variable name provided in &#x60;variableName&#x60; and &#x60;variableNameLike&#x60; case- insensitively. If set to &#x60;true&#x60; **variableName** and **variablename** are treated as equal. (optional)</param>
        /// <param name="variableValuesIgnoreCase">Match the variable value provided in &#x60;variableValue&#x60; case-insensitively. If set to &#x60;true&#x60; **variableValue** and **variablevalue** are treated as equal. (optional)</param>
        /// <param name="variableTypeIn">Only include historic variable instances which belong to one of the passed and comma- separated variable types. A list of all supported variable types can be found [here](https://docs.camunda.org/manual/7.16/user-guide/process-engine/variables/#supported-variable-values). **Note:** All non-primitive variables are associated with the type &#39;serializable&#39;. (optional)</param>
        /// <param name="includeDeleted">Include variables that has already been deleted during the execution. (optional)</param>
        /// <param name="processInstanceId">Filter by the process instance the variable belongs to. (optional)</param>
        /// <param name="processInstanceIdIn">Only include historic variable instances which belong to one of the passed and comma-separated process instance ids. (optional)</param>
        /// <param name="processDefinitionId">Filter by the process definition the variable belongs to. (optional)</param>
        /// <param name="processDefinitionKey">Filter by a key of the process definition the variable belongs to. (optional)</param>
        /// <param name="executionIdIn">Only include historic variable instances which belong to one of the passed and and comma-separated execution ids. (optional)</param>
        /// <param name="caseInstanceId">Filter by the case instance the variable belongs to. (optional)</param>
        /// <param name="caseExecutionIdIn">Only include historic variable instances which belong to one of the passed and and comma-separated case execution ids. (optional)</param>
        /// <param name="caseActivityIdIn">Only include historic variable instances which belong to one of the passed and and comma-separated case activity ids. (optional)</param>
        /// <param name="taskIdIn">Only include historic variable instances which belong to one of the passed and and comma-separated task ids. (optional)</param>
        /// <param name="activityInstanceIdIn">Only include historic variable instances which belong to one of the passed and and comma-separated activity instance ids. (optional)</param>
        /// <param name="tenantIdIn">Only include historic variable instances which belong to one of the passed and comma- separated tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include historic variable instances that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="deserializeValues">Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note:** While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;HistoricVariableInstanceDto&gt;</returns>
        System.Threading.Tasks.Task<List<HistoricVariableInstanceDto>> GetHistoricVariableInstancesAsync(string variableName = default(string), string variableNameLike = default(string), Object variableValue = default(Object), bool? variableNamesIgnoreCase = default(bool?), bool? variableValuesIgnoreCase = default(bool?), string variableTypeIn = default(string), bool? includeDeleted = default(bool?), string processInstanceId = default(string), string processInstanceIdIn = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string executionIdIn = default(string), string caseInstanceId = default(string), string caseExecutionIdIn = default(string), string caseActivityIdIn = default(string), string taskIdIn = default(string), string activityInstanceIdIn = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?), bool? deserializeValues = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Variable Instances
        /// </summary>
        /// <remarks>
        /// Queries for historic variable instances that fulfill the given parameters. The size of the result set can be retrieved by using the [Get Variable Instance Count](https://docs.camunda.org/manual/7.16/reference/rest/history/variable-instance/get-variable-instance-query-count/) method.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variableName">Filter by variable name. (optional)</param>
        /// <param name="variableNameLike">Restrict to variables with a name like the parameter. (optional)</param>
        /// <param name="variableValue">Filter by variable value. Is treated as a &#x60;String&#x60; object on server side. (optional)</param>
        /// <param name="variableNamesIgnoreCase">Match the variable name provided in &#x60;variableName&#x60; and &#x60;variableNameLike&#x60; case- insensitively. If set to &#x60;true&#x60; **variableName** and **variablename** are treated as equal. (optional)</param>
        /// <param name="variableValuesIgnoreCase">Match the variable value provided in &#x60;variableValue&#x60; case-insensitively. If set to &#x60;true&#x60; **variableValue** and **variablevalue** are treated as equal. (optional)</param>
        /// <param name="variableTypeIn">Only include historic variable instances which belong to one of the passed and comma- separated variable types. A list of all supported variable types can be found [here](https://docs.camunda.org/manual/7.16/user-guide/process-engine/variables/#supported-variable-values). **Note:** All non-primitive variables are associated with the type &#39;serializable&#39;. (optional)</param>
        /// <param name="includeDeleted">Include variables that has already been deleted during the execution. (optional)</param>
        /// <param name="processInstanceId">Filter by the process instance the variable belongs to. (optional)</param>
        /// <param name="processInstanceIdIn">Only include historic variable instances which belong to one of the passed and comma-separated process instance ids. (optional)</param>
        /// <param name="processDefinitionId">Filter by the process definition the variable belongs to. (optional)</param>
        /// <param name="processDefinitionKey">Filter by a key of the process definition the variable belongs to. (optional)</param>
        /// <param name="executionIdIn">Only include historic variable instances which belong to one of the passed and and comma-separated execution ids. (optional)</param>
        /// <param name="caseInstanceId">Filter by the case instance the variable belongs to. (optional)</param>
        /// <param name="caseExecutionIdIn">Only include historic variable instances which belong to one of the passed and and comma-separated case execution ids. (optional)</param>
        /// <param name="caseActivityIdIn">Only include historic variable instances which belong to one of the passed and and comma-separated case activity ids. (optional)</param>
        /// <param name="taskIdIn">Only include historic variable instances which belong to one of the passed and and comma-separated task ids. (optional)</param>
        /// <param name="activityInstanceIdIn">Only include historic variable instances which belong to one of the passed and and comma-separated activity instance ids. (optional)</param>
        /// <param name="tenantIdIn">Only include historic variable instances which belong to one of the passed and comma- separated tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include historic variable instances that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="deserializeValues">Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note:** While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;HistoricVariableInstanceDto&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<HistoricVariableInstanceDto>>> GetHistoricVariableInstancesWithHttpInfoAsync(string variableName = default(string), string variableNameLike = default(string), Object variableValue = default(Object), bool? variableNamesIgnoreCase = default(bool?), bool? variableValuesIgnoreCase = default(bool?), string variableTypeIn = default(string), bool? includeDeleted = default(bool?), string processInstanceId = default(string), string processInstanceIdIn = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string executionIdIn = default(string), string caseInstanceId = default(string), string caseExecutionIdIn = default(string), string caseActivityIdIn = default(string), string taskIdIn = default(string), string activityInstanceIdIn = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?), bool? deserializeValues = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Variable Instance Count
        /// </summary>
        /// <remarks>
        /// Queries for the number of historic variable instances that fulfill the given parameters. Takes the same parameters as the [Get Variable Instances](https://docs.camunda.org/manual/7.16/reference/rest/history/variable-instance/get-variable-instance-query/) method.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variableName">Filter by variable name. (optional)</param>
        /// <param name="variableNameLike">Restrict to variables with a name like the parameter. (optional)</param>
        /// <param name="variableValue">Filter by variable value. Is treated as a &#x60;String&#x60; object on server side. (optional)</param>
        /// <param name="variableNamesIgnoreCase">Match the variable name provided in &#x60;variableName&#x60; and &#x60;variableNameLike&#x60; case- insensitively. If set to &#x60;true&#x60; **variableName** and **variablename** are treated as equal. (optional)</param>
        /// <param name="variableValuesIgnoreCase">Match the variable value provided in &#x60;variableValue&#x60; case-insensitively. If set to &#x60;true&#x60; **variableValue** and **variablevalue** are treated as equal. (optional)</param>
        /// <param name="variableTypeIn">Only include historic variable instances which belong to one of the passed and comma- separated variable types. A list of all supported variable types can be found [here](https://docs.camunda.org/manual/7.16/user-guide/process-engine/variables/#supported-variable-values). **Note:** All non-primitive variables are associated with the type &#39;serializable&#39;. (optional)</param>
        /// <param name="includeDeleted">Include variables that has already been deleted during the execution. (optional)</param>
        /// <param name="processInstanceId">Filter by the process instance the variable belongs to. (optional)</param>
        /// <param name="processInstanceIdIn">Only include historic variable instances which belong to one of the passed and comma-separated process instance ids. (optional)</param>
        /// <param name="processDefinitionId">Filter by the process definition the variable belongs to. (optional)</param>
        /// <param name="processDefinitionKey">Filter by a key of the process definition the variable belongs to. (optional)</param>
        /// <param name="executionIdIn">Only include historic variable instances which belong to one of the passed and and comma-separated execution ids. (optional)</param>
        /// <param name="caseInstanceId">Filter by the case instance the variable belongs to. (optional)</param>
        /// <param name="caseExecutionIdIn">Only include historic variable instances which belong to one of the passed and and comma-separated case execution ids. (optional)</param>
        /// <param name="caseActivityIdIn">Only include historic variable instances which belong to one of the passed and and comma-separated case activity ids. (optional)</param>
        /// <param name="taskIdIn">Only include historic variable instances which belong to one of the passed and and comma-separated task ids. (optional)</param>
        /// <param name="activityInstanceIdIn">Only include historic variable instances which belong to one of the passed and and comma-separated activity instance ids. (optional)</param>
        /// <param name="tenantIdIn">Only include historic variable instances which belong to one of the passed and comma- separated tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include historic variable instances that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CountResultDto</returns>
        System.Threading.Tasks.Task<CountResultDto> GetHistoricVariableInstancesCountAsync(string variableName = default(string), string variableNameLike = default(string), Object variableValue = default(Object), bool? variableNamesIgnoreCase = default(bool?), bool? variableValuesIgnoreCase = default(bool?), string variableTypeIn = default(string), bool? includeDeleted = default(bool?), string processInstanceId = default(string), string processInstanceIdIn = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string executionIdIn = default(string), string caseInstanceId = default(string), string caseExecutionIdIn = default(string), string caseActivityIdIn = default(string), string taskIdIn = default(string), string activityInstanceIdIn = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Variable Instance Count
        /// </summary>
        /// <remarks>
        /// Queries for the number of historic variable instances that fulfill the given parameters. Takes the same parameters as the [Get Variable Instances](https://docs.camunda.org/manual/7.16/reference/rest/history/variable-instance/get-variable-instance-query/) method.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variableName">Filter by variable name. (optional)</param>
        /// <param name="variableNameLike">Restrict to variables with a name like the parameter. (optional)</param>
        /// <param name="variableValue">Filter by variable value. Is treated as a &#x60;String&#x60; object on server side. (optional)</param>
        /// <param name="variableNamesIgnoreCase">Match the variable name provided in &#x60;variableName&#x60; and &#x60;variableNameLike&#x60; case- insensitively. If set to &#x60;true&#x60; **variableName** and **variablename** are treated as equal. (optional)</param>
        /// <param name="variableValuesIgnoreCase">Match the variable value provided in &#x60;variableValue&#x60; case-insensitively. If set to &#x60;true&#x60; **variableValue** and **variablevalue** are treated as equal. (optional)</param>
        /// <param name="variableTypeIn">Only include historic variable instances which belong to one of the passed and comma- separated variable types. A list of all supported variable types can be found [here](https://docs.camunda.org/manual/7.16/user-guide/process-engine/variables/#supported-variable-values). **Note:** All non-primitive variables are associated with the type &#39;serializable&#39;. (optional)</param>
        /// <param name="includeDeleted">Include variables that has already been deleted during the execution. (optional)</param>
        /// <param name="processInstanceId">Filter by the process instance the variable belongs to. (optional)</param>
        /// <param name="processInstanceIdIn">Only include historic variable instances which belong to one of the passed and comma-separated process instance ids. (optional)</param>
        /// <param name="processDefinitionId">Filter by the process definition the variable belongs to. (optional)</param>
        /// <param name="processDefinitionKey">Filter by a key of the process definition the variable belongs to. (optional)</param>
        /// <param name="executionIdIn">Only include historic variable instances which belong to one of the passed and and comma-separated execution ids. (optional)</param>
        /// <param name="caseInstanceId">Filter by the case instance the variable belongs to. (optional)</param>
        /// <param name="caseExecutionIdIn">Only include historic variable instances which belong to one of the passed and and comma-separated case execution ids. (optional)</param>
        /// <param name="caseActivityIdIn">Only include historic variable instances which belong to one of the passed and and comma-separated case activity ids. (optional)</param>
        /// <param name="taskIdIn">Only include historic variable instances which belong to one of the passed and and comma-separated task ids. (optional)</param>
        /// <param name="activityInstanceIdIn">Only include historic variable instances which belong to one of the passed and and comma-separated activity instance ids. (optional)</param>
        /// <param name="tenantIdIn">Only include historic variable instances which belong to one of the passed and comma- separated tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include historic variable instances that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CountResultDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<CountResultDto>> GetHistoricVariableInstancesCountWithHttpInfoAsync(string variableName = default(string), string variableNameLike = default(string), Object variableValue = default(Object), bool? variableNamesIgnoreCase = default(bool?), bool? variableValuesIgnoreCase = default(bool?), string variableTypeIn = default(string), bool? includeDeleted = default(bool?), string processInstanceId = default(string), string processInstanceIdIn = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string executionIdIn = default(string), string caseInstanceId = default(string), string caseExecutionIdIn = default(string), string caseActivityIdIn = default(string), string taskIdIn = default(string), string activityInstanceIdIn = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Variable Instances (POST)
        /// </summary>
        /// <remarks>
        /// Queries for historic variable instances that fulfill the given parameters. This method is slightly more powerful than the [Get Variable Instances](https://docs.camunda.org/manual/7.16/reference/rest/history/variable-instance/get-variable-instance-query/) method because it allows filtering by variable values of the different types &#x60;String&#x60;, &#x60;Number&#x60; or &#x60;Boolean&#x60;.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="deserializeValues">Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note:** While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine. (optional)</param>
        /// <param name="historicVariableInstanceQueryDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;HistoricVariableInstanceDto&gt;</returns>
        System.Threading.Tasks.Task<List<HistoricVariableInstanceDto>> QueryHistoricVariableInstancesAsync(int? firstResult = default(int?), int? maxResults = default(int?), bool? deserializeValues = default(bool?), HistoricVariableInstanceQueryDto historicVariableInstanceQueryDto = default(HistoricVariableInstanceQueryDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Variable Instances (POST)
        /// </summary>
        /// <remarks>
        /// Queries for historic variable instances that fulfill the given parameters. This method is slightly more powerful than the [Get Variable Instances](https://docs.camunda.org/manual/7.16/reference/rest/history/variable-instance/get-variable-instance-query/) method because it allows filtering by variable values of the different types &#x60;String&#x60;, &#x60;Number&#x60; or &#x60;Boolean&#x60;.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="deserializeValues">Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note:** While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine. (optional)</param>
        /// <param name="historicVariableInstanceQueryDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;HistoricVariableInstanceDto&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<HistoricVariableInstanceDto>>> QueryHistoricVariableInstancesWithHttpInfoAsync(int? firstResult = default(int?), int? maxResults = default(int?), bool? deserializeValues = default(bool?), HistoricVariableInstanceQueryDto historicVariableInstanceQueryDto = default(HistoricVariableInstanceQueryDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Variable Instance Count (POST)
        /// </summary>
        /// <remarks>
        /// Queries for historic variable instances that fulfill the given parameters. This method takes the same message body as the [Get Variable Instances (POST)](https://docs.camunda.org/manual/7.16/reference/rest/history/variable-instance/post-variable-instance-query/) method and therefore it is more powerful regarding variable values than the [Get Variable Instance Count](https://docs.camunda.org/manual/7.16/reference/rest/history/variable-instance/get-variable-instance-query-count/) method.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="historicVariableInstanceQueryDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CountResultDto</returns>
        System.Threading.Tasks.Task<CountResultDto> QueryHistoricVariableInstancesCountAsync(HistoricVariableInstanceQueryDto historicVariableInstanceQueryDto = default(HistoricVariableInstanceQueryDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Variable Instance Count (POST)
        /// </summary>
        /// <remarks>
        /// Queries for historic variable instances that fulfill the given parameters. This method takes the same message body as the [Get Variable Instances (POST)](https://docs.camunda.org/manual/7.16/reference/rest/history/variable-instance/post-variable-instance-query/) method and therefore it is more powerful regarding variable values than the [Get Variable Instance Count](https://docs.camunda.org/manual/7.16/reference/rest/history/variable-instance/get-variable-instance-query-count/) method.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="historicVariableInstanceQueryDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CountResultDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<CountResultDto>> QueryHistoricVariableInstancesCountWithHttpInfoAsync(HistoricVariableInstanceQueryDto historicVariableInstanceQueryDto = default(HistoricVariableInstanceQueryDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IHistoricVariableInstanceApi : IHistoricVariableInstanceApiSync, IHistoricVariableInstanceApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class HistoricVariableInstanceApi : IHistoricVariableInstanceApi
    {
        private Camunda.OpenApi.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="HistoricVariableInstanceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public HistoricVariableInstanceApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="HistoricVariableInstanceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public HistoricVariableInstanceApi(String basePath)
        {
            this.Configuration = Camunda.OpenApi.Client.Client.Configuration.MergeConfigurations(
                Camunda.OpenApi.Client.Client.GlobalConfiguration.Instance,
                new Camunda.OpenApi.Client.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Camunda.OpenApi.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Camunda.OpenApi.Client.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Camunda.OpenApi.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="HistoricVariableInstanceApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public HistoricVariableInstanceApi(Camunda.OpenApi.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Camunda.OpenApi.Client.Client.Configuration.MergeConfigurations(
                Camunda.OpenApi.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Camunda.OpenApi.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Camunda.OpenApi.Client.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Camunda.OpenApi.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="HistoricVariableInstanceApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public HistoricVariableInstanceApi(Camunda.OpenApi.Client.Client.ISynchronousClient client, Camunda.OpenApi.Client.Client.IAsynchronousClient asyncClient, Camunda.OpenApi.Client.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Camunda.OpenApi.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Camunda.OpenApi.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Camunda.OpenApi.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Camunda.OpenApi.Client.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Camunda.OpenApi.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Delete Variable Instance Deletes a historic variable instance by id.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the variable instance.</param>
        /// <returns></returns>
        public void DeleteHistoricVariableInstance(string id)
        {
            DeleteHistoricVariableInstanceWithHttpInfo(id);
        }

        /// <summary>
        /// Delete Variable Instance Deletes a historic variable instance by id.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the variable instance.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<Object> DeleteHistoricVariableInstanceWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling HistoricVariableInstanceApi->DeleteHistoricVariableInstance");

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/history/variable-instance/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteHistoricVariableInstance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Variable Instance Deletes a historic variable instance by id.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the variable instance.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteHistoricVariableInstanceAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteHistoricVariableInstanceWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete Variable Instance Deletes a historic variable instance by id.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the variable instance.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<Object>> DeleteHistoricVariableInstanceWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling HistoricVariableInstanceApi->DeleteHistoricVariableInstance");


            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/history/variable-instance/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteHistoricVariableInstance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Variable Instance Retrieves a historic variable by id.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the variable instance.</param>
        /// <param name="deserializeValues">Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note:** While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine. (optional)</param>
        /// <returns>HistoricVariableInstanceDto</returns>
        public HistoricVariableInstanceDto GetHistoricVariableInstance(string id, bool? deserializeValues = default(bool?))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<HistoricVariableInstanceDto> localVarResponse = GetHistoricVariableInstanceWithHttpInfo(id, deserializeValues);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Variable Instance Retrieves a historic variable by id.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the variable instance.</param>
        /// <param name="deserializeValues">Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note:** While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine. (optional)</param>
        /// <returns>ApiResponse of HistoricVariableInstanceDto</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<HistoricVariableInstanceDto> GetHistoricVariableInstanceWithHttpInfo(string id, bool? deserializeValues = default(bool?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling HistoricVariableInstanceApi->GetHistoricVariableInstance");

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (deserializeValues != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "deserializeValues", deserializeValues));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<HistoricVariableInstanceDto>("/history/variable-instance/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetHistoricVariableInstance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Variable Instance Retrieves a historic variable by id.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the variable instance.</param>
        /// <param name="deserializeValues">Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note:** While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HistoricVariableInstanceDto</returns>
        public async System.Threading.Tasks.Task<HistoricVariableInstanceDto> GetHistoricVariableInstanceAsync(string id, bool? deserializeValues = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<HistoricVariableInstanceDto> localVarResponse = await GetHistoricVariableInstanceWithHttpInfoAsync(id, deserializeValues, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Variable Instance Retrieves a historic variable by id.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the variable instance.</param>
        /// <param name="deserializeValues">Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note:** While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HistoricVariableInstanceDto)</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<HistoricVariableInstanceDto>> GetHistoricVariableInstanceWithHttpInfoAsync(string id, bool? deserializeValues = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling HistoricVariableInstanceApi->GetHistoricVariableInstance");


            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (deserializeValues != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "deserializeValues", deserializeValues));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<HistoricVariableInstanceDto>("/history/variable-instance/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetHistoricVariableInstance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Variable Instance (Binary) Retrieves the content of a historic variable by id. Applicable for variables that are serialized as binary data.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the variable instance.</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetHistoricVariableInstanceBinary(string id)
        {
            Camunda.OpenApi.Client.Client.ApiResponse<System.IO.Stream> localVarResponse = GetHistoricVariableInstanceBinaryWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Variable Instance (Binary) Retrieves the content of a historic variable by id. Applicable for variables that are serialized as binary data.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the variable instance.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<System.IO.Stream> GetHistoricVariableInstanceBinaryWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling HistoricVariableInstanceApi->GetHistoricVariableInstanceBinary");

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/octet-stream",
                "*/*",
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<System.IO.Stream>("/history/variable-instance/{id}/data", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetHistoricVariableInstanceBinary", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Variable Instance (Binary) Retrieves the content of a historic variable by id. Applicable for variables that are serialized as binary data.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the variable instance.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetHistoricVariableInstanceBinaryAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<System.IO.Stream> localVarResponse = await GetHistoricVariableInstanceBinaryWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Variable Instance (Binary) Retrieves the content of a historic variable by id. Applicable for variables that are serialized as binary data.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the variable instance.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<System.IO.Stream>> GetHistoricVariableInstanceBinaryWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling HistoricVariableInstanceApi->GetHistoricVariableInstanceBinary");


            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/octet-stream",
                "*/*",
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<System.IO.Stream>("/history/variable-instance/{id}/data", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetHistoricVariableInstanceBinary", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Variable Instances Queries for historic variable instances that fulfill the given parameters. The size of the result set can be retrieved by using the [Get Variable Instance Count](https://docs.camunda.org/manual/7.16/reference/rest/history/variable-instance/get-variable-instance-query-count/) method.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variableName">Filter by variable name. (optional)</param>
        /// <param name="variableNameLike">Restrict to variables with a name like the parameter. (optional)</param>
        /// <param name="variableValue">Filter by variable value. Is treated as a &#x60;String&#x60; object on server side. (optional)</param>
        /// <param name="variableNamesIgnoreCase">Match the variable name provided in &#x60;variableName&#x60; and &#x60;variableNameLike&#x60; case- insensitively. If set to &#x60;true&#x60; **variableName** and **variablename** are treated as equal. (optional)</param>
        /// <param name="variableValuesIgnoreCase">Match the variable value provided in &#x60;variableValue&#x60; case-insensitively. If set to &#x60;true&#x60; **variableValue** and **variablevalue** are treated as equal. (optional)</param>
        /// <param name="variableTypeIn">Only include historic variable instances which belong to one of the passed and comma- separated variable types. A list of all supported variable types can be found [here](https://docs.camunda.org/manual/7.16/user-guide/process-engine/variables/#supported-variable-values). **Note:** All non-primitive variables are associated with the type &#39;serializable&#39;. (optional)</param>
        /// <param name="includeDeleted">Include variables that has already been deleted during the execution. (optional)</param>
        /// <param name="processInstanceId">Filter by the process instance the variable belongs to. (optional)</param>
        /// <param name="processInstanceIdIn">Only include historic variable instances which belong to one of the passed and comma-separated process instance ids. (optional)</param>
        /// <param name="processDefinitionId">Filter by the process definition the variable belongs to. (optional)</param>
        /// <param name="processDefinitionKey">Filter by a key of the process definition the variable belongs to. (optional)</param>
        /// <param name="executionIdIn">Only include historic variable instances which belong to one of the passed and and comma-separated execution ids. (optional)</param>
        /// <param name="caseInstanceId">Filter by the case instance the variable belongs to. (optional)</param>
        /// <param name="caseExecutionIdIn">Only include historic variable instances which belong to one of the passed and and comma-separated case execution ids. (optional)</param>
        /// <param name="caseActivityIdIn">Only include historic variable instances which belong to one of the passed and and comma-separated case activity ids. (optional)</param>
        /// <param name="taskIdIn">Only include historic variable instances which belong to one of the passed and and comma-separated task ids. (optional)</param>
        /// <param name="activityInstanceIdIn">Only include historic variable instances which belong to one of the passed and and comma-separated activity instance ids. (optional)</param>
        /// <param name="tenantIdIn">Only include historic variable instances which belong to one of the passed and comma- separated tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include historic variable instances that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="deserializeValues">Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note:** While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine. (optional)</param>
        /// <returns>List&lt;HistoricVariableInstanceDto&gt;</returns>
        public List<HistoricVariableInstanceDto> GetHistoricVariableInstances(string variableName = default(string), string variableNameLike = default(string), Object variableValue = default(Object), bool? variableNamesIgnoreCase = default(bool?), bool? variableValuesIgnoreCase = default(bool?), string variableTypeIn = default(string), bool? includeDeleted = default(bool?), string processInstanceId = default(string), string processInstanceIdIn = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string executionIdIn = default(string), string caseInstanceId = default(string), string caseExecutionIdIn = default(string), string caseActivityIdIn = default(string), string taskIdIn = default(string), string activityInstanceIdIn = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?), bool? deserializeValues = default(bool?))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<List<HistoricVariableInstanceDto>> localVarResponse = GetHistoricVariableInstancesWithHttpInfo(variableName, variableNameLike, variableValue, variableNamesIgnoreCase, variableValuesIgnoreCase, variableTypeIn, includeDeleted, processInstanceId, processInstanceIdIn, processDefinitionId, processDefinitionKey, executionIdIn, caseInstanceId, caseExecutionIdIn, caseActivityIdIn, taskIdIn, activityInstanceIdIn, tenantIdIn, withoutTenantId, sortBy, sortOrder, firstResult, maxResults, deserializeValues);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Variable Instances Queries for historic variable instances that fulfill the given parameters. The size of the result set can be retrieved by using the [Get Variable Instance Count](https://docs.camunda.org/manual/7.16/reference/rest/history/variable-instance/get-variable-instance-query-count/) method.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variableName">Filter by variable name. (optional)</param>
        /// <param name="variableNameLike">Restrict to variables with a name like the parameter. (optional)</param>
        /// <param name="variableValue">Filter by variable value. Is treated as a &#x60;String&#x60; object on server side. (optional)</param>
        /// <param name="variableNamesIgnoreCase">Match the variable name provided in &#x60;variableName&#x60; and &#x60;variableNameLike&#x60; case- insensitively. If set to &#x60;true&#x60; **variableName** and **variablename** are treated as equal. (optional)</param>
        /// <param name="variableValuesIgnoreCase">Match the variable value provided in &#x60;variableValue&#x60; case-insensitively. If set to &#x60;true&#x60; **variableValue** and **variablevalue** are treated as equal. (optional)</param>
        /// <param name="variableTypeIn">Only include historic variable instances which belong to one of the passed and comma- separated variable types. A list of all supported variable types can be found [here](https://docs.camunda.org/manual/7.16/user-guide/process-engine/variables/#supported-variable-values). **Note:** All non-primitive variables are associated with the type &#39;serializable&#39;. (optional)</param>
        /// <param name="includeDeleted">Include variables that has already been deleted during the execution. (optional)</param>
        /// <param name="processInstanceId">Filter by the process instance the variable belongs to. (optional)</param>
        /// <param name="processInstanceIdIn">Only include historic variable instances which belong to one of the passed and comma-separated process instance ids. (optional)</param>
        /// <param name="processDefinitionId">Filter by the process definition the variable belongs to. (optional)</param>
        /// <param name="processDefinitionKey">Filter by a key of the process definition the variable belongs to. (optional)</param>
        /// <param name="executionIdIn">Only include historic variable instances which belong to one of the passed and and comma-separated execution ids. (optional)</param>
        /// <param name="caseInstanceId">Filter by the case instance the variable belongs to. (optional)</param>
        /// <param name="caseExecutionIdIn">Only include historic variable instances which belong to one of the passed and and comma-separated case execution ids. (optional)</param>
        /// <param name="caseActivityIdIn">Only include historic variable instances which belong to one of the passed and and comma-separated case activity ids. (optional)</param>
        /// <param name="taskIdIn">Only include historic variable instances which belong to one of the passed and and comma-separated task ids. (optional)</param>
        /// <param name="activityInstanceIdIn">Only include historic variable instances which belong to one of the passed and and comma-separated activity instance ids. (optional)</param>
        /// <param name="tenantIdIn">Only include historic variable instances which belong to one of the passed and comma- separated tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include historic variable instances that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="deserializeValues">Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note:** While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine. (optional)</param>
        /// <returns>ApiResponse of List&lt;HistoricVariableInstanceDto&gt;</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<List<HistoricVariableInstanceDto>> GetHistoricVariableInstancesWithHttpInfo(string variableName = default(string), string variableNameLike = default(string), Object variableValue = default(Object), bool? variableNamesIgnoreCase = default(bool?), bool? variableValuesIgnoreCase = default(bool?), string variableTypeIn = default(string), bool? includeDeleted = default(bool?), string processInstanceId = default(string), string processInstanceIdIn = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string executionIdIn = default(string), string caseInstanceId = default(string), string caseExecutionIdIn = default(string), string caseActivityIdIn = default(string), string taskIdIn = default(string), string activityInstanceIdIn = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?), bool? deserializeValues = default(bool?))
        {
            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (variableName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "variableName", variableName));
            }
            if (variableNameLike != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "variableNameLike", variableNameLike));
            }
            if (variableValue != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "variableValue", variableValue));
            }
            if (variableNamesIgnoreCase != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "variableNamesIgnoreCase", variableNamesIgnoreCase));
            }
            if (variableValuesIgnoreCase != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "variableValuesIgnoreCase", variableValuesIgnoreCase));
            }
            if (variableTypeIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "variableTypeIn", variableTypeIn));
            }
            if (includeDeleted != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "includeDeleted", includeDeleted));
            }
            if (processInstanceId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processInstanceId", processInstanceId));
            }
            if (processInstanceIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processInstanceIdIn", processInstanceIdIn));
            }
            if (processDefinitionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processDefinitionId", processDefinitionId));
            }
            if (processDefinitionKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processDefinitionKey", processDefinitionKey));
            }
            if (executionIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "executionIdIn", executionIdIn));
            }
            if (caseInstanceId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "caseInstanceId", caseInstanceId));
            }
            if (caseExecutionIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "caseExecutionIdIn", caseExecutionIdIn));
            }
            if (caseActivityIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "caseActivityIdIn", caseActivityIdIn));
            }
            if (taskIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "taskIdIn", taskIdIn));
            }
            if (activityInstanceIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "activityInstanceIdIn", activityInstanceIdIn));
            }
            if (tenantIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "tenantIdIn", tenantIdIn));
            }
            if (withoutTenantId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "withoutTenantId", withoutTenantId));
            }
            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "sortBy", sortBy));
            }
            if (sortOrder != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "sortOrder", sortOrder));
            }
            if (firstResult != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "firstResult", firstResult));
            }
            if (maxResults != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "maxResults", maxResults));
            }
            if (deserializeValues != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "deserializeValues", deserializeValues));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<HistoricVariableInstanceDto>>("/history/variable-instance", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetHistoricVariableInstances", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Variable Instances Queries for historic variable instances that fulfill the given parameters. The size of the result set can be retrieved by using the [Get Variable Instance Count](https://docs.camunda.org/manual/7.16/reference/rest/history/variable-instance/get-variable-instance-query-count/) method.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variableName">Filter by variable name. (optional)</param>
        /// <param name="variableNameLike">Restrict to variables with a name like the parameter. (optional)</param>
        /// <param name="variableValue">Filter by variable value. Is treated as a &#x60;String&#x60; object on server side. (optional)</param>
        /// <param name="variableNamesIgnoreCase">Match the variable name provided in &#x60;variableName&#x60; and &#x60;variableNameLike&#x60; case- insensitively. If set to &#x60;true&#x60; **variableName** and **variablename** are treated as equal. (optional)</param>
        /// <param name="variableValuesIgnoreCase">Match the variable value provided in &#x60;variableValue&#x60; case-insensitively. If set to &#x60;true&#x60; **variableValue** and **variablevalue** are treated as equal. (optional)</param>
        /// <param name="variableTypeIn">Only include historic variable instances which belong to one of the passed and comma- separated variable types. A list of all supported variable types can be found [here](https://docs.camunda.org/manual/7.16/user-guide/process-engine/variables/#supported-variable-values). **Note:** All non-primitive variables are associated with the type &#39;serializable&#39;. (optional)</param>
        /// <param name="includeDeleted">Include variables that has already been deleted during the execution. (optional)</param>
        /// <param name="processInstanceId">Filter by the process instance the variable belongs to. (optional)</param>
        /// <param name="processInstanceIdIn">Only include historic variable instances which belong to one of the passed and comma-separated process instance ids. (optional)</param>
        /// <param name="processDefinitionId">Filter by the process definition the variable belongs to. (optional)</param>
        /// <param name="processDefinitionKey">Filter by a key of the process definition the variable belongs to. (optional)</param>
        /// <param name="executionIdIn">Only include historic variable instances which belong to one of the passed and and comma-separated execution ids. (optional)</param>
        /// <param name="caseInstanceId">Filter by the case instance the variable belongs to. (optional)</param>
        /// <param name="caseExecutionIdIn">Only include historic variable instances which belong to one of the passed and and comma-separated case execution ids. (optional)</param>
        /// <param name="caseActivityIdIn">Only include historic variable instances which belong to one of the passed and and comma-separated case activity ids. (optional)</param>
        /// <param name="taskIdIn">Only include historic variable instances which belong to one of the passed and and comma-separated task ids. (optional)</param>
        /// <param name="activityInstanceIdIn">Only include historic variable instances which belong to one of the passed and and comma-separated activity instance ids. (optional)</param>
        /// <param name="tenantIdIn">Only include historic variable instances which belong to one of the passed and comma- separated tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include historic variable instances that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="deserializeValues">Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note:** While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;HistoricVariableInstanceDto&gt;</returns>
        public async System.Threading.Tasks.Task<List<HistoricVariableInstanceDto>> GetHistoricVariableInstancesAsync(string variableName = default(string), string variableNameLike = default(string), Object variableValue = default(Object), bool? variableNamesIgnoreCase = default(bool?), bool? variableValuesIgnoreCase = default(bool?), string variableTypeIn = default(string), bool? includeDeleted = default(bool?), string processInstanceId = default(string), string processInstanceIdIn = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string executionIdIn = default(string), string caseInstanceId = default(string), string caseExecutionIdIn = default(string), string caseActivityIdIn = default(string), string taskIdIn = default(string), string activityInstanceIdIn = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?), bool? deserializeValues = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<List<HistoricVariableInstanceDto>> localVarResponse = await GetHistoricVariableInstancesWithHttpInfoAsync(variableName, variableNameLike, variableValue, variableNamesIgnoreCase, variableValuesIgnoreCase, variableTypeIn, includeDeleted, processInstanceId, processInstanceIdIn, processDefinitionId, processDefinitionKey, executionIdIn, caseInstanceId, caseExecutionIdIn, caseActivityIdIn, taskIdIn, activityInstanceIdIn, tenantIdIn, withoutTenantId, sortBy, sortOrder, firstResult, maxResults, deserializeValues, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Variable Instances Queries for historic variable instances that fulfill the given parameters. The size of the result set can be retrieved by using the [Get Variable Instance Count](https://docs.camunda.org/manual/7.16/reference/rest/history/variable-instance/get-variable-instance-query-count/) method.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variableName">Filter by variable name. (optional)</param>
        /// <param name="variableNameLike">Restrict to variables with a name like the parameter. (optional)</param>
        /// <param name="variableValue">Filter by variable value. Is treated as a &#x60;String&#x60; object on server side. (optional)</param>
        /// <param name="variableNamesIgnoreCase">Match the variable name provided in &#x60;variableName&#x60; and &#x60;variableNameLike&#x60; case- insensitively. If set to &#x60;true&#x60; **variableName** and **variablename** are treated as equal. (optional)</param>
        /// <param name="variableValuesIgnoreCase">Match the variable value provided in &#x60;variableValue&#x60; case-insensitively. If set to &#x60;true&#x60; **variableValue** and **variablevalue** are treated as equal. (optional)</param>
        /// <param name="variableTypeIn">Only include historic variable instances which belong to one of the passed and comma- separated variable types. A list of all supported variable types can be found [here](https://docs.camunda.org/manual/7.16/user-guide/process-engine/variables/#supported-variable-values). **Note:** All non-primitive variables are associated with the type &#39;serializable&#39;. (optional)</param>
        /// <param name="includeDeleted">Include variables that has already been deleted during the execution. (optional)</param>
        /// <param name="processInstanceId">Filter by the process instance the variable belongs to. (optional)</param>
        /// <param name="processInstanceIdIn">Only include historic variable instances which belong to one of the passed and comma-separated process instance ids. (optional)</param>
        /// <param name="processDefinitionId">Filter by the process definition the variable belongs to. (optional)</param>
        /// <param name="processDefinitionKey">Filter by a key of the process definition the variable belongs to. (optional)</param>
        /// <param name="executionIdIn">Only include historic variable instances which belong to one of the passed and and comma-separated execution ids. (optional)</param>
        /// <param name="caseInstanceId">Filter by the case instance the variable belongs to. (optional)</param>
        /// <param name="caseExecutionIdIn">Only include historic variable instances which belong to one of the passed and and comma-separated case execution ids. (optional)</param>
        /// <param name="caseActivityIdIn">Only include historic variable instances which belong to one of the passed and and comma-separated case activity ids. (optional)</param>
        /// <param name="taskIdIn">Only include historic variable instances which belong to one of the passed and and comma-separated task ids. (optional)</param>
        /// <param name="activityInstanceIdIn">Only include historic variable instances which belong to one of the passed and and comma-separated activity instance ids. (optional)</param>
        /// <param name="tenantIdIn">Only include historic variable instances which belong to one of the passed and comma- separated tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include historic variable instances that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="deserializeValues">Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note:** While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;HistoricVariableInstanceDto&gt;)</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<List<HistoricVariableInstanceDto>>> GetHistoricVariableInstancesWithHttpInfoAsync(string variableName = default(string), string variableNameLike = default(string), Object variableValue = default(Object), bool? variableNamesIgnoreCase = default(bool?), bool? variableValuesIgnoreCase = default(bool?), string variableTypeIn = default(string), bool? includeDeleted = default(bool?), string processInstanceId = default(string), string processInstanceIdIn = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string executionIdIn = default(string), string caseInstanceId = default(string), string caseExecutionIdIn = default(string), string caseActivityIdIn = default(string), string taskIdIn = default(string), string activityInstanceIdIn = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?), bool? deserializeValues = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (variableName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "variableName", variableName));
            }
            if (variableNameLike != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "variableNameLike", variableNameLike));
            }
            if (variableValue != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "variableValue", variableValue));
            }
            if (variableNamesIgnoreCase != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "variableNamesIgnoreCase", variableNamesIgnoreCase));
            }
            if (variableValuesIgnoreCase != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "variableValuesIgnoreCase", variableValuesIgnoreCase));
            }
            if (variableTypeIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "variableTypeIn", variableTypeIn));
            }
            if (includeDeleted != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "includeDeleted", includeDeleted));
            }
            if (processInstanceId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processInstanceId", processInstanceId));
            }
            if (processInstanceIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processInstanceIdIn", processInstanceIdIn));
            }
            if (processDefinitionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processDefinitionId", processDefinitionId));
            }
            if (processDefinitionKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processDefinitionKey", processDefinitionKey));
            }
            if (executionIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "executionIdIn", executionIdIn));
            }
            if (caseInstanceId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "caseInstanceId", caseInstanceId));
            }
            if (caseExecutionIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "caseExecutionIdIn", caseExecutionIdIn));
            }
            if (caseActivityIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "caseActivityIdIn", caseActivityIdIn));
            }
            if (taskIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "taskIdIn", taskIdIn));
            }
            if (activityInstanceIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "activityInstanceIdIn", activityInstanceIdIn));
            }
            if (tenantIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "tenantIdIn", tenantIdIn));
            }
            if (withoutTenantId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "withoutTenantId", withoutTenantId));
            }
            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "sortBy", sortBy));
            }
            if (sortOrder != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "sortOrder", sortOrder));
            }
            if (firstResult != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "firstResult", firstResult));
            }
            if (maxResults != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "maxResults", maxResults));
            }
            if (deserializeValues != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "deserializeValues", deserializeValues));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<HistoricVariableInstanceDto>>("/history/variable-instance", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetHistoricVariableInstances", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Variable Instance Count Queries for the number of historic variable instances that fulfill the given parameters. Takes the same parameters as the [Get Variable Instances](https://docs.camunda.org/manual/7.16/reference/rest/history/variable-instance/get-variable-instance-query/) method.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variableName">Filter by variable name. (optional)</param>
        /// <param name="variableNameLike">Restrict to variables with a name like the parameter. (optional)</param>
        /// <param name="variableValue">Filter by variable value. Is treated as a &#x60;String&#x60; object on server side. (optional)</param>
        /// <param name="variableNamesIgnoreCase">Match the variable name provided in &#x60;variableName&#x60; and &#x60;variableNameLike&#x60; case- insensitively. If set to &#x60;true&#x60; **variableName** and **variablename** are treated as equal. (optional)</param>
        /// <param name="variableValuesIgnoreCase">Match the variable value provided in &#x60;variableValue&#x60; case-insensitively. If set to &#x60;true&#x60; **variableValue** and **variablevalue** are treated as equal. (optional)</param>
        /// <param name="variableTypeIn">Only include historic variable instances which belong to one of the passed and comma- separated variable types. A list of all supported variable types can be found [here](https://docs.camunda.org/manual/7.16/user-guide/process-engine/variables/#supported-variable-values). **Note:** All non-primitive variables are associated with the type &#39;serializable&#39;. (optional)</param>
        /// <param name="includeDeleted">Include variables that has already been deleted during the execution. (optional)</param>
        /// <param name="processInstanceId">Filter by the process instance the variable belongs to. (optional)</param>
        /// <param name="processInstanceIdIn">Only include historic variable instances which belong to one of the passed and comma-separated process instance ids. (optional)</param>
        /// <param name="processDefinitionId">Filter by the process definition the variable belongs to. (optional)</param>
        /// <param name="processDefinitionKey">Filter by a key of the process definition the variable belongs to. (optional)</param>
        /// <param name="executionIdIn">Only include historic variable instances which belong to one of the passed and and comma-separated execution ids. (optional)</param>
        /// <param name="caseInstanceId">Filter by the case instance the variable belongs to. (optional)</param>
        /// <param name="caseExecutionIdIn">Only include historic variable instances which belong to one of the passed and and comma-separated case execution ids. (optional)</param>
        /// <param name="caseActivityIdIn">Only include historic variable instances which belong to one of the passed and and comma-separated case activity ids. (optional)</param>
        /// <param name="taskIdIn">Only include historic variable instances which belong to one of the passed and and comma-separated task ids. (optional)</param>
        /// <param name="activityInstanceIdIn">Only include historic variable instances which belong to one of the passed and and comma-separated activity instance ids. (optional)</param>
        /// <param name="tenantIdIn">Only include historic variable instances which belong to one of the passed and comma- separated tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include historic variable instances that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <returns>CountResultDto</returns>
        public CountResultDto GetHistoricVariableInstancesCount(string variableName = default(string), string variableNameLike = default(string), Object variableValue = default(Object), bool? variableNamesIgnoreCase = default(bool?), bool? variableValuesIgnoreCase = default(bool?), string variableTypeIn = default(string), bool? includeDeleted = default(bool?), string processInstanceId = default(string), string processInstanceIdIn = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string executionIdIn = default(string), string caseInstanceId = default(string), string caseExecutionIdIn = default(string), string caseActivityIdIn = default(string), string taskIdIn = default(string), string activityInstanceIdIn = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<CountResultDto> localVarResponse = GetHistoricVariableInstancesCountWithHttpInfo(variableName, variableNameLike, variableValue, variableNamesIgnoreCase, variableValuesIgnoreCase, variableTypeIn, includeDeleted, processInstanceId, processInstanceIdIn, processDefinitionId, processDefinitionKey, executionIdIn, caseInstanceId, caseExecutionIdIn, caseActivityIdIn, taskIdIn, activityInstanceIdIn, tenantIdIn, withoutTenantId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Variable Instance Count Queries for the number of historic variable instances that fulfill the given parameters. Takes the same parameters as the [Get Variable Instances](https://docs.camunda.org/manual/7.16/reference/rest/history/variable-instance/get-variable-instance-query/) method.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variableName">Filter by variable name. (optional)</param>
        /// <param name="variableNameLike">Restrict to variables with a name like the parameter. (optional)</param>
        /// <param name="variableValue">Filter by variable value. Is treated as a &#x60;String&#x60; object on server side. (optional)</param>
        /// <param name="variableNamesIgnoreCase">Match the variable name provided in &#x60;variableName&#x60; and &#x60;variableNameLike&#x60; case- insensitively. If set to &#x60;true&#x60; **variableName** and **variablename** are treated as equal. (optional)</param>
        /// <param name="variableValuesIgnoreCase">Match the variable value provided in &#x60;variableValue&#x60; case-insensitively. If set to &#x60;true&#x60; **variableValue** and **variablevalue** are treated as equal. (optional)</param>
        /// <param name="variableTypeIn">Only include historic variable instances which belong to one of the passed and comma- separated variable types. A list of all supported variable types can be found [here](https://docs.camunda.org/manual/7.16/user-guide/process-engine/variables/#supported-variable-values). **Note:** All non-primitive variables are associated with the type &#39;serializable&#39;. (optional)</param>
        /// <param name="includeDeleted">Include variables that has already been deleted during the execution. (optional)</param>
        /// <param name="processInstanceId">Filter by the process instance the variable belongs to. (optional)</param>
        /// <param name="processInstanceIdIn">Only include historic variable instances which belong to one of the passed and comma-separated process instance ids. (optional)</param>
        /// <param name="processDefinitionId">Filter by the process definition the variable belongs to. (optional)</param>
        /// <param name="processDefinitionKey">Filter by a key of the process definition the variable belongs to. (optional)</param>
        /// <param name="executionIdIn">Only include historic variable instances which belong to one of the passed and and comma-separated execution ids. (optional)</param>
        /// <param name="caseInstanceId">Filter by the case instance the variable belongs to. (optional)</param>
        /// <param name="caseExecutionIdIn">Only include historic variable instances which belong to one of the passed and and comma-separated case execution ids. (optional)</param>
        /// <param name="caseActivityIdIn">Only include historic variable instances which belong to one of the passed and and comma-separated case activity ids. (optional)</param>
        /// <param name="taskIdIn">Only include historic variable instances which belong to one of the passed and and comma-separated task ids. (optional)</param>
        /// <param name="activityInstanceIdIn">Only include historic variable instances which belong to one of the passed and and comma-separated activity instance ids. (optional)</param>
        /// <param name="tenantIdIn">Only include historic variable instances which belong to one of the passed and comma- separated tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include historic variable instances that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <returns>ApiResponse of CountResultDto</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<CountResultDto> GetHistoricVariableInstancesCountWithHttpInfo(string variableName = default(string), string variableNameLike = default(string), Object variableValue = default(Object), bool? variableNamesIgnoreCase = default(bool?), bool? variableValuesIgnoreCase = default(bool?), string variableTypeIn = default(string), bool? includeDeleted = default(bool?), string processInstanceId = default(string), string processInstanceIdIn = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string executionIdIn = default(string), string caseInstanceId = default(string), string caseExecutionIdIn = default(string), string caseActivityIdIn = default(string), string taskIdIn = default(string), string activityInstanceIdIn = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?))
        {
            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (variableName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "variableName", variableName));
            }
            if (variableNameLike != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "variableNameLike", variableNameLike));
            }
            if (variableValue != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "variableValue", variableValue));
            }
            if (variableNamesIgnoreCase != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "variableNamesIgnoreCase", variableNamesIgnoreCase));
            }
            if (variableValuesIgnoreCase != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "variableValuesIgnoreCase", variableValuesIgnoreCase));
            }
            if (variableTypeIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "variableTypeIn", variableTypeIn));
            }
            if (includeDeleted != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "includeDeleted", includeDeleted));
            }
            if (processInstanceId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processInstanceId", processInstanceId));
            }
            if (processInstanceIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processInstanceIdIn", processInstanceIdIn));
            }
            if (processDefinitionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processDefinitionId", processDefinitionId));
            }
            if (processDefinitionKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processDefinitionKey", processDefinitionKey));
            }
            if (executionIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "executionIdIn", executionIdIn));
            }
            if (caseInstanceId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "caseInstanceId", caseInstanceId));
            }
            if (caseExecutionIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "caseExecutionIdIn", caseExecutionIdIn));
            }
            if (caseActivityIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "caseActivityIdIn", caseActivityIdIn));
            }
            if (taskIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "taskIdIn", taskIdIn));
            }
            if (activityInstanceIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "activityInstanceIdIn", activityInstanceIdIn));
            }
            if (tenantIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "tenantIdIn", tenantIdIn));
            }
            if (withoutTenantId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "withoutTenantId", withoutTenantId));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<CountResultDto>("/history/variable-instance/count", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetHistoricVariableInstancesCount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Variable Instance Count Queries for the number of historic variable instances that fulfill the given parameters. Takes the same parameters as the [Get Variable Instances](https://docs.camunda.org/manual/7.16/reference/rest/history/variable-instance/get-variable-instance-query/) method.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variableName">Filter by variable name. (optional)</param>
        /// <param name="variableNameLike">Restrict to variables with a name like the parameter. (optional)</param>
        /// <param name="variableValue">Filter by variable value. Is treated as a &#x60;String&#x60; object on server side. (optional)</param>
        /// <param name="variableNamesIgnoreCase">Match the variable name provided in &#x60;variableName&#x60; and &#x60;variableNameLike&#x60; case- insensitively. If set to &#x60;true&#x60; **variableName** and **variablename** are treated as equal. (optional)</param>
        /// <param name="variableValuesIgnoreCase">Match the variable value provided in &#x60;variableValue&#x60; case-insensitively. If set to &#x60;true&#x60; **variableValue** and **variablevalue** are treated as equal. (optional)</param>
        /// <param name="variableTypeIn">Only include historic variable instances which belong to one of the passed and comma- separated variable types. A list of all supported variable types can be found [here](https://docs.camunda.org/manual/7.16/user-guide/process-engine/variables/#supported-variable-values). **Note:** All non-primitive variables are associated with the type &#39;serializable&#39;. (optional)</param>
        /// <param name="includeDeleted">Include variables that has already been deleted during the execution. (optional)</param>
        /// <param name="processInstanceId">Filter by the process instance the variable belongs to. (optional)</param>
        /// <param name="processInstanceIdIn">Only include historic variable instances which belong to one of the passed and comma-separated process instance ids. (optional)</param>
        /// <param name="processDefinitionId">Filter by the process definition the variable belongs to. (optional)</param>
        /// <param name="processDefinitionKey">Filter by a key of the process definition the variable belongs to. (optional)</param>
        /// <param name="executionIdIn">Only include historic variable instances which belong to one of the passed and and comma-separated execution ids. (optional)</param>
        /// <param name="caseInstanceId">Filter by the case instance the variable belongs to. (optional)</param>
        /// <param name="caseExecutionIdIn">Only include historic variable instances which belong to one of the passed and and comma-separated case execution ids. (optional)</param>
        /// <param name="caseActivityIdIn">Only include historic variable instances which belong to one of the passed and and comma-separated case activity ids. (optional)</param>
        /// <param name="taskIdIn">Only include historic variable instances which belong to one of the passed and and comma-separated task ids. (optional)</param>
        /// <param name="activityInstanceIdIn">Only include historic variable instances which belong to one of the passed and and comma-separated activity instance ids. (optional)</param>
        /// <param name="tenantIdIn">Only include historic variable instances which belong to one of the passed and comma- separated tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include historic variable instances that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CountResultDto</returns>
        public async System.Threading.Tasks.Task<CountResultDto> GetHistoricVariableInstancesCountAsync(string variableName = default(string), string variableNameLike = default(string), Object variableValue = default(Object), bool? variableNamesIgnoreCase = default(bool?), bool? variableValuesIgnoreCase = default(bool?), string variableTypeIn = default(string), bool? includeDeleted = default(bool?), string processInstanceId = default(string), string processInstanceIdIn = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string executionIdIn = default(string), string caseInstanceId = default(string), string caseExecutionIdIn = default(string), string caseActivityIdIn = default(string), string taskIdIn = default(string), string activityInstanceIdIn = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<CountResultDto> localVarResponse = await GetHistoricVariableInstancesCountWithHttpInfoAsync(variableName, variableNameLike, variableValue, variableNamesIgnoreCase, variableValuesIgnoreCase, variableTypeIn, includeDeleted, processInstanceId, processInstanceIdIn, processDefinitionId, processDefinitionKey, executionIdIn, caseInstanceId, caseExecutionIdIn, caseActivityIdIn, taskIdIn, activityInstanceIdIn, tenantIdIn, withoutTenantId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Variable Instance Count Queries for the number of historic variable instances that fulfill the given parameters. Takes the same parameters as the [Get Variable Instances](https://docs.camunda.org/manual/7.16/reference/rest/history/variable-instance/get-variable-instance-query/) method.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variableName">Filter by variable name. (optional)</param>
        /// <param name="variableNameLike">Restrict to variables with a name like the parameter. (optional)</param>
        /// <param name="variableValue">Filter by variable value. Is treated as a &#x60;String&#x60; object on server side. (optional)</param>
        /// <param name="variableNamesIgnoreCase">Match the variable name provided in &#x60;variableName&#x60; and &#x60;variableNameLike&#x60; case- insensitively. If set to &#x60;true&#x60; **variableName** and **variablename** are treated as equal. (optional)</param>
        /// <param name="variableValuesIgnoreCase">Match the variable value provided in &#x60;variableValue&#x60; case-insensitively. If set to &#x60;true&#x60; **variableValue** and **variablevalue** are treated as equal. (optional)</param>
        /// <param name="variableTypeIn">Only include historic variable instances which belong to one of the passed and comma- separated variable types. A list of all supported variable types can be found [here](https://docs.camunda.org/manual/7.16/user-guide/process-engine/variables/#supported-variable-values). **Note:** All non-primitive variables are associated with the type &#39;serializable&#39;. (optional)</param>
        /// <param name="includeDeleted">Include variables that has already been deleted during the execution. (optional)</param>
        /// <param name="processInstanceId">Filter by the process instance the variable belongs to. (optional)</param>
        /// <param name="processInstanceIdIn">Only include historic variable instances which belong to one of the passed and comma-separated process instance ids. (optional)</param>
        /// <param name="processDefinitionId">Filter by the process definition the variable belongs to. (optional)</param>
        /// <param name="processDefinitionKey">Filter by a key of the process definition the variable belongs to. (optional)</param>
        /// <param name="executionIdIn">Only include historic variable instances which belong to one of the passed and and comma-separated execution ids. (optional)</param>
        /// <param name="caseInstanceId">Filter by the case instance the variable belongs to. (optional)</param>
        /// <param name="caseExecutionIdIn">Only include historic variable instances which belong to one of the passed and and comma-separated case execution ids. (optional)</param>
        /// <param name="caseActivityIdIn">Only include historic variable instances which belong to one of the passed and and comma-separated case activity ids. (optional)</param>
        /// <param name="taskIdIn">Only include historic variable instances which belong to one of the passed and and comma-separated task ids. (optional)</param>
        /// <param name="activityInstanceIdIn">Only include historic variable instances which belong to one of the passed and and comma-separated activity instance ids. (optional)</param>
        /// <param name="tenantIdIn">Only include historic variable instances which belong to one of the passed and comma- separated tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include historic variable instances that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CountResultDto)</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<CountResultDto>> GetHistoricVariableInstancesCountWithHttpInfoAsync(string variableName = default(string), string variableNameLike = default(string), Object variableValue = default(Object), bool? variableNamesIgnoreCase = default(bool?), bool? variableValuesIgnoreCase = default(bool?), string variableTypeIn = default(string), bool? includeDeleted = default(bool?), string processInstanceId = default(string), string processInstanceIdIn = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string executionIdIn = default(string), string caseInstanceId = default(string), string caseExecutionIdIn = default(string), string caseActivityIdIn = default(string), string taskIdIn = default(string), string activityInstanceIdIn = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (variableName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "variableName", variableName));
            }
            if (variableNameLike != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "variableNameLike", variableNameLike));
            }
            if (variableValue != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "variableValue", variableValue));
            }
            if (variableNamesIgnoreCase != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "variableNamesIgnoreCase", variableNamesIgnoreCase));
            }
            if (variableValuesIgnoreCase != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "variableValuesIgnoreCase", variableValuesIgnoreCase));
            }
            if (variableTypeIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "variableTypeIn", variableTypeIn));
            }
            if (includeDeleted != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "includeDeleted", includeDeleted));
            }
            if (processInstanceId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processInstanceId", processInstanceId));
            }
            if (processInstanceIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processInstanceIdIn", processInstanceIdIn));
            }
            if (processDefinitionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processDefinitionId", processDefinitionId));
            }
            if (processDefinitionKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processDefinitionKey", processDefinitionKey));
            }
            if (executionIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "executionIdIn", executionIdIn));
            }
            if (caseInstanceId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "caseInstanceId", caseInstanceId));
            }
            if (caseExecutionIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "caseExecutionIdIn", caseExecutionIdIn));
            }
            if (caseActivityIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "caseActivityIdIn", caseActivityIdIn));
            }
            if (taskIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "taskIdIn", taskIdIn));
            }
            if (activityInstanceIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "activityInstanceIdIn", activityInstanceIdIn));
            }
            if (tenantIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "tenantIdIn", tenantIdIn));
            }
            if (withoutTenantId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "withoutTenantId", withoutTenantId));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<CountResultDto>("/history/variable-instance/count", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetHistoricVariableInstancesCount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Variable Instances (POST) Queries for historic variable instances that fulfill the given parameters. This method is slightly more powerful than the [Get Variable Instances](https://docs.camunda.org/manual/7.16/reference/rest/history/variable-instance/get-variable-instance-query/) method because it allows filtering by variable values of the different types &#x60;String&#x60;, &#x60;Number&#x60; or &#x60;Boolean&#x60;.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="deserializeValues">Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note:** While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine. (optional)</param>
        /// <param name="historicVariableInstanceQueryDto"> (optional)</param>
        /// <returns>List&lt;HistoricVariableInstanceDto&gt;</returns>
        public List<HistoricVariableInstanceDto> QueryHistoricVariableInstances(int? firstResult = default(int?), int? maxResults = default(int?), bool? deserializeValues = default(bool?), HistoricVariableInstanceQueryDto historicVariableInstanceQueryDto = default(HistoricVariableInstanceQueryDto))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<List<HistoricVariableInstanceDto>> localVarResponse = QueryHistoricVariableInstancesWithHttpInfo(firstResult, maxResults, deserializeValues, historicVariableInstanceQueryDto);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Variable Instances (POST) Queries for historic variable instances that fulfill the given parameters. This method is slightly more powerful than the [Get Variable Instances](https://docs.camunda.org/manual/7.16/reference/rest/history/variable-instance/get-variable-instance-query/) method because it allows filtering by variable values of the different types &#x60;String&#x60;, &#x60;Number&#x60; or &#x60;Boolean&#x60;.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="deserializeValues">Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note:** While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine. (optional)</param>
        /// <param name="historicVariableInstanceQueryDto"> (optional)</param>
        /// <returns>ApiResponse of List&lt;HistoricVariableInstanceDto&gt;</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<List<HistoricVariableInstanceDto>> QueryHistoricVariableInstancesWithHttpInfo(int? firstResult = default(int?), int? maxResults = default(int?), bool? deserializeValues = default(bool?), HistoricVariableInstanceQueryDto historicVariableInstanceQueryDto = default(HistoricVariableInstanceQueryDto))
        {
            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (firstResult != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "firstResult", firstResult));
            }
            if (maxResults != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "maxResults", maxResults));
            }
            if (deserializeValues != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "deserializeValues", deserializeValues));
            }
            localVarRequestOptions.Data = historicVariableInstanceQueryDto;


            // make the HTTP request
            var localVarResponse = this.Client.Post<List<HistoricVariableInstanceDto>>("/history/variable-instance", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QueryHistoricVariableInstances", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Variable Instances (POST) Queries for historic variable instances that fulfill the given parameters. This method is slightly more powerful than the [Get Variable Instances](https://docs.camunda.org/manual/7.16/reference/rest/history/variable-instance/get-variable-instance-query/) method because it allows filtering by variable values of the different types &#x60;String&#x60;, &#x60;Number&#x60; or &#x60;Boolean&#x60;.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="deserializeValues">Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note:** While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine. (optional)</param>
        /// <param name="historicVariableInstanceQueryDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;HistoricVariableInstanceDto&gt;</returns>
        public async System.Threading.Tasks.Task<List<HistoricVariableInstanceDto>> QueryHistoricVariableInstancesAsync(int? firstResult = default(int?), int? maxResults = default(int?), bool? deserializeValues = default(bool?), HistoricVariableInstanceQueryDto historicVariableInstanceQueryDto = default(HistoricVariableInstanceQueryDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<List<HistoricVariableInstanceDto>> localVarResponse = await QueryHistoricVariableInstancesWithHttpInfoAsync(firstResult, maxResults, deserializeValues, historicVariableInstanceQueryDto, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Variable Instances (POST) Queries for historic variable instances that fulfill the given parameters. This method is slightly more powerful than the [Get Variable Instances](https://docs.camunda.org/manual/7.16/reference/rest/history/variable-instance/get-variable-instance-query/) method because it allows filtering by variable values of the different types &#x60;String&#x60;, &#x60;Number&#x60; or &#x60;Boolean&#x60;.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="deserializeValues">Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note:** While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine. (optional)</param>
        /// <param name="historicVariableInstanceQueryDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;HistoricVariableInstanceDto&gt;)</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<List<HistoricVariableInstanceDto>>> QueryHistoricVariableInstancesWithHttpInfoAsync(int? firstResult = default(int?), int? maxResults = default(int?), bool? deserializeValues = default(bool?), HistoricVariableInstanceQueryDto historicVariableInstanceQueryDto = default(HistoricVariableInstanceQueryDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (firstResult != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "firstResult", firstResult));
            }
            if (maxResults != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "maxResults", maxResults));
            }
            if (deserializeValues != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "deserializeValues", deserializeValues));
            }
            localVarRequestOptions.Data = historicVariableInstanceQueryDto;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<List<HistoricVariableInstanceDto>>("/history/variable-instance", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QueryHistoricVariableInstances", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Variable Instance Count (POST) Queries for historic variable instances that fulfill the given parameters. This method takes the same message body as the [Get Variable Instances (POST)](https://docs.camunda.org/manual/7.16/reference/rest/history/variable-instance/post-variable-instance-query/) method and therefore it is more powerful regarding variable values than the [Get Variable Instance Count](https://docs.camunda.org/manual/7.16/reference/rest/history/variable-instance/get-variable-instance-query-count/) method.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="historicVariableInstanceQueryDto"> (optional)</param>
        /// <returns>CountResultDto</returns>
        public CountResultDto QueryHistoricVariableInstancesCount(HistoricVariableInstanceQueryDto historicVariableInstanceQueryDto = default(HistoricVariableInstanceQueryDto))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<CountResultDto> localVarResponse = QueryHistoricVariableInstancesCountWithHttpInfo(historicVariableInstanceQueryDto);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Variable Instance Count (POST) Queries for historic variable instances that fulfill the given parameters. This method takes the same message body as the [Get Variable Instances (POST)](https://docs.camunda.org/manual/7.16/reference/rest/history/variable-instance/post-variable-instance-query/) method and therefore it is more powerful regarding variable values than the [Get Variable Instance Count](https://docs.camunda.org/manual/7.16/reference/rest/history/variable-instance/get-variable-instance-query-count/) method.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="historicVariableInstanceQueryDto"> (optional)</param>
        /// <returns>ApiResponse of CountResultDto</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<CountResultDto> QueryHistoricVariableInstancesCountWithHttpInfo(HistoricVariableInstanceQueryDto historicVariableInstanceQueryDto = default(HistoricVariableInstanceQueryDto))
        {
            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = historicVariableInstanceQueryDto;


            // make the HTTP request
            var localVarResponse = this.Client.Post<CountResultDto>("/history/variable-instance/count", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QueryHistoricVariableInstancesCount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Variable Instance Count (POST) Queries for historic variable instances that fulfill the given parameters. This method takes the same message body as the [Get Variable Instances (POST)](https://docs.camunda.org/manual/7.16/reference/rest/history/variable-instance/post-variable-instance-query/) method and therefore it is more powerful regarding variable values than the [Get Variable Instance Count](https://docs.camunda.org/manual/7.16/reference/rest/history/variable-instance/get-variable-instance-query-count/) method.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="historicVariableInstanceQueryDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CountResultDto</returns>
        public async System.Threading.Tasks.Task<CountResultDto> QueryHistoricVariableInstancesCountAsync(HistoricVariableInstanceQueryDto historicVariableInstanceQueryDto = default(HistoricVariableInstanceQueryDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<CountResultDto> localVarResponse = await QueryHistoricVariableInstancesCountWithHttpInfoAsync(historicVariableInstanceQueryDto, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Variable Instance Count (POST) Queries for historic variable instances that fulfill the given parameters. This method takes the same message body as the [Get Variable Instances (POST)](https://docs.camunda.org/manual/7.16/reference/rest/history/variable-instance/post-variable-instance-query/) method and therefore it is more powerful regarding variable values than the [Get Variable Instance Count](https://docs.camunda.org/manual/7.16/reference/rest/history/variable-instance/get-variable-instance-query-count/) method.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="historicVariableInstanceQueryDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CountResultDto)</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<CountResultDto>> QueryHistoricVariableInstancesCountWithHttpInfoAsync(HistoricVariableInstanceQueryDto historicVariableInstanceQueryDto = default(HistoricVariableInstanceQueryDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = historicVariableInstanceQueryDto;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<CountResultDto>("/history/variable-instance/count", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QueryHistoricVariableInstancesCount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
