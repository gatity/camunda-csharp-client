/*
 * Camunda Platform REST API
 *
 * OpenApi Spec for Camunda Platform REST API.
 *
 * The version of the OpenAPI document: 7.16.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Camunda.OpenApi.Client.Client;
using Camunda.OpenApi.Client.Model;

namespace Camunda.OpenApi.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IHistoricExternalTaskLogApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get External Task Log Error Details
        /// </summary>
        /// <remarks>
        /// Retrieves the corresponding error details of the passed historic external task log by id.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the historic external task log to get the error details for.</param>
        /// <returns>Object</returns>
        Object GetErrorDetailsHistoricExternalTaskLog(string id);

        /// <summary>
        /// Get External Task Log Error Details
        /// </summary>
        /// <remarks>
        /// Retrieves the corresponding error details of the passed historic external task log by id.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the historic external task log to get the error details for.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GetErrorDetailsHistoricExternalTaskLogWithHttpInfo(string id);
        /// <summary>
        /// Get External Task Log
        /// </summary>
        /// <remarks>
        /// Retrieves a historic external task log by id.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the log entry.</param>
        /// <returns>HistoricExternalTaskLogDto</returns>
        HistoricExternalTaskLogDto GetHistoricExternalTaskLog(string id);

        /// <summary>
        /// Get External Task Log
        /// </summary>
        /// <remarks>
        /// Retrieves a historic external task log by id.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the log entry.</param>
        /// <returns>ApiResponse of HistoricExternalTaskLogDto</returns>
        ApiResponse<HistoricExternalTaskLogDto> GetHistoricExternalTaskLogWithHttpInfo(string id);
        /// <summary>
        /// Get External Task Logs
        /// </summary>
        /// <remarks>
        /// Queries for historic external task logs that fulfill the given parameters. The size of the result set can be retrieved by using the [Get External Task Log Count](https://docs.camunda.org/manual/7.16/reference/rest/history/external-task-log/get-external-task-log-query-count/) method.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logId">Filter by historic external task log id. (optional)</param>
        /// <param name="externalTaskId">Filter by external task id. (optional)</param>
        /// <param name="topicName">Filter by an external task topic. (optional)</param>
        /// <param name="workerId">Filter by the id of the worker that the task was most recently locked by. (optional)</param>
        /// <param name="errorMessage">Filter by external task exception message. (optional)</param>
        /// <param name="activityIdIn">Only include historic external task logs which belong to one of the passed activity ids. (optional)</param>
        /// <param name="activityInstanceIdIn">Only include historic external task logs which belong to one of the passed activity instance ids. (optional)</param>
        /// <param name="executionIdIn">Only include historic external task logs which belong to one of the passed execution ids. (optional)</param>
        /// <param name="processInstanceId">Filter by process instance id. (optional)</param>
        /// <param name="processDefinitionId">Filter by process definition id. (optional)</param>
        /// <param name="processDefinitionKey">Filter by process definition key. (optional)</param>
        /// <param name="tenantIdIn">Only include historic external task log entries which belong to one of the passed and comma-separated tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include historic external task log entries that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="priorityLowerThanOrEquals">Only include logs for which the associated external task had a priority lower than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)</param>
        /// <param name="priorityHigherThanOrEquals">Only include logs for which the associated external task had a priority higher than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)</param>
        /// <param name="creationLog">Only include creation logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="failureLog">Only include failure logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="successLog">Only include success logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="deletionLog">Only include deletion logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <returns>List&lt;HistoricExternalTaskLogDto&gt;</returns>
        List<HistoricExternalTaskLogDto> GetHistoricExternalTaskLogs(string logId = default(string), string externalTaskId = default(string), string topicName = default(string), string workerId = default(string), string errorMessage = default(string), string activityIdIn = default(string), string activityInstanceIdIn = default(string), string executionIdIn = default(string), string processInstanceId = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), long? priorityLowerThanOrEquals = default(long?), long? priorityHigherThanOrEquals = default(long?), bool? creationLog = default(bool?), bool? failureLog = default(bool?), bool? successLog = default(bool?), bool? deletionLog = default(bool?), string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?));

        /// <summary>
        /// Get External Task Logs
        /// </summary>
        /// <remarks>
        /// Queries for historic external task logs that fulfill the given parameters. The size of the result set can be retrieved by using the [Get External Task Log Count](https://docs.camunda.org/manual/7.16/reference/rest/history/external-task-log/get-external-task-log-query-count/) method.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logId">Filter by historic external task log id. (optional)</param>
        /// <param name="externalTaskId">Filter by external task id. (optional)</param>
        /// <param name="topicName">Filter by an external task topic. (optional)</param>
        /// <param name="workerId">Filter by the id of the worker that the task was most recently locked by. (optional)</param>
        /// <param name="errorMessage">Filter by external task exception message. (optional)</param>
        /// <param name="activityIdIn">Only include historic external task logs which belong to one of the passed activity ids. (optional)</param>
        /// <param name="activityInstanceIdIn">Only include historic external task logs which belong to one of the passed activity instance ids. (optional)</param>
        /// <param name="executionIdIn">Only include historic external task logs which belong to one of the passed execution ids. (optional)</param>
        /// <param name="processInstanceId">Filter by process instance id. (optional)</param>
        /// <param name="processDefinitionId">Filter by process definition id. (optional)</param>
        /// <param name="processDefinitionKey">Filter by process definition key. (optional)</param>
        /// <param name="tenantIdIn">Only include historic external task log entries which belong to one of the passed and comma-separated tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include historic external task log entries that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="priorityLowerThanOrEquals">Only include logs for which the associated external task had a priority lower than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)</param>
        /// <param name="priorityHigherThanOrEquals">Only include logs for which the associated external task had a priority higher than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)</param>
        /// <param name="creationLog">Only include creation logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="failureLog">Only include failure logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="successLog">Only include success logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="deletionLog">Only include deletion logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <returns>ApiResponse of List&lt;HistoricExternalTaskLogDto&gt;</returns>
        ApiResponse<List<HistoricExternalTaskLogDto>> GetHistoricExternalTaskLogsWithHttpInfo(string logId = default(string), string externalTaskId = default(string), string topicName = default(string), string workerId = default(string), string errorMessage = default(string), string activityIdIn = default(string), string activityInstanceIdIn = default(string), string executionIdIn = default(string), string processInstanceId = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), long? priorityLowerThanOrEquals = default(long?), long? priorityHigherThanOrEquals = default(long?), bool? creationLog = default(bool?), bool? failureLog = default(bool?), bool? successLog = default(bool?), bool? deletionLog = default(bool?), string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?));
        /// <summary>
        /// Get External Task Log Count
        /// </summary>
        /// <remarks>
        /// Queries for the number of historic external task logs that fulfill the given parameters. Takes the same parameters as the [Get External Task Logs](https://docs.camunda.org/manual/7.16/reference/rest/history/external-task-log/get-external-task-log-query/) method.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logId">Filter by historic external task log id. (optional)</param>
        /// <param name="externalTaskId">Filter by external task id. (optional)</param>
        /// <param name="topicName">Filter by an external task topic. (optional)</param>
        /// <param name="workerId">Filter by the id of the worker that the task was most recently locked by. (optional)</param>
        /// <param name="errorMessage">Filter by external task exception message. (optional)</param>
        /// <param name="activityIdIn">Only include historic external task logs which belong to one of the passed activity ids. (optional)</param>
        /// <param name="activityInstanceIdIn">Only include historic external task logs which belong to one of the passed activity instance ids. (optional)</param>
        /// <param name="executionIdIn">Only include historic external task logs which belong to one of the passed execution ids. (optional)</param>
        /// <param name="processInstanceId">Filter by process instance id. (optional)</param>
        /// <param name="processDefinitionId">Filter by process definition id. (optional)</param>
        /// <param name="processDefinitionKey">Filter by process definition key. (optional)</param>
        /// <param name="tenantIdIn">Only include historic external task log entries which belong to one of the passed and comma-separated tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include historic external task log entries that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="priorityLowerThanOrEquals">Only include logs for which the associated external task had a priority lower than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)</param>
        /// <param name="priorityHigherThanOrEquals">Only include logs for which the associated external task had a priority higher than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)</param>
        /// <param name="creationLog">Only include creation logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="failureLog">Only include failure logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="successLog">Only include success logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="deletionLog">Only include deletion logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <returns>CountResultDto</returns>
        CountResultDto GetHistoricExternalTaskLogsCount(string logId = default(string), string externalTaskId = default(string), string topicName = default(string), string workerId = default(string), string errorMessage = default(string), string activityIdIn = default(string), string activityInstanceIdIn = default(string), string executionIdIn = default(string), string processInstanceId = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), long? priorityLowerThanOrEquals = default(long?), long? priorityHigherThanOrEquals = default(long?), bool? creationLog = default(bool?), bool? failureLog = default(bool?), bool? successLog = default(bool?), bool? deletionLog = default(bool?));

        /// <summary>
        /// Get External Task Log Count
        /// </summary>
        /// <remarks>
        /// Queries for the number of historic external task logs that fulfill the given parameters. Takes the same parameters as the [Get External Task Logs](https://docs.camunda.org/manual/7.16/reference/rest/history/external-task-log/get-external-task-log-query/) method.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logId">Filter by historic external task log id. (optional)</param>
        /// <param name="externalTaskId">Filter by external task id. (optional)</param>
        /// <param name="topicName">Filter by an external task topic. (optional)</param>
        /// <param name="workerId">Filter by the id of the worker that the task was most recently locked by. (optional)</param>
        /// <param name="errorMessage">Filter by external task exception message. (optional)</param>
        /// <param name="activityIdIn">Only include historic external task logs which belong to one of the passed activity ids. (optional)</param>
        /// <param name="activityInstanceIdIn">Only include historic external task logs which belong to one of the passed activity instance ids. (optional)</param>
        /// <param name="executionIdIn">Only include historic external task logs which belong to one of the passed execution ids. (optional)</param>
        /// <param name="processInstanceId">Filter by process instance id. (optional)</param>
        /// <param name="processDefinitionId">Filter by process definition id. (optional)</param>
        /// <param name="processDefinitionKey">Filter by process definition key. (optional)</param>
        /// <param name="tenantIdIn">Only include historic external task log entries which belong to one of the passed and comma-separated tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include historic external task log entries that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="priorityLowerThanOrEquals">Only include logs for which the associated external task had a priority lower than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)</param>
        /// <param name="priorityHigherThanOrEquals">Only include logs for which the associated external task had a priority higher than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)</param>
        /// <param name="creationLog">Only include creation logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="failureLog">Only include failure logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="successLog">Only include success logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="deletionLog">Only include deletion logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <returns>ApiResponse of CountResultDto</returns>
        ApiResponse<CountResultDto> GetHistoricExternalTaskLogsCountWithHttpInfo(string logId = default(string), string externalTaskId = default(string), string topicName = default(string), string workerId = default(string), string errorMessage = default(string), string activityIdIn = default(string), string activityInstanceIdIn = default(string), string executionIdIn = default(string), string processInstanceId = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), long? priorityLowerThanOrEquals = default(long?), long? priorityHigherThanOrEquals = default(long?), bool? creationLog = default(bool?), bool? failureLog = default(bool?), bool? successLog = default(bool?), bool? deletionLog = default(bool?));
        /// <summary>
        /// Get External Task Logs (POST)
        /// </summary>
        /// <remarks>
        /// Queries for historic external task logs that fulfill the given parameters. This method is slightly more powerful than the [Get External Task Logs](https://docs.camunda.org/manual/7.16/reference/rest/history/external-task-log/get-external-task-log-query/) method because it allows filtering by historic external task logs values of the different types &#x60;String&#x60;, &#x60;Number&#x60; or &#x60;Boolean&#x60;.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="historicExternalTaskLogQueryDto"> (optional)</param>
        /// <returns>List&lt;HistoricExternalTaskLogDto&gt;</returns>
        List<HistoricExternalTaskLogDto> QueryHistoricExternalTaskLogs(HistoricExternalTaskLogQueryDto historicExternalTaskLogQueryDto = default(HistoricExternalTaskLogQueryDto));

        /// <summary>
        /// Get External Task Logs (POST)
        /// </summary>
        /// <remarks>
        /// Queries for historic external task logs that fulfill the given parameters. This method is slightly more powerful than the [Get External Task Logs](https://docs.camunda.org/manual/7.16/reference/rest/history/external-task-log/get-external-task-log-query/) method because it allows filtering by historic external task logs values of the different types &#x60;String&#x60;, &#x60;Number&#x60; or &#x60;Boolean&#x60;.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="historicExternalTaskLogQueryDto"> (optional)</param>
        /// <returns>ApiResponse of List&lt;HistoricExternalTaskLogDto&gt;</returns>
        ApiResponse<List<HistoricExternalTaskLogDto>> QueryHistoricExternalTaskLogsWithHttpInfo(HistoricExternalTaskLogQueryDto historicExternalTaskLogQueryDto = default(HistoricExternalTaskLogQueryDto));
        /// <summary>
        /// Get External Task Log Count (POST)
        /// </summary>
        /// <remarks>
        /// Queries for the number of historic external task logs that fulfill the given parameters. This method takes the same message body as the [Get External Task Logs (POST)](https://docs.camunda.org/manual/7.16/reference/rest/history/external-task-log/post-external-task-log-query/) method and therefore it is slightly more powerful than the [Get External Task Log Count](https://docs.camunda.org/manual/7.16/reference/rest/history/external-task-log/get-external-task-log-query-count/) method.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="historicExternalTaskLogQueryDto"> (optional)</param>
        /// <returns>CountResultDto</returns>
        CountResultDto QueryHistoricExternalTaskLogsCount(HistoricExternalTaskLogQueryDto historicExternalTaskLogQueryDto = default(HistoricExternalTaskLogQueryDto));

        /// <summary>
        /// Get External Task Log Count (POST)
        /// </summary>
        /// <remarks>
        /// Queries for the number of historic external task logs that fulfill the given parameters. This method takes the same message body as the [Get External Task Logs (POST)](https://docs.camunda.org/manual/7.16/reference/rest/history/external-task-log/post-external-task-log-query/) method and therefore it is slightly more powerful than the [Get External Task Log Count](https://docs.camunda.org/manual/7.16/reference/rest/history/external-task-log/get-external-task-log-query-count/) method.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="historicExternalTaskLogQueryDto"> (optional)</param>
        /// <returns>ApiResponse of CountResultDto</returns>
        ApiResponse<CountResultDto> QueryHistoricExternalTaskLogsCountWithHttpInfo(HistoricExternalTaskLogQueryDto historicExternalTaskLogQueryDto = default(HistoricExternalTaskLogQueryDto));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IHistoricExternalTaskLogApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get External Task Log Error Details
        /// </summary>
        /// <remarks>
        /// Retrieves the corresponding error details of the passed historic external task log by id.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the historic external task log to get the error details for.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GetErrorDetailsHistoricExternalTaskLogAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get External Task Log Error Details
        /// </summary>
        /// <remarks>
        /// Retrieves the corresponding error details of the passed historic external task log by id.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the historic external task log to get the error details for.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetErrorDetailsHistoricExternalTaskLogWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get External Task Log
        /// </summary>
        /// <remarks>
        /// Retrieves a historic external task log by id.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the log entry.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HistoricExternalTaskLogDto</returns>
        System.Threading.Tasks.Task<HistoricExternalTaskLogDto> GetHistoricExternalTaskLogAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get External Task Log
        /// </summary>
        /// <remarks>
        /// Retrieves a historic external task log by id.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the log entry.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HistoricExternalTaskLogDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<HistoricExternalTaskLogDto>> GetHistoricExternalTaskLogWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get External Task Logs
        /// </summary>
        /// <remarks>
        /// Queries for historic external task logs that fulfill the given parameters. The size of the result set can be retrieved by using the [Get External Task Log Count](https://docs.camunda.org/manual/7.16/reference/rest/history/external-task-log/get-external-task-log-query-count/) method.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logId">Filter by historic external task log id. (optional)</param>
        /// <param name="externalTaskId">Filter by external task id. (optional)</param>
        /// <param name="topicName">Filter by an external task topic. (optional)</param>
        /// <param name="workerId">Filter by the id of the worker that the task was most recently locked by. (optional)</param>
        /// <param name="errorMessage">Filter by external task exception message. (optional)</param>
        /// <param name="activityIdIn">Only include historic external task logs which belong to one of the passed activity ids. (optional)</param>
        /// <param name="activityInstanceIdIn">Only include historic external task logs which belong to one of the passed activity instance ids. (optional)</param>
        /// <param name="executionIdIn">Only include historic external task logs which belong to one of the passed execution ids. (optional)</param>
        /// <param name="processInstanceId">Filter by process instance id. (optional)</param>
        /// <param name="processDefinitionId">Filter by process definition id. (optional)</param>
        /// <param name="processDefinitionKey">Filter by process definition key. (optional)</param>
        /// <param name="tenantIdIn">Only include historic external task log entries which belong to one of the passed and comma-separated tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include historic external task log entries that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="priorityLowerThanOrEquals">Only include logs for which the associated external task had a priority lower than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)</param>
        /// <param name="priorityHigherThanOrEquals">Only include logs for which the associated external task had a priority higher than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)</param>
        /// <param name="creationLog">Only include creation logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="failureLog">Only include failure logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="successLog">Only include success logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="deletionLog">Only include deletion logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;HistoricExternalTaskLogDto&gt;</returns>
        System.Threading.Tasks.Task<List<HistoricExternalTaskLogDto>> GetHistoricExternalTaskLogsAsync(string logId = default(string), string externalTaskId = default(string), string topicName = default(string), string workerId = default(string), string errorMessage = default(string), string activityIdIn = default(string), string activityInstanceIdIn = default(string), string executionIdIn = default(string), string processInstanceId = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), long? priorityLowerThanOrEquals = default(long?), long? priorityHigherThanOrEquals = default(long?), bool? creationLog = default(bool?), bool? failureLog = default(bool?), bool? successLog = default(bool?), bool? deletionLog = default(bool?), string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get External Task Logs
        /// </summary>
        /// <remarks>
        /// Queries for historic external task logs that fulfill the given parameters. The size of the result set can be retrieved by using the [Get External Task Log Count](https://docs.camunda.org/manual/7.16/reference/rest/history/external-task-log/get-external-task-log-query-count/) method.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logId">Filter by historic external task log id. (optional)</param>
        /// <param name="externalTaskId">Filter by external task id. (optional)</param>
        /// <param name="topicName">Filter by an external task topic. (optional)</param>
        /// <param name="workerId">Filter by the id of the worker that the task was most recently locked by. (optional)</param>
        /// <param name="errorMessage">Filter by external task exception message. (optional)</param>
        /// <param name="activityIdIn">Only include historic external task logs which belong to one of the passed activity ids. (optional)</param>
        /// <param name="activityInstanceIdIn">Only include historic external task logs which belong to one of the passed activity instance ids. (optional)</param>
        /// <param name="executionIdIn">Only include historic external task logs which belong to one of the passed execution ids. (optional)</param>
        /// <param name="processInstanceId">Filter by process instance id. (optional)</param>
        /// <param name="processDefinitionId">Filter by process definition id. (optional)</param>
        /// <param name="processDefinitionKey">Filter by process definition key. (optional)</param>
        /// <param name="tenantIdIn">Only include historic external task log entries which belong to one of the passed and comma-separated tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include historic external task log entries that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="priorityLowerThanOrEquals">Only include logs for which the associated external task had a priority lower than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)</param>
        /// <param name="priorityHigherThanOrEquals">Only include logs for which the associated external task had a priority higher than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)</param>
        /// <param name="creationLog">Only include creation logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="failureLog">Only include failure logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="successLog">Only include success logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="deletionLog">Only include deletion logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;HistoricExternalTaskLogDto&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<HistoricExternalTaskLogDto>>> GetHistoricExternalTaskLogsWithHttpInfoAsync(string logId = default(string), string externalTaskId = default(string), string topicName = default(string), string workerId = default(string), string errorMessage = default(string), string activityIdIn = default(string), string activityInstanceIdIn = default(string), string executionIdIn = default(string), string processInstanceId = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), long? priorityLowerThanOrEquals = default(long?), long? priorityHigherThanOrEquals = default(long?), bool? creationLog = default(bool?), bool? failureLog = default(bool?), bool? successLog = default(bool?), bool? deletionLog = default(bool?), string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get External Task Log Count
        /// </summary>
        /// <remarks>
        /// Queries for the number of historic external task logs that fulfill the given parameters. Takes the same parameters as the [Get External Task Logs](https://docs.camunda.org/manual/7.16/reference/rest/history/external-task-log/get-external-task-log-query/) method.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logId">Filter by historic external task log id. (optional)</param>
        /// <param name="externalTaskId">Filter by external task id. (optional)</param>
        /// <param name="topicName">Filter by an external task topic. (optional)</param>
        /// <param name="workerId">Filter by the id of the worker that the task was most recently locked by. (optional)</param>
        /// <param name="errorMessage">Filter by external task exception message. (optional)</param>
        /// <param name="activityIdIn">Only include historic external task logs which belong to one of the passed activity ids. (optional)</param>
        /// <param name="activityInstanceIdIn">Only include historic external task logs which belong to one of the passed activity instance ids. (optional)</param>
        /// <param name="executionIdIn">Only include historic external task logs which belong to one of the passed execution ids. (optional)</param>
        /// <param name="processInstanceId">Filter by process instance id. (optional)</param>
        /// <param name="processDefinitionId">Filter by process definition id. (optional)</param>
        /// <param name="processDefinitionKey">Filter by process definition key. (optional)</param>
        /// <param name="tenantIdIn">Only include historic external task log entries which belong to one of the passed and comma-separated tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include historic external task log entries that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="priorityLowerThanOrEquals">Only include logs for which the associated external task had a priority lower than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)</param>
        /// <param name="priorityHigherThanOrEquals">Only include logs for which the associated external task had a priority higher than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)</param>
        /// <param name="creationLog">Only include creation logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="failureLog">Only include failure logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="successLog">Only include success logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="deletionLog">Only include deletion logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CountResultDto</returns>
        System.Threading.Tasks.Task<CountResultDto> GetHistoricExternalTaskLogsCountAsync(string logId = default(string), string externalTaskId = default(string), string topicName = default(string), string workerId = default(string), string errorMessage = default(string), string activityIdIn = default(string), string activityInstanceIdIn = default(string), string executionIdIn = default(string), string processInstanceId = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), long? priorityLowerThanOrEquals = default(long?), long? priorityHigherThanOrEquals = default(long?), bool? creationLog = default(bool?), bool? failureLog = default(bool?), bool? successLog = default(bool?), bool? deletionLog = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get External Task Log Count
        /// </summary>
        /// <remarks>
        /// Queries for the number of historic external task logs that fulfill the given parameters. Takes the same parameters as the [Get External Task Logs](https://docs.camunda.org/manual/7.16/reference/rest/history/external-task-log/get-external-task-log-query/) method.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logId">Filter by historic external task log id. (optional)</param>
        /// <param name="externalTaskId">Filter by external task id. (optional)</param>
        /// <param name="topicName">Filter by an external task topic. (optional)</param>
        /// <param name="workerId">Filter by the id of the worker that the task was most recently locked by. (optional)</param>
        /// <param name="errorMessage">Filter by external task exception message. (optional)</param>
        /// <param name="activityIdIn">Only include historic external task logs which belong to one of the passed activity ids. (optional)</param>
        /// <param name="activityInstanceIdIn">Only include historic external task logs which belong to one of the passed activity instance ids. (optional)</param>
        /// <param name="executionIdIn">Only include historic external task logs which belong to one of the passed execution ids. (optional)</param>
        /// <param name="processInstanceId">Filter by process instance id. (optional)</param>
        /// <param name="processDefinitionId">Filter by process definition id. (optional)</param>
        /// <param name="processDefinitionKey">Filter by process definition key. (optional)</param>
        /// <param name="tenantIdIn">Only include historic external task log entries which belong to one of the passed and comma-separated tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include historic external task log entries that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="priorityLowerThanOrEquals">Only include logs for which the associated external task had a priority lower than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)</param>
        /// <param name="priorityHigherThanOrEquals">Only include logs for which the associated external task had a priority higher than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)</param>
        /// <param name="creationLog">Only include creation logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="failureLog">Only include failure logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="successLog">Only include success logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="deletionLog">Only include deletion logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CountResultDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<CountResultDto>> GetHistoricExternalTaskLogsCountWithHttpInfoAsync(string logId = default(string), string externalTaskId = default(string), string topicName = default(string), string workerId = default(string), string errorMessage = default(string), string activityIdIn = default(string), string activityInstanceIdIn = default(string), string executionIdIn = default(string), string processInstanceId = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), long? priorityLowerThanOrEquals = default(long?), long? priorityHigherThanOrEquals = default(long?), bool? creationLog = default(bool?), bool? failureLog = default(bool?), bool? successLog = default(bool?), bool? deletionLog = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get External Task Logs (POST)
        /// </summary>
        /// <remarks>
        /// Queries for historic external task logs that fulfill the given parameters. This method is slightly more powerful than the [Get External Task Logs](https://docs.camunda.org/manual/7.16/reference/rest/history/external-task-log/get-external-task-log-query/) method because it allows filtering by historic external task logs values of the different types &#x60;String&#x60;, &#x60;Number&#x60; or &#x60;Boolean&#x60;.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="historicExternalTaskLogQueryDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;HistoricExternalTaskLogDto&gt;</returns>
        System.Threading.Tasks.Task<List<HistoricExternalTaskLogDto>> QueryHistoricExternalTaskLogsAsync(HistoricExternalTaskLogQueryDto historicExternalTaskLogQueryDto = default(HistoricExternalTaskLogQueryDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get External Task Logs (POST)
        /// </summary>
        /// <remarks>
        /// Queries for historic external task logs that fulfill the given parameters. This method is slightly more powerful than the [Get External Task Logs](https://docs.camunda.org/manual/7.16/reference/rest/history/external-task-log/get-external-task-log-query/) method because it allows filtering by historic external task logs values of the different types &#x60;String&#x60;, &#x60;Number&#x60; or &#x60;Boolean&#x60;.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="historicExternalTaskLogQueryDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;HistoricExternalTaskLogDto&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<HistoricExternalTaskLogDto>>> QueryHistoricExternalTaskLogsWithHttpInfoAsync(HistoricExternalTaskLogQueryDto historicExternalTaskLogQueryDto = default(HistoricExternalTaskLogQueryDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get External Task Log Count (POST)
        /// </summary>
        /// <remarks>
        /// Queries for the number of historic external task logs that fulfill the given parameters. This method takes the same message body as the [Get External Task Logs (POST)](https://docs.camunda.org/manual/7.16/reference/rest/history/external-task-log/post-external-task-log-query/) method and therefore it is slightly more powerful than the [Get External Task Log Count](https://docs.camunda.org/manual/7.16/reference/rest/history/external-task-log/get-external-task-log-query-count/) method.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="historicExternalTaskLogQueryDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CountResultDto</returns>
        System.Threading.Tasks.Task<CountResultDto> QueryHistoricExternalTaskLogsCountAsync(HistoricExternalTaskLogQueryDto historicExternalTaskLogQueryDto = default(HistoricExternalTaskLogQueryDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get External Task Log Count (POST)
        /// </summary>
        /// <remarks>
        /// Queries for the number of historic external task logs that fulfill the given parameters. This method takes the same message body as the [Get External Task Logs (POST)](https://docs.camunda.org/manual/7.16/reference/rest/history/external-task-log/post-external-task-log-query/) method and therefore it is slightly more powerful than the [Get External Task Log Count](https://docs.camunda.org/manual/7.16/reference/rest/history/external-task-log/get-external-task-log-query-count/) method.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="historicExternalTaskLogQueryDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CountResultDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<CountResultDto>> QueryHistoricExternalTaskLogsCountWithHttpInfoAsync(HistoricExternalTaskLogQueryDto historicExternalTaskLogQueryDto = default(HistoricExternalTaskLogQueryDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IHistoricExternalTaskLogApi : IHistoricExternalTaskLogApiSync, IHistoricExternalTaskLogApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class HistoricExternalTaskLogApi : IHistoricExternalTaskLogApi
    {
        private Camunda.OpenApi.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="HistoricExternalTaskLogApi"/> class.
        /// </summary>
        /// <returns></returns>
        public HistoricExternalTaskLogApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="HistoricExternalTaskLogApi"/> class.
        /// </summary>
        /// <returns></returns>
        public HistoricExternalTaskLogApi(String basePath)
        {
            this.Configuration = Camunda.OpenApi.Client.Client.Configuration.MergeConfigurations(
                Camunda.OpenApi.Client.Client.GlobalConfiguration.Instance,
                new Camunda.OpenApi.Client.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Camunda.OpenApi.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Camunda.OpenApi.Client.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Camunda.OpenApi.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="HistoricExternalTaskLogApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public HistoricExternalTaskLogApi(Camunda.OpenApi.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Camunda.OpenApi.Client.Client.Configuration.MergeConfigurations(
                Camunda.OpenApi.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Camunda.OpenApi.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Camunda.OpenApi.Client.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Camunda.OpenApi.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="HistoricExternalTaskLogApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public HistoricExternalTaskLogApi(Camunda.OpenApi.Client.Client.ISynchronousClient client, Camunda.OpenApi.Client.Client.IAsynchronousClient asyncClient, Camunda.OpenApi.Client.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Camunda.OpenApi.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Camunda.OpenApi.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Camunda.OpenApi.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Camunda.OpenApi.Client.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Camunda.OpenApi.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get External Task Log Error Details Retrieves the corresponding error details of the passed historic external task log by id.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the historic external task log to get the error details for.</param>
        /// <returns>Object</returns>
        public Object GetErrorDetailsHistoricExternalTaskLog(string id)
        {
            Camunda.OpenApi.Client.Client.ApiResponse<Object> localVarResponse = GetErrorDetailsHistoricExternalTaskLogWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get External Task Log Error Details Retrieves the corresponding error details of the passed historic external task log by id.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the historic external task log to get the error details for.</param>
        /// <returns>ApiResponse of Object</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<Object> GetErrorDetailsHistoricExternalTaskLogWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling HistoricExternalTaskLogApi->GetErrorDetailsHistoricExternalTaskLog");

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/history/external-task-log/{id}/error-details", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetErrorDetailsHistoricExternalTaskLog", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get External Task Log Error Details Retrieves the corresponding error details of the passed historic external task log by id.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the historic external task log to get the error details for.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetErrorDetailsHistoricExternalTaskLogAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<Object> localVarResponse = await GetErrorDetailsHistoricExternalTaskLogWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get External Task Log Error Details Retrieves the corresponding error details of the passed historic external task log by id.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the historic external task log to get the error details for.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<Object>> GetErrorDetailsHistoricExternalTaskLogWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling HistoricExternalTaskLogApi->GetErrorDetailsHistoricExternalTaskLog");


            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/history/external-task-log/{id}/error-details", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetErrorDetailsHistoricExternalTaskLog", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get External Task Log Retrieves a historic external task log by id.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the log entry.</param>
        /// <returns>HistoricExternalTaskLogDto</returns>
        public HistoricExternalTaskLogDto GetHistoricExternalTaskLog(string id)
        {
            Camunda.OpenApi.Client.Client.ApiResponse<HistoricExternalTaskLogDto> localVarResponse = GetHistoricExternalTaskLogWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get External Task Log Retrieves a historic external task log by id.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the log entry.</param>
        /// <returns>ApiResponse of HistoricExternalTaskLogDto</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<HistoricExternalTaskLogDto> GetHistoricExternalTaskLogWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling HistoricExternalTaskLogApi->GetHistoricExternalTaskLog");

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<HistoricExternalTaskLogDto>("/history/external-task-log/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetHistoricExternalTaskLog", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get External Task Log Retrieves a historic external task log by id.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the log entry.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HistoricExternalTaskLogDto</returns>
        public async System.Threading.Tasks.Task<HistoricExternalTaskLogDto> GetHistoricExternalTaskLogAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<HistoricExternalTaskLogDto> localVarResponse = await GetHistoricExternalTaskLogWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get External Task Log Retrieves a historic external task log by id.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the log entry.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HistoricExternalTaskLogDto)</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<HistoricExternalTaskLogDto>> GetHistoricExternalTaskLogWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling HistoricExternalTaskLogApi->GetHistoricExternalTaskLog");


            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<HistoricExternalTaskLogDto>("/history/external-task-log/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetHistoricExternalTaskLog", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get External Task Logs Queries for historic external task logs that fulfill the given parameters. The size of the result set can be retrieved by using the [Get External Task Log Count](https://docs.camunda.org/manual/7.16/reference/rest/history/external-task-log/get-external-task-log-query-count/) method.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logId">Filter by historic external task log id. (optional)</param>
        /// <param name="externalTaskId">Filter by external task id. (optional)</param>
        /// <param name="topicName">Filter by an external task topic. (optional)</param>
        /// <param name="workerId">Filter by the id of the worker that the task was most recently locked by. (optional)</param>
        /// <param name="errorMessage">Filter by external task exception message. (optional)</param>
        /// <param name="activityIdIn">Only include historic external task logs which belong to one of the passed activity ids. (optional)</param>
        /// <param name="activityInstanceIdIn">Only include historic external task logs which belong to one of the passed activity instance ids. (optional)</param>
        /// <param name="executionIdIn">Only include historic external task logs which belong to one of the passed execution ids. (optional)</param>
        /// <param name="processInstanceId">Filter by process instance id. (optional)</param>
        /// <param name="processDefinitionId">Filter by process definition id. (optional)</param>
        /// <param name="processDefinitionKey">Filter by process definition key. (optional)</param>
        /// <param name="tenantIdIn">Only include historic external task log entries which belong to one of the passed and comma-separated tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include historic external task log entries that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="priorityLowerThanOrEquals">Only include logs for which the associated external task had a priority lower than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)</param>
        /// <param name="priorityHigherThanOrEquals">Only include logs for which the associated external task had a priority higher than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)</param>
        /// <param name="creationLog">Only include creation logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="failureLog">Only include failure logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="successLog">Only include success logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="deletionLog">Only include deletion logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <returns>List&lt;HistoricExternalTaskLogDto&gt;</returns>
        public List<HistoricExternalTaskLogDto> GetHistoricExternalTaskLogs(string logId = default(string), string externalTaskId = default(string), string topicName = default(string), string workerId = default(string), string errorMessage = default(string), string activityIdIn = default(string), string activityInstanceIdIn = default(string), string executionIdIn = default(string), string processInstanceId = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), long? priorityLowerThanOrEquals = default(long?), long? priorityHigherThanOrEquals = default(long?), bool? creationLog = default(bool?), bool? failureLog = default(bool?), bool? successLog = default(bool?), bool? deletionLog = default(bool?), string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<List<HistoricExternalTaskLogDto>> localVarResponse = GetHistoricExternalTaskLogsWithHttpInfo(logId, externalTaskId, topicName, workerId, errorMessage, activityIdIn, activityInstanceIdIn, executionIdIn, processInstanceId, processDefinitionId, processDefinitionKey, tenantIdIn, withoutTenantId, priorityLowerThanOrEquals, priorityHigherThanOrEquals, creationLog, failureLog, successLog, deletionLog, sortBy, sortOrder, firstResult, maxResults);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get External Task Logs Queries for historic external task logs that fulfill the given parameters. The size of the result set can be retrieved by using the [Get External Task Log Count](https://docs.camunda.org/manual/7.16/reference/rest/history/external-task-log/get-external-task-log-query-count/) method.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logId">Filter by historic external task log id. (optional)</param>
        /// <param name="externalTaskId">Filter by external task id. (optional)</param>
        /// <param name="topicName">Filter by an external task topic. (optional)</param>
        /// <param name="workerId">Filter by the id of the worker that the task was most recently locked by. (optional)</param>
        /// <param name="errorMessage">Filter by external task exception message. (optional)</param>
        /// <param name="activityIdIn">Only include historic external task logs which belong to one of the passed activity ids. (optional)</param>
        /// <param name="activityInstanceIdIn">Only include historic external task logs which belong to one of the passed activity instance ids. (optional)</param>
        /// <param name="executionIdIn">Only include historic external task logs which belong to one of the passed execution ids. (optional)</param>
        /// <param name="processInstanceId">Filter by process instance id. (optional)</param>
        /// <param name="processDefinitionId">Filter by process definition id. (optional)</param>
        /// <param name="processDefinitionKey">Filter by process definition key. (optional)</param>
        /// <param name="tenantIdIn">Only include historic external task log entries which belong to one of the passed and comma-separated tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include historic external task log entries that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="priorityLowerThanOrEquals">Only include logs for which the associated external task had a priority lower than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)</param>
        /// <param name="priorityHigherThanOrEquals">Only include logs for which the associated external task had a priority higher than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)</param>
        /// <param name="creationLog">Only include creation logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="failureLog">Only include failure logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="successLog">Only include success logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="deletionLog">Only include deletion logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <returns>ApiResponse of List&lt;HistoricExternalTaskLogDto&gt;</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<List<HistoricExternalTaskLogDto>> GetHistoricExternalTaskLogsWithHttpInfo(string logId = default(string), string externalTaskId = default(string), string topicName = default(string), string workerId = default(string), string errorMessage = default(string), string activityIdIn = default(string), string activityInstanceIdIn = default(string), string executionIdIn = default(string), string processInstanceId = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), long? priorityLowerThanOrEquals = default(long?), long? priorityHigherThanOrEquals = default(long?), bool? creationLog = default(bool?), bool? failureLog = default(bool?), bool? successLog = default(bool?), bool? deletionLog = default(bool?), string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?))
        {
            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (logId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "logId", logId));
            }
            if (externalTaskId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "externalTaskId", externalTaskId));
            }
            if (topicName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "topicName", topicName));
            }
            if (workerId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "workerId", workerId));
            }
            if (errorMessage != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "errorMessage", errorMessage));
            }
            if (activityIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "activityIdIn", activityIdIn));
            }
            if (activityInstanceIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "activityInstanceIdIn", activityInstanceIdIn));
            }
            if (executionIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "executionIdIn", executionIdIn));
            }
            if (processInstanceId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processInstanceId", processInstanceId));
            }
            if (processDefinitionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processDefinitionId", processDefinitionId));
            }
            if (processDefinitionKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processDefinitionKey", processDefinitionKey));
            }
            if (tenantIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "tenantIdIn", tenantIdIn));
            }
            if (withoutTenantId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "withoutTenantId", withoutTenantId));
            }
            if (priorityLowerThanOrEquals != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "priorityLowerThanOrEquals", priorityLowerThanOrEquals));
            }
            if (priorityHigherThanOrEquals != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "priorityHigherThanOrEquals", priorityHigherThanOrEquals));
            }
            if (creationLog != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "creationLog", creationLog));
            }
            if (failureLog != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "failureLog", failureLog));
            }
            if (successLog != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "successLog", successLog));
            }
            if (deletionLog != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "deletionLog", deletionLog));
            }
            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "sortBy", sortBy));
            }
            if (sortOrder != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "sortOrder", sortOrder));
            }
            if (firstResult != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "firstResult", firstResult));
            }
            if (maxResults != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "maxResults", maxResults));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<HistoricExternalTaskLogDto>>("/history/external-task-log", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetHistoricExternalTaskLogs", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get External Task Logs Queries for historic external task logs that fulfill the given parameters. The size of the result set can be retrieved by using the [Get External Task Log Count](https://docs.camunda.org/manual/7.16/reference/rest/history/external-task-log/get-external-task-log-query-count/) method.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logId">Filter by historic external task log id. (optional)</param>
        /// <param name="externalTaskId">Filter by external task id. (optional)</param>
        /// <param name="topicName">Filter by an external task topic. (optional)</param>
        /// <param name="workerId">Filter by the id of the worker that the task was most recently locked by. (optional)</param>
        /// <param name="errorMessage">Filter by external task exception message. (optional)</param>
        /// <param name="activityIdIn">Only include historic external task logs which belong to one of the passed activity ids. (optional)</param>
        /// <param name="activityInstanceIdIn">Only include historic external task logs which belong to one of the passed activity instance ids. (optional)</param>
        /// <param name="executionIdIn">Only include historic external task logs which belong to one of the passed execution ids. (optional)</param>
        /// <param name="processInstanceId">Filter by process instance id. (optional)</param>
        /// <param name="processDefinitionId">Filter by process definition id. (optional)</param>
        /// <param name="processDefinitionKey">Filter by process definition key. (optional)</param>
        /// <param name="tenantIdIn">Only include historic external task log entries which belong to one of the passed and comma-separated tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include historic external task log entries that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="priorityLowerThanOrEquals">Only include logs for which the associated external task had a priority lower than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)</param>
        /// <param name="priorityHigherThanOrEquals">Only include logs for which the associated external task had a priority higher than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)</param>
        /// <param name="creationLog">Only include creation logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="failureLog">Only include failure logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="successLog">Only include success logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="deletionLog">Only include deletion logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;HistoricExternalTaskLogDto&gt;</returns>
        public async System.Threading.Tasks.Task<List<HistoricExternalTaskLogDto>> GetHistoricExternalTaskLogsAsync(string logId = default(string), string externalTaskId = default(string), string topicName = default(string), string workerId = default(string), string errorMessage = default(string), string activityIdIn = default(string), string activityInstanceIdIn = default(string), string executionIdIn = default(string), string processInstanceId = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), long? priorityLowerThanOrEquals = default(long?), long? priorityHigherThanOrEquals = default(long?), bool? creationLog = default(bool?), bool? failureLog = default(bool?), bool? successLog = default(bool?), bool? deletionLog = default(bool?), string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<List<HistoricExternalTaskLogDto>> localVarResponse = await GetHistoricExternalTaskLogsWithHttpInfoAsync(logId, externalTaskId, topicName, workerId, errorMessage, activityIdIn, activityInstanceIdIn, executionIdIn, processInstanceId, processDefinitionId, processDefinitionKey, tenantIdIn, withoutTenantId, priorityLowerThanOrEquals, priorityHigherThanOrEquals, creationLog, failureLog, successLog, deletionLog, sortBy, sortOrder, firstResult, maxResults, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get External Task Logs Queries for historic external task logs that fulfill the given parameters. The size of the result set can be retrieved by using the [Get External Task Log Count](https://docs.camunda.org/manual/7.16/reference/rest/history/external-task-log/get-external-task-log-query-count/) method.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logId">Filter by historic external task log id. (optional)</param>
        /// <param name="externalTaskId">Filter by external task id. (optional)</param>
        /// <param name="topicName">Filter by an external task topic. (optional)</param>
        /// <param name="workerId">Filter by the id of the worker that the task was most recently locked by. (optional)</param>
        /// <param name="errorMessage">Filter by external task exception message. (optional)</param>
        /// <param name="activityIdIn">Only include historic external task logs which belong to one of the passed activity ids. (optional)</param>
        /// <param name="activityInstanceIdIn">Only include historic external task logs which belong to one of the passed activity instance ids. (optional)</param>
        /// <param name="executionIdIn">Only include historic external task logs which belong to one of the passed execution ids. (optional)</param>
        /// <param name="processInstanceId">Filter by process instance id. (optional)</param>
        /// <param name="processDefinitionId">Filter by process definition id. (optional)</param>
        /// <param name="processDefinitionKey">Filter by process definition key. (optional)</param>
        /// <param name="tenantIdIn">Only include historic external task log entries which belong to one of the passed and comma-separated tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include historic external task log entries that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="priorityLowerThanOrEquals">Only include logs for which the associated external task had a priority lower than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)</param>
        /// <param name="priorityHigherThanOrEquals">Only include logs for which the associated external task had a priority higher than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)</param>
        /// <param name="creationLog">Only include creation logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="failureLog">Only include failure logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="successLog">Only include success logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="deletionLog">Only include deletion logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;HistoricExternalTaskLogDto&gt;)</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<List<HistoricExternalTaskLogDto>>> GetHistoricExternalTaskLogsWithHttpInfoAsync(string logId = default(string), string externalTaskId = default(string), string topicName = default(string), string workerId = default(string), string errorMessage = default(string), string activityIdIn = default(string), string activityInstanceIdIn = default(string), string executionIdIn = default(string), string processInstanceId = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), long? priorityLowerThanOrEquals = default(long?), long? priorityHigherThanOrEquals = default(long?), bool? creationLog = default(bool?), bool? failureLog = default(bool?), bool? successLog = default(bool?), bool? deletionLog = default(bool?), string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (logId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "logId", logId));
            }
            if (externalTaskId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "externalTaskId", externalTaskId));
            }
            if (topicName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "topicName", topicName));
            }
            if (workerId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "workerId", workerId));
            }
            if (errorMessage != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "errorMessage", errorMessage));
            }
            if (activityIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "activityIdIn", activityIdIn));
            }
            if (activityInstanceIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "activityInstanceIdIn", activityInstanceIdIn));
            }
            if (executionIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "executionIdIn", executionIdIn));
            }
            if (processInstanceId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processInstanceId", processInstanceId));
            }
            if (processDefinitionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processDefinitionId", processDefinitionId));
            }
            if (processDefinitionKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processDefinitionKey", processDefinitionKey));
            }
            if (tenantIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "tenantIdIn", tenantIdIn));
            }
            if (withoutTenantId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "withoutTenantId", withoutTenantId));
            }
            if (priorityLowerThanOrEquals != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "priorityLowerThanOrEquals", priorityLowerThanOrEquals));
            }
            if (priorityHigherThanOrEquals != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "priorityHigherThanOrEquals", priorityHigherThanOrEquals));
            }
            if (creationLog != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "creationLog", creationLog));
            }
            if (failureLog != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "failureLog", failureLog));
            }
            if (successLog != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "successLog", successLog));
            }
            if (deletionLog != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "deletionLog", deletionLog));
            }
            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "sortBy", sortBy));
            }
            if (sortOrder != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "sortOrder", sortOrder));
            }
            if (firstResult != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "firstResult", firstResult));
            }
            if (maxResults != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "maxResults", maxResults));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<HistoricExternalTaskLogDto>>("/history/external-task-log", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetHistoricExternalTaskLogs", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get External Task Log Count Queries for the number of historic external task logs that fulfill the given parameters. Takes the same parameters as the [Get External Task Logs](https://docs.camunda.org/manual/7.16/reference/rest/history/external-task-log/get-external-task-log-query/) method.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logId">Filter by historic external task log id. (optional)</param>
        /// <param name="externalTaskId">Filter by external task id. (optional)</param>
        /// <param name="topicName">Filter by an external task topic. (optional)</param>
        /// <param name="workerId">Filter by the id of the worker that the task was most recently locked by. (optional)</param>
        /// <param name="errorMessage">Filter by external task exception message. (optional)</param>
        /// <param name="activityIdIn">Only include historic external task logs which belong to one of the passed activity ids. (optional)</param>
        /// <param name="activityInstanceIdIn">Only include historic external task logs which belong to one of the passed activity instance ids. (optional)</param>
        /// <param name="executionIdIn">Only include historic external task logs which belong to one of the passed execution ids. (optional)</param>
        /// <param name="processInstanceId">Filter by process instance id. (optional)</param>
        /// <param name="processDefinitionId">Filter by process definition id. (optional)</param>
        /// <param name="processDefinitionKey">Filter by process definition key. (optional)</param>
        /// <param name="tenantIdIn">Only include historic external task log entries which belong to one of the passed and comma-separated tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include historic external task log entries that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="priorityLowerThanOrEquals">Only include logs for which the associated external task had a priority lower than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)</param>
        /// <param name="priorityHigherThanOrEquals">Only include logs for which the associated external task had a priority higher than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)</param>
        /// <param name="creationLog">Only include creation logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="failureLog">Only include failure logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="successLog">Only include success logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="deletionLog">Only include deletion logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <returns>CountResultDto</returns>
        public CountResultDto GetHistoricExternalTaskLogsCount(string logId = default(string), string externalTaskId = default(string), string topicName = default(string), string workerId = default(string), string errorMessage = default(string), string activityIdIn = default(string), string activityInstanceIdIn = default(string), string executionIdIn = default(string), string processInstanceId = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), long? priorityLowerThanOrEquals = default(long?), long? priorityHigherThanOrEquals = default(long?), bool? creationLog = default(bool?), bool? failureLog = default(bool?), bool? successLog = default(bool?), bool? deletionLog = default(bool?))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<CountResultDto> localVarResponse = GetHistoricExternalTaskLogsCountWithHttpInfo(logId, externalTaskId, topicName, workerId, errorMessage, activityIdIn, activityInstanceIdIn, executionIdIn, processInstanceId, processDefinitionId, processDefinitionKey, tenantIdIn, withoutTenantId, priorityLowerThanOrEquals, priorityHigherThanOrEquals, creationLog, failureLog, successLog, deletionLog);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get External Task Log Count Queries for the number of historic external task logs that fulfill the given parameters. Takes the same parameters as the [Get External Task Logs](https://docs.camunda.org/manual/7.16/reference/rest/history/external-task-log/get-external-task-log-query/) method.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logId">Filter by historic external task log id. (optional)</param>
        /// <param name="externalTaskId">Filter by external task id. (optional)</param>
        /// <param name="topicName">Filter by an external task topic. (optional)</param>
        /// <param name="workerId">Filter by the id of the worker that the task was most recently locked by. (optional)</param>
        /// <param name="errorMessage">Filter by external task exception message. (optional)</param>
        /// <param name="activityIdIn">Only include historic external task logs which belong to one of the passed activity ids. (optional)</param>
        /// <param name="activityInstanceIdIn">Only include historic external task logs which belong to one of the passed activity instance ids. (optional)</param>
        /// <param name="executionIdIn">Only include historic external task logs which belong to one of the passed execution ids. (optional)</param>
        /// <param name="processInstanceId">Filter by process instance id. (optional)</param>
        /// <param name="processDefinitionId">Filter by process definition id. (optional)</param>
        /// <param name="processDefinitionKey">Filter by process definition key. (optional)</param>
        /// <param name="tenantIdIn">Only include historic external task log entries which belong to one of the passed and comma-separated tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include historic external task log entries that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="priorityLowerThanOrEquals">Only include logs for which the associated external task had a priority lower than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)</param>
        /// <param name="priorityHigherThanOrEquals">Only include logs for which the associated external task had a priority higher than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)</param>
        /// <param name="creationLog">Only include creation logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="failureLog">Only include failure logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="successLog">Only include success logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="deletionLog">Only include deletion logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <returns>ApiResponse of CountResultDto</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<CountResultDto> GetHistoricExternalTaskLogsCountWithHttpInfo(string logId = default(string), string externalTaskId = default(string), string topicName = default(string), string workerId = default(string), string errorMessage = default(string), string activityIdIn = default(string), string activityInstanceIdIn = default(string), string executionIdIn = default(string), string processInstanceId = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), long? priorityLowerThanOrEquals = default(long?), long? priorityHigherThanOrEquals = default(long?), bool? creationLog = default(bool?), bool? failureLog = default(bool?), bool? successLog = default(bool?), bool? deletionLog = default(bool?))
        {
            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (logId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "logId", logId));
            }
            if (externalTaskId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "externalTaskId", externalTaskId));
            }
            if (topicName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "topicName", topicName));
            }
            if (workerId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "workerId", workerId));
            }
            if (errorMessage != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "errorMessage", errorMessage));
            }
            if (activityIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "activityIdIn", activityIdIn));
            }
            if (activityInstanceIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "activityInstanceIdIn", activityInstanceIdIn));
            }
            if (executionIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "executionIdIn", executionIdIn));
            }
            if (processInstanceId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processInstanceId", processInstanceId));
            }
            if (processDefinitionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processDefinitionId", processDefinitionId));
            }
            if (processDefinitionKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processDefinitionKey", processDefinitionKey));
            }
            if (tenantIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "tenantIdIn", tenantIdIn));
            }
            if (withoutTenantId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "withoutTenantId", withoutTenantId));
            }
            if (priorityLowerThanOrEquals != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "priorityLowerThanOrEquals", priorityLowerThanOrEquals));
            }
            if (priorityHigherThanOrEquals != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "priorityHigherThanOrEquals", priorityHigherThanOrEquals));
            }
            if (creationLog != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "creationLog", creationLog));
            }
            if (failureLog != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "failureLog", failureLog));
            }
            if (successLog != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "successLog", successLog));
            }
            if (deletionLog != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "deletionLog", deletionLog));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<CountResultDto>("/history/external-task-log/count", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetHistoricExternalTaskLogsCount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get External Task Log Count Queries for the number of historic external task logs that fulfill the given parameters. Takes the same parameters as the [Get External Task Logs](https://docs.camunda.org/manual/7.16/reference/rest/history/external-task-log/get-external-task-log-query/) method.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logId">Filter by historic external task log id. (optional)</param>
        /// <param name="externalTaskId">Filter by external task id. (optional)</param>
        /// <param name="topicName">Filter by an external task topic. (optional)</param>
        /// <param name="workerId">Filter by the id of the worker that the task was most recently locked by. (optional)</param>
        /// <param name="errorMessage">Filter by external task exception message. (optional)</param>
        /// <param name="activityIdIn">Only include historic external task logs which belong to one of the passed activity ids. (optional)</param>
        /// <param name="activityInstanceIdIn">Only include historic external task logs which belong to one of the passed activity instance ids. (optional)</param>
        /// <param name="executionIdIn">Only include historic external task logs which belong to one of the passed execution ids. (optional)</param>
        /// <param name="processInstanceId">Filter by process instance id. (optional)</param>
        /// <param name="processDefinitionId">Filter by process definition id. (optional)</param>
        /// <param name="processDefinitionKey">Filter by process definition key. (optional)</param>
        /// <param name="tenantIdIn">Only include historic external task log entries which belong to one of the passed and comma-separated tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include historic external task log entries that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="priorityLowerThanOrEquals">Only include logs for which the associated external task had a priority lower than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)</param>
        /// <param name="priorityHigherThanOrEquals">Only include logs for which the associated external task had a priority higher than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)</param>
        /// <param name="creationLog">Only include creation logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="failureLog">Only include failure logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="successLog">Only include success logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="deletionLog">Only include deletion logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CountResultDto</returns>
        public async System.Threading.Tasks.Task<CountResultDto> GetHistoricExternalTaskLogsCountAsync(string logId = default(string), string externalTaskId = default(string), string topicName = default(string), string workerId = default(string), string errorMessage = default(string), string activityIdIn = default(string), string activityInstanceIdIn = default(string), string executionIdIn = default(string), string processInstanceId = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), long? priorityLowerThanOrEquals = default(long?), long? priorityHigherThanOrEquals = default(long?), bool? creationLog = default(bool?), bool? failureLog = default(bool?), bool? successLog = default(bool?), bool? deletionLog = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<CountResultDto> localVarResponse = await GetHistoricExternalTaskLogsCountWithHttpInfoAsync(logId, externalTaskId, topicName, workerId, errorMessage, activityIdIn, activityInstanceIdIn, executionIdIn, processInstanceId, processDefinitionId, processDefinitionKey, tenantIdIn, withoutTenantId, priorityLowerThanOrEquals, priorityHigherThanOrEquals, creationLog, failureLog, successLog, deletionLog, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get External Task Log Count Queries for the number of historic external task logs that fulfill the given parameters. Takes the same parameters as the [Get External Task Logs](https://docs.camunda.org/manual/7.16/reference/rest/history/external-task-log/get-external-task-log-query/) method.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logId">Filter by historic external task log id. (optional)</param>
        /// <param name="externalTaskId">Filter by external task id. (optional)</param>
        /// <param name="topicName">Filter by an external task topic. (optional)</param>
        /// <param name="workerId">Filter by the id of the worker that the task was most recently locked by. (optional)</param>
        /// <param name="errorMessage">Filter by external task exception message. (optional)</param>
        /// <param name="activityIdIn">Only include historic external task logs which belong to one of the passed activity ids. (optional)</param>
        /// <param name="activityInstanceIdIn">Only include historic external task logs which belong to one of the passed activity instance ids. (optional)</param>
        /// <param name="executionIdIn">Only include historic external task logs which belong to one of the passed execution ids. (optional)</param>
        /// <param name="processInstanceId">Filter by process instance id. (optional)</param>
        /// <param name="processDefinitionId">Filter by process definition id. (optional)</param>
        /// <param name="processDefinitionKey">Filter by process definition key. (optional)</param>
        /// <param name="tenantIdIn">Only include historic external task log entries which belong to one of the passed and comma-separated tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include historic external task log entries that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="priorityLowerThanOrEquals">Only include logs for which the associated external task had a priority lower than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)</param>
        /// <param name="priorityHigherThanOrEquals">Only include logs for which the associated external task had a priority higher than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)</param>
        /// <param name="creationLog">Only include creation logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="failureLog">Only include failure logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="successLog">Only include success logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="deletionLog">Only include deletion logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CountResultDto)</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<CountResultDto>> GetHistoricExternalTaskLogsCountWithHttpInfoAsync(string logId = default(string), string externalTaskId = default(string), string topicName = default(string), string workerId = default(string), string errorMessage = default(string), string activityIdIn = default(string), string activityInstanceIdIn = default(string), string executionIdIn = default(string), string processInstanceId = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), long? priorityLowerThanOrEquals = default(long?), long? priorityHigherThanOrEquals = default(long?), bool? creationLog = default(bool?), bool? failureLog = default(bool?), bool? successLog = default(bool?), bool? deletionLog = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (logId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "logId", logId));
            }
            if (externalTaskId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "externalTaskId", externalTaskId));
            }
            if (topicName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "topicName", topicName));
            }
            if (workerId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "workerId", workerId));
            }
            if (errorMessage != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "errorMessage", errorMessage));
            }
            if (activityIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "activityIdIn", activityIdIn));
            }
            if (activityInstanceIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "activityInstanceIdIn", activityInstanceIdIn));
            }
            if (executionIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "executionIdIn", executionIdIn));
            }
            if (processInstanceId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processInstanceId", processInstanceId));
            }
            if (processDefinitionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processDefinitionId", processDefinitionId));
            }
            if (processDefinitionKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processDefinitionKey", processDefinitionKey));
            }
            if (tenantIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "tenantIdIn", tenantIdIn));
            }
            if (withoutTenantId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "withoutTenantId", withoutTenantId));
            }
            if (priorityLowerThanOrEquals != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "priorityLowerThanOrEquals", priorityLowerThanOrEquals));
            }
            if (priorityHigherThanOrEquals != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "priorityHigherThanOrEquals", priorityHigherThanOrEquals));
            }
            if (creationLog != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "creationLog", creationLog));
            }
            if (failureLog != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "failureLog", failureLog));
            }
            if (successLog != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "successLog", successLog));
            }
            if (deletionLog != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "deletionLog", deletionLog));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<CountResultDto>("/history/external-task-log/count", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetHistoricExternalTaskLogsCount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get External Task Logs (POST) Queries for historic external task logs that fulfill the given parameters. This method is slightly more powerful than the [Get External Task Logs](https://docs.camunda.org/manual/7.16/reference/rest/history/external-task-log/get-external-task-log-query/) method because it allows filtering by historic external task logs values of the different types &#x60;String&#x60;, &#x60;Number&#x60; or &#x60;Boolean&#x60;.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="historicExternalTaskLogQueryDto"> (optional)</param>
        /// <returns>List&lt;HistoricExternalTaskLogDto&gt;</returns>
        public List<HistoricExternalTaskLogDto> QueryHistoricExternalTaskLogs(HistoricExternalTaskLogQueryDto historicExternalTaskLogQueryDto = default(HistoricExternalTaskLogQueryDto))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<List<HistoricExternalTaskLogDto>> localVarResponse = QueryHistoricExternalTaskLogsWithHttpInfo(historicExternalTaskLogQueryDto);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get External Task Logs (POST) Queries for historic external task logs that fulfill the given parameters. This method is slightly more powerful than the [Get External Task Logs](https://docs.camunda.org/manual/7.16/reference/rest/history/external-task-log/get-external-task-log-query/) method because it allows filtering by historic external task logs values of the different types &#x60;String&#x60;, &#x60;Number&#x60; or &#x60;Boolean&#x60;.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="historicExternalTaskLogQueryDto"> (optional)</param>
        /// <returns>ApiResponse of List&lt;HistoricExternalTaskLogDto&gt;</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<List<HistoricExternalTaskLogDto>> QueryHistoricExternalTaskLogsWithHttpInfo(HistoricExternalTaskLogQueryDto historicExternalTaskLogQueryDto = default(HistoricExternalTaskLogQueryDto))
        {
            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = historicExternalTaskLogQueryDto;


            // make the HTTP request
            var localVarResponse = this.Client.Post<List<HistoricExternalTaskLogDto>>("/history/external-task-log", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QueryHistoricExternalTaskLogs", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get External Task Logs (POST) Queries for historic external task logs that fulfill the given parameters. This method is slightly more powerful than the [Get External Task Logs](https://docs.camunda.org/manual/7.16/reference/rest/history/external-task-log/get-external-task-log-query/) method because it allows filtering by historic external task logs values of the different types &#x60;String&#x60;, &#x60;Number&#x60; or &#x60;Boolean&#x60;.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="historicExternalTaskLogQueryDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;HistoricExternalTaskLogDto&gt;</returns>
        public async System.Threading.Tasks.Task<List<HistoricExternalTaskLogDto>> QueryHistoricExternalTaskLogsAsync(HistoricExternalTaskLogQueryDto historicExternalTaskLogQueryDto = default(HistoricExternalTaskLogQueryDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<List<HistoricExternalTaskLogDto>> localVarResponse = await QueryHistoricExternalTaskLogsWithHttpInfoAsync(historicExternalTaskLogQueryDto, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get External Task Logs (POST) Queries for historic external task logs that fulfill the given parameters. This method is slightly more powerful than the [Get External Task Logs](https://docs.camunda.org/manual/7.16/reference/rest/history/external-task-log/get-external-task-log-query/) method because it allows filtering by historic external task logs values of the different types &#x60;String&#x60;, &#x60;Number&#x60; or &#x60;Boolean&#x60;.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="historicExternalTaskLogQueryDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;HistoricExternalTaskLogDto&gt;)</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<List<HistoricExternalTaskLogDto>>> QueryHistoricExternalTaskLogsWithHttpInfoAsync(HistoricExternalTaskLogQueryDto historicExternalTaskLogQueryDto = default(HistoricExternalTaskLogQueryDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = historicExternalTaskLogQueryDto;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<List<HistoricExternalTaskLogDto>>("/history/external-task-log", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QueryHistoricExternalTaskLogs", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get External Task Log Count (POST) Queries for the number of historic external task logs that fulfill the given parameters. This method takes the same message body as the [Get External Task Logs (POST)](https://docs.camunda.org/manual/7.16/reference/rest/history/external-task-log/post-external-task-log-query/) method and therefore it is slightly more powerful than the [Get External Task Log Count](https://docs.camunda.org/manual/7.16/reference/rest/history/external-task-log/get-external-task-log-query-count/) method.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="historicExternalTaskLogQueryDto"> (optional)</param>
        /// <returns>CountResultDto</returns>
        public CountResultDto QueryHistoricExternalTaskLogsCount(HistoricExternalTaskLogQueryDto historicExternalTaskLogQueryDto = default(HistoricExternalTaskLogQueryDto))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<CountResultDto> localVarResponse = QueryHistoricExternalTaskLogsCountWithHttpInfo(historicExternalTaskLogQueryDto);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get External Task Log Count (POST) Queries for the number of historic external task logs that fulfill the given parameters. This method takes the same message body as the [Get External Task Logs (POST)](https://docs.camunda.org/manual/7.16/reference/rest/history/external-task-log/post-external-task-log-query/) method and therefore it is slightly more powerful than the [Get External Task Log Count](https://docs.camunda.org/manual/7.16/reference/rest/history/external-task-log/get-external-task-log-query-count/) method.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="historicExternalTaskLogQueryDto"> (optional)</param>
        /// <returns>ApiResponse of CountResultDto</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<CountResultDto> QueryHistoricExternalTaskLogsCountWithHttpInfo(HistoricExternalTaskLogQueryDto historicExternalTaskLogQueryDto = default(HistoricExternalTaskLogQueryDto))
        {
            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = historicExternalTaskLogQueryDto;


            // make the HTTP request
            var localVarResponse = this.Client.Post<CountResultDto>("/history/external-task-log/count", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QueryHistoricExternalTaskLogsCount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get External Task Log Count (POST) Queries for the number of historic external task logs that fulfill the given parameters. This method takes the same message body as the [Get External Task Logs (POST)](https://docs.camunda.org/manual/7.16/reference/rest/history/external-task-log/post-external-task-log-query/) method and therefore it is slightly more powerful than the [Get External Task Log Count](https://docs.camunda.org/manual/7.16/reference/rest/history/external-task-log/get-external-task-log-query-count/) method.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="historicExternalTaskLogQueryDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CountResultDto</returns>
        public async System.Threading.Tasks.Task<CountResultDto> QueryHistoricExternalTaskLogsCountAsync(HistoricExternalTaskLogQueryDto historicExternalTaskLogQueryDto = default(HistoricExternalTaskLogQueryDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<CountResultDto> localVarResponse = await QueryHistoricExternalTaskLogsCountWithHttpInfoAsync(historicExternalTaskLogQueryDto, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get External Task Log Count (POST) Queries for the number of historic external task logs that fulfill the given parameters. This method takes the same message body as the [Get External Task Logs (POST)](https://docs.camunda.org/manual/7.16/reference/rest/history/external-task-log/post-external-task-log-query/) method and therefore it is slightly more powerful than the [Get External Task Log Count](https://docs.camunda.org/manual/7.16/reference/rest/history/external-task-log/get-external-task-log-query-count/) method.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="historicExternalTaskLogQueryDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CountResultDto)</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<CountResultDto>> QueryHistoricExternalTaskLogsCountWithHttpInfoAsync(HistoricExternalTaskLogQueryDto historicExternalTaskLogQueryDto = default(HistoricExternalTaskLogQueryDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = historicExternalTaskLogQueryDto;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<CountResultDto>("/history/external-task-log/count", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QueryHistoricExternalTaskLogsCount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
