/*
 * Camunda Platform REST API
 *
 * OpenApi Spec for Camunda Platform REST API.
 *
 * The version of the OpenAPI document: 7.16.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Camunda.OpenApi.Client.Client;
using Camunda.OpenApi.Client.Model;

namespace Camunda.OpenApi.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IVariableInstanceApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get Variable Instance
        /// </summary>
        /// <remarks>
        /// Retrieves a variable by id.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the variable instance.</param>
        /// <param name="deserializeValue">Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note:**  While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine. (optional)</param>
        /// <returns>VariableInstanceDto</returns>
        VariableInstanceDto GetVariableInstance(string id, bool? deserializeValue = default(bool?));

        /// <summary>
        /// Get Variable Instance
        /// </summary>
        /// <remarks>
        /// Retrieves a variable by id.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the variable instance.</param>
        /// <param name="deserializeValue">Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note:**  While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine. (optional)</param>
        /// <returns>ApiResponse of VariableInstanceDto</returns>
        ApiResponse<VariableInstanceDto> GetVariableInstanceWithHttpInfo(string id, bool? deserializeValue = default(bool?));
        /// <summary>
        /// Get Variable Instance (Binary)
        /// </summary>
        /// <remarks>
        /// Retrieves the content of a variable by id. Applicable for byte array and file variables.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the variable instance.</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetVariableInstanceBinary(string id);

        /// <summary>
        /// Get Variable Instance (Binary)
        /// </summary>
        /// <remarks>
        /// Retrieves the content of a variable by id. Applicable for byte array and file variables.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the variable instance.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetVariableInstanceBinaryWithHttpInfo(string id);
        /// <summary>
        /// Get Variable Instances
        /// </summary>
        /// <remarks>
        /// Query for variable instances that fulfill given parameters. Parameters may be the properties of variable instances, such as the name or type. The size of the result set can be retrieved by using the [Get Variable Instance Count](https://docs.camunda.org/manual/7.16/reference/rest/variable-instance/get-query-count/) method.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variableName">Filter by variable instance name. (optional)</param>
        /// <param name="variableNameLike">Filter by the variable instance name. The parameter can include the wildcard &#x60;%&#x60; to express like-strategy such as: starts with (&#x60;%&#x60;name), ends with (name&#x60;%&#x60;) or contains (&#x60;%&#x60;name&#x60;%&#x60;). (optional)</param>
        /// <param name="processInstanceIdIn">Only include variable instances which belong to one of the passed and comma-separated process instance ids. (optional)</param>
        /// <param name="executionIdIn">Only include variable instances which belong to one of the passed and comma-separated execution ids. (optional)</param>
        /// <param name="caseInstanceIdIn">Only include variable instances which belong to one of the passed and comma-separated case instance ids. (optional)</param>
        /// <param name="caseExecutionIdIn">Only include variable instances which belong to one of the passed and comma-separated case execution ids. (optional)</param>
        /// <param name="taskIdIn">Only include variable instances which belong to one of the passed and comma-separated task ids. (optional)</param>
        /// <param name="batchIdIn">Only include variable instances which belong to one of the passed and comma-separated batch ids. (optional)</param>
        /// <param name="activityInstanceIdIn">Only include variable instances which belong to one of the passed and comma-separated activity instance ids. (optional)</param>
        /// <param name="tenantIdIn">Only include variable instances which belong to one of the passed and comma-separated tenant ids. (optional)</param>
        /// <param name="variableValues">Only include variable instances that have the certain values. Value filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value.  **Note:** Values are always treated as &#x60;String&#x60; objects on server side.  Valid operator values are: &#x60;eq&#x60; - equal to; &#x60;neq&#x60; - not equal to; &#x60;gt&#x60; - greater than; &#x60;gteq&#x60; - greater than or equal to; &#x60;lt&#x60; - lower than; &#x60;lteq&#x60; - lower than or equal to; &#x60;like&#x60;. &#x60;key&#x60; and &#x60;value&#x60; may not contain underscore or comma characters. (optional)</param>
        /// <param name="variableNamesIgnoreCase">Match all variable names provided in &#x60;variableValues&#x60; case-insensitively. If set to &#x60;true&#x60; **variableName** and **variablename** are treated as equal. (optional)</param>
        /// <param name="variableValuesIgnoreCase">Match all variable values provided in &#x60;variableValues&#x60; case-insensitively. If set to &#x60;true&#x60; **variableValue** and **variablevalue** are treated as equal. (optional)</param>
        /// <param name="variableScopeIdIn">Only include variable instances which belong to one of passed scope ids. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="deserializeValues">Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note:** While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine. (optional)</param>
        /// <returns>List&lt;VariableInstanceDto&gt;</returns>
        List<VariableInstanceDto> GetVariableInstances(string variableName = default(string), string variableNameLike = default(string), string processInstanceIdIn = default(string), string executionIdIn = default(string), string caseInstanceIdIn = default(string), string caseExecutionIdIn = default(string), string taskIdIn = default(string), string batchIdIn = default(string), string activityInstanceIdIn = default(string), string tenantIdIn = default(string), string variableValues = default(string), bool? variableNamesIgnoreCase = default(bool?), bool? variableValuesIgnoreCase = default(bool?), string variableScopeIdIn = default(string), string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?), bool? deserializeValues = default(bool?));

        /// <summary>
        /// Get Variable Instances
        /// </summary>
        /// <remarks>
        /// Query for variable instances that fulfill given parameters. Parameters may be the properties of variable instances, such as the name or type. The size of the result set can be retrieved by using the [Get Variable Instance Count](https://docs.camunda.org/manual/7.16/reference/rest/variable-instance/get-query-count/) method.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variableName">Filter by variable instance name. (optional)</param>
        /// <param name="variableNameLike">Filter by the variable instance name. The parameter can include the wildcard &#x60;%&#x60; to express like-strategy such as: starts with (&#x60;%&#x60;name), ends with (name&#x60;%&#x60;) or contains (&#x60;%&#x60;name&#x60;%&#x60;). (optional)</param>
        /// <param name="processInstanceIdIn">Only include variable instances which belong to one of the passed and comma-separated process instance ids. (optional)</param>
        /// <param name="executionIdIn">Only include variable instances which belong to one of the passed and comma-separated execution ids. (optional)</param>
        /// <param name="caseInstanceIdIn">Only include variable instances which belong to one of the passed and comma-separated case instance ids. (optional)</param>
        /// <param name="caseExecutionIdIn">Only include variable instances which belong to one of the passed and comma-separated case execution ids. (optional)</param>
        /// <param name="taskIdIn">Only include variable instances which belong to one of the passed and comma-separated task ids. (optional)</param>
        /// <param name="batchIdIn">Only include variable instances which belong to one of the passed and comma-separated batch ids. (optional)</param>
        /// <param name="activityInstanceIdIn">Only include variable instances which belong to one of the passed and comma-separated activity instance ids. (optional)</param>
        /// <param name="tenantIdIn">Only include variable instances which belong to one of the passed and comma-separated tenant ids. (optional)</param>
        /// <param name="variableValues">Only include variable instances that have the certain values. Value filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value.  **Note:** Values are always treated as &#x60;String&#x60; objects on server side.  Valid operator values are: &#x60;eq&#x60; - equal to; &#x60;neq&#x60; - not equal to; &#x60;gt&#x60; - greater than; &#x60;gteq&#x60; - greater than or equal to; &#x60;lt&#x60; - lower than; &#x60;lteq&#x60; - lower than or equal to; &#x60;like&#x60;. &#x60;key&#x60; and &#x60;value&#x60; may not contain underscore or comma characters. (optional)</param>
        /// <param name="variableNamesIgnoreCase">Match all variable names provided in &#x60;variableValues&#x60; case-insensitively. If set to &#x60;true&#x60; **variableName** and **variablename** are treated as equal. (optional)</param>
        /// <param name="variableValuesIgnoreCase">Match all variable values provided in &#x60;variableValues&#x60; case-insensitively. If set to &#x60;true&#x60; **variableValue** and **variablevalue** are treated as equal. (optional)</param>
        /// <param name="variableScopeIdIn">Only include variable instances which belong to one of passed scope ids. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="deserializeValues">Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note:** While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine. (optional)</param>
        /// <returns>ApiResponse of List&lt;VariableInstanceDto&gt;</returns>
        ApiResponse<List<VariableInstanceDto>> GetVariableInstancesWithHttpInfo(string variableName = default(string), string variableNameLike = default(string), string processInstanceIdIn = default(string), string executionIdIn = default(string), string caseInstanceIdIn = default(string), string caseExecutionIdIn = default(string), string taskIdIn = default(string), string batchIdIn = default(string), string activityInstanceIdIn = default(string), string tenantIdIn = default(string), string variableValues = default(string), bool? variableNamesIgnoreCase = default(bool?), bool? variableValuesIgnoreCase = default(bool?), string variableScopeIdIn = default(string), string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?), bool? deserializeValues = default(bool?));
        /// <summary>
        /// Get Variable Instance Count
        /// </summary>
        /// <remarks>
        /// Query for the number of variable instances that fulfill given parameters. Takes the same parameters as the [Get Variable Instances](https://docs.camunda.org/manual/7.16/reference/rest/variable-instance/get-query/) method.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variableName">Filter by variable instance name. (optional)</param>
        /// <param name="variableNameLike">Filter by the variable instance name. The parameter can include the wildcard &#x60;%&#x60; to express like-strategy such as: starts with (&#x60;%&#x60;name), ends with (name&#x60;%&#x60;) or contains (&#x60;%&#x60;name&#x60;%&#x60;). (optional)</param>
        /// <param name="processInstanceIdIn">Only include variable instances which belong to one of the passed and comma-separated process instance ids. (optional)</param>
        /// <param name="executionIdIn">Only include variable instances which belong to one of the passed and comma-separated execution ids. (optional)</param>
        /// <param name="caseInstanceIdIn">Only include variable instances which belong to one of the passed and comma-separated case instance ids. (optional)</param>
        /// <param name="caseExecutionIdIn">Only include variable instances which belong to one of the passed and comma-separated case execution ids. (optional)</param>
        /// <param name="taskIdIn">Only include variable instances which belong to one of the passed and comma-separated task ids. (optional)</param>
        /// <param name="batchIdIn">Only include variable instances which belong to one of the passed and comma-separated batch ids. (optional)</param>
        /// <param name="activityInstanceIdIn">Only include variable instances which belong to one of the passed and comma-separated activity instance ids. (optional)</param>
        /// <param name="tenantIdIn">Only include variable instances which belong to one of the passed and comma-separated tenant ids. (optional)</param>
        /// <param name="variableValues">Only include variable instances that have the certain values. Value filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value.  **Note:** Values are always treated as &#x60;String&#x60; objects on server side.  Valid operator values are: &#x60;eq&#x60; - equal to; &#x60;neq&#x60; - not equal to; &#x60;gt&#x60; - greater than; &#x60;gteq&#x60; - greater than or equal to; &#x60;lt&#x60; - lower than; &#x60;lteq&#x60; - lower than or equal to; &#x60;like&#x60;. &#x60;key&#x60; and &#x60;value&#x60; may not contain underscore or comma characters. (optional)</param>
        /// <param name="variableNamesIgnoreCase">Match all variable names provided in &#x60;variableValues&#x60; case-insensitively. If set to &#x60;true&#x60; **variableName** and **variablename** are treated as equal. (optional)</param>
        /// <param name="variableValuesIgnoreCase">Match all variable values provided in &#x60;variableValues&#x60; case-insensitively. If set to &#x60;true&#x60; **variableValue** and **variablevalue** are treated as equal. (optional)</param>
        /// <param name="variableScopeIdIn">Only include variable instances which belong to one of passed scope ids. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <returns>CountResultDto</returns>
        CountResultDto GetVariableInstancesCount(string variableName = default(string), string variableNameLike = default(string), string processInstanceIdIn = default(string), string executionIdIn = default(string), string caseInstanceIdIn = default(string), string caseExecutionIdIn = default(string), string taskIdIn = default(string), string batchIdIn = default(string), string activityInstanceIdIn = default(string), string tenantIdIn = default(string), string variableValues = default(string), bool? variableNamesIgnoreCase = default(bool?), bool? variableValuesIgnoreCase = default(bool?), string variableScopeIdIn = default(string), string sortBy = default(string), string sortOrder = default(string));

        /// <summary>
        /// Get Variable Instance Count
        /// </summary>
        /// <remarks>
        /// Query for the number of variable instances that fulfill given parameters. Takes the same parameters as the [Get Variable Instances](https://docs.camunda.org/manual/7.16/reference/rest/variable-instance/get-query/) method.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variableName">Filter by variable instance name. (optional)</param>
        /// <param name="variableNameLike">Filter by the variable instance name. The parameter can include the wildcard &#x60;%&#x60; to express like-strategy such as: starts with (&#x60;%&#x60;name), ends with (name&#x60;%&#x60;) or contains (&#x60;%&#x60;name&#x60;%&#x60;). (optional)</param>
        /// <param name="processInstanceIdIn">Only include variable instances which belong to one of the passed and comma-separated process instance ids. (optional)</param>
        /// <param name="executionIdIn">Only include variable instances which belong to one of the passed and comma-separated execution ids. (optional)</param>
        /// <param name="caseInstanceIdIn">Only include variable instances which belong to one of the passed and comma-separated case instance ids. (optional)</param>
        /// <param name="caseExecutionIdIn">Only include variable instances which belong to one of the passed and comma-separated case execution ids. (optional)</param>
        /// <param name="taskIdIn">Only include variable instances which belong to one of the passed and comma-separated task ids. (optional)</param>
        /// <param name="batchIdIn">Only include variable instances which belong to one of the passed and comma-separated batch ids. (optional)</param>
        /// <param name="activityInstanceIdIn">Only include variable instances which belong to one of the passed and comma-separated activity instance ids. (optional)</param>
        /// <param name="tenantIdIn">Only include variable instances which belong to one of the passed and comma-separated tenant ids. (optional)</param>
        /// <param name="variableValues">Only include variable instances that have the certain values. Value filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value.  **Note:** Values are always treated as &#x60;String&#x60; objects on server side.  Valid operator values are: &#x60;eq&#x60; - equal to; &#x60;neq&#x60; - not equal to; &#x60;gt&#x60; - greater than; &#x60;gteq&#x60; - greater than or equal to; &#x60;lt&#x60; - lower than; &#x60;lteq&#x60; - lower than or equal to; &#x60;like&#x60;. &#x60;key&#x60; and &#x60;value&#x60; may not contain underscore or comma characters. (optional)</param>
        /// <param name="variableNamesIgnoreCase">Match all variable names provided in &#x60;variableValues&#x60; case-insensitively. If set to &#x60;true&#x60; **variableName** and **variablename** are treated as equal. (optional)</param>
        /// <param name="variableValuesIgnoreCase">Match all variable values provided in &#x60;variableValues&#x60; case-insensitively. If set to &#x60;true&#x60; **variableValue** and **variablevalue** are treated as equal. (optional)</param>
        /// <param name="variableScopeIdIn">Only include variable instances which belong to one of passed scope ids. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <returns>ApiResponse of CountResultDto</returns>
        ApiResponse<CountResultDto> GetVariableInstancesCountWithHttpInfo(string variableName = default(string), string variableNameLike = default(string), string processInstanceIdIn = default(string), string executionIdIn = default(string), string caseInstanceIdIn = default(string), string caseExecutionIdIn = default(string), string taskIdIn = default(string), string batchIdIn = default(string), string activityInstanceIdIn = default(string), string tenantIdIn = default(string), string variableValues = default(string), bool? variableNamesIgnoreCase = default(bool?), bool? variableValuesIgnoreCase = default(bool?), string variableScopeIdIn = default(string), string sortBy = default(string), string sortOrder = default(string));
        /// <summary>
        /// Get Variable Instances (POST)
        /// </summary>
        /// <remarks>
        /// Query for variable instances that fulfill given parameters through a JSON object. This method is slightly more powerful than the [Get Variable Instances](https://docs.camunda.org/manual/7.16/reference/rest/variable- instance/get-query/) method because it allows filtering by multiple variable instances of types &#x60;String&#x60;, &#x60;Number&#x60; or &#x60;Boolean&#x60;.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="deserializeValues">Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note:** While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine. (optional)</param>
        /// <param name="variableInstanceQueryDto"> (optional)</param>
        /// <returns>List&lt;VariableInstanceDto&gt;</returns>
        List<VariableInstanceDto> QueryVariableInstances(int? firstResult = default(int?), int? maxResults = default(int?), bool? deserializeValues = default(bool?), VariableInstanceQueryDto variableInstanceQueryDto = default(VariableInstanceQueryDto));

        /// <summary>
        /// Get Variable Instances (POST)
        /// </summary>
        /// <remarks>
        /// Query for variable instances that fulfill given parameters through a JSON object. This method is slightly more powerful than the [Get Variable Instances](https://docs.camunda.org/manual/7.16/reference/rest/variable- instance/get-query/) method because it allows filtering by multiple variable instances of types &#x60;String&#x60;, &#x60;Number&#x60; or &#x60;Boolean&#x60;.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="deserializeValues">Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note:** While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine. (optional)</param>
        /// <param name="variableInstanceQueryDto"> (optional)</param>
        /// <returns>ApiResponse of List&lt;VariableInstanceDto&gt;</returns>
        ApiResponse<List<VariableInstanceDto>> QueryVariableInstancesWithHttpInfo(int? firstResult = default(int?), int? maxResults = default(int?), bool? deserializeValues = default(bool?), VariableInstanceQueryDto variableInstanceQueryDto = default(VariableInstanceQueryDto));
        /// <summary>
        /// Get Variable Instance Count (POST)
        /// </summary>
        /// <remarks>
        /// Query for the number of variable instances that fulfill given parameters. This method takes the same message body as the [Get Variable Instances POST](https://docs.camunda.org/manual/7.16/reference/rest/variable- instance/post-query/) method and therefore it is slightly more powerful than the [Get Variable Instance Count](https://docs.camunda.org/manual/7.16/reference/rest/variable-instance/get-query-count/) method.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variableInstanceQueryDto"> (optional)</param>
        /// <returns>CountResultDto</returns>
        CountResultDto QueryVariableInstancesCount(VariableInstanceQueryDto variableInstanceQueryDto = default(VariableInstanceQueryDto));

        /// <summary>
        /// Get Variable Instance Count (POST)
        /// </summary>
        /// <remarks>
        /// Query for the number of variable instances that fulfill given parameters. This method takes the same message body as the [Get Variable Instances POST](https://docs.camunda.org/manual/7.16/reference/rest/variable- instance/post-query/) method and therefore it is slightly more powerful than the [Get Variable Instance Count](https://docs.camunda.org/manual/7.16/reference/rest/variable-instance/get-query-count/) method.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variableInstanceQueryDto"> (optional)</param>
        /// <returns>ApiResponse of CountResultDto</returns>
        ApiResponse<CountResultDto> QueryVariableInstancesCountWithHttpInfo(VariableInstanceQueryDto variableInstanceQueryDto = default(VariableInstanceQueryDto));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IVariableInstanceApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get Variable Instance
        /// </summary>
        /// <remarks>
        /// Retrieves a variable by id.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the variable instance.</param>
        /// <param name="deserializeValue">Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note:**  While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of VariableInstanceDto</returns>
        System.Threading.Tasks.Task<VariableInstanceDto> GetVariableInstanceAsync(string id, bool? deserializeValue = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Variable Instance
        /// </summary>
        /// <remarks>
        /// Retrieves a variable by id.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the variable instance.</param>
        /// <param name="deserializeValue">Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note:**  While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (VariableInstanceDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<VariableInstanceDto>> GetVariableInstanceWithHttpInfoAsync(string id, bool? deserializeValue = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Variable Instance (Binary)
        /// </summary>
        /// <remarks>
        /// Retrieves the content of a variable by id. Applicable for byte array and file variables.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the variable instance.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetVariableInstanceBinaryAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Variable Instance (Binary)
        /// </summary>
        /// <remarks>
        /// Retrieves the content of a variable by id. Applicable for byte array and file variables.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the variable instance.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetVariableInstanceBinaryWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Variable Instances
        /// </summary>
        /// <remarks>
        /// Query for variable instances that fulfill given parameters. Parameters may be the properties of variable instances, such as the name or type. The size of the result set can be retrieved by using the [Get Variable Instance Count](https://docs.camunda.org/manual/7.16/reference/rest/variable-instance/get-query-count/) method.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variableName">Filter by variable instance name. (optional)</param>
        /// <param name="variableNameLike">Filter by the variable instance name. The parameter can include the wildcard &#x60;%&#x60; to express like-strategy such as: starts with (&#x60;%&#x60;name), ends with (name&#x60;%&#x60;) or contains (&#x60;%&#x60;name&#x60;%&#x60;). (optional)</param>
        /// <param name="processInstanceIdIn">Only include variable instances which belong to one of the passed and comma-separated process instance ids. (optional)</param>
        /// <param name="executionIdIn">Only include variable instances which belong to one of the passed and comma-separated execution ids. (optional)</param>
        /// <param name="caseInstanceIdIn">Only include variable instances which belong to one of the passed and comma-separated case instance ids. (optional)</param>
        /// <param name="caseExecutionIdIn">Only include variable instances which belong to one of the passed and comma-separated case execution ids. (optional)</param>
        /// <param name="taskIdIn">Only include variable instances which belong to one of the passed and comma-separated task ids. (optional)</param>
        /// <param name="batchIdIn">Only include variable instances which belong to one of the passed and comma-separated batch ids. (optional)</param>
        /// <param name="activityInstanceIdIn">Only include variable instances which belong to one of the passed and comma-separated activity instance ids. (optional)</param>
        /// <param name="tenantIdIn">Only include variable instances which belong to one of the passed and comma-separated tenant ids. (optional)</param>
        /// <param name="variableValues">Only include variable instances that have the certain values. Value filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value.  **Note:** Values are always treated as &#x60;String&#x60; objects on server side.  Valid operator values are: &#x60;eq&#x60; - equal to; &#x60;neq&#x60; - not equal to; &#x60;gt&#x60; - greater than; &#x60;gteq&#x60; - greater than or equal to; &#x60;lt&#x60; - lower than; &#x60;lteq&#x60; - lower than or equal to; &#x60;like&#x60;. &#x60;key&#x60; and &#x60;value&#x60; may not contain underscore or comma characters. (optional)</param>
        /// <param name="variableNamesIgnoreCase">Match all variable names provided in &#x60;variableValues&#x60; case-insensitively. If set to &#x60;true&#x60; **variableName** and **variablename** are treated as equal. (optional)</param>
        /// <param name="variableValuesIgnoreCase">Match all variable values provided in &#x60;variableValues&#x60; case-insensitively. If set to &#x60;true&#x60; **variableValue** and **variablevalue** are treated as equal. (optional)</param>
        /// <param name="variableScopeIdIn">Only include variable instances which belong to one of passed scope ids. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="deserializeValues">Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note:** While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;VariableInstanceDto&gt;</returns>
        System.Threading.Tasks.Task<List<VariableInstanceDto>> GetVariableInstancesAsync(string variableName = default(string), string variableNameLike = default(string), string processInstanceIdIn = default(string), string executionIdIn = default(string), string caseInstanceIdIn = default(string), string caseExecutionIdIn = default(string), string taskIdIn = default(string), string batchIdIn = default(string), string activityInstanceIdIn = default(string), string tenantIdIn = default(string), string variableValues = default(string), bool? variableNamesIgnoreCase = default(bool?), bool? variableValuesIgnoreCase = default(bool?), string variableScopeIdIn = default(string), string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?), bool? deserializeValues = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Variable Instances
        /// </summary>
        /// <remarks>
        /// Query for variable instances that fulfill given parameters. Parameters may be the properties of variable instances, such as the name or type. The size of the result set can be retrieved by using the [Get Variable Instance Count](https://docs.camunda.org/manual/7.16/reference/rest/variable-instance/get-query-count/) method.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variableName">Filter by variable instance name. (optional)</param>
        /// <param name="variableNameLike">Filter by the variable instance name. The parameter can include the wildcard &#x60;%&#x60; to express like-strategy such as: starts with (&#x60;%&#x60;name), ends with (name&#x60;%&#x60;) or contains (&#x60;%&#x60;name&#x60;%&#x60;). (optional)</param>
        /// <param name="processInstanceIdIn">Only include variable instances which belong to one of the passed and comma-separated process instance ids. (optional)</param>
        /// <param name="executionIdIn">Only include variable instances which belong to one of the passed and comma-separated execution ids. (optional)</param>
        /// <param name="caseInstanceIdIn">Only include variable instances which belong to one of the passed and comma-separated case instance ids. (optional)</param>
        /// <param name="caseExecutionIdIn">Only include variable instances which belong to one of the passed and comma-separated case execution ids. (optional)</param>
        /// <param name="taskIdIn">Only include variable instances which belong to one of the passed and comma-separated task ids. (optional)</param>
        /// <param name="batchIdIn">Only include variable instances which belong to one of the passed and comma-separated batch ids. (optional)</param>
        /// <param name="activityInstanceIdIn">Only include variable instances which belong to one of the passed and comma-separated activity instance ids. (optional)</param>
        /// <param name="tenantIdIn">Only include variable instances which belong to one of the passed and comma-separated tenant ids. (optional)</param>
        /// <param name="variableValues">Only include variable instances that have the certain values. Value filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value.  **Note:** Values are always treated as &#x60;String&#x60; objects on server side.  Valid operator values are: &#x60;eq&#x60; - equal to; &#x60;neq&#x60; - not equal to; &#x60;gt&#x60; - greater than; &#x60;gteq&#x60; - greater than or equal to; &#x60;lt&#x60; - lower than; &#x60;lteq&#x60; - lower than or equal to; &#x60;like&#x60;. &#x60;key&#x60; and &#x60;value&#x60; may not contain underscore or comma characters. (optional)</param>
        /// <param name="variableNamesIgnoreCase">Match all variable names provided in &#x60;variableValues&#x60; case-insensitively. If set to &#x60;true&#x60; **variableName** and **variablename** are treated as equal. (optional)</param>
        /// <param name="variableValuesIgnoreCase">Match all variable values provided in &#x60;variableValues&#x60; case-insensitively. If set to &#x60;true&#x60; **variableValue** and **variablevalue** are treated as equal. (optional)</param>
        /// <param name="variableScopeIdIn">Only include variable instances which belong to one of passed scope ids. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="deserializeValues">Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note:** While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;VariableInstanceDto&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<VariableInstanceDto>>> GetVariableInstancesWithHttpInfoAsync(string variableName = default(string), string variableNameLike = default(string), string processInstanceIdIn = default(string), string executionIdIn = default(string), string caseInstanceIdIn = default(string), string caseExecutionIdIn = default(string), string taskIdIn = default(string), string batchIdIn = default(string), string activityInstanceIdIn = default(string), string tenantIdIn = default(string), string variableValues = default(string), bool? variableNamesIgnoreCase = default(bool?), bool? variableValuesIgnoreCase = default(bool?), string variableScopeIdIn = default(string), string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?), bool? deserializeValues = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Variable Instance Count
        /// </summary>
        /// <remarks>
        /// Query for the number of variable instances that fulfill given parameters. Takes the same parameters as the [Get Variable Instances](https://docs.camunda.org/manual/7.16/reference/rest/variable-instance/get-query/) method.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variableName">Filter by variable instance name. (optional)</param>
        /// <param name="variableNameLike">Filter by the variable instance name. The parameter can include the wildcard &#x60;%&#x60; to express like-strategy such as: starts with (&#x60;%&#x60;name), ends with (name&#x60;%&#x60;) or contains (&#x60;%&#x60;name&#x60;%&#x60;). (optional)</param>
        /// <param name="processInstanceIdIn">Only include variable instances which belong to one of the passed and comma-separated process instance ids. (optional)</param>
        /// <param name="executionIdIn">Only include variable instances which belong to one of the passed and comma-separated execution ids. (optional)</param>
        /// <param name="caseInstanceIdIn">Only include variable instances which belong to one of the passed and comma-separated case instance ids. (optional)</param>
        /// <param name="caseExecutionIdIn">Only include variable instances which belong to one of the passed and comma-separated case execution ids. (optional)</param>
        /// <param name="taskIdIn">Only include variable instances which belong to one of the passed and comma-separated task ids. (optional)</param>
        /// <param name="batchIdIn">Only include variable instances which belong to one of the passed and comma-separated batch ids. (optional)</param>
        /// <param name="activityInstanceIdIn">Only include variable instances which belong to one of the passed and comma-separated activity instance ids. (optional)</param>
        /// <param name="tenantIdIn">Only include variable instances which belong to one of the passed and comma-separated tenant ids. (optional)</param>
        /// <param name="variableValues">Only include variable instances that have the certain values. Value filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value.  **Note:** Values are always treated as &#x60;String&#x60; objects on server side.  Valid operator values are: &#x60;eq&#x60; - equal to; &#x60;neq&#x60; - not equal to; &#x60;gt&#x60; - greater than; &#x60;gteq&#x60; - greater than or equal to; &#x60;lt&#x60; - lower than; &#x60;lteq&#x60; - lower than or equal to; &#x60;like&#x60;. &#x60;key&#x60; and &#x60;value&#x60; may not contain underscore or comma characters. (optional)</param>
        /// <param name="variableNamesIgnoreCase">Match all variable names provided in &#x60;variableValues&#x60; case-insensitively. If set to &#x60;true&#x60; **variableName** and **variablename** are treated as equal. (optional)</param>
        /// <param name="variableValuesIgnoreCase">Match all variable values provided in &#x60;variableValues&#x60; case-insensitively. If set to &#x60;true&#x60; **variableValue** and **variablevalue** are treated as equal. (optional)</param>
        /// <param name="variableScopeIdIn">Only include variable instances which belong to one of passed scope ids. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CountResultDto</returns>
        System.Threading.Tasks.Task<CountResultDto> GetVariableInstancesCountAsync(string variableName = default(string), string variableNameLike = default(string), string processInstanceIdIn = default(string), string executionIdIn = default(string), string caseInstanceIdIn = default(string), string caseExecutionIdIn = default(string), string taskIdIn = default(string), string batchIdIn = default(string), string activityInstanceIdIn = default(string), string tenantIdIn = default(string), string variableValues = default(string), bool? variableNamesIgnoreCase = default(bool?), bool? variableValuesIgnoreCase = default(bool?), string variableScopeIdIn = default(string), string sortBy = default(string), string sortOrder = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Variable Instance Count
        /// </summary>
        /// <remarks>
        /// Query for the number of variable instances that fulfill given parameters. Takes the same parameters as the [Get Variable Instances](https://docs.camunda.org/manual/7.16/reference/rest/variable-instance/get-query/) method.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variableName">Filter by variable instance name. (optional)</param>
        /// <param name="variableNameLike">Filter by the variable instance name. The parameter can include the wildcard &#x60;%&#x60; to express like-strategy such as: starts with (&#x60;%&#x60;name), ends with (name&#x60;%&#x60;) or contains (&#x60;%&#x60;name&#x60;%&#x60;). (optional)</param>
        /// <param name="processInstanceIdIn">Only include variable instances which belong to one of the passed and comma-separated process instance ids. (optional)</param>
        /// <param name="executionIdIn">Only include variable instances which belong to one of the passed and comma-separated execution ids. (optional)</param>
        /// <param name="caseInstanceIdIn">Only include variable instances which belong to one of the passed and comma-separated case instance ids. (optional)</param>
        /// <param name="caseExecutionIdIn">Only include variable instances which belong to one of the passed and comma-separated case execution ids. (optional)</param>
        /// <param name="taskIdIn">Only include variable instances which belong to one of the passed and comma-separated task ids. (optional)</param>
        /// <param name="batchIdIn">Only include variable instances which belong to one of the passed and comma-separated batch ids. (optional)</param>
        /// <param name="activityInstanceIdIn">Only include variable instances which belong to one of the passed and comma-separated activity instance ids. (optional)</param>
        /// <param name="tenantIdIn">Only include variable instances which belong to one of the passed and comma-separated tenant ids. (optional)</param>
        /// <param name="variableValues">Only include variable instances that have the certain values. Value filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value.  **Note:** Values are always treated as &#x60;String&#x60; objects on server side.  Valid operator values are: &#x60;eq&#x60; - equal to; &#x60;neq&#x60; - not equal to; &#x60;gt&#x60; - greater than; &#x60;gteq&#x60; - greater than or equal to; &#x60;lt&#x60; - lower than; &#x60;lteq&#x60; - lower than or equal to; &#x60;like&#x60;. &#x60;key&#x60; and &#x60;value&#x60; may not contain underscore or comma characters. (optional)</param>
        /// <param name="variableNamesIgnoreCase">Match all variable names provided in &#x60;variableValues&#x60; case-insensitively. If set to &#x60;true&#x60; **variableName** and **variablename** are treated as equal. (optional)</param>
        /// <param name="variableValuesIgnoreCase">Match all variable values provided in &#x60;variableValues&#x60; case-insensitively. If set to &#x60;true&#x60; **variableValue** and **variablevalue** are treated as equal. (optional)</param>
        /// <param name="variableScopeIdIn">Only include variable instances which belong to one of passed scope ids. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CountResultDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<CountResultDto>> GetVariableInstancesCountWithHttpInfoAsync(string variableName = default(string), string variableNameLike = default(string), string processInstanceIdIn = default(string), string executionIdIn = default(string), string caseInstanceIdIn = default(string), string caseExecutionIdIn = default(string), string taskIdIn = default(string), string batchIdIn = default(string), string activityInstanceIdIn = default(string), string tenantIdIn = default(string), string variableValues = default(string), bool? variableNamesIgnoreCase = default(bool?), bool? variableValuesIgnoreCase = default(bool?), string variableScopeIdIn = default(string), string sortBy = default(string), string sortOrder = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Variable Instances (POST)
        /// </summary>
        /// <remarks>
        /// Query for variable instances that fulfill given parameters through a JSON object. This method is slightly more powerful than the [Get Variable Instances](https://docs.camunda.org/manual/7.16/reference/rest/variable- instance/get-query/) method because it allows filtering by multiple variable instances of types &#x60;String&#x60;, &#x60;Number&#x60; or &#x60;Boolean&#x60;.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="deserializeValues">Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note:** While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine. (optional)</param>
        /// <param name="variableInstanceQueryDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;VariableInstanceDto&gt;</returns>
        System.Threading.Tasks.Task<List<VariableInstanceDto>> QueryVariableInstancesAsync(int? firstResult = default(int?), int? maxResults = default(int?), bool? deserializeValues = default(bool?), VariableInstanceQueryDto variableInstanceQueryDto = default(VariableInstanceQueryDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Variable Instances (POST)
        /// </summary>
        /// <remarks>
        /// Query for variable instances that fulfill given parameters through a JSON object. This method is slightly more powerful than the [Get Variable Instances](https://docs.camunda.org/manual/7.16/reference/rest/variable- instance/get-query/) method because it allows filtering by multiple variable instances of types &#x60;String&#x60;, &#x60;Number&#x60; or &#x60;Boolean&#x60;.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="deserializeValues">Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note:** While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine. (optional)</param>
        /// <param name="variableInstanceQueryDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;VariableInstanceDto&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<VariableInstanceDto>>> QueryVariableInstancesWithHttpInfoAsync(int? firstResult = default(int?), int? maxResults = default(int?), bool? deserializeValues = default(bool?), VariableInstanceQueryDto variableInstanceQueryDto = default(VariableInstanceQueryDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Variable Instance Count (POST)
        /// </summary>
        /// <remarks>
        /// Query for the number of variable instances that fulfill given parameters. This method takes the same message body as the [Get Variable Instances POST](https://docs.camunda.org/manual/7.16/reference/rest/variable- instance/post-query/) method and therefore it is slightly more powerful than the [Get Variable Instance Count](https://docs.camunda.org/manual/7.16/reference/rest/variable-instance/get-query-count/) method.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variableInstanceQueryDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CountResultDto</returns>
        System.Threading.Tasks.Task<CountResultDto> QueryVariableInstancesCountAsync(VariableInstanceQueryDto variableInstanceQueryDto = default(VariableInstanceQueryDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Variable Instance Count (POST)
        /// </summary>
        /// <remarks>
        /// Query for the number of variable instances that fulfill given parameters. This method takes the same message body as the [Get Variable Instances POST](https://docs.camunda.org/manual/7.16/reference/rest/variable- instance/post-query/) method and therefore it is slightly more powerful than the [Get Variable Instance Count](https://docs.camunda.org/manual/7.16/reference/rest/variable-instance/get-query-count/) method.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variableInstanceQueryDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CountResultDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<CountResultDto>> QueryVariableInstancesCountWithHttpInfoAsync(VariableInstanceQueryDto variableInstanceQueryDto = default(VariableInstanceQueryDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IVariableInstanceApi : IVariableInstanceApiSync, IVariableInstanceApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class VariableInstanceApi : IVariableInstanceApi
    {
        private Camunda.OpenApi.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="VariableInstanceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public VariableInstanceApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="VariableInstanceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public VariableInstanceApi(String basePath)
        {
            this.Configuration = Camunda.OpenApi.Client.Client.Configuration.MergeConfigurations(
                Camunda.OpenApi.Client.Client.GlobalConfiguration.Instance,
                new Camunda.OpenApi.Client.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Camunda.OpenApi.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Camunda.OpenApi.Client.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Camunda.OpenApi.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="VariableInstanceApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public VariableInstanceApi(Camunda.OpenApi.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Camunda.OpenApi.Client.Client.Configuration.MergeConfigurations(
                Camunda.OpenApi.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Camunda.OpenApi.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Camunda.OpenApi.Client.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Camunda.OpenApi.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="VariableInstanceApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public VariableInstanceApi(Camunda.OpenApi.Client.Client.ISynchronousClient client, Camunda.OpenApi.Client.Client.IAsynchronousClient asyncClient, Camunda.OpenApi.Client.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Camunda.OpenApi.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Camunda.OpenApi.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Camunda.OpenApi.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Camunda.OpenApi.Client.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Camunda.OpenApi.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get Variable Instance Retrieves a variable by id.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the variable instance.</param>
        /// <param name="deserializeValue">Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note:**  While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine. (optional)</param>
        /// <returns>VariableInstanceDto</returns>
        public VariableInstanceDto GetVariableInstance(string id, bool? deserializeValue = default(bool?))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<VariableInstanceDto> localVarResponse = GetVariableInstanceWithHttpInfo(id, deserializeValue);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Variable Instance Retrieves a variable by id.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the variable instance.</param>
        /// <param name="deserializeValue">Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note:**  While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine. (optional)</param>
        /// <returns>ApiResponse of VariableInstanceDto</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<VariableInstanceDto> GetVariableInstanceWithHttpInfo(string id, bool? deserializeValue = default(bool?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling VariableInstanceApi->GetVariableInstance");

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (deserializeValue != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "deserializeValue", deserializeValue));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<VariableInstanceDto>("/variable-instance/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetVariableInstance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Variable Instance Retrieves a variable by id.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the variable instance.</param>
        /// <param name="deserializeValue">Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note:**  While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of VariableInstanceDto</returns>
        public async System.Threading.Tasks.Task<VariableInstanceDto> GetVariableInstanceAsync(string id, bool? deserializeValue = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<VariableInstanceDto> localVarResponse = await GetVariableInstanceWithHttpInfoAsync(id, deserializeValue, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Variable Instance Retrieves a variable by id.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the variable instance.</param>
        /// <param name="deserializeValue">Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note:**  While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (VariableInstanceDto)</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<VariableInstanceDto>> GetVariableInstanceWithHttpInfoAsync(string id, bool? deserializeValue = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling VariableInstanceApi->GetVariableInstance");


            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (deserializeValue != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "deserializeValue", deserializeValue));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<VariableInstanceDto>("/variable-instance/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetVariableInstance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Variable Instance (Binary) Retrieves the content of a variable by id. Applicable for byte array and file variables.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the variable instance.</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetVariableInstanceBinary(string id)
        {
            Camunda.OpenApi.Client.Client.ApiResponse<System.IO.Stream> localVarResponse = GetVariableInstanceBinaryWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Variable Instance (Binary) Retrieves the content of a variable by id. Applicable for byte array and file variables.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the variable instance.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<System.IO.Stream> GetVariableInstanceBinaryWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling VariableInstanceApi->GetVariableInstanceBinary");

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/octet-stream",
                "*/*",
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<System.IO.Stream>("/variable-instance/{id}/data", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetVariableInstanceBinary", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Variable Instance (Binary) Retrieves the content of a variable by id. Applicable for byte array and file variables.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the variable instance.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetVariableInstanceBinaryAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<System.IO.Stream> localVarResponse = await GetVariableInstanceBinaryWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Variable Instance (Binary) Retrieves the content of a variable by id. Applicable for byte array and file variables.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the variable instance.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<System.IO.Stream>> GetVariableInstanceBinaryWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling VariableInstanceApi->GetVariableInstanceBinary");


            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/octet-stream",
                "*/*",
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<System.IO.Stream>("/variable-instance/{id}/data", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetVariableInstanceBinary", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Variable Instances Query for variable instances that fulfill given parameters. Parameters may be the properties of variable instances, such as the name or type. The size of the result set can be retrieved by using the [Get Variable Instance Count](https://docs.camunda.org/manual/7.16/reference/rest/variable-instance/get-query-count/) method.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variableName">Filter by variable instance name. (optional)</param>
        /// <param name="variableNameLike">Filter by the variable instance name. The parameter can include the wildcard &#x60;%&#x60; to express like-strategy such as: starts with (&#x60;%&#x60;name), ends with (name&#x60;%&#x60;) or contains (&#x60;%&#x60;name&#x60;%&#x60;). (optional)</param>
        /// <param name="processInstanceIdIn">Only include variable instances which belong to one of the passed and comma-separated process instance ids. (optional)</param>
        /// <param name="executionIdIn">Only include variable instances which belong to one of the passed and comma-separated execution ids. (optional)</param>
        /// <param name="caseInstanceIdIn">Only include variable instances which belong to one of the passed and comma-separated case instance ids. (optional)</param>
        /// <param name="caseExecutionIdIn">Only include variable instances which belong to one of the passed and comma-separated case execution ids. (optional)</param>
        /// <param name="taskIdIn">Only include variable instances which belong to one of the passed and comma-separated task ids. (optional)</param>
        /// <param name="batchIdIn">Only include variable instances which belong to one of the passed and comma-separated batch ids. (optional)</param>
        /// <param name="activityInstanceIdIn">Only include variable instances which belong to one of the passed and comma-separated activity instance ids. (optional)</param>
        /// <param name="tenantIdIn">Only include variable instances which belong to one of the passed and comma-separated tenant ids. (optional)</param>
        /// <param name="variableValues">Only include variable instances that have the certain values. Value filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value.  **Note:** Values are always treated as &#x60;String&#x60; objects on server side.  Valid operator values are: &#x60;eq&#x60; - equal to; &#x60;neq&#x60; - not equal to; &#x60;gt&#x60; - greater than; &#x60;gteq&#x60; - greater than or equal to; &#x60;lt&#x60; - lower than; &#x60;lteq&#x60; - lower than or equal to; &#x60;like&#x60;. &#x60;key&#x60; and &#x60;value&#x60; may not contain underscore or comma characters. (optional)</param>
        /// <param name="variableNamesIgnoreCase">Match all variable names provided in &#x60;variableValues&#x60; case-insensitively. If set to &#x60;true&#x60; **variableName** and **variablename** are treated as equal. (optional)</param>
        /// <param name="variableValuesIgnoreCase">Match all variable values provided in &#x60;variableValues&#x60; case-insensitively. If set to &#x60;true&#x60; **variableValue** and **variablevalue** are treated as equal. (optional)</param>
        /// <param name="variableScopeIdIn">Only include variable instances which belong to one of passed scope ids. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="deserializeValues">Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note:** While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine. (optional)</param>
        /// <returns>List&lt;VariableInstanceDto&gt;</returns>
        public List<VariableInstanceDto> GetVariableInstances(string variableName = default(string), string variableNameLike = default(string), string processInstanceIdIn = default(string), string executionIdIn = default(string), string caseInstanceIdIn = default(string), string caseExecutionIdIn = default(string), string taskIdIn = default(string), string batchIdIn = default(string), string activityInstanceIdIn = default(string), string tenantIdIn = default(string), string variableValues = default(string), bool? variableNamesIgnoreCase = default(bool?), bool? variableValuesIgnoreCase = default(bool?), string variableScopeIdIn = default(string), string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?), bool? deserializeValues = default(bool?))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<List<VariableInstanceDto>> localVarResponse = GetVariableInstancesWithHttpInfo(variableName, variableNameLike, processInstanceIdIn, executionIdIn, caseInstanceIdIn, caseExecutionIdIn, taskIdIn, batchIdIn, activityInstanceIdIn, tenantIdIn, variableValues, variableNamesIgnoreCase, variableValuesIgnoreCase, variableScopeIdIn, sortBy, sortOrder, firstResult, maxResults, deserializeValues);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Variable Instances Query for variable instances that fulfill given parameters. Parameters may be the properties of variable instances, such as the name or type. The size of the result set can be retrieved by using the [Get Variable Instance Count](https://docs.camunda.org/manual/7.16/reference/rest/variable-instance/get-query-count/) method.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variableName">Filter by variable instance name. (optional)</param>
        /// <param name="variableNameLike">Filter by the variable instance name. The parameter can include the wildcard &#x60;%&#x60; to express like-strategy such as: starts with (&#x60;%&#x60;name), ends with (name&#x60;%&#x60;) or contains (&#x60;%&#x60;name&#x60;%&#x60;). (optional)</param>
        /// <param name="processInstanceIdIn">Only include variable instances which belong to one of the passed and comma-separated process instance ids. (optional)</param>
        /// <param name="executionIdIn">Only include variable instances which belong to one of the passed and comma-separated execution ids. (optional)</param>
        /// <param name="caseInstanceIdIn">Only include variable instances which belong to one of the passed and comma-separated case instance ids. (optional)</param>
        /// <param name="caseExecutionIdIn">Only include variable instances which belong to one of the passed and comma-separated case execution ids. (optional)</param>
        /// <param name="taskIdIn">Only include variable instances which belong to one of the passed and comma-separated task ids. (optional)</param>
        /// <param name="batchIdIn">Only include variable instances which belong to one of the passed and comma-separated batch ids. (optional)</param>
        /// <param name="activityInstanceIdIn">Only include variable instances which belong to one of the passed and comma-separated activity instance ids. (optional)</param>
        /// <param name="tenantIdIn">Only include variable instances which belong to one of the passed and comma-separated tenant ids. (optional)</param>
        /// <param name="variableValues">Only include variable instances that have the certain values. Value filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value.  **Note:** Values are always treated as &#x60;String&#x60; objects on server side.  Valid operator values are: &#x60;eq&#x60; - equal to; &#x60;neq&#x60; - not equal to; &#x60;gt&#x60; - greater than; &#x60;gteq&#x60; - greater than or equal to; &#x60;lt&#x60; - lower than; &#x60;lteq&#x60; - lower than or equal to; &#x60;like&#x60;. &#x60;key&#x60; and &#x60;value&#x60; may not contain underscore or comma characters. (optional)</param>
        /// <param name="variableNamesIgnoreCase">Match all variable names provided in &#x60;variableValues&#x60; case-insensitively. If set to &#x60;true&#x60; **variableName** and **variablename** are treated as equal. (optional)</param>
        /// <param name="variableValuesIgnoreCase">Match all variable values provided in &#x60;variableValues&#x60; case-insensitively. If set to &#x60;true&#x60; **variableValue** and **variablevalue** are treated as equal. (optional)</param>
        /// <param name="variableScopeIdIn">Only include variable instances which belong to one of passed scope ids. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="deserializeValues">Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note:** While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine. (optional)</param>
        /// <returns>ApiResponse of List&lt;VariableInstanceDto&gt;</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<List<VariableInstanceDto>> GetVariableInstancesWithHttpInfo(string variableName = default(string), string variableNameLike = default(string), string processInstanceIdIn = default(string), string executionIdIn = default(string), string caseInstanceIdIn = default(string), string caseExecutionIdIn = default(string), string taskIdIn = default(string), string batchIdIn = default(string), string activityInstanceIdIn = default(string), string tenantIdIn = default(string), string variableValues = default(string), bool? variableNamesIgnoreCase = default(bool?), bool? variableValuesIgnoreCase = default(bool?), string variableScopeIdIn = default(string), string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?), bool? deserializeValues = default(bool?))
        {
            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (variableName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "variableName", variableName));
            }
            if (variableNameLike != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "variableNameLike", variableNameLike));
            }
            if (processInstanceIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processInstanceIdIn", processInstanceIdIn));
            }
            if (executionIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "executionIdIn", executionIdIn));
            }
            if (caseInstanceIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "caseInstanceIdIn", caseInstanceIdIn));
            }
            if (caseExecutionIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "caseExecutionIdIn", caseExecutionIdIn));
            }
            if (taskIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "taskIdIn", taskIdIn));
            }
            if (batchIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "batchIdIn", batchIdIn));
            }
            if (activityInstanceIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "activityInstanceIdIn", activityInstanceIdIn));
            }
            if (tenantIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "tenantIdIn", tenantIdIn));
            }
            if (variableValues != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "variableValues", variableValues));
            }
            if (variableNamesIgnoreCase != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "variableNamesIgnoreCase", variableNamesIgnoreCase));
            }
            if (variableValuesIgnoreCase != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "variableValuesIgnoreCase", variableValuesIgnoreCase));
            }
            if (variableScopeIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "variableScopeIdIn", variableScopeIdIn));
            }
            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "sortBy", sortBy));
            }
            if (sortOrder != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "sortOrder", sortOrder));
            }
            if (firstResult != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "firstResult", firstResult));
            }
            if (maxResults != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "maxResults", maxResults));
            }
            if (deserializeValues != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "deserializeValues", deserializeValues));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<VariableInstanceDto>>("/variable-instance", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetVariableInstances", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Variable Instances Query for variable instances that fulfill given parameters. Parameters may be the properties of variable instances, such as the name or type. The size of the result set can be retrieved by using the [Get Variable Instance Count](https://docs.camunda.org/manual/7.16/reference/rest/variable-instance/get-query-count/) method.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variableName">Filter by variable instance name. (optional)</param>
        /// <param name="variableNameLike">Filter by the variable instance name. The parameter can include the wildcard &#x60;%&#x60; to express like-strategy such as: starts with (&#x60;%&#x60;name), ends with (name&#x60;%&#x60;) or contains (&#x60;%&#x60;name&#x60;%&#x60;). (optional)</param>
        /// <param name="processInstanceIdIn">Only include variable instances which belong to one of the passed and comma-separated process instance ids. (optional)</param>
        /// <param name="executionIdIn">Only include variable instances which belong to one of the passed and comma-separated execution ids. (optional)</param>
        /// <param name="caseInstanceIdIn">Only include variable instances which belong to one of the passed and comma-separated case instance ids. (optional)</param>
        /// <param name="caseExecutionIdIn">Only include variable instances which belong to one of the passed and comma-separated case execution ids. (optional)</param>
        /// <param name="taskIdIn">Only include variable instances which belong to one of the passed and comma-separated task ids. (optional)</param>
        /// <param name="batchIdIn">Only include variable instances which belong to one of the passed and comma-separated batch ids. (optional)</param>
        /// <param name="activityInstanceIdIn">Only include variable instances which belong to one of the passed and comma-separated activity instance ids. (optional)</param>
        /// <param name="tenantIdIn">Only include variable instances which belong to one of the passed and comma-separated tenant ids. (optional)</param>
        /// <param name="variableValues">Only include variable instances that have the certain values. Value filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value.  **Note:** Values are always treated as &#x60;String&#x60; objects on server side.  Valid operator values are: &#x60;eq&#x60; - equal to; &#x60;neq&#x60; - not equal to; &#x60;gt&#x60; - greater than; &#x60;gteq&#x60; - greater than or equal to; &#x60;lt&#x60; - lower than; &#x60;lteq&#x60; - lower than or equal to; &#x60;like&#x60;. &#x60;key&#x60; and &#x60;value&#x60; may not contain underscore or comma characters. (optional)</param>
        /// <param name="variableNamesIgnoreCase">Match all variable names provided in &#x60;variableValues&#x60; case-insensitively. If set to &#x60;true&#x60; **variableName** and **variablename** are treated as equal. (optional)</param>
        /// <param name="variableValuesIgnoreCase">Match all variable values provided in &#x60;variableValues&#x60; case-insensitively. If set to &#x60;true&#x60; **variableValue** and **variablevalue** are treated as equal. (optional)</param>
        /// <param name="variableScopeIdIn">Only include variable instances which belong to one of passed scope ids. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="deserializeValues">Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note:** While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;VariableInstanceDto&gt;</returns>
        public async System.Threading.Tasks.Task<List<VariableInstanceDto>> GetVariableInstancesAsync(string variableName = default(string), string variableNameLike = default(string), string processInstanceIdIn = default(string), string executionIdIn = default(string), string caseInstanceIdIn = default(string), string caseExecutionIdIn = default(string), string taskIdIn = default(string), string batchIdIn = default(string), string activityInstanceIdIn = default(string), string tenantIdIn = default(string), string variableValues = default(string), bool? variableNamesIgnoreCase = default(bool?), bool? variableValuesIgnoreCase = default(bool?), string variableScopeIdIn = default(string), string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?), bool? deserializeValues = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<List<VariableInstanceDto>> localVarResponse = await GetVariableInstancesWithHttpInfoAsync(variableName, variableNameLike, processInstanceIdIn, executionIdIn, caseInstanceIdIn, caseExecutionIdIn, taskIdIn, batchIdIn, activityInstanceIdIn, tenantIdIn, variableValues, variableNamesIgnoreCase, variableValuesIgnoreCase, variableScopeIdIn, sortBy, sortOrder, firstResult, maxResults, deserializeValues, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Variable Instances Query for variable instances that fulfill given parameters. Parameters may be the properties of variable instances, such as the name or type. The size of the result set can be retrieved by using the [Get Variable Instance Count](https://docs.camunda.org/manual/7.16/reference/rest/variable-instance/get-query-count/) method.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variableName">Filter by variable instance name. (optional)</param>
        /// <param name="variableNameLike">Filter by the variable instance name. The parameter can include the wildcard &#x60;%&#x60; to express like-strategy such as: starts with (&#x60;%&#x60;name), ends with (name&#x60;%&#x60;) or contains (&#x60;%&#x60;name&#x60;%&#x60;). (optional)</param>
        /// <param name="processInstanceIdIn">Only include variable instances which belong to one of the passed and comma-separated process instance ids. (optional)</param>
        /// <param name="executionIdIn">Only include variable instances which belong to one of the passed and comma-separated execution ids. (optional)</param>
        /// <param name="caseInstanceIdIn">Only include variable instances which belong to one of the passed and comma-separated case instance ids. (optional)</param>
        /// <param name="caseExecutionIdIn">Only include variable instances which belong to one of the passed and comma-separated case execution ids. (optional)</param>
        /// <param name="taskIdIn">Only include variable instances which belong to one of the passed and comma-separated task ids. (optional)</param>
        /// <param name="batchIdIn">Only include variable instances which belong to one of the passed and comma-separated batch ids. (optional)</param>
        /// <param name="activityInstanceIdIn">Only include variable instances which belong to one of the passed and comma-separated activity instance ids. (optional)</param>
        /// <param name="tenantIdIn">Only include variable instances which belong to one of the passed and comma-separated tenant ids. (optional)</param>
        /// <param name="variableValues">Only include variable instances that have the certain values. Value filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value.  **Note:** Values are always treated as &#x60;String&#x60; objects on server side.  Valid operator values are: &#x60;eq&#x60; - equal to; &#x60;neq&#x60; - not equal to; &#x60;gt&#x60; - greater than; &#x60;gteq&#x60; - greater than or equal to; &#x60;lt&#x60; - lower than; &#x60;lteq&#x60; - lower than or equal to; &#x60;like&#x60;. &#x60;key&#x60; and &#x60;value&#x60; may not contain underscore or comma characters. (optional)</param>
        /// <param name="variableNamesIgnoreCase">Match all variable names provided in &#x60;variableValues&#x60; case-insensitively. If set to &#x60;true&#x60; **variableName** and **variablename** are treated as equal. (optional)</param>
        /// <param name="variableValuesIgnoreCase">Match all variable values provided in &#x60;variableValues&#x60; case-insensitively. If set to &#x60;true&#x60; **variableValue** and **variablevalue** are treated as equal. (optional)</param>
        /// <param name="variableScopeIdIn">Only include variable instances which belong to one of passed scope ids. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="deserializeValues">Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note:** While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;VariableInstanceDto&gt;)</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<List<VariableInstanceDto>>> GetVariableInstancesWithHttpInfoAsync(string variableName = default(string), string variableNameLike = default(string), string processInstanceIdIn = default(string), string executionIdIn = default(string), string caseInstanceIdIn = default(string), string caseExecutionIdIn = default(string), string taskIdIn = default(string), string batchIdIn = default(string), string activityInstanceIdIn = default(string), string tenantIdIn = default(string), string variableValues = default(string), bool? variableNamesIgnoreCase = default(bool?), bool? variableValuesIgnoreCase = default(bool?), string variableScopeIdIn = default(string), string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?), bool? deserializeValues = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (variableName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "variableName", variableName));
            }
            if (variableNameLike != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "variableNameLike", variableNameLike));
            }
            if (processInstanceIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processInstanceIdIn", processInstanceIdIn));
            }
            if (executionIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "executionIdIn", executionIdIn));
            }
            if (caseInstanceIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "caseInstanceIdIn", caseInstanceIdIn));
            }
            if (caseExecutionIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "caseExecutionIdIn", caseExecutionIdIn));
            }
            if (taskIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "taskIdIn", taskIdIn));
            }
            if (batchIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "batchIdIn", batchIdIn));
            }
            if (activityInstanceIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "activityInstanceIdIn", activityInstanceIdIn));
            }
            if (tenantIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "tenantIdIn", tenantIdIn));
            }
            if (variableValues != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "variableValues", variableValues));
            }
            if (variableNamesIgnoreCase != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "variableNamesIgnoreCase", variableNamesIgnoreCase));
            }
            if (variableValuesIgnoreCase != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "variableValuesIgnoreCase", variableValuesIgnoreCase));
            }
            if (variableScopeIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "variableScopeIdIn", variableScopeIdIn));
            }
            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "sortBy", sortBy));
            }
            if (sortOrder != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "sortOrder", sortOrder));
            }
            if (firstResult != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "firstResult", firstResult));
            }
            if (maxResults != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "maxResults", maxResults));
            }
            if (deserializeValues != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "deserializeValues", deserializeValues));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<VariableInstanceDto>>("/variable-instance", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetVariableInstances", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Variable Instance Count Query for the number of variable instances that fulfill given parameters. Takes the same parameters as the [Get Variable Instances](https://docs.camunda.org/manual/7.16/reference/rest/variable-instance/get-query/) method.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variableName">Filter by variable instance name. (optional)</param>
        /// <param name="variableNameLike">Filter by the variable instance name. The parameter can include the wildcard &#x60;%&#x60; to express like-strategy such as: starts with (&#x60;%&#x60;name), ends with (name&#x60;%&#x60;) or contains (&#x60;%&#x60;name&#x60;%&#x60;). (optional)</param>
        /// <param name="processInstanceIdIn">Only include variable instances which belong to one of the passed and comma-separated process instance ids. (optional)</param>
        /// <param name="executionIdIn">Only include variable instances which belong to one of the passed and comma-separated execution ids. (optional)</param>
        /// <param name="caseInstanceIdIn">Only include variable instances which belong to one of the passed and comma-separated case instance ids. (optional)</param>
        /// <param name="caseExecutionIdIn">Only include variable instances which belong to one of the passed and comma-separated case execution ids. (optional)</param>
        /// <param name="taskIdIn">Only include variable instances which belong to one of the passed and comma-separated task ids. (optional)</param>
        /// <param name="batchIdIn">Only include variable instances which belong to one of the passed and comma-separated batch ids. (optional)</param>
        /// <param name="activityInstanceIdIn">Only include variable instances which belong to one of the passed and comma-separated activity instance ids. (optional)</param>
        /// <param name="tenantIdIn">Only include variable instances which belong to one of the passed and comma-separated tenant ids. (optional)</param>
        /// <param name="variableValues">Only include variable instances that have the certain values. Value filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value.  **Note:** Values are always treated as &#x60;String&#x60; objects on server side.  Valid operator values are: &#x60;eq&#x60; - equal to; &#x60;neq&#x60; - not equal to; &#x60;gt&#x60; - greater than; &#x60;gteq&#x60; - greater than or equal to; &#x60;lt&#x60; - lower than; &#x60;lteq&#x60; - lower than or equal to; &#x60;like&#x60;. &#x60;key&#x60; and &#x60;value&#x60; may not contain underscore or comma characters. (optional)</param>
        /// <param name="variableNamesIgnoreCase">Match all variable names provided in &#x60;variableValues&#x60; case-insensitively. If set to &#x60;true&#x60; **variableName** and **variablename** are treated as equal. (optional)</param>
        /// <param name="variableValuesIgnoreCase">Match all variable values provided in &#x60;variableValues&#x60; case-insensitively. If set to &#x60;true&#x60; **variableValue** and **variablevalue** are treated as equal. (optional)</param>
        /// <param name="variableScopeIdIn">Only include variable instances which belong to one of passed scope ids. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <returns>CountResultDto</returns>
        public CountResultDto GetVariableInstancesCount(string variableName = default(string), string variableNameLike = default(string), string processInstanceIdIn = default(string), string executionIdIn = default(string), string caseInstanceIdIn = default(string), string caseExecutionIdIn = default(string), string taskIdIn = default(string), string batchIdIn = default(string), string activityInstanceIdIn = default(string), string tenantIdIn = default(string), string variableValues = default(string), bool? variableNamesIgnoreCase = default(bool?), bool? variableValuesIgnoreCase = default(bool?), string variableScopeIdIn = default(string), string sortBy = default(string), string sortOrder = default(string))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<CountResultDto> localVarResponse = GetVariableInstancesCountWithHttpInfo(variableName, variableNameLike, processInstanceIdIn, executionIdIn, caseInstanceIdIn, caseExecutionIdIn, taskIdIn, batchIdIn, activityInstanceIdIn, tenantIdIn, variableValues, variableNamesIgnoreCase, variableValuesIgnoreCase, variableScopeIdIn, sortBy, sortOrder);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Variable Instance Count Query for the number of variable instances that fulfill given parameters. Takes the same parameters as the [Get Variable Instances](https://docs.camunda.org/manual/7.16/reference/rest/variable-instance/get-query/) method.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variableName">Filter by variable instance name. (optional)</param>
        /// <param name="variableNameLike">Filter by the variable instance name. The parameter can include the wildcard &#x60;%&#x60; to express like-strategy such as: starts with (&#x60;%&#x60;name), ends with (name&#x60;%&#x60;) or contains (&#x60;%&#x60;name&#x60;%&#x60;). (optional)</param>
        /// <param name="processInstanceIdIn">Only include variable instances which belong to one of the passed and comma-separated process instance ids. (optional)</param>
        /// <param name="executionIdIn">Only include variable instances which belong to one of the passed and comma-separated execution ids. (optional)</param>
        /// <param name="caseInstanceIdIn">Only include variable instances which belong to one of the passed and comma-separated case instance ids. (optional)</param>
        /// <param name="caseExecutionIdIn">Only include variable instances which belong to one of the passed and comma-separated case execution ids. (optional)</param>
        /// <param name="taskIdIn">Only include variable instances which belong to one of the passed and comma-separated task ids. (optional)</param>
        /// <param name="batchIdIn">Only include variable instances which belong to one of the passed and comma-separated batch ids. (optional)</param>
        /// <param name="activityInstanceIdIn">Only include variable instances which belong to one of the passed and comma-separated activity instance ids. (optional)</param>
        /// <param name="tenantIdIn">Only include variable instances which belong to one of the passed and comma-separated tenant ids. (optional)</param>
        /// <param name="variableValues">Only include variable instances that have the certain values. Value filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value.  **Note:** Values are always treated as &#x60;String&#x60; objects on server side.  Valid operator values are: &#x60;eq&#x60; - equal to; &#x60;neq&#x60; - not equal to; &#x60;gt&#x60; - greater than; &#x60;gteq&#x60; - greater than or equal to; &#x60;lt&#x60; - lower than; &#x60;lteq&#x60; - lower than or equal to; &#x60;like&#x60;. &#x60;key&#x60; and &#x60;value&#x60; may not contain underscore or comma characters. (optional)</param>
        /// <param name="variableNamesIgnoreCase">Match all variable names provided in &#x60;variableValues&#x60; case-insensitively. If set to &#x60;true&#x60; **variableName** and **variablename** are treated as equal. (optional)</param>
        /// <param name="variableValuesIgnoreCase">Match all variable values provided in &#x60;variableValues&#x60; case-insensitively. If set to &#x60;true&#x60; **variableValue** and **variablevalue** are treated as equal. (optional)</param>
        /// <param name="variableScopeIdIn">Only include variable instances which belong to one of passed scope ids. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <returns>ApiResponse of CountResultDto</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<CountResultDto> GetVariableInstancesCountWithHttpInfo(string variableName = default(string), string variableNameLike = default(string), string processInstanceIdIn = default(string), string executionIdIn = default(string), string caseInstanceIdIn = default(string), string caseExecutionIdIn = default(string), string taskIdIn = default(string), string batchIdIn = default(string), string activityInstanceIdIn = default(string), string tenantIdIn = default(string), string variableValues = default(string), bool? variableNamesIgnoreCase = default(bool?), bool? variableValuesIgnoreCase = default(bool?), string variableScopeIdIn = default(string), string sortBy = default(string), string sortOrder = default(string))
        {
            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (variableName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "variableName", variableName));
            }
            if (variableNameLike != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "variableNameLike", variableNameLike));
            }
            if (processInstanceIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processInstanceIdIn", processInstanceIdIn));
            }
            if (executionIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "executionIdIn", executionIdIn));
            }
            if (caseInstanceIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "caseInstanceIdIn", caseInstanceIdIn));
            }
            if (caseExecutionIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "caseExecutionIdIn", caseExecutionIdIn));
            }
            if (taskIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "taskIdIn", taskIdIn));
            }
            if (batchIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "batchIdIn", batchIdIn));
            }
            if (activityInstanceIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "activityInstanceIdIn", activityInstanceIdIn));
            }
            if (tenantIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "tenantIdIn", tenantIdIn));
            }
            if (variableValues != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "variableValues", variableValues));
            }
            if (variableNamesIgnoreCase != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "variableNamesIgnoreCase", variableNamesIgnoreCase));
            }
            if (variableValuesIgnoreCase != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "variableValuesIgnoreCase", variableValuesIgnoreCase));
            }
            if (variableScopeIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "variableScopeIdIn", variableScopeIdIn));
            }
            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "sortBy", sortBy));
            }
            if (sortOrder != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "sortOrder", sortOrder));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<CountResultDto>("/variable-instance/count", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetVariableInstancesCount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Variable Instance Count Query for the number of variable instances that fulfill given parameters. Takes the same parameters as the [Get Variable Instances](https://docs.camunda.org/manual/7.16/reference/rest/variable-instance/get-query/) method.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variableName">Filter by variable instance name. (optional)</param>
        /// <param name="variableNameLike">Filter by the variable instance name. The parameter can include the wildcard &#x60;%&#x60; to express like-strategy such as: starts with (&#x60;%&#x60;name), ends with (name&#x60;%&#x60;) or contains (&#x60;%&#x60;name&#x60;%&#x60;). (optional)</param>
        /// <param name="processInstanceIdIn">Only include variable instances which belong to one of the passed and comma-separated process instance ids. (optional)</param>
        /// <param name="executionIdIn">Only include variable instances which belong to one of the passed and comma-separated execution ids. (optional)</param>
        /// <param name="caseInstanceIdIn">Only include variable instances which belong to one of the passed and comma-separated case instance ids. (optional)</param>
        /// <param name="caseExecutionIdIn">Only include variable instances which belong to one of the passed and comma-separated case execution ids. (optional)</param>
        /// <param name="taskIdIn">Only include variable instances which belong to one of the passed and comma-separated task ids. (optional)</param>
        /// <param name="batchIdIn">Only include variable instances which belong to one of the passed and comma-separated batch ids. (optional)</param>
        /// <param name="activityInstanceIdIn">Only include variable instances which belong to one of the passed and comma-separated activity instance ids. (optional)</param>
        /// <param name="tenantIdIn">Only include variable instances which belong to one of the passed and comma-separated tenant ids. (optional)</param>
        /// <param name="variableValues">Only include variable instances that have the certain values. Value filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value.  **Note:** Values are always treated as &#x60;String&#x60; objects on server side.  Valid operator values are: &#x60;eq&#x60; - equal to; &#x60;neq&#x60; - not equal to; &#x60;gt&#x60; - greater than; &#x60;gteq&#x60; - greater than or equal to; &#x60;lt&#x60; - lower than; &#x60;lteq&#x60; - lower than or equal to; &#x60;like&#x60;. &#x60;key&#x60; and &#x60;value&#x60; may not contain underscore or comma characters. (optional)</param>
        /// <param name="variableNamesIgnoreCase">Match all variable names provided in &#x60;variableValues&#x60; case-insensitively. If set to &#x60;true&#x60; **variableName** and **variablename** are treated as equal. (optional)</param>
        /// <param name="variableValuesIgnoreCase">Match all variable values provided in &#x60;variableValues&#x60; case-insensitively. If set to &#x60;true&#x60; **variableValue** and **variablevalue** are treated as equal. (optional)</param>
        /// <param name="variableScopeIdIn">Only include variable instances which belong to one of passed scope ids. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CountResultDto</returns>
        public async System.Threading.Tasks.Task<CountResultDto> GetVariableInstancesCountAsync(string variableName = default(string), string variableNameLike = default(string), string processInstanceIdIn = default(string), string executionIdIn = default(string), string caseInstanceIdIn = default(string), string caseExecutionIdIn = default(string), string taskIdIn = default(string), string batchIdIn = default(string), string activityInstanceIdIn = default(string), string tenantIdIn = default(string), string variableValues = default(string), bool? variableNamesIgnoreCase = default(bool?), bool? variableValuesIgnoreCase = default(bool?), string variableScopeIdIn = default(string), string sortBy = default(string), string sortOrder = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<CountResultDto> localVarResponse = await GetVariableInstancesCountWithHttpInfoAsync(variableName, variableNameLike, processInstanceIdIn, executionIdIn, caseInstanceIdIn, caseExecutionIdIn, taskIdIn, batchIdIn, activityInstanceIdIn, tenantIdIn, variableValues, variableNamesIgnoreCase, variableValuesIgnoreCase, variableScopeIdIn, sortBy, sortOrder, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Variable Instance Count Query for the number of variable instances that fulfill given parameters. Takes the same parameters as the [Get Variable Instances](https://docs.camunda.org/manual/7.16/reference/rest/variable-instance/get-query/) method.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variableName">Filter by variable instance name. (optional)</param>
        /// <param name="variableNameLike">Filter by the variable instance name. The parameter can include the wildcard &#x60;%&#x60; to express like-strategy such as: starts with (&#x60;%&#x60;name), ends with (name&#x60;%&#x60;) or contains (&#x60;%&#x60;name&#x60;%&#x60;). (optional)</param>
        /// <param name="processInstanceIdIn">Only include variable instances which belong to one of the passed and comma-separated process instance ids. (optional)</param>
        /// <param name="executionIdIn">Only include variable instances which belong to one of the passed and comma-separated execution ids. (optional)</param>
        /// <param name="caseInstanceIdIn">Only include variable instances which belong to one of the passed and comma-separated case instance ids. (optional)</param>
        /// <param name="caseExecutionIdIn">Only include variable instances which belong to one of the passed and comma-separated case execution ids. (optional)</param>
        /// <param name="taskIdIn">Only include variable instances which belong to one of the passed and comma-separated task ids. (optional)</param>
        /// <param name="batchIdIn">Only include variable instances which belong to one of the passed and comma-separated batch ids. (optional)</param>
        /// <param name="activityInstanceIdIn">Only include variable instances which belong to one of the passed and comma-separated activity instance ids. (optional)</param>
        /// <param name="tenantIdIn">Only include variable instances which belong to one of the passed and comma-separated tenant ids. (optional)</param>
        /// <param name="variableValues">Only include variable instances that have the certain values. Value filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value.  **Note:** Values are always treated as &#x60;String&#x60; objects on server side.  Valid operator values are: &#x60;eq&#x60; - equal to; &#x60;neq&#x60; - not equal to; &#x60;gt&#x60; - greater than; &#x60;gteq&#x60; - greater than or equal to; &#x60;lt&#x60; - lower than; &#x60;lteq&#x60; - lower than or equal to; &#x60;like&#x60;. &#x60;key&#x60; and &#x60;value&#x60; may not contain underscore or comma characters. (optional)</param>
        /// <param name="variableNamesIgnoreCase">Match all variable names provided in &#x60;variableValues&#x60; case-insensitively. If set to &#x60;true&#x60; **variableName** and **variablename** are treated as equal. (optional)</param>
        /// <param name="variableValuesIgnoreCase">Match all variable values provided in &#x60;variableValues&#x60; case-insensitively. If set to &#x60;true&#x60; **variableValue** and **variablevalue** are treated as equal. (optional)</param>
        /// <param name="variableScopeIdIn">Only include variable instances which belong to one of passed scope ids. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CountResultDto)</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<CountResultDto>> GetVariableInstancesCountWithHttpInfoAsync(string variableName = default(string), string variableNameLike = default(string), string processInstanceIdIn = default(string), string executionIdIn = default(string), string caseInstanceIdIn = default(string), string caseExecutionIdIn = default(string), string taskIdIn = default(string), string batchIdIn = default(string), string activityInstanceIdIn = default(string), string tenantIdIn = default(string), string variableValues = default(string), bool? variableNamesIgnoreCase = default(bool?), bool? variableValuesIgnoreCase = default(bool?), string variableScopeIdIn = default(string), string sortBy = default(string), string sortOrder = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (variableName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "variableName", variableName));
            }
            if (variableNameLike != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "variableNameLike", variableNameLike));
            }
            if (processInstanceIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processInstanceIdIn", processInstanceIdIn));
            }
            if (executionIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "executionIdIn", executionIdIn));
            }
            if (caseInstanceIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "caseInstanceIdIn", caseInstanceIdIn));
            }
            if (caseExecutionIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "caseExecutionIdIn", caseExecutionIdIn));
            }
            if (taskIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "taskIdIn", taskIdIn));
            }
            if (batchIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "batchIdIn", batchIdIn));
            }
            if (activityInstanceIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "activityInstanceIdIn", activityInstanceIdIn));
            }
            if (tenantIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "tenantIdIn", tenantIdIn));
            }
            if (variableValues != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "variableValues", variableValues));
            }
            if (variableNamesIgnoreCase != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "variableNamesIgnoreCase", variableNamesIgnoreCase));
            }
            if (variableValuesIgnoreCase != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "variableValuesIgnoreCase", variableValuesIgnoreCase));
            }
            if (variableScopeIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "variableScopeIdIn", variableScopeIdIn));
            }
            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "sortBy", sortBy));
            }
            if (sortOrder != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "sortOrder", sortOrder));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<CountResultDto>("/variable-instance/count", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetVariableInstancesCount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Variable Instances (POST) Query for variable instances that fulfill given parameters through a JSON object. This method is slightly more powerful than the [Get Variable Instances](https://docs.camunda.org/manual/7.16/reference/rest/variable- instance/get-query/) method because it allows filtering by multiple variable instances of types &#x60;String&#x60;, &#x60;Number&#x60; or &#x60;Boolean&#x60;.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="deserializeValues">Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note:** While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine. (optional)</param>
        /// <param name="variableInstanceQueryDto"> (optional)</param>
        /// <returns>List&lt;VariableInstanceDto&gt;</returns>
        public List<VariableInstanceDto> QueryVariableInstances(int? firstResult = default(int?), int? maxResults = default(int?), bool? deserializeValues = default(bool?), VariableInstanceQueryDto variableInstanceQueryDto = default(VariableInstanceQueryDto))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<List<VariableInstanceDto>> localVarResponse = QueryVariableInstancesWithHttpInfo(firstResult, maxResults, deserializeValues, variableInstanceQueryDto);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Variable Instances (POST) Query for variable instances that fulfill given parameters through a JSON object. This method is slightly more powerful than the [Get Variable Instances](https://docs.camunda.org/manual/7.16/reference/rest/variable- instance/get-query/) method because it allows filtering by multiple variable instances of types &#x60;String&#x60;, &#x60;Number&#x60; or &#x60;Boolean&#x60;.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="deserializeValues">Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note:** While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine. (optional)</param>
        /// <param name="variableInstanceQueryDto"> (optional)</param>
        /// <returns>ApiResponse of List&lt;VariableInstanceDto&gt;</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<List<VariableInstanceDto>> QueryVariableInstancesWithHttpInfo(int? firstResult = default(int?), int? maxResults = default(int?), bool? deserializeValues = default(bool?), VariableInstanceQueryDto variableInstanceQueryDto = default(VariableInstanceQueryDto))
        {
            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (firstResult != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "firstResult", firstResult));
            }
            if (maxResults != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "maxResults", maxResults));
            }
            if (deserializeValues != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "deserializeValues", deserializeValues));
            }
            localVarRequestOptions.Data = variableInstanceQueryDto;


            // make the HTTP request
            var localVarResponse = this.Client.Post<List<VariableInstanceDto>>("/variable-instance", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QueryVariableInstances", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Variable Instances (POST) Query for variable instances that fulfill given parameters through a JSON object. This method is slightly more powerful than the [Get Variable Instances](https://docs.camunda.org/manual/7.16/reference/rest/variable- instance/get-query/) method because it allows filtering by multiple variable instances of types &#x60;String&#x60;, &#x60;Number&#x60; or &#x60;Boolean&#x60;.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="deserializeValues">Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note:** While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine. (optional)</param>
        /// <param name="variableInstanceQueryDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;VariableInstanceDto&gt;</returns>
        public async System.Threading.Tasks.Task<List<VariableInstanceDto>> QueryVariableInstancesAsync(int? firstResult = default(int?), int? maxResults = default(int?), bool? deserializeValues = default(bool?), VariableInstanceQueryDto variableInstanceQueryDto = default(VariableInstanceQueryDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<List<VariableInstanceDto>> localVarResponse = await QueryVariableInstancesWithHttpInfoAsync(firstResult, maxResults, deserializeValues, variableInstanceQueryDto, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Variable Instances (POST) Query for variable instances that fulfill given parameters through a JSON object. This method is slightly more powerful than the [Get Variable Instances](https://docs.camunda.org/manual/7.16/reference/rest/variable- instance/get-query/) method because it allows filtering by multiple variable instances of types &#x60;String&#x60;, &#x60;Number&#x60; or &#x60;Boolean&#x60;.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="deserializeValues">Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note:** While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine. (optional)</param>
        /// <param name="variableInstanceQueryDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;VariableInstanceDto&gt;)</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<List<VariableInstanceDto>>> QueryVariableInstancesWithHttpInfoAsync(int? firstResult = default(int?), int? maxResults = default(int?), bool? deserializeValues = default(bool?), VariableInstanceQueryDto variableInstanceQueryDto = default(VariableInstanceQueryDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (firstResult != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "firstResult", firstResult));
            }
            if (maxResults != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "maxResults", maxResults));
            }
            if (deserializeValues != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "deserializeValues", deserializeValues));
            }
            localVarRequestOptions.Data = variableInstanceQueryDto;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<List<VariableInstanceDto>>("/variable-instance", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QueryVariableInstances", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Variable Instance Count (POST) Query for the number of variable instances that fulfill given parameters. This method takes the same message body as the [Get Variable Instances POST](https://docs.camunda.org/manual/7.16/reference/rest/variable- instance/post-query/) method and therefore it is slightly more powerful than the [Get Variable Instance Count](https://docs.camunda.org/manual/7.16/reference/rest/variable-instance/get-query-count/) method.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variableInstanceQueryDto"> (optional)</param>
        /// <returns>CountResultDto</returns>
        public CountResultDto QueryVariableInstancesCount(VariableInstanceQueryDto variableInstanceQueryDto = default(VariableInstanceQueryDto))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<CountResultDto> localVarResponse = QueryVariableInstancesCountWithHttpInfo(variableInstanceQueryDto);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Variable Instance Count (POST) Query for the number of variable instances that fulfill given parameters. This method takes the same message body as the [Get Variable Instances POST](https://docs.camunda.org/manual/7.16/reference/rest/variable- instance/post-query/) method and therefore it is slightly more powerful than the [Get Variable Instance Count](https://docs.camunda.org/manual/7.16/reference/rest/variable-instance/get-query-count/) method.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variableInstanceQueryDto"> (optional)</param>
        /// <returns>ApiResponse of CountResultDto</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<CountResultDto> QueryVariableInstancesCountWithHttpInfo(VariableInstanceQueryDto variableInstanceQueryDto = default(VariableInstanceQueryDto))
        {
            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = variableInstanceQueryDto;


            // make the HTTP request
            var localVarResponse = this.Client.Post<CountResultDto>("/variable-instance/count", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QueryVariableInstancesCount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Variable Instance Count (POST) Query for the number of variable instances that fulfill given parameters. This method takes the same message body as the [Get Variable Instances POST](https://docs.camunda.org/manual/7.16/reference/rest/variable- instance/post-query/) method and therefore it is slightly more powerful than the [Get Variable Instance Count](https://docs.camunda.org/manual/7.16/reference/rest/variable-instance/get-query-count/) method.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variableInstanceQueryDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CountResultDto</returns>
        public async System.Threading.Tasks.Task<CountResultDto> QueryVariableInstancesCountAsync(VariableInstanceQueryDto variableInstanceQueryDto = default(VariableInstanceQueryDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<CountResultDto> localVarResponse = await QueryVariableInstancesCountWithHttpInfoAsync(variableInstanceQueryDto, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Variable Instance Count (POST) Query for the number of variable instances that fulfill given parameters. This method takes the same message body as the [Get Variable Instances POST](https://docs.camunda.org/manual/7.16/reference/rest/variable- instance/post-query/) method and therefore it is slightly more powerful than the [Get Variable Instance Count](https://docs.camunda.org/manual/7.16/reference/rest/variable-instance/get-query-count/) method.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variableInstanceQueryDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CountResultDto)</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<CountResultDto>> QueryVariableInstancesCountWithHttpInfoAsync(VariableInstanceQueryDto variableInstanceQueryDto = default(VariableInstanceQueryDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = variableInstanceQueryDto;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<CountResultDto>("/variable-instance/count", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QueryVariableInstancesCount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
