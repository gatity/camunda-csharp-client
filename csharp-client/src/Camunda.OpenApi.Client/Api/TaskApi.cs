/*
 * Camunda Platform REST API
 *
 * OpenApi Spec for Camunda Platform REST API.
 *
 * The version of the OpenAPI document: 7.15.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Camunda.OpenApi.Client.Client;
using Camunda.OpenApi.Client.Model;

namespace Camunda.OpenApi.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITaskApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Claim
        /// </summary>
        /// <remarks>
        /// Claims a task for a specific user.  **Note:** The difference with the [Set Assignee](https://docs.camunda.org/manual/7.15/reference/rest/task/post-assignee/) method is that here a check is performed to see if the task already has a user assigned to it.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to claim.</param>
        /// <param name="userIdDto">Provide the id of the user that claims the task. (optional)</param>
        /// <returns></returns>
        void Claim(string id, UserIdDto userIdDto = default(UserIdDto));

        /// <summary>
        /// Claim
        /// </summary>
        /// <remarks>
        /// Claims a task for a specific user.  **Note:** The difference with the [Set Assignee](https://docs.camunda.org/manual/7.15/reference/rest/task/post-assignee/) method is that here a check is performed to see if the task already has a user assigned to it.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to claim.</param>
        /// <param name="userIdDto">Provide the id of the user that claims the task. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ClaimWithHttpInfo(string id, UserIdDto userIdDto = default(UserIdDto));
        /// <summary>
        /// Complete
        /// </summary>
        /// <remarks>
        /// Completes a task and updates process variables.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to complete.</param>
        /// <param name="completeTaskDto"> (optional)</param>
        /// <returns>Dictionary&lt;string, VariableValueDto&gt;</returns>
        Dictionary<string, VariableValueDto> Complete(string id, CompleteTaskDto completeTaskDto = default(CompleteTaskDto));

        /// <summary>
        /// Complete
        /// </summary>
        /// <remarks>
        /// Completes a task and updates process variables.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to complete.</param>
        /// <param name="completeTaskDto"> (optional)</param>
        /// <returns>ApiResponse of Dictionary&lt;string, VariableValueDto&gt;</returns>
        ApiResponse<Dictionary<string, VariableValueDto>> CompleteWithHttpInfo(string id, CompleteTaskDto completeTaskDto = default(CompleteTaskDto));
        /// <summary>
        /// Create
        /// </summary>
        /// <remarks>
        /// Creates a new task.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskDto"> (optional)</param>
        /// <returns></returns>
        void CreateTask(TaskDto taskDto = default(TaskDto));

        /// <summary>
        /// Create
        /// </summary>
        /// <remarks>
        /// Creates a new task.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskDto"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CreateTaskWithHttpInfo(TaskDto taskDto = default(TaskDto));
        /// <summary>
        /// Delegate
        /// </summary>
        /// <remarks>
        /// Delegates a task to another user.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to delegate.</param>
        /// <param name="userIdDto">Provide the id of the user that the task should be delegated to. (optional)</param>
        /// <returns></returns>
        void DelegateTask(string id, UserIdDto userIdDto = default(UserIdDto));

        /// <summary>
        /// Delegate
        /// </summary>
        /// <remarks>
        /// Delegates a task to another user.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to delegate.</param>
        /// <param name="userIdDto">Provide the id of the user that the task should be delegated to. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DelegateTaskWithHttpInfo(string id, UserIdDto userIdDto = default(UserIdDto));
        /// <summary>
        /// Delete
        /// </summary>
        /// <remarks>
        /// Removes a task by id.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to be removed.</param>
        /// <returns></returns>
        void DeleteTask(string id);

        /// <summary>
        /// Delete
        /// </summary>
        /// <remarks>
        /// Removes a task by id.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to be removed.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteTaskWithHttpInfo(string id);
        /// <summary>
        /// Get Deployed Form
        /// </summary>
        /// <remarks>
        /// Retrieves the deployed form that is referenced from a given task. For further information please refer to the [User Guide](https://docs.camunda.org/manual/7.15/user-guide/task-forms/#embedded-task-forms).
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to get the deployed form for.</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetDeployedForm(string id);

        /// <summary>
        /// Get Deployed Form
        /// </summary>
        /// <remarks>
        /// Retrieves the deployed form that is referenced from a given task. For further information please refer to the [User Guide](https://docs.camunda.org/manual/7.15/user-guide/task-forms/#embedded-task-forms).
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to get the deployed form for.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetDeployedFormWithHttpInfo(string id);
        /// <summary>
        /// Get Form Key
        /// </summary>
        /// <remarks>
        /// Retrieves the form key for a task. The form key corresponds to the &#x60;FormData#formKey&#x60; property in the engine. This key can be used to do task-specific form rendering in client applications. Additionally, the context path of the containing process application is returned.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to retrieve the form for.</param>
        /// <returns>FormDto</returns>
        FormDto GetForm(string id);

        /// <summary>
        /// Get Form Key
        /// </summary>
        /// <remarks>
        /// Retrieves the form key for a task. The form key corresponds to the &#x60;FormData#formKey&#x60; property in the engine. This key can be used to do task-specific form rendering in client applications. Additionally, the context path of the containing process application is returned.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to retrieve the form for.</param>
        /// <returns>ApiResponse of FormDto</returns>
        ApiResponse<FormDto> GetFormWithHttpInfo(string id);
        /// <summary>
        /// Get Task Form Variables
        /// </summary>
        /// <remarks>
        /// Retrieves the form variables for a task. The form variables take form data specified on the task into account. If form fields are defined, the variable types and default values of the form fields are taken into account.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to retrieve the variables for.</param>
        /// <param name="variableNames">A comma-separated list of variable names. Allows restricting the list of requested variables to the variable names in the list. It is best practice to restrict the list of variables to the variables actually required by the form in order to minimize fetching of data. If the query parameter is ommitted all variables are fetched. If the query parameter contains non-existent variable names, the variable names are ignored. (optional)</param>
        /// <param name="deserializeValues">Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default true).  If set to true, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](http://jackson.codehaus.org/) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to false, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  Note: While true is the default value for reasons of backward compatibility, we recommend setting this parameter to false when developing web applications that are independent of the Java process applications deployed to the engine. (optional, default to true)</param>
        /// <returns>Dictionary&lt;string, VariableValueDto&gt;</returns>
        Dictionary<string, VariableValueDto> GetFormVariables(string id, string variableNames = default(string), bool? deserializeValues = default(bool?));

        /// <summary>
        /// Get Task Form Variables
        /// </summary>
        /// <remarks>
        /// Retrieves the form variables for a task. The form variables take form data specified on the task into account. If form fields are defined, the variable types and default values of the form fields are taken into account.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to retrieve the variables for.</param>
        /// <param name="variableNames">A comma-separated list of variable names. Allows restricting the list of requested variables to the variable names in the list. It is best practice to restrict the list of variables to the variables actually required by the form in order to minimize fetching of data. If the query parameter is ommitted all variables are fetched. If the query parameter contains non-existent variable names, the variable names are ignored. (optional)</param>
        /// <param name="deserializeValues">Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default true).  If set to true, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](http://jackson.codehaus.org/) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to false, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  Note: While true is the default value for reasons of backward compatibility, we recommend setting this parameter to false when developing web applications that are independent of the Java process applications deployed to the engine. (optional, default to true)</param>
        /// <returns>ApiResponse of Dictionary&lt;string, VariableValueDto&gt;</returns>
        ApiResponse<Dictionary<string, VariableValueDto>> GetFormVariablesWithHttpInfo(string id, string variableNames = default(string), bool? deserializeValues = default(bool?));
        /// <summary>
        /// Get Rendered Form
        /// </summary>
        /// <remarks>
        /// Retrieves the rendered form for a task. This method can be used to get the HTML rendering of a [Generated Task Form](https://docs.camunda.org/manual/7.15/user-guide/task-forms/#generated-task-forms).
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to get the rendered form for.</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetRenderedForm(string id);

        /// <summary>
        /// Get Rendered Form
        /// </summary>
        /// <remarks>
        /// Retrieves the rendered form for a task. This method can be used to get the HTML rendering of a [Generated Task Form](https://docs.camunda.org/manual/7.15/user-guide/task-forms/#generated-task-forms).
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to get the rendered form for.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetRenderedFormWithHttpInfo(string id);
        /// <summary>
        /// Get
        /// </summary>
        /// <remarks>
        /// Retrieves a task by id.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to be retrieved.</param>
        /// <returns>TaskDto</returns>
        TaskDto GetTask(string id);

        /// <summary>
        /// Get
        /// </summary>
        /// <remarks>
        /// Retrieves a task by id.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to be retrieved.</param>
        /// <returns>ApiResponse of TaskDto</returns>
        ApiResponse<TaskDto> GetTaskWithHttpInfo(string id);
        /// <summary>
        /// Get List
        /// </summary>
        /// <remarks>
        /// Queries for tasks that fulfill a given filter. The size of the result set can be retrieved by using the Get Task Count method.  **Security Consideration:** There are several query parameters (such as assigneeExpression) for specifying an EL expression. These are disabled by default to prevent remote code execution. See the section on [security considerations](https://docs.camunda.org/manual/7.15/user-guide/process-engine/securing-custom-code/) for custom code in the user guide for details.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Restrict to task with the given id. (optional)</param>
        /// <param name="taskIdIn">Restrict to tasks with any of the given ids. (optional)</param>
        /// <param name="processInstanceId">Restrict to tasks that belong to process instances with the given id. (optional)</param>
        /// <param name="processInstanceIdIn">Restrict to tasks that belong to process instances with the given ids. (optional)</param>
        /// <param name="processInstanceBusinessKey">Restrict to tasks that belong to process instances with the given business key. (optional)</param>
        /// <param name="processInstanceBusinessKeyExpression">Restrict to tasks that belong to process instances with the given business key which  is described by an expression. See the  [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. (optional)</param>
        /// <param name="processInstanceBusinessKeyIn">Restrict to tasks that belong to process instances with one of the give business keys.  The keys need to be in a comma-separated list. (optional)</param>
        /// <param name="processInstanceBusinessKeyLike">Restrict to tasks that have a process instance business key that has the parameter  value as a substring. (optional)</param>
        /// <param name="processInstanceBusinessKeyLikeExpression">Restrict to tasks that have a process instance business key that has the parameter  value as a substring and is described by an expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions)  for more information on available functions. (optional)</param>
        /// <param name="processDefinitionId">Restrict to tasks that belong to a process definition with the given id. (optional)</param>
        /// <param name="processDefinitionKey">Restrict to tasks that belong to a process definition with the given key. (optional)</param>
        /// <param name="processDefinitionKeyIn">Restrict to tasks that belong to a process definition with one of the given keys. The  keys need to be in a comma-separated list. (optional)</param>
        /// <param name="processDefinitionName">Restrict to tasks that belong to a process definition with the given name. (optional)</param>
        /// <param name="processDefinitionNameLike">Restrict to tasks that have a process definition name that has the parameter value as  a substring. (optional)</param>
        /// <param name="executionId">Restrict to tasks that belong to an execution with the given id. (optional)</param>
        /// <param name="caseInstanceId">Restrict to tasks that belong to case instances with the given id. (optional)</param>
        /// <param name="caseInstanceBusinessKey">Restrict to tasks that belong to case instances with the given business key. (optional)</param>
        /// <param name="caseInstanceBusinessKeyLike">Restrict to tasks that have a case instance business key that has the parameter value  as a substring. (optional)</param>
        /// <param name="caseDefinitionId">Restrict to tasks that belong to a case definition with the given id. (optional)</param>
        /// <param name="caseDefinitionKey">Restrict to tasks that belong to a case definition with the given key. (optional)</param>
        /// <param name="caseDefinitionName">Restrict to tasks that belong to a case definition with the given name. (optional)</param>
        /// <param name="caseDefinitionNameLike">Restrict to tasks that have a case definition name that has the parameter value as a  substring. (optional)</param>
        /// <param name="caseExecutionId">Restrict to tasks that belong to a case execution with the given id. (optional)</param>
        /// <param name="activityInstanceIdIn">Only include tasks which belong to one of the passed and comma-separated activity  instance ids. (optional)</param>
        /// <param name="tenantIdIn">Only include tasks which belong to one of the passed and comma-separated  tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include tasks which belong to no tenant. Value may only be &#x60;true&#x60;,  as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="assignee">Restrict to tasks that the given user is assigned to. (optional)</param>
        /// <param name="assigneeExpression">Restrict to tasks that the user described by the given expression is assigned to.  See the  [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions)  for more information on available functions. (optional)</param>
        /// <param name="assigneeLike">Restrict to tasks that have an assignee that has the parameter  value as a substring. (optional)</param>
        /// <param name="assigneeLikeExpression">Restrict to tasks that have an assignee that has the parameter value described by the  given expression as a substring. See the  [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions)  for more information on available functions. (optional)</param>
        /// <param name="assigneeIn">Only include tasks which are assigned to one of the passed and  comma-separated user ids. (optional)</param>
        /// <param name="owner">Restrict to tasks that the given user owns. (optional)</param>
        /// <param name="ownerExpression">Restrict to tasks that the user described by the given expression owns. See the  [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions)  for more information on available functions. (optional)</param>
        /// <param name="candidateGroup">Only include tasks that are offered to the given group. (optional)</param>
        /// <param name="candidateGroupExpression">Only include tasks that are offered to the group described by the given expression.  See the  [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions)  for more information on available functions. (optional)</param>
        /// <param name="candidateUser">Only include tasks that are offered to the given user or to one of his groups. (optional)</param>
        /// <param name="candidateUserExpression">Only include tasks that are offered to the user described by the given expression.  See the  [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions)  for more information on available functions. (optional)</param>
        /// <param name="includeAssignedTasks">Also include tasks that are assigned to users in candidate queries. Default is to only  include tasks that are not assigned to any user if you query by candidate user or group(s). (optional, default to false)</param>
        /// <param name="involvedUser">Only include tasks that the given user is involved in. A user is involved in a task if  an identity link exists between task and user (e.g., the user is the assignee). (optional)</param>
        /// <param name="involvedUserExpression">Only include tasks that the user described by the given expression is involved in. A user is involved in a task if an identity link exists between task and user (e.g., the user is the assignee). See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. (optional)</param>
        /// <param name="assigned">If set to &#x60;true&#x60;, restricts the query to all tasks that are assigned. (optional, default to false)</param>
        /// <param name="unassigned">If set to &#x60;true&#x60;, restricts the query to all tasks that are unassigned. (optional, default to false)</param>
        /// <param name="taskDefinitionKey">Restrict to tasks that have the given key. (optional)</param>
        /// <param name="taskDefinitionKeyIn">Restrict to tasks that have one of the given keys. The keys need to be in a comma-separated list. (optional)</param>
        /// <param name="taskDefinitionKeyLike">Restrict to tasks that have a key that has the parameter value as a substring. (optional)</param>
        /// <param name="name">Restrict to tasks that have the given name. (optional)</param>
        /// <param name="nameNotEqual">Restrict to tasks that do not have the given name. (optional)</param>
        /// <param name="nameLike">Restrict to tasks that have a name with the given parameter value as substring. (optional)</param>
        /// <param name="nameNotLike">Restrict to tasks that do not have a name with the given parameter value as substring. (optional)</param>
        /// <param name="description">Restrict to tasks that have the given description. (optional)</param>
        /// <param name="descriptionLike">Restrict to tasks that have a description that has the parameter value as a substring. (optional)</param>
        /// <param name="priority">Restrict to tasks that have the given priority. (optional)</param>
        /// <param name="maxPriority">Restrict to tasks that have a lower or equal priority. (optional)</param>
        /// <param name="minPriority">Restrict to tasks that have a higher or equal priority. (optional)</param>
        /// <param name="dueDate">Restrict to tasks that are due on the given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.546+0200&#x60;. (optional)</param>
        /// <param name="dueDateExpression">Restrict to tasks that are due on the date described by the given expression. See the [User Guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)</param>
        /// <param name="dueAfter">Restrict to tasks that are due after the given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.435+0200&#x60;. (optional)</param>
        /// <param name="dueAfterExpression">Restrict to tasks that are due after the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)</param>
        /// <param name="dueBefore">Restrict to tasks that are due before the given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.243+0200&#x60;. (optional)</param>
        /// <param name="dueBeforeExpression">Restrict to tasks that are due before the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)</param>
        /// <param name="withoutDueDate">Only include tasks which have no due date. Value may only be &#x60;true&#x60;,  as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="followUpDate">Restrict to tasks that have a followUp date on the given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.342+0200&#x60;. (optional)</param>
        /// <param name="followUpDateExpression">Restrict to tasks that have a followUp date on the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)</param>
        /// <param name="followUpAfter">Restrict to tasks that have a followUp date after the given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.542+0200&#x60;. (optional)</param>
        /// <param name="followUpAfterExpression">Restrict to tasks that have a followUp date after the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)</param>
        /// <param name="followUpBefore">Restrict to tasks that have a followUp date before the given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.234+0200&#x60;. (optional)</param>
        /// <param name="followUpBeforeExpression">Restrict to tasks that have a followUp date before the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)</param>
        /// <param name="followUpBeforeOrNotExistent">Restrict to tasks that have no followUp date or a followUp date before the given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.432+0200&#x60;. The typical use case is to query all &#x60;active&#x60; tasks for a user for a given date. (optional)</param>
        /// <param name="followUpBeforeOrNotExistentExpression">Restrict to tasks that have no followUp date or a followUp date before the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)</param>
        /// <param name="createdOn">Restrict to tasks that were created on the given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.324+0200&#x60;. (optional)</param>
        /// <param name="createdOnExpression">Restrict to tasks that were created on the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)</param>
        /// <param name="createdAfter">Restrict to tasks that were created after the given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.342+0200&#x60;. (optional)</param>
        /// <param name="createdAfterExpression">Restrict to tasks that were created after the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)</param>
        /// <param name="createdBefore">Restrict to tasks that were created before the given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.332+0200&#x60;. (optional)</param>
        /// <param name="createdBeforeExpression">Restrict to tasks that were created before the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)</param>
        /// <param name="delegationState">Restrict to tasks that are in the given delegation state. Valid values are &#x60;PENDING&#x60; and &#x60;RESOLVED&#x60;. (optional)</param>
        /// <param name="candidateGroups">Restrict to tasks that are offered to any of the given candidate groups. Takes a comma-separated list of group names, so for example &#x60;developers,support,sales&#x60;. (optional)</param>
        /// <param name="candidateGroupsExpression">Restrict to tasks that are offered to any of the candidate groups described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to &#x60;java.util.List&#x60; of Strings. (optional)</param>
        /// <param name="withCandidateGroups">Only include tasks which have a candidate group. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="withoutCandidateGroups">Only include tasks which have no candidate group. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="withCandidateUsers">Only include tasks which have a candidate user. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="withoutCandidateUsers">Only include tasks which have no candidate users. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="active">Only include active tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="suspended">Only include suspended tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="taskVariables">Only include tasks that have variables with certain values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value.  **Note**: Values are always treated as String objects on server side.  Valid &#x60;operator&#x60; values are: &#x60;eq&#x60; - equal to; &#x60;neq&#x60; - not equal to; &#x60;gt&#x60; - greater than; &#x60;gteq&#x60; - greater than or equal to; &#x60;lt&#x60; - lower than; &#x60;lteq&#x60; - lower than or equal to; &#x60;like&#x60;. &#x60;key&#x60; and &#x60;value&#x60; may not contain underscore or comma characters. (optional)</param>
        /// <param name="processVariables">Only include tasks that belong to process instances that have variables with certain  values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value.  **Note**: Values are always treated as String objects on server side.  Valid &#x60;operator&#x60; values are: &#x60;eq&#x60; - equal to; &#x60;neq&#x60; - not equal to; &#x60;gt&#x60; - greater than; &#x60;gteq&#x60; - greater than or equal to; &#x60;lt&#x60; - lower than; &#x60;lteq&#x60; - lower than or equal to; &#x60;like&#x60;; &#x60;notLike&#x60;. &#x60;key&#x60; and &#x60;value&#x60; may not contain underscore or comma characters. (optional)</param>
        /// <param name="caseInstanceVariables">Only include tasks that belong to case instances that have variables with certain values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value.  **Note**: Values are always treated as String objects on server side.  Valid &#x60;operator&#x60; values are: &#x60;eq&#x60; - equal to; &#x60;neq&#x60; - not equal to; &#x60;gt&#x60; - greater than; &#x60;gteq&#x60; - greater than or equal to; &#x60;lt&#x60; - lower than; &#x60;lteq&#x60; - lower than or equal to; &#x60;like&#x60;. &#x60;key&#x60; and &#x60;value&#x60; may not contain underscore or comma characters. (optional)</param>
        /// <param name="variableNamesIgnoreCase">Match all variable names in this query case-insensitively. If set &#x60;variableName&#x60; and &#x60;variablename&#x60; are treated as equal. (optional, default to false)</param>
        /// <param name="variableValuesIgnoreCase">Match all variable values in this query case-insensitively. If set &#x60;variableValue&#x60; and &#x60;variablevalue&#x60; are treated as equal. (optional, default to false)</param>
        /// <param name="parentTaskId">Restrict query to all tasks that are sub tasks of the given task. Takes a task id. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <returns>List&lt;TaskDto&gt;</returns>
        List<TaskDto> GetTasks(string taskId = default(string), string taskIdIn = default(string), string processInstanceId = default(string), string processInstanceIdIn = default(string), string processInstanceBusinessKey = default(string), string processInstanceBusinessKeyExpression = default(string), string processInstanceBusinessKeyIn = default(string), string processInstanceBusinessKeyLike = default(string), string processInstanceBusinessKeyLikeExpression = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string processDefinitionKeyIn = default(string), string processDefinitionName = default(string), string processDefinitionNameLike = default(string), string executionId = default(string), string caseInstanceId = default(string), string caseInstanceBusinessKey = default(string), string caseInstanceBusinessKeyLike = default(string), string caseDefinitionId = default(string), string caseDefinitionKey = default(string), string caseDefinitionName = default(string), string caseDefinitionNameLike = default(string), string caseExecutionId = default(string), string activityInstanceIdIn = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), string assignee = default(string), string assigneeExpression = default(string), string assigneeLike = default(string), string assigneeLikeExpression = default(string), string assigneeIn = default(string), string owner = default(string), string ownerExpression = default(string), string candidateGroup = default(string), string candidateGroupExpression = default(string), string candidateUser = default(string), string candidateUserExpression = default(string), bool? includeAssignedTasks = default(bool?), string involvedUser = default(string), string involvedUserExpression = default(string), bool? assigned = default(bool?), bool? unassigned = default(bool?), string taskDefinitionKey = default(string), string taskDefinitionKeyIn = default(string), string taskDefinitionKeyLike = default(string), string name = default(string), string nameNotEqual = default(string), string nameLike = default(string), string nameNotLike = default(string), string description = default(string), string descriptionLike = default(string), int? priority = default(int?), int? maxPriority = default(int?), int? minPriority = default(int?), string dueDate = default(string), string dueDateExpression = default(string), string dueAfter = default(string), string dueAfterExpression = default(string), string dueBefore = default(string), string dueBeforeExpression = default(string), bool? withoutDueDate = default(bool?), string followUpDate = default(string), string followUpDateExpression = default(string), string followUpAfter = default(string), string followUpAfterExpression = default(string), string followUpBefore = default(string), string followUpBeforeExpression = default(string), string followUpBeforeOrNotExistent = default(string), string followUpBeforeOrNotExistentExpression = default(string), string createdOn = default(string), string createdOnExpression = default(string), string createdAfter = default(string), string createdAfterExpression = default(string), string createdBefore = default(string), string createdBeforeExpression = default(string), string delegationState = default(string), string candidateGroups = default(string), string candidateGroupsExpression = default(string), bool? withCandidateGroups = default(bool?), bool? withoutCandidateGroups = default(bool?), bool? withCandidateUsers = default(bool?), bool? withoutCandidateUsers = default(bool?), bool? active = default(bool?), bool? suspended = default(bool?), string taskVariables = default(string), string processVariables = default(string), string caseInstanceVariables = default(string), bool? variableNamesIgnoreCase = default(bool?), bool? variableValuesIgnoreCase = default(bool?), string parentTaskId = default(string), string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?));

        /// <summary>
        /// Get List
        /// </summary>
        /// <remarks>
        /// Queries for tasks that fulfill a given filter. The size of the result set can be retrieved by using the Get Task Count method.  **Security Consideration:** There are several query parameters (such as assigneeExpression) for specifying an EL expression. These are disabled by default to prevent remote code execution. See the section on [security considerations](https://docs.camunda.org/manual/7.15/user-guide/process-engine/securing-custom-code/) for custom code in the user guide for details.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Restrict to task with the given id. (optional)</param>
        /// <param name="taskIdIn">Restrict to tasks with any of the given ids. (optional)</param>
        /// <param name="processInstanceId">Restrict to tasks that belong to process instances with the given id. (optional)</param>
        /// <param name="processInstanceIdIn">Restrict to tasks that belong to process instances with the given ids. (optional)</param>
        /// <param name="processInstanceBusinessKey">Restrict to tasks that belong to process instances with the given business key. (optional)</param>
        /// <param name="processInstanceBusinessKeyExpression">Restrict to tasks that belong to process instances with the given business key which  is described by an expression. See the  [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. (optional)</param>
        /// <param name="processInstanceBusinessKeyIn">Restrict to tasks that belong to process instances with one of the give business keys.  The keys need to be in a comma-separated list. (optional)</param>
        /// <param name="processInstanceBusinessKeyLike">Restrict to tasks that have a process instance business key that has the parameter  value as a substring. (optional)</param>
        /// <param name="processInstanceBusinessKeyLikeExpression">Restrict to tasks that have a process instance business key that has the parameter  value as a substring and is described by an expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions)  for more information on available functions. (optional)</param>
        /// <param name="processDefinitionId">Restrict to tasks that belong to a process definition with the given id. (optional)</param>
        /// <param name="processDefinitionKey">Restrict to tasks that belong to a process definition with the given key. (optional)</param>
        /// <param name="processDefinitionKeyIn">Restrict to tasks that belong to a process definition with one of the given keys. The  keys need to be in a comma-separated list. (optional)</param>
        /// <param name="processDefinitionName">Restrict to tasks that belong to a process definition with the given name. (optional)</param>
        /// <param name="processDefinitionNameLike">Restrict to tasks that have a process definition name that has the parameter value as  a substring. (optional)</param>
        /// <param name="executionId">Restrict to tasks that belong to an execution with the given id. (optional)</param>
        /// <param name="caseInstanceId">Restrict to tasks that belong to case instances with the given id. (optional)</param>
        /// <param name="caseInstanceBusinessKey">Restrict to tasks that belong to case instances with the given business key. (optional)</param>
        /// <param name="caseInstanceBusinessKeyLike">Restrict to tasks that have a case instance business key that has the parameter value  as a substring. (optional)</param>
        /// <param name="caseDefinitionId">Restrict to tasks that belong to a case definition with the given id. (optional)</param>
        /// <param name="caseDefinitionKey">Restrict to tasks that belong to a case definition with the given key. (optional)</param>
        /// <param name="caseDefinitionName">Restrict to tasks that belong to a case definition with the given name. (optional)</param>
        /// <param name="caseDefinitionNameLike">Restrict to tasks that have a case definition name that has the parameter value as a  substring. (optional)</param>
        /// <param name="caseExecutionId">Restrict to tasks that belong to a case execution with the given id. (optional)</param>
        /// <param name="activityInstanceIdIn">Only include tasks which belong to one of the passed and comma-separated activity  instance ids. (optional)</param>
        /// <param name="tenantIdIn">Only include tasks which belong to one of the passed and comma-separated  tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include tasks which belong to no tenant. Value may only be &#x60;true&#x60;,  as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="assignee">Restrict to tasks that the given user is assigned to. (optional)</param>
        /// <param name="assigneeExpression">Restrict to tasks that the user described by the given expression is assigned to.  See the  [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions)  for more information on available functions. (optional)</param>
        /// <param name="assigneeLike">Restrict to tasks that have an assignee that has the parameter  value as a substring. (optional)</param>
        /// <param name="assigneeLikeExpression">Restrict to tasks that have an assignee that has the parameter value described by the  given expression as a substring. See the  [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions)  for more information on available functions. (optional)</param>
        /// <param name="assigneeIn">Only include tasks which are assigned to one of the passed and  comma-separated user ids. (optional)</param>
        /// <param name="owner">Restrict to tasks that the given user owns. (optional)</param>
        /// <param name="ownerExpression">Restrict to tasks that the user described by the given expression owns. See the  [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions)  for more information on available functions. (optional)</param>
        /// <param name="candidateGroup">Only include tasks that are offered to the given group. (optional)</param>
        /// <param name="candidateGroupExpression">Only include tasks that are offered to the group described by the given expression.  See the  [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions)  for more information on available functions. (optional)</param>
        /// <param name="candidateUser">Only include tasks that are offered to the given user or to one of his groups. (optional)</param>
        /// <param name="candidateUserExpression">Only include tasks that are offered to the user described by the given expression.  See the  [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions)  for more information on available functions. (optional)</param>
        /// <param name="includeAssignedTasks">Also include tasks that are assigned to users in candidate queries. Default is to only  include tasks that are not assigned to any user if you query by candidate user or group(s). (optional, default to false)</param>
        /// <param name="involvedUser">Only include tasks that the given user is involved in. A user is involved in a task if  an identity link exists between task and user (e.g., the user is the assignee). (optional)</param>
        /// <param name="involvedUserExpression">Only include tasks that the user described by the given expression is involved in. A user is involved in a task if an identity link exists between task and user (e.g., the user is the assignee). See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. (optional)</param>
        /// <param name="assigned">If set to &#x60;true&#x60;, restricts the query to all tasks that are assigned. (optional, default to false)</param>
        /// <param name="unassigned">If set to &#x60;true&#x60;, restricts the query to all tasks that are unassigned. (optional, default to false)</param>
        /// <param name="taskDefinitionKey">Restrict to tasks that have the given key. (optional)</param>
        /// <param name="taskDefinitionKeyIn">Restrict to tasks that have one of the given keys. The keys need to be in a comma-separated list. (optional)</param>
        /// <param name="taskDefinitionKeyLike">Restrict to tasks that have a key that has the parameter value as a substring. (optional)</param>
        /// <param name="name">Restrict to tasks that have the given name. (optional)</param>
        /// <param name="nameNotEqual">Restrict to tasks that do not have the given name. (optional)</param>
        /// <param name="nameLike">Restrict to tasks that have a name with the given parameter value as substring. (optional)</param>
        /// <param name="nameNotLike">Restrict to tasks that do not have a name with the given parameter value as substring. (optional)</param>
        /// <param name="description">Restrict to tasks that have the given description. (optional)</param>
        /// <param name="descriptionLike">Restrict to tasks that have a description that has the parameter value as a substring. (optional)</param>
        /// <param name="priority">Restrict to tasks that have the given priority. (optional)</param>
        /// <param name="maxPriority">Restrict to tasks that have a lower or equal priority. (optional)</param>
        /// <param name="minPriority">Restrict to tasks that have a higher or equal priority. (optional)</param>
        /// <param name="dueDate">Restrict to tasks that are due on the given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.546+0200&#x60;. (optional)</param>
        /// <param name="dueDateExpression">Restrict to tasks that are due on the date described by the given expression. See the [User Guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)</param>
        /// <param name="dueAfter">Restrict to tasks that are due after the given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.435+0200&#x60;. (optional)</param>
        /// <param name="dueAfterExpression">Restrict to tasks that are due after the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)</param>
        /// <param name="dueBefore">Restrict to tasks that are due before the given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.243+0200&#x60;. (optional)</param>
        /// <param name="dueBeforeExpression">Restrict to tasks that are due before the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)</param>
        /// <param name="withoutDueDate">Only include tasks which have no due date. Value may only be &#x60;true&#x60;,  as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="followUpDate">Restrict to tasks that have a followUp date on the given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.342+0200&#x60;. (optional)</param>
        /// <param name="followUpDateExpression">Restrict to tasks that have a followUp date on the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)</param>
        /// <param name="followUpAfter">Restrict to tasks that have a followUp date after the given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.542+0200&#x60;. (optional)</param>
        /// <param name="followUpAfterExpression">Restrict to tasks that have a followUp date after the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)</param>
        /// <param name="followUpBefore">Restrict to tasks that have a followUp date before the given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.234+0200&#x60;. (optional)</param>
        /// <param name="followUpBeforeExpression">Restrict to tasks that have a followUp date before the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)</param>
        /// <param name="followUpBeforeOrNotExistent">Restrict to tasks that have no followUp date or a followUp date before the given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.432+0200&#x60;. The typical use case is to query all &#x60;active&#x60; tasks for a user for a given date. (optional)</param>
        /// <param name="followUpBeforeOrNotExistentExpression">Restrict to tasks that have no followUp date or a followUp date before the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)</param>
        /// <param name="createdOn">Restrict to tasks that were created on the given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.324+0200&#x60;. (optional)</param>
        /// <param name="createdOnExpression">Restrict to tasks that were created on the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)</param>
        /// <param name="createdAfter">Restrict to tasks that were created after the given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.342+0200&#x60;. (optional)</param>
        /// <param name="createdAfterExpression">Restrict to tasks that were created after the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)</param>
        /// <param name="createdBefore">Restrict to tasks that were created before the given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.332+0200&#x60;. (optional)</param>
        /// <param name="createdBeforeExpression">Restrict to tasks that were created before the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)</param>
        /// <param name="delegationState">Restrict to tasks that are in the given delegation state. Valid values are &#x60;PENDING&#x60; and &#x60;RESOLVED&#x60;. (optional)</param>
        /// <param name="candidateGroups">Restrict to tasks that are offered to any of the given candidate groups. Takes a comma-separated list of group names, so for example &#x60;developers,support,sales&#x60;. (optional)</param>
        /// <param name="candidateGroupsExpression">Restrict to tasks that are offered to any of the candidate groups described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to &#x60;java.util.List&#x60; of Strings. (optional)</param>
        /// <param name="withCandidateGroups">Only include tasks which have a candidate group. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="withoutCandidateGroups">Only include tasks which have no candidate group. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="withCandidateUsers">Only include tasks which have a candidate user. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="withoutCandidateUsers">Only include tasks which have no candidate users. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="active">Only include active tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="suspended">Only include suspended tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="taskVariables">Only include tasks that have variables with certain values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value.  **Note**: Values are always treated as String objects on server side.  Valid &#x60;operator&#x60; values are: &#x60;eq&#x60; - equal to; &#x60;neq&#x60; - not equal to; &#x60;gt&#x60; - greater than; &#x60;gteq&#x60; - greater than or equal to; &#x60;lt&#x60; - lower than; &#x60;lteq&#x60; - lower than or equal to; &#x60;like&#x60;. &#x60;key&#x60; and &#x60;value&#x60; may not contain underscore or comma characters. (optional)</param>
        /// <param name="processVariables">Only include tasks that belong to process instances that have variables with certain  values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value.  **Note**: Values are always treated as String objects on server side.  Valid &#x60;operator&#x60; values are: &#x60;eq&#x60; - equal to; &#x60;neq&#x60; - not equal to; &#x60;gt&#x60; - greater than; &#x60;gteq&#x60; - greater than or equal to; &#x60;lt&#x60; - lower than; &#x60;lteq&#x60; - lower than or equal to; &#x60;like&#x60;; &#x60;notLike&#x60;. &#x60;key&#x60; and &#x60;value&#x60; may not contain underscore or comma characters. (optional)</param>
        /// <param name="caseInstanceVariables">Only include tasks that belong to case instances that have variables with certain values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value.  **Note**: Values are always treated as String objects on server side.  Valid &#x60;operator&#x60; values are: &#x60;eq&#x60; - equal to; &#x60;neq&#x60; - not equal to; &#x60;gt&#x60; - greater than; &#x60;gteq&#x60; - greater than or equal to; &#x60;lt&#x60; - lower than; &#x60;lteq&#x60; - lower than or equal to; &#x60;like&#x60;. &#x60;key&#x60; and &#x60;value&#x60; may not contain underscore or comma characters. (optional)</param>
        /// <param name="variableNamesIgnoreCase">Match all variable names in this query case-insensitively. If set &#x60;variableName&#x60; and &#x60;variablename&#x60; are treated as equal. (optional, default to false)</param>
        /// <param name="variableValuesIgnoreCase">Match all variable values in this query case-insensitively. If set &#x60;variableValue&#x60; and &#x60;variablevalue&#x60; are treated as equal. (optional, default to false)</param>
        /// <param name="parentTaskId">Restrict query to all tasks that are sub tasks of the given task. Takes a task id. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <returns>ApiResponse of List&lt;TaskDto&gt;</returns>
        ApiResponse<List<TaskDto>> GetTasksWithHttpInfo(string taskId = default(string), string taskIdIn = default(string), string processInstanceId = default(string), string processInstanceIdIn = default(string), string processInstanceBusinessKey = default(string), string processInstanceBusinessKeyExpression = default(string), string processInstanceBusinessKeyIn = default(string), string processInstanceBusinessKeyLike = default(string), string processInstanceBusinessKeyLikeExpression = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string processDefinitionKeyIn = default(string), string processDefinitionName = default(string), string processDefinitionNameLike = default(string), string executionId = default(string), string caseInstanceId = default(string), string caseInstanceBusinessKey = default(string), string caseInstanceBusinessKeyLike = default(string), string caseDefinitionId = default(string), string caseDefinitionKey = default(string), string caseDefinitionName = default(string), string caseDefinitionNameLike = default(string), string caseExecutionId = default(string), string activityInstanceIdIn = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), string assignee = default(string), string assigneeExpression = default(string), string assigneeLike = default(string), string assigneeLikeExpression = default(string), string assigneeIn = default(string), string owner = default(string), string ownerExpression = default(string), string candidateGroup = default(string), string candidateGroupExpression = default(string), string candidateUser = default(string), string candidateUserExpression = default(string), bool? includeAssignedTasks = default(bool?), string involvedUser = default(string), string involvedUserExpression = default(string), bool? assigned = default(bool?), bool? unassigned = default(bool?), string taskDefinitionKey = default(string), string taskDefinitionKeyIn = default(string), string taskDefinitionKeyLike = default(string), string name = default(string), string nameNotEqual = default(string), string nameLike = default(string), string nameNotLike = default(string), string description = default(string), string descriptionLike = default(string), int? priority = default(int?), int? maxPriority = default(int?), int? minPriority = default(int?), string dueDate = default(string), string dueDateExpression = default(string), string dueAfter = default(string), string dueAfterExpression = default(string), string dueBefore = default(string), string dueBeforeExpression = default(string), bool? withoutDueDate = default(bool?), string followUpDate = default(string), string followUpDateExpression = default(string), string followUpAfter = default(string), string followUpAfterExpression = default(string), string followUpBefore = default(string), string followUpBeforeExpression = default(string), string followUpBeforeOrNotExistent = default(string), string followUpBeforeOrNotExistentExpression = default(string), string createdOn = default(string), string createdOnExpression = default(string), string createdAfter = default(string), string createdAfterExpression = default(string), string createdBefore = default(string), string createdBeforeExpression = default(string), string delegationState = default(string), string candidateGroups = default(string), string candidateGroupsExpression = default(string), bool? withCandidateGroups = default(bool?), bool? withoutCandidateGroups = default(bool?), bool? withCandidateUsers = default(bool?), bool? withoutCandidateUsers = default(bool?), bool? active = default(bool?), bool? suspended = default(bool?), string taskVariables = default(string), string processVariables = default(string), string caseInstanceVariables = default(string), bool? variableNamesIgnoreCase = default(bool?), bool? variableValuesIgnoreCase = default(bool?), string parentTaskId = default(string), string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?));
        /// <summary>
        /// Get List Count
        /// </summary>
        /// <remarks>
        /// Retrieves the number of tasks that fulfill a provided filter. Corresponds to the size of the result set when using the [Get Tasks](https://docs.camunda.org/manual/7.15/reference/rest/task/) method.  **Security Consideration:** There are several query parameters (such as assigneeExpression) for specifying an EL expression. These are disabled by default to prevent remote code execution. See the section on [security considerations](https://docs.camunda.org/manual/7.15/user-guide/process-engine/securing-custom-code/) for custom code in the user guide for details.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Restrict to task with the given id. (optional)</param>
        /// <param name="taskIdIn">Restrict to tasks with any of the given ids. (optional)</param>
        /// <param name="processInstanceId">Restrict to tasks that belong to process instances with the given id. (optional)</param>
        /// <param name="processInstanceIdIn">Restrict to tasks that belong to process instances with the given ids. (optional)</param>
        /// <param name="processInstanceBusinessKey">Restrict to tasks that belong to process instances with the given business key. (optional)</param>
        /// <param name="processInstanceBusinessKeyExpression">Restrict to tasks that belong to process instances with the given business key which  is described by an expression. See the  [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. (optional)</param>
        /// <param name="processInstanceBusinessKeyIn">Restrict to tasks that belong to process instances with one of the give business keys.  The keys need to be in a comma-separated list. (optional)</param>
        /// <param name="processInstanceBusinessKeyLike">Restrict to tasks that have a process instance business key that has the parameter  value as a substring. (optional)</param>
        /// <param name="processInstanceBusinessKeyLikeExpression">Restrict to tasks that have a process instance business key that has the parameter  value as a substring and is described by an expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions)  for more information on available functions. (optional)</param>
        /// <param name="processDefinitionId">Restrict to tasks that belong to a process definition with the given id. (optional)</param>
        /// <param name="processDefinitionKey">Restrict to tasks that belong to a process definition with the given key. (optional)</param>
        /// <param name="processDefinitionKeyIn">Restrict to tasks that belong to a process definition with one of the given keys. The  keys need to be in a comma-separated list. (optional)</param>
        /// <param name="processDefinitionName">Restrict to tasks that belong to a process definition with the given name. (optional)</param>
        /// <param name="processDefinitionNameLike">Restrict to tasks that have a process definition name that has the parameter value as  a substring. (optional)</param>
        /// <param name="executionId">Restrict to tasks that belong to an execution with the given id. (optional)</param>
        /// <param name="caseInstanceId">Restrict to tasks that belong to case instances with the given id. (optional)</param>
        /// <param name="caseInstanceBusinessKey">Restrict to tasks that belong to case instances with the given business key. (optional)</param>
        /// <param name="caseInstanceBusinessKeyLike">Restrict to tasks that have a case instance business key that has the parameter value  as a substring. (optional)</param>
        /// <param name="caseDefinitionId">Restrict to tasks that belong to a case definition with the given id. (optional)</param>
        /// <param name="caseDefinitionKey">Restrict to tasks that belong to a case definition with the given key. (optional)</param>
        /// <param name="caseDefinitionName">Restrict to tasks that belong to a case definition with the given name. (optional)</param>
        /// <param name="caseDefinitionNameLike">Restrict to tasks that have a case definition name that has the parameter value as a  substring. (optional)</param>
        /// <param name="caseExecutionId">Restrict to tasks that belong to a case execution with the given id. (optional)</param>
        /// <param name="activityInstanceIdIn">Only include tasks which belong to one of the passed and comma-separated activity  instance ids. (optional)</param>
        /// <param name="tenantIdIn">Only include tasks which belong to one of the passed and comma-separated  tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include tasks which belong to no tenant. Value may only be &#x60;true&#x60;,  as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="assignee">Restrict to tasks that the given user is assigned to. (optional)</param>
        /// <param name="assigneeExpression">Restrict to tasks that the user described by the given expression is assigned to.  See the  [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions)  for more information on available functions. (optional)</param>
        /// <param name="assigneeLike">Restrict to tasks that have an assignee that has the parameter  value as a substring. (optional)</param>
        /// <param name="assigneeLikeExpression">Restrict to tasks that have an assignee that has the parameter value described by the  given expression as a substring. See the  [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions)  for more information on available functions. (optional)</param>
        /// <param name="assigneeIn">Only include tasks which are assigned to one of the passed and  comma-separated user ids. (optional)</param>
        /// <param name="owner">Restrict to tasks that the given user owns. (optional)</param>
        /// <param name="ownerExpression">Restrict to tasks that the user described by the given expression owns. See the  [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions)  for more information on available functions. (optional)</param>
        /// <param name="candidateGroup">Only include tasks that are offered to the given group. (optional)</param>
        /// <param name="candidateGroupExpression">Only include tasks that are offered to the group described by the given expression.  See the  [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions)  for more information on available functions. (optional)</param>
        /// <param name="candidateUser">Only include tasks that are offered to the given user or to one of his groups. (optional)</param>
        /// <param name="candidateUserExpression">Only include tasks that are offered to the user described by the given expression.  See the  [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions)  for more information on available functions. (optional)</param>
        /// <param name="includeAssignedTasks">Also include tasks that are assigned to users in candidate queries. Default is to only  include tasks that are not assigned to any user if you query by candidate user or group(s). (optional, default to false)</param>
        /// <param name="involvedUser">Only include tasks that the given user is involved in. A user is involved in a task if  an identity link exists between task and user (e.g., the user is the assignee). (optional)</param>
        /// <param name="involvedUserExpression">Only include tasks that the user described by the given expression is involved in. A user is involved in a task if an identity link exists between task and user (e.g., the user is the assignee). See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. (optional)</param>
        /// <param name="assigned">If set to &#x60;true&#x60;, restricts the query to all tasks that are assigned. (optional, default to false)</param>
        /// <param name="unassigned">If set to &#x60;true&#x60;, restricts the query to all tasks that are unassigned. (optional, default to false)</param>
        /// <param name="taskDefinitionKey">Restrict to tasks that have the given key. (optional)</param>
        /// <param name="taskDefinitionKeyIn">Restrict to tasks that have one of the given keys. The keys need to be in a comma-separated list. (optional)</param>
        /// <param name="taskDefinitionKeyLike">Restrict to tasks that have a key that has the parameter value as a substring. (optional)</param>
        /// <param name="name">Restrict to tasks that have the given name. (optional)</param>
        /// <param name="nameNotEqual">Restrict to tasks that do not have the given name. (optional)</param>
        /// <param name="nameLike">Restrict to tasks that have a name with the given parameter value as substring. (optional)</param>
        /// <param name="nameNotLike">Restrict to tasks that do not have a name with the given parameter value as substring. (optional)</param>
        /// <param name="description">Restrict to tasks that have the given description. (optional)</param>
        /// <param name="descriptionLike">Restrict to tasks that have a description that has the parameter value as a substring. (optional)</param>
        /// <param name="priority">Restrict to tasks that have the given priority. (optional)</param>
        /// <param name="maxPriority">Restrict to tasks that have a lower or equal priority. (optional)</param>
        /// <param name="minPriority">Restrict to tasks that have a higher or equal priority. (optional)</param>
        /// <param name="dueDate">Restrict to tasks that are due on the given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.546+0200&#x60;. (optional)</param>
        /// <param name="dueDateExpression">Restrict to tasks that are due on the date described by the given expression. See the [User Guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)</param>
        /// <param name="dueAfter">Restrict to tasks that are due after the given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.435+0200&#x60;. (optional)</param>
        /// <param name="dueAfterExpression">Restrict to tasks that are due after the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)</param>
        /// <param name="dueBefore">Restrict to tasks that are due before the given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.243+0200&#x60;. (optional)</param>
        /// <param name="dueBeforeExpression">Restrict to tasks that are due before the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)</param>
        /// <param name="withoutDueDate">Only include tasks which have no due date. Value may only be &#x60;true&#x60;,  as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="followUpDate">Restrict to tasks that have a followUp date on the given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.342+0200&#x60;. (optional)</param>
        /// <param name="followUpDateExpression">Restrict to tasks that have a followUp date on the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)</param>
        /// <param name="followUpAfter">Restrict to tasks that have a followUp date after the given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.542+0200&#x60;. (optional)</param>
        /// <param name="followUpAfterExpression">Restrict to tasks that have a followUp date after the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)</param>
        /// <param name="followUpBefore">Restrict to tasks that have a followUp date before the given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.234+0200&#x60;. (optional)</param>
        /// <param name="followUpBeforeExpression">Restrict to tasks that have a followUp date before the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)</param>
        /// <param name="followUpBeforeOrNotExistent">Restrict to tasks that have no followUp date or a followUp date before the given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.432+0200&#x60;. The typical use case is to query all &#x60;active&#x60; tasks for a user for a given date. (optional)</param>
        /// <param name="followUpBeforeOrNotExistentExpression">Restrict to tasks that have no followUp date or a followUp date before the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)</param>
        /// <param name="createdOn">Restrict to tasks that were created on the given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.324+0200&#x60;. (optional)</param>
        /// <param name="createdOnExpression">Restrict to tasks that were created on the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)</param>
        /// <param name="createdAfter">Restrict to tasks that were created after the given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.342+0200&#x60;. (optional)</param>
        /// <param name="createdAfterExpression">Restrict to tasks that were created after the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)</param>
        /// <param name="createdBefore">Restrict to tasks that were created before the given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.332+0200&#x60;. (optional)</param>
        /// <param name="createdBeforeExpression">Restrict to tasks that were created before the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)</param>
        /// <param name="delegationState">Restrict to tasks that are in the given delegation state. Valid values are &#x60;PENDING&#x60; and &#x60;RESOLVED&#x60;. (optional)</param>
        /// <param name="candidateGroups">Restrict to tasks that are offered to any of the given candidate groups. Takes a comma-separated list of group names, so for example &#x60;developers,support,sales&#x60;. (optional)</param>
        /// <param name="candidateGroupsExpression">Restrict to tasks that are offered to any of the candidate groups described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to &#x60;java.util.List&#x60; of Strings. (optional)</param>
        /// <param name="withCandidateGroups">Only include tasks which have a candidate group. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="withoutCandidateGroups">Only include tasks which have no candidate group. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="withCandidateUsers">Only include tasks which have a candidate user. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="withoutCandidateUsers">Only include tasks which have no candidate users. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="active">Only include active tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="suspended">Only include suspended tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="taskVariables">Only include tasks that have variables with certain values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value.  **Note**: Values are always treated as String objects on server side.  Valid &#x60;operator&#x60; values are: &#x60;eq&#x60; - equal to; &#x60;neq&#x60; - not equal to; &#x60;gt&#x60; - greater than; &#x60;gteq&#x60; - greater than or equal to; &#x60;lt&#x60; - lower than; &#x60;lteq&#x60; - lower than or equal to; &#x60;like&#x60;. &#x60;key&#x60; and &#x60;value&#x60; may not contain underscore or comma characters. (optional)</param>
        /// <param name="processVariables">Only include tasks that belong to process instances that have variables with certain  values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value.  **Note**: Values are always treated as String objects on server side.  Valid &#x60;operator&#x60; values are: &#x60;eq&#x60; - equal to; &#x60;neq&#x60; - not equal to; &#x60;gt&#x60; - greater than; &#x60;gteq&#x60; - greater than or equal to; &#x60;lt&#x60; - lower than; &#x60;lteq&#x60; - lower than or equal to; &#x60;like&#x60;; &#x60;notLike&#x60;. &#x60;key&#x60; and &#x60;value&#x60; may not contain underscore or comma characters. (optional)</param>
        /// <param name="caseInstanceVariables">Only include tasks that belong to case instances that have variables with certain values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value.  **Note**: Values are always treated as String objects on server side.  Valid &#x60;operator&#x60; values are: &#x60;eq&#x60; - equal to; &#x60;neq&#x60; - not equal to; &#x60;gt&#x60; - greater than; &#x60;gteq&#x60; - greater than or equal to; &#x60;lt&#x60; - lower than; &#x60;lteq&#x60; - lower than or equal to; &#x60;like&#x60;. &#x60;key&#x60; and &#x60;value&#x60; may not contain underscore or comma characters. (optional)</param>
        /// <param name="variableNamesIgnoreCase">Match all variable names in this query case-insensitively. If set &#x60;variableName&#x60; and &#x60;variablename&#x60; are treated as equal. (optional, default to false)</param>
        /// <param name="variableValuesIgnoreCase">Match all variable values in this query case-insensitively. If set &#x60;variableValue&#x60; and &#x60;variablevalue&#x60; are treated as equal. (optional, default to false)</param>
        /// <param name="parentTaskId">Restrict query to all tasks that are sub tasks of the given task. Takes a task id. (optional)</param>
        /// <returns>CountResultDto</returns>
        CountResultDto GetTasksCount(string taskId = default(string), string taskIdIn = default(string), string processInstanceId = default(string), string processInstanceIdIn = default(string), string processInstanceBusinessKey = default(string), string processInstanceBusinessKeyExpression = default(string), string processInstanceBusinessKeyIn = default(string), string processInstanceBusinessKeyLike = default(string), string processInstanceBusinessKeyLikeExpression = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string processDefinitionKeyIn = default(string), string processDefinitionName = default(string), string processDefinitionNameLike = default(string), string executionId = default(string), string caseInstanceId = default(string), string caseInstanceBusinessKey = default(string), string caseInstanceBusinessKeyLike = default(string), string caseDefinitionId = default(string), string caseDefinitionKey = default(string), string caseDefinitionName = default(string), string caseDefinitionNameLike = default(string), string caseExecutionId = default(string), string activityInstanceIdIn = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), string assignee = default(string), string assigneeExpression = default(string), string assigneeLike = default(string), string assigneeLikeExpression = default(string), string assigneeIn = default(string), string owner = default(string), string ownerExpression = default(string), string candidateGroup = default(string), string candidateGroupExpression = default(string), string candidateUser = default(string), string candidateUserExpression = default(string), bool? includeAssignedTasks = default(bool?), string involvedUser = default(string), string involvedUserExpression = default(string), bool? assigned = default(bool?), bool? unassigned = default(bool?), string taskDefinitionKey = default(string), string taskDefinitionKeyIn = default(string), string taskDefinitionKeyLike = default(string), string name = default(string), string nameNotEqual = default(string), string nameLike = default(string), string nameNotLike = default(string), string description = default(string), string descriptionLike = default(string), int? priority = default(int?), int? maxPriority = default(int?), int? minPriority = default(int?), string dueDate = default(string), string dueDateExpression = default(string), string dueAfter = default(string), string dueAfterExpression = default(string), string dueBefore = default(string), string dueBeforeExpression = default(string), bool? withoutDueDate = default(bool?), string followUpDate = default(string), string followUpDateExpression = default(string), string followUpAfter = default(string), string followUpAfterExpression = default(string), string followUpBefore = default(string), string followUpBeforeExpression = default(string), string followUpBeforeOrNotExistent = default(string), string followUpBeforeOrNotExistentExpression = default(string), string createdOn = default(string), string createdOnExpression = default(string), string createdAfter = default(string), string createdAfterExpression = default(string), string createdBefore = default(string), string createdBeforeExpression = default(string), string delegationState = default(string), string candidateGroups = default(string), string candidateGroupsExpression = default(string), bool? withCandidateGroups = default(bool?), bool? withoutCandidateGroups = default(bool?), bool? withCandidateUsers = default(bool?), bool? withoutCandidateUsers = default(bool?), bool? active = default(bool?), bool? suspended = default(bool?), string taskVariables = default(string), string processVariables = default(string), string caseInstanceVariables = default(string), bool? variableNamesIgnoreCase = default(bool?), bool? variableValuesIgnoreCase = default(bool?), string parentTaskId = default(string));

        /// <summary>
        /// Get List Count
        /// </summary>
        /// <remarks>
        /// Retrieves the number of tasks that fulfill a provided filter. Corresponds to the size of the result set when using the [Get Tasks](https://docs.camunda.org/manual/7.15/reference/rest/task/) method.  **Security Consideration:** There are several query parameters (such as assigneeExpression) for specifying an EL expression. These are disabled by default to prevent remote code execution. See the section on [security considerations](https://docs.camunda.org/manual/7.15/user-guide/process-engine/securing-custom-code/) for custom code in the user guide for details.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Restrict to task with the given id. (optional)</param>
        /// <param name="taskIdIn">Restrict to tasks with any of the given ids. (optional)</param>
        /// <param name="processInstanceId">Restrict to tasks that belong to process instances with the given id. (optional)</param>
        /// <param name="processInstanceIdIn">Restrict to tasks that belong to process instances with the given ids. (optional)</param>
        /// <param name="processInstanceBusinessKey">Restrict to tasks that belong to process instances with the given business key. (optional)</param>
        /// <param name="processInstanceBusinessKeyExpression">Restrict to tasks that belong to process instances with the given business key which  is described by an expression. See the  [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. (optional)</param>
        /// <param name="processInstanceBusinessKeyIn">Restrict to tasks that belong to process instances with one of the give business keys.  The keys need to be in a comma-separated list. (optional)</param>
        /// <param name="processInstanceBusinessKeyLike">Restrict to tasks that have a process instance business key that has the parameter  value as a substring. (optional)</param>
        /// <param name="processInstanceBusinessKeyLikeExpression">Restrict to tasks that have a process instance business key that has the parameter  value as a substring and is described by an expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions)  for more information on available functions. (optional)</param>
        /// <param name="processDefinitionId">Restrict to tasks that belong to a process definition with the given id. (optional)</param>
        /// <param name="processDefinitionKey">Restrict to tasks that belong to a process definition with the given key. (optional)</param>
        /// <param name="processDefinitionKeyIn">Restrict to tasks that belong to a process definition with one of the given keys. The  keys need to be in a comma-separated list. (optional)</param>
        /// <param name="processDefinitionName">Restrict to tasks that belong to a process definition with the given name. (optional)</param>
        /// <param name="processDefinitionNameLike">Restrict to tasks that have a process definition name that has the parameter value as  a substring. (optional)</param>
        /// <param name="executionId">Restrict to tasks that belong to an execution with the given id. (optional)</param>
        /// <param name="caseInstanceId">Restrict to tasks that belong to case instances with the given id. (optional)</param>
        /// <param name="caseInstanceBusinessKey">Restrict to tasks that belong to case instances with the given business key. (optional)</param>
        /// <param name="caseInstanceBusinessKeyLike">Restrict to tasks that have a case instance business key that has the parameter value  as a substring. (optional)</param>
        /// <param name="caseDefinitionId">Restrict to tasks that belong to a case definition with the given id. (optional)</param>
        /// <param name="caseDefinitionKey">Restrict to tasks that belong to a case definition with the given key. (optional)</param>
        /// <param name="caseDefinitionName">Restrict to tasks that belong to a case definition with the given name. (optional)</param>
        /// <param name="caseDefinitionNameLike">Restrict to tasks that have a case definition name that has the parameter value as a  substring. (optional)</param>
        /// <param name="caseExecutionId">Restrict to tasks that belong to a case execution with the given id. (optional)</param>
        /// <param name="activityInstanceIdIn">Only include tasks which belong to one of the passed and comma-separated activity  instance ids. (optional)</param>
        /// <param name="tenantIdIn">Only include tasks which belong to one of the passed and comma-separated  tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include tasks which belong to no tenant. Value may only be &#x60;true&#x60;,  as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="assignee">Restrict to tasks that the given user is assigned to. (optional)</param>
        /// <param name="assigneeExpression">Restrict to tasks that the user described by the given expression is assigned to.  See the  [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions)  for more information on available functions. (optional)</param>
        /// <param name="assigneeLike">Restrict to tasks that have an assignee that has the parameter  value as a substring. (optional)</param>
        /// <param name="assigneeLikeExpression">Restrict to tasks that have an assignee that has the parameter value described by the  given expression as a substring. See the  [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions)  for more information on available functions. (optional)</param>
        /// <param name="assigneeIn">Only include tasks which are assigned to one of the passed and  comma-separated user ids. (optional)</param>
        /// <param name="owner">Restrict to tasks that the given user owns. (optional)</param>
        /// <param name="ownerExpression">Restrict to tasks that the user described by the given expression owns. See the  [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions)  for more information on available functions. (optional)</param>
        /// <param name="candidateGroup">Only include tasks that are offered to the given group. (optional)</param>
        /// <param name="candidateGroupExpression">Only include tasks that are offered to the group described by the given expression.  See the  [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions)  for more information on available functions. (optional)</param>
        /// <param name="candidateUser">Only include tasks that are offered to the given user or to one of his groups. (optional)</param>
        /// <param name="candidateUserExpression">Only include tasks that are offered to the user described by the given expression.  See the  [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions)  for more information on available functions. (optional)</param>
        /// <param name="includeAssignedTasks">Also include tasks that are assigned to users in candidate queries. Default is to only  include tasks that are not assigned to any user if you query by candidate user or group(s). (optional, default to false)</param>
        /// <param name="involvedUser">Only include tasks that the given user is involved in. A user is involved in a task if  an identity link exists between task and user (e.g., the user is the assignee). (optional)</param>
        /// <param name="involvedUserExpression">Only include tasks that the user described by the given expression is involved in. A user is involved in a task if an identity link exists between task and user (e.g., the user is the assignee). See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. (optional)</param>
        /// <param name="assigned">If set to &#x60;true&#x60;, restricts the query to all tasks that are assigned. (optional, default to false)</param>
        /// <param name="unassigned">If set to &#x60;true&#x60;, restricts the query to all tasks that are unassigned. (optional, default to false)</param>
        /// <param name="taskDefinitionKey">Restrict to tasks that have the given key. (optional)</param>
        /// <param name="taskDefinitionKeyIn">Restrict to tasks that have one of the given keys. The keys need to be in a comma-separated list. (optional)</param>
        /// <param name="taskDefinitionKeyLike">Restrict to tasks that have a key that has the parameter value as a substring. (optional)</param>
        /// <param name="name">Restrict to tasks that have the given name. (optional)</param>
        /// <param name="nameNotEqual">Restrict to tasks that do not have the given name. (optional)</param>
        /// <param name="nameLike">Restrict to tasks that have a name with the given parameter value as substring. (optional)</param>
        /// <param name="nameNotLike">Restrict to tasks that do not have a name with the given parameter value as substring. (optional)</param>
        /// <param name="description">Restrict to tasks that have the given description. (optional)</param>
        /// <param name="descriptionLike">Restrict to tasks that have a description that has the parameter value as a substring. (optional)</param>
        /// <param name="priority">Restrict to tasks that have the given priority. (optional)</param>
        /// <param name="maxPriority">Restrict to tasks that have a lower or equal priority. (optional)</param>
        /// <param name="minPriority">Restrict to tasks that have a higher or equal priority. (optional)</param>
        /// <param name="dueDate">Restrict to tasks that are due on the given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.546+0200&#x60;. (optional)</param>
        /// <param name="dueDateExpression">Restrict to tasks that are due on the date described by the given expression. See the [User Guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)</param>
        /// <param name="dueAfter">Restrict to tasks that are due after the given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.435+0200&#x60;. (optional)</param>
        /// <param name="dueAfterExpression">Restrict to tasks that are due after the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)</param>
        /// <param name="dueBefore">Restrict to tasks that are due before the given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.243+0200&#x60;. (optional)</param>
        /// <param name="dueBeforeExpression">Restrict to tasks that are due before the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)</param>
        /// <param name="withoutDueDate">Only include tasks which have no due date. Value may only be &#x60;true&#x60;,  as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="followUpDate">Restrict to tasks that have a followUp date on the given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.342+0200&#x60;. (optional)</param>
        /// <param name="followUpDateExpression">Restrict to tasks that have a followUp date on the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)</param>
        /// <param name="followUpAfter">Restrict to tasks that have a followUp date after the given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.542+0200&#x60;. (optional)</param>
        /// <param name="followUpAfterExpression">Restrict to tasks that have a followUp date after the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)</param>
        /// <param name="followUpBefore">Restrict to tasks that have a followUp date before the given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.234+0200&#x60;. (optional)</param>
        /// <param name="followUpBeforeExpression">Restrict to tasks that have a followUp date before the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)</param>
        /// <param name="followUpBeforeOrNotExistent">Restrict to tasks that have no followUp date or a followUp date before the given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.432+0200&#x60;. The typical use case is to query all &#x60;active&#x60; tasks for a user for a given date. (optional)</param>
        /// <param name="followUpBeforeOrNotExistentExpression">Restrict to tasks that have no followUp date or a followUp date before the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)</param>
        /// <param name="createdOn">Restrict to tasks that were created on the given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.324+0200&#x60;. (optional)</param>
        /// <param name="createdOnExpression">Restrict to tasks that were created on the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)</param>
        /// <param name="createdAfter">Restrict to tasks that were created after the given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.342+0200&#x60;. (optional)</param>
        /// <param name="createdAfterExpression">Restrict to tasks that were created after the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)</param>
        /// <param name="createdBefore">Restrict to tasks that were created before the given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.332+0200&#x60;. (optional)</param>
        /// <param name="createdBeforeExpression">Restrict to tasks that were created before the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)</param>
        /// <param name="delegationState">Restrict to tasks that are in the given delegation state. Valid values are &#x60;PENDING&#x60; and &#x60;RESOLVED&#x60;. (optional)</param>
        /// <param name="candidateGroups">Restrict to tasks that are offered to any of the given candidate groups. Takes a comma-separated list of group names, so for example &#x60;developers,support,sales&#x60;. (optional)</param>
        /// <param name="candidateGroupsExpression">Restrict to tasks that are offered to any of the candidate groups described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to &#x60;java.util.List&#x60; of Strings. (optional)</param>
        /// <param name="withCandidateGroups">Only include tasks which have a candidate group. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="withoutCandidateGroups">Only include tasks which have no candidate group. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="withCandidateUsers">Only include tasks which have a candidate user. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="withoutCandidateUsers">Only include tasks which have no candidate users. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="active">Only include active tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="suspended">Only include suspended tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="taskVariables">Only include tasks that have variables with certain values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value.  **Note**: Values are always treated as String objects on server side.  Valid &#x60;operator&#x60; values are: &#x60;eq&#x60; - equal to; &#x60;neq&#x60; - not equal to; &#x60;gt&#x60; - greater than; &#x60;gteq&#x60; - greater than or equal to; &#x60;lt&#x60; - lower than; &#x60;lteq&#x60; - lower than or equal to; &#x60;like&#x60;. &#x60;key&#x60; and &#x60;value&#x60; may not contain underscore or comma characters. (optional)</param>
        /// <param name="processVariables">Only include tasks that belong to process instances that have variables with certain  values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value.  **Note**: Values are always treated as String objects on server side.  Valid &#x60;operator&#x60; values are: &#x60;eq&#x60; - equal to; &#x60;neq&#x60; - not equal to; &#x60;gt&#x60; - greater than; &#x60;gteq&#x60; - greater than or equal to; &#x60;lt&#x60; - lower than; &#x60;lteq&#x60; - lower than or equal to; &#x60;like&#x60;; &#x60;notLike&#x60;. &#x60;key&#x60; and &#x60;value&#x60; may not contain underscore or comma characters. (optional)</param>
        /// <param name="caseInstanceVariables">Only include tasks that belong to case instances that have variables with certain values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value.  **Note**: Values are always treated as String objects on server side.  Valid &#x60;operator&#x60; values are: &#x60;eq&#x60; - equal to; &#x60;neq&#x60; - not equal to; &#x60;gt&#x60; - greater than; &#x60;gteq&#x60; - greater than or equal to; &#x60;lt&#x60; - lower than; &#x60;lteq&#x60; - lower than or equal to; &#x60;like&#x60;. &#x60;key&#x60; and &#x60;value&#x60; may not contain underscore or comma characters. (optional)</param>
        /// <param name="variableNamesIgnoreCase">Match all variable names in this query case-insensitively. If set &#x60;variableName&#x60; and &#x60;variablename&#x60; are treated as equal. (optional, default to false)</param>
        /// <param name="variableValuesIgnoreCase">Match all variable values in this query case-insensitively. If set &#x60;variableValue&#x60; and &#x60;variablevalue&#x60; are treated as equal. (optional, default to false)</param>
        /// <param name="parentTaskId">Restrict query to all tasks that are sub tasks of the given task. Takes a task id. (optional)</param>
        /// <returns>ApiResponse of CountResultDto</returns>
        ApiResponse<CountResultDto> GetTasksCountWithHttpInfo(string taskId = default(string), string taskIdIn = default(string), string processInstanceId = default(string), string processInstanceIdIn = default(string), string processInstanceBusinessKey = default(string), string processInstanceBusinessKeyExpression = default(string), string processInstanceBusinessKeyIn = default(string), string processInstanceBusinessKeyLike = default(string), string processInstanceBusinessKeyLikeExpression = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string processDefinitionKeyIn = default(string), string processDefinitionName = default(string), string processDefinitionNameLike = default(string), string executionId = default(string), string caseInstanceId = default(string), string caseInstanceBusinessKey = default(string), string caseInstanceBusinessKeyLike = default(string), string caseDefinitionId = default(string), string caseDefinitionKey = default(string), string caseDefinitionName = default(string), string caseDefinitionNameLike = default(string), string caseExecutionId = default(string), string activityInstanceIdIn = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), string assignee = default(string), string assigneeExpression = default(string), string assigneeLike = default(string), string assigneeLikeExpression = default(string), string assigneeIn = default(string), string owner = default(string), string ownerExpression = default(string), string candidateGroup = default(string), string candidateGroupExpression = default(string), string candidateUser = default(string), string candidateUserExpression = default(string), bool? includeAssignedTasks = default(bool?), string involvedUser = default(string), string involvedUserExpression = default(string), bool? assigned = default(bool?), bool? unassigned = default(bool?), string taskDefinitionKey = default(string), string taskDefinitionKeyIn = default(string), string taskDefinitionKeyLike = default(string), string name = default(string), string nameNotEqual = default(string), string nameLike = default(string), string nameNotLike = default(string), string description = default(string), string descriptionLike = default(string), int? priority = default(int?), int? maxPriority = default(int?), int? minPriority = default(int?), string dueDate = default(string), string dueDateExpression = default(string), string dueAfter = default(string), string dueAfterExpression = default(string), string dueBefore = default(string), string dueBeforeExpression = default(string), bool? withoutDueDate = default(bool?), string followUpDate = default(string), string followUpDateExpression = default(string), string followUpAfter = default(string), string followUpAfterExpression = default(string), string followUpBefore = default(string), string followUpBeforeExpression = default(string), string followUpBeforeOrNotExistent = default(string), string followUpBeforeOrNotExistentExpression = default(string), string createdOn = default(string), string createdOnExpression = default(string), string createdAfter = default(string), string createdAfterExpression = default(string), string createdBefore = default(string), string createdBeforeExpression = default(string), string delegationState = default(string), string candidateGroups = default(string), string candidateGroupsExpression = default(string), bool? withCandidateGroups = default(bool?), bool? withoutCandidateGroups = default(bool?), bool? withCandidateUsers = default(bool?), bool? withoutCandidateUsers = default(bool?), bool? active = default(bool?), bool? suspended = default(bool?), string taskVariables = default(string), string processVariables = default(string), string caseInstanceVariables = default(string), bool? variableNamesIgnoreCase = default(bool?), bool? variableValuesIgnoreCase = default(bool?), string parentTaskId = default(string));
        /// <summary>
        /// Handle BPMN Error
        /// </summary>
        /// <remarks>
        /// Reports a business error in the context of a running task by id. The error code must be specified to identify the BPMN error handler. See the documentation for [Reporting Bpmn Error](https://docs.camunda.org/manual/7.15/reference/bpmn20/tasks/user-task/#reporting-bpmn-error) in User Tasks.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task a BPMN error is reported for.</param>
        /// <param name="taskBpmnErrorDto"> (optional)</param>
        /// <returns></returns>
        void HandleBpmnError(string id, TaskBpmnErrorDto taskBpmnErrorDto = default(TaskBpmnErrorDto));

        /// <summary>
        /// Handle BPMN Error
        /// </summary>
        /// <remarks>
        /// Reports a business error in the context of a running task by id. The error code must be specified to identify the BPMN error handler. See the documentation for [Reporting Bpmn Error](https://docs.camunda.org/manual/7.15/reference/bpmn20/tasks/user-task/#reporting-bpmn-error) in User Tasks.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task a BPMN error is reported for.</param>
        /// <param name="taskBpmnErrorDto"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> HandleBpmnErrorWithHttpInfo(string id, TaskBpmnErrorDto taskBpmnErrorDto = default(TaskBpmnErrorDto));
        /// <summary>
        /// Handle BPMN Escalation
        /// </summary>
        /// <remarks>
        /// Reports an escalation in the context of a running task by id. The escalation code must be specified to identify the escalation handler. See the documentation for [Reporting Bpmn Escalation](https://docs.camunda.org/manual/7.15/reference/bpmn20/tasks/user-task/#reporting-bpmn-escalation) in User Tasks.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task in which context a BPMN escalation is reported.</param>
        /// <param name="taskEscalationDto"> (optional)</param>
        /// <returns></returns>
        void HandleEscalation(string id, TaskEscalationDto taskEscalationDto = default(TaskEscalationDto));

        /// <summary>
        /// Handle BPMN Escalation
        /// </summary>
        /// <remarks>
        /// Reports an escalation in the context of a running task by id. The escalation code must be specified to identify the escalation handler. See the documentation for [Reporting Bpmn Escalation](https://docs.camunda.org/manual/7.15/reference/bpmn20/tasks/user-task/#reporting-bpmn-escalation) in User Tasks.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task in which context a BPMN escalation is reported.</param>
        /// <param name="taskEscalationDto"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> HandleEscalationWithHttpInfo(string id, TaskEscalationDto taskEscalationDto = default(TaskEscalationDto));
        /// <summary>
        /// Get List (POST)
        /// </summary>
        /// <remarks>
        /// Queries for tasks that fulfill a given filter. This method is slightly more powerful than the [Get Tasks](https://docs.camunda.org/manual/7.15/reference/rest/task/get-query/) method because it allows filtering by multiple process or task variables of types &#x60;String&#x60;, &#x60;Number&#x60; or &#x60;Boolean&#x60;. The size of the result set can be retrieved by using the [Get Task Count (POST)](https://docs.camunda.org/manual/7.15/reference/rest/task/post-query-count/) method.  **Security Consideration**: There are several parameters (such as &#x60;assigneeExpression&#x60;) for specifying an EL expression. These are disabled by default to prevent remote code execution. See the section on [security considerations for custom code](https://docs.camunda.org/manual/7.15/user-guide/process-engine/securing-custom-code/) in the user guide for details.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="taskQueryDto"> (optional)</param>
        /// <returns>List&lt;TaskDto&gt;</returns>
        List<TaskDto> QueryTasks(int? firstResult = default(int?), int? maxResults = default(int?), TaskQueryDto taskQueryDto = default(TaskQueryDto));

        /// <summary>
        /// Get List (POST)
        /// </summary>
        /// <remarks>
        /// Queries for tasks that fulfill a given filter. This method is slightly more powerful than the [Get Tasks](https://docs.camunda.org/manual/7.15/reference/rest/task/get-query/) method because it allows filtering by multiple process or task variables of types &#x60;String&#x60;, &#x60;Number&#x60; or &#x60;Boolean&#x60;. The size of the result set can be retrieved by using the [Get Task Count (POST)](https://docs.camunda.org/manual/7.15/reference/rest/task/post-query-count/) method.  **Security Consideration**: There are several parameters (such as &#x60;assigneeExpression&#x60;) for specifying an EL expression. These are disabled by default to prevent remote code execution. See the section on [security considerations for custom code](https://docs.camunda.org/manual/7.15/user-guide/process-engine/securing-custom-code/) in the user guide for details.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="taskQueryDto"> (optional)</param>
        /// <returns>ApiResponse of List&lt;TaskDto&gt;</returns>
        ApiResponse<List<TaskDto>> QueryTasksWithHttpInfo(int? firstResult = default(int?), int? maxResults = default(int?), TaskQueryDto taskQueryDto = default(TaskQueryDto));
        /// <summary>
        /// Get List Count (POST)
        /// </summary>
        /// <remarks>
        /// Retrieves the number of tasks that fulfill the given filter. Corresponds to the size of the result set of the [Get Tasks (POST)](https://docs.camunda.org/manual/7.15/reference/rest/task/post-query/) method and takes the same parameters.  **Security Consideration**: There are several parameters (such as &#x60;assigneeExpression&#x60;) for specifying an EL expression. These are disabled by default to prevent remote code execution. See the section on [security considerations for custom code](https://docs.camunda.org/manual/7.15/user-guide/process-engine/securing-custom-code/) in the user guide for details.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskQueryDto"> (optional)</param>
        /// <returns>CountResultDto</returns>
        CountResultDto QueryTasksCount(TaskQueryDto taskQueryDto = default(TaskQueryDto));

        /// <summary>
        /// Get List Count (POST)
        /// </summary>
        /// <remarks>
        /// Retrieves the number of tasks that fulfill the given filter. Corresponds to the size of the result set of the [Get Tasks (POST)](https://docs.camunda.org/manual/7.15/reference/rest/task/post-query/) method and takes the same parameters.  **Security Consideration**: There are several parameters (such as &#x60;assigneeExpression&#x60;) for specifying an EL expression. These are disabled by default to prevent remote code execution. See the section on [security considerations for custom code](https://docs.camunda.org/manual/7.15/user-guide/process-engine/securing-custom-code/) in the user guide for details.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskQueryDto"> (optional)</param>
        /// <returns>ApiResponse of CountResultDto</returns>
        ApiResponse<CountResultDto> QueryTasksCountWithHttpInfo(TaskQueryDto taskQueryDto = default(TaskQueryDto));
        /// <summary>
        /// Resolve
        /// </summary>
        /// <remarks>
        /// Resolves a task and updates execution variables.  Resolving a task marks that the assignee is done with the task delegated to them, and that it can be sent back to the owner. Can only be executed when the task has been delegated. The assignee will be set to the owner, who performed the delegation.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to resolve.</param>
        /// <param name="completeTaskDto"> (optional)</param>
        /// <returns></returns>
        void Resolve(string id, CompleteTaskDto completeTaskDto = default(CompleteTaskDto));

        /// <summary>
        /// Resolve
        /// </summary>
        /// <remarks>
        /// Resolves a task and updates execution variables.  Resolving a task marks that the assignee is done with the task delegated to them, and that it can be sent back to the owner. Can only be executed when the task has been delegated. The assignee will be set to the owner, who performed the delegation.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to resolve.</param>
        /// <param name="completeTaskDto"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ResolveWithHttpInfo(string id, CompleteTaskDto completeTaskDto = default(CompleteTaskDto));
        /// <summary>
        /// Set Assignee
        /// </summary>
        /// <remarks>
        /// Changes the assignee of a task to a specific user.  **Note:** The difference with the [Claim Task](https://docs.camunda.org/manual/7.15/reference/rest/task/post-claim/) method is that this method does not check if the task already has a user assigned to it.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to set the assignee for.</param>
        /// <param name="userIdDto">Provide the id of the user that will be the assignee of the task. (optional)</param>
        /// <returns></returns>
        void SetAssignee(string id, UserIdDto userIdDto = default(UserIdDto));

        /// <summary>
        /// Set Assignee
        /// </summary>
        /// <remarks>
        /// Changes the assignee of a task to a specific user.  **Note:** The difference with the [Claim Task](https://docs.camunda.org/manual/7.15/reference/rest/task/post-claim/) method is that this method does not check if the task already has a user assigned to it.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to set the assignee for.</param>
        /// <param name="userIdDto">Provide the id of the user that will be the assignee of the task. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SetAssigneeWithHttpInfo(string id, UserIdDto userIdDto = default(UserIdDto));
        /// <summary>
        /// Submit Form
        /// </summary>
        /// <remarks>
        /// Completes a task and updates process variables using a form submit. There are two difference between this method and the &#x60;complete&#x60; method:  * If the task is in state &#x60;PENDING&#x60; - i.e., has been delegated before, it is not completed but resolved. Otherwise it will be completed. * If the task has Form Field Metadata defined, the process engine will perform backend validation for any form fields which have validators defined. See the [Generated Task Forms](https://docs.camunda.org/manual/7.15/user-guide/task-forms/_index/#generated-task-forms) section of the [User Guide](https://docs.camunda.org/manual/7.15/user-guide/) for more information.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to submit the form for.</param>
        /// <param name="completeTaskDto"> (optional)</param>
        /// <returns>Dictionary&lt;string, VariableValueDto&gt;</returns>
        Dictionary<string, VariableValueDto> Submit(string id, CompleteTaskDto completeTaskDto = default(CompleteTaskDto));

        /// <summary>
        /// Submit Form
        /// </summary>
        /// <remarks>
        /// Completes a task and updates process variables using a form submit. There are two difference between this method and the &#x60;complete&#x60; method:  * If the task is in state &#x60;PENDING&#x60; - i.e., has been delegated before, it is not completed but resolved. Otherwise it will be completed. * If the task has Form Field Metadata defined, the process engine will perform backend validation for any form fields which have validators defined. See the [Generated Task Forms](https://docs.camunda.org/manual/7.15/user-guide/task-forms/_index/#generated-task-forms) section of the [User Guide](https://docs.camunda.org/manual/7.15/user-guide/) for more information.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to submit the form for.</param>
        /// <param name="completeTaskDto"> (optional)</param>
        /// <returns>ApiResponse of Dictionary&lt;string, VariableValueDto&gt;</returns>
        ApiResponse<Dictionary<string, VariableValueDto>> SubmitWithHttpInfo(string id, CompleteTaskDto completeTaskDto = default(CompleteTaskDto));
        /// <summary>
        /// Unclaim
        /// </summary>
        /// <remarks>
        /// Resets a task&#39;s assignee. If successful, the task is not assigned to a user.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to unclaim.</param>
        /// <returns></returns>
        void Unclaim(string id);

        /// <summary>
        /// Unclaim
        /// </summary>
        /// <remarks>
        /// Resets a task&#39;s assignee. If successful, the task is not assigned to a user.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to unclaim.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UnclaimWithHttpInfo(string id);
        /// <summary>
        /// Update
        /// </summary>
        /// <remarks>
        /// Updates a task.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to be updated.</param>
        /// <param name="taskDto"> (optional)</param>
        /// <returns></returns>
        void UpdateTask(string id, TaskDto taskDto = default(TaskDto));

        /// <summary>
        /// Update
        /// </summary>
        /// <remarks>
        /// Updates a task.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to be updated.</param>
        /// <param name="taskDto"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateTaskWithHttpInfo(string id, TaskDto taskDto = default(TaskDto));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITaskApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Claim
        /// </summary>
        /// <remarks>
        /// Claims a task for a specific user.  **Note:** The difference with the [Set Assignee](https://docs.camunda.org/manual/7.15/reference/rest/task/post-assignee/) method is that here a check is performed to see if the task already has a user assigned to it.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to claim.</param>
        /// <param name="userIdDto">Provide the id of the user that claims the task. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ClaimAsync(string id, UserIdDto userIdDto = default(UserIdDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Claim
        /// </summary>
        /// <remarks>
        /// Claims a task for a specific user.  **Note:** The difference with the [Set Assignee](https://docs.camunda.org/manual/7.15/reference/rest/task/post-assignee/) method is that here a check is performed to see if the task already has a user assigned to it.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to claim.</param>
        /// <param name="userIdDto">Provide the id of the user that claims the task. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ClaimWithHttpInfoAsync(string id, UserIdDto userIdDto = default(UserIdDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Complete
        /// </summary>
        /// <remarks>
        /// Completes a task and updates process variables.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to complete.</param>
        /// <param name="completeTaskDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Dictionary&lt;string, VariableValueDto&gt;</returns>
        System.Threading.Tasks.Task<Dictionary<string, VariableValueDto>> CompleteAsync(string id, CompleteTaskDto completeTaskDto = default(CompleteTaskDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Complete
        /// </summary>
        /// <remarks>
        /// Completes a task and updates process variables.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to complete.</param>
        /// <param name="completeTaskDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, VariableValueDto&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dictionary<string, VariableValueDto>>> CompleteWithHttpInfoAsync(string id, CompleteTaskDto completeTaskDto = default(CompleteTaskDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create
        /// </summary>
        /// <remarks>
        /// Creates a new task.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CreateTaskAsync(TaskDto taskDto = default(TaskDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create
        /// </summary>
        /// <remarks>
        /// Creates a new task.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateTaskWithHttpInfoAsync(TaskDto taskDto = default(TaskDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delegate
        /// </summary>
        /// <remarks>
        /// Delegates a task to another user.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to delegate.</param>
        /// <param name="userIdDto">Provide the id of the user that the task should be delegated to. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DelegateTaskAsync(string id, UserIdDto userIdDto = default(UserIdDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delegate
        /// </summary>
        /// <remarks>
        /// Delegates a task to another user.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to delegate.</param>
        /// <param name="userIdDto">Provide the id of the user that the task should be delegated to. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DelegateTaskWithHttpInfoAsync(string id, UserIdDto userIdDto = default(UserIdDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete
        /// </summary>
        /// <remarks>
        /// Removes a task by id.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to be removed.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteTaskAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete
        /// </summary>
        /// <remarks>
        /// Removes a task by id.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to be removed.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteTaskWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Deployed Form
        /// </summary>
        /// <remarks>
        /// Retrieves the deployed form that is referenced from a given task. For further information please refer to the [User Guide](https://docs.camunda.org/manual/7.15/user-guide/task-forms/#embedded-task-forms).
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to get the deployed form for.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetDeployedFormAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Deployed Form
        /// </summary>
        /// <remarks>
        /// Retrieves the deployed form that is referenced from a given task. For further information please refer to the [User Guide](https://docs.camunda.org/manual/7.15/user-guide/task-forms/#embedded-task-forms).
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to get the deployed form for.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetDeployedFormWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Form Key
        /// </summary>
        /// <remarks>
        /// Retrieves the form key for a task. The form key corresponds to the &#x60;FormData#formKey&#x60; property in the engine. This key can be used to do task-specific form rendering in client applications. Additionally, the context path of the containing process application is returned.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to retrieve the form for.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FormDto</returns>
        System.Threading.Tasks.Task<FormDto> GetFormAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Form Key
        /// </summary>
        /// <remarks>
        /// Retrieves the form key for a task. The form key corresponds to the &#x60;FormData#formKey&#x60; property in the engine. This key can be used to do task-specific form rendering in client applications. Additionally, the context path of the containing process application is returned.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to retrieve the form for.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FormDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<FormDto>> GetFormWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Task Form Variables
        /// </summary>
        /// <remarks>
        /// Retrieves the form variables for a task. The form variables take form data specified on the task into account. If form fields are defined, the variable types and default values of the form fields are taken into account.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to retrieve the variables for.</param>
        /// <param name="variableNames">A comma-separated list of variable names. Allows restricting the list of requested variables to the variable names in the list. It is best practice to restrict the list of variables to the variables actually required by the form in order to minimize fetching of data. If the query parameter is ommitted all variables are fetched. If the query parameter contains non-existent variable names, the variable names are ignored. (optional)</param>
        /// <param name="deserializeValues">Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default true).  If set to true, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](http://jackson.codehaus.org/) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to false, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  Note: While true is the default value for reasons of backward compatibility, we recommend setting this parameter to false when developing web applications that are independent of the Java process applications deployed to the engine. (optional, default to true)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Dictionary&lt;string, VariableValueDto&gt;</returns>
        System.Threading.Tasks.Task<Dictionary<string, VariableValueDto>> GetFormVariablesAsync(string id, string variableNames = default(string), bool? deserializeValues = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Task Form Variables
        /// </summary>
        /// <remarks>
        /// Retrieves the form variables for a task. The form variables take form data specified on the task into account. If form fields are defined, the variable types and default values of the form fields are taken into account.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to retrieve the variables for.</param>
        /// <param name="variableNames">A comma-separated list of variable names. Allows restricting the list of requested variables to the variable names in the list. It is best practice to restrict the list of variables to the variables actually required by the form in order to minimize fetching of data. If the query parameter is ommitted all variables are fetched. If the query parameter contains non-existent variable names, the variable names are ignored. (optional)</param>
        /// <param name="deserializeValues">Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default true).  If set to true, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](http://jackson.codehaus.org/) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to false, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  Note: While true is the default value for reasons of backward compatibility, we recommend setting this parameter to false when developing web applications that are independent of the Java process applications deployed to the engine. (optional, default to true)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, VariableValueDto&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dictionary<string, VariableValueDto>>> GetFormVariablesWithHttpInfoAsync(string id, string variableNames = default(string), bool? deserializeValues = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Rendered Form
        /// </summary>
        /// <remarks>
        /// Retrieves the rendered form for a task. This method can be used to get the HTML rendering of a [Generated Task Form](https://docs.camunda.org/manual/7.15/user-guide/task-forms/#generated-task-forms).
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to get the rendered form for.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetRenderedFormAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Rendered Form
        /// </summary>
        /// <remarks>
        /// Retrieves the rendered form for a task. This method can be used to get the HTML rendering of a [Generated Task Form](https://docs.camunda.org/manual/7.15/user-guide/task-forms/#generated-task-forms).
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to get the rendered form for.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetRenderedFormWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get
        /// </summary>
        /// <remarks>
        /// Retrieves a task by id.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to be retrieved.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TaskDto</returns>
        System.Threading.Tasks.Task<TaskDto> GetTaskAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get
        /// </summary>
        /// <remarks>
        /// Retrieves a task by id.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to be retrieved.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TaskDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaskDto>> GetTaskWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get List
        /// </summary>
        /// <remarks>
        /// Queries for tasks that fulfill a given filter. The size of the result set can be retrieved by using the Get Task Count method.  **Security Consideration:** There are several query parameters (such as assigneeExpression) for specifying an EL expression. These are disabled by default to prevent remote code execution. See the section on [security considerations](https://docs.camunda.org/manual/7.15/user-guide/process-engine/securing-custom-code/) for custom code in the user guide for details.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Restrict to task with the given id. (optional)</param>
        /// <param name="taskIdIn">Restrict to tasks with any of the given ids. (optional)</param>
        /// <param name="processInstanceId">Restrict to tasks that belong to process instances with the given id. (optional)</param>
        /// <param name="processInstanceIdIn">Restrict to tasks that belong to process instances with the given ids. (optional)</param>
        /// <param name="processInstanceBusinessKey">Restrict to tasks that belong to process instances with the given business key. (optional)</param>
        /// <param name="processInstanceBusinessKeyExpression">Restrict to tasks that belong to process instances with the given business key which  is described by an expression. See the  [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. (optional)</param>
        /// <param name="processInstanceBusinessKeyIn">Restrict to tasks that belong to process instances with one of the give business keys.  The keys need to be in a comma-separated list. (optional)</param>
        /// <param name="processInstanceBusinessKeyLike">Restrict to tasks that have a process instance business key that has the parameter  value as a substring. (optional)</param>
        /// <param name="processInstanceBusinessKeyLikeExpression">Restrict to tasks that have a process instance business key that has the parameter  value as a substring and is described by an expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions)  for more information on available functions. (optional)</param>
        /// <param name="processDefinitionId">Restrict to tasks that belong to a process definition with the given id. (optional)</param>
        /// <param name="processDefinitionKey">Restrict to tasks that belong to a process definition with the given key. (optional)</param>
        /// <param name="processDefinitionKeyIn">Restrict to tasks that belong to a process definition with one of the given keys. The  keys need to be in a comma-separated list. (optional)</param>
        /// <param name="processDefinitionName">Restrict to tasks that belong to a process definition with the given name. (optional)</param>
        /// <param name="processDefinitionNameLike">Restrict to tasks that have a process definition name that has the parameter value as  a substring. (optional)</param>
        /// <param name="executionId">Restrict to tasks that belong to an execution with the given id. (optional)</param>
        /// <param name="caseInstanceId">Restrict to tasks that belong to case instances with the given id. (optional)</param>
        /// <param name="caseInstanceBusinessKey">Restrict to tasks that belong to case instances with the given business key. (optional)</param>
        /// <param name="caseInstanceBusinessKeyLike">Restrict to tasks that have a case instance business key that has the parameter value  as a substring. (optional)</param>
        /// <param name="caseDefinitionId">Restrict to tasks that belong to a case definition with the given id. (optional)</param>
        /// <param name="caseDefinitionKey">Restrict to tasks that belong to a case definition with the given key. (optional)</param>
        /// <param name="caseDefinitionName">Restrict to tasks that belong to a case definition with the given name. (optional)</param>
        /// <param name="caseDefinitionNameLike">Restrict to tasks that have a case definition name that has the parameter value as a  substring. (optional)</param>
        /// <param name="caseExecutionId">Restrict to tasks that belong to a case execution with the given id. (optional)</param>
        /// <param name="activityInstanceIdIn">Only include tasks which belong to one of the passed and comma-separated activity  instance ids. (optional)</param>
        /// <param name="tenantIdIn">Only include tasks which belong to one of the passed and comma-separated  tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include tasks which belong to no tenant. Value may only be &#x60;true&#x60;,  as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="assignee">Restrict to tasks that the given user is assigned to. (optional)</param>
        /// <param name="assigneeExpression">Restrict to tasks that the user described by the given expression is assigned to.  See the  [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions)  for more information on available functions. (optional)</param>
        /// <param name="assigneeLike">Restrict to tasks that have an assignee that has the parameter  value as a substring. (optional)</param>
        /// <param name="assigneeLikeExpression">Restrict to tasks that have an assignee that has the parameter value described by the  given expression as a substring. See the  [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions)  for more information on available functions. (optional)</param>
        /// <param name="assigneeIn">Only include tasks which are assigned to one of the passed and  comma-separated user ids. (optional)</param>
        /// <param name="owner">Restrict to tasks that the given user owns. (optional)</param>
        /// <param name="ownerExpression">Restrict to tasks that the user described by the given expression owns. See the  [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions)  for more information on available functions. (optional)</param>
        /// <param name="candidateGroup">Only include tasks that are offered to the given group. (optional)</param>
        /// <param name="candidateGroupExpression">Only include tasks that are offered to the group described by the given expression.  See the  [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions)  for more information on available functions. (optional)</param>
        /// <param name="candidateUser">Only include tasks that are offered to the given user or to one of his groups. (optional)</param>
        /// <param name="candidateUserExpression">Only include tasks that are offered to the user described by the given expression.  See the  [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions)  for more information on available functions. (optional)</param>
        /// <param name="includeAssignedTasks">Also include tasks that are assigned to users in candidate queries. Default is to only  include tasks that are not assigned to any user if you query by candidate user or group(s). (optional, default to false)</param>
        /// <param name="involvedUser">Only include tasks that the given user is involved in. A user is involved in a task if  an identity link exists between task and user (e.g., the user is the assignee). (optional)</param>
        /// <param name="involvedUserExpression">Only include tasks that the user described by the given expression is involved in. A user is involved in a task if an identity link exists between task and user (e.g., the user is the assignee). See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. (optional)</param>
        /// <param name="assigned">If set to &#x60;true&#x60;, restricts the query to all tasks that are assigned. (optional, default to false)</param>
        /// <param name="unassigned">If set to &#x60;true&#x60;, restricts the query to all tasks that are unassigned. (optional, default to false)</param>
        /// <param name="taskDefinitionKey">Restrict to tasks that have the given key. (optional)</param>
        /// <param name="taskDefinitionKeyIn">Restrict to tasks that have one of the given keys. The keys need to be in a comma-separated list. (optional)</param>
        /// <param name="taskDefinitionKeyLike">Restrict to tasks that have a key that has the parameter value as a substring. (optional)</param>
        /// <param name="name">Restrict to tasks that have the given name. (optional)</param>
        /// <param name="nameNotEqual">Restrict to tasks that do not have the given name. (optional)</param>
        /// <param name="nameLike">Restrict to tasks that have a name with the given parameter value as substring. (optional)</param>
        /// <param name="nameNotLike">Restrict to tasks that do not have a name with the given parameter value as substring. (optional)</param>
        /// <param name="description">Restrict to tasks that have the given description. (optional)</param>
        /// <param name="descriptionLike">Restrict to tasks that have a description that has the parameter value as a substring. (optional)</param>
        /// <param name="priority">Restrict to tasks that have the given priority. (optional)</param>
        /// <param name="maxPriority">Restrict to tasks that have a lower or equal priority. (optional)</param>
        /// <param name="minPriority">Restrict to tasks that have a higher or equal priority. (optional)</param>
        /// <param name="dueDate">Restrict to tasks that are due on the given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.546+0200&#x60;. (optional)</param>
        /// <param name="dueDateExpression">Restrict to tasks that are due on the date described by the given expression. See the [User Guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)</param>
        /// <param name="dueAfter">Restrict to tasks that are due after the given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.435+0200&#x60;. (optional)</param>
        /// <param name="dueAfterExpression">Restrict to tasks that are due after the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)</param>
        /// <param name="dueBefore">Restrict to tasks that are due before the given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.243+0200&#x60;. (optional)</param>
        /// <param name="dueBeforeExpression">Restrict to tasks that are due before the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)</param>
        /// <param name="withoutDueDate">Only include tasks which have no due date. Value may only be &#x60;true&#x60;,  as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="followUpDate">Restrict to tasks that have a followUp date on the given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.342+0200&#x60;. (optional)</param>
        /// <param name="followUpDateExpression">Restrict to tasks that have a followUp date on the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)</param>
        /// <param name="followUpAfter">Restrict to tasks that have a followUp date after the given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.542+0200&#x60;. (optional)</param>
        /// <param name="followUpAfterExpression">Restrict to tasks that have a followUp date after the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)</param>
        /// <param name="followUpBefore">Restrict to tasks that have a followUp date before the given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.234+0200&#x60;. (optional)</param>
        /// <param name="followUpBeforeExpression">Restrict to tasks that have a followUp date before the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)</param>
        /// <param name="followUpBeforeOrNotExistent">Restrict to tasks that have no followUp date or a followUp date before the given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.432+0200&#x60;. The typical use case is to query all &#x60;active&#x60; tasks for a user for a given date. (optional)</param>
        /// <param name="followUpBeforeOrNotExistentExpression">Restrict to tasks that have no followUp date or a followUp date before the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)</param>
        /// <param name="createdOn">Restrict to tasks that were created on the given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.324+0200&#x60;. (optional)</param>
        /// <param name="createdOnExpression">Restrict to tasks that were created on the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)</param>
        /// <param name="createdAfter">Restrict to tasks that were created after the given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.342+0200&#x60;. (optional)</param>
        /// <param name="createdAfterExpression">Restrict to tasks that were created after the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)</param>
        /// <param name="createdBefore">Restrict to tasks that were created before the given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.332+0200&#x60;. (optional)</param>
        /// <param name="createdBeforeExpression">Restrict to tasks that were created before the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)</param>
        /// <param name="delegationState">Restrict to tasks that are in the given delegation state. Valid values are &#x60;PENDING&#x60; and &#x60;RESOLVED&#x60;. (optional)</param>
        /// <param name="candidateGroups">Restrict to tasks that are offered to any of the given candidate groups. Takes a comma-separated list of group names, so for example &#x60;developers,support,sales&#x60;. (optional)</param>
        /// <param name="candidateGroupsExpression">Restrict to tasks that are offered to any of the candidate groups described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to &#x60;java.util.List&#x60; of Strings. (optional)</param>
        /// <param name="withCandidateGroups">Only include tasks which have a candidate group. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="withoutCandidateGroups">Only include tasks which have no candidate group. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="withCandidateUsers">Only include tasks which have a candidate user. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="withoutCandidateUsers">Only include tasks which have no candidate users. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="active">Only include active tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="suspended">Only include suspended tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="taskVariables">Only include tasks that have variables with certain values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value.  **Note**: Values are always treated as String objects on server side.  Valid &#x60;operator&#x60; values are: &#x60;eq&#x60; - equal to; &#x60;neq&#x60; - not equal to; &#x60;gt&#x60; - greater than; &#x60;gteq&#x60; - greater than or equal to; &#x60;lt&#x60; - lower than; &#x60;lteq&#x60; - lower than or equal to; &#x60;like&#x60;. &#x60;key&#x60; and &#x60;value&#x60; may not contain underscore or comma characters. (optional)</param>
        /// <param name="processVariables">Only include tasks that belong to process instances that have variables with certain  values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value.  **Note**: Values are always treated as String objects on server side.  Valid &#x60;operator&#x60; values are: &#x60;eq&#x60; - equal to; &#x60;neq&#x60; - not equal to; &#x60;gt&#x60; - greater than; &#x60;gteq&#x60; - greater than or equal to; &#x60;lt&#x60; - lower than; &#x60;lteq&#x60; - lower than or equal to; &#x60;like&#x60;; &#x60;notLike&#x60;. &#x60;key&#x60; and &#x60;value&#x60; may not contain underscore or comma characters. (optional)</param>
        /// <param name="caseInstanceVariables">Only include tasks that belong to case instances that have variables with certain values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value.  **Note**: Values are always treated as String objects on server side.  Valid &#x60;operator&#x60; values are: &#x60;eq&#x60; - equal to; &#x60;neq&#x60; - not equal to; &#x60;gt&#x60; - greater than; &#x60;gteq&#x60; - greater than or equal to; &#x60;lt&#x60; - lower than; &#x60;lteq&#x60; - lower than or equal to; &#x60;like&#x60;. &#x60;key&#x60; and &#x60;value&#x60; may not contain underscore or comma characters. (optional)</param>
        /// <param name="variableNamesIgnoreCase">Match all variable names in this query case-insensitively. If set &#x60;variableName&#x60; and &#x60;variablename&#x60; are treated as equal. (optional, default to false)</param>
        /// <param name="variableValuesIgnoreCase">Match all variable values in this query case-insensitively. If set &#x60;variableValue&#x60; and &#x60;variablevalue&#x60; are treated as equal. (optional, default to false)</param>
        /// <param name="parentTaskId">Restrict query to all tasks that are sub tasks of the given task. Takes a task id. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;TaskDto&gt;</returns>
        System.Threading.Tasks.Task<List<TaskDto>> GetTasksAsync(string taskId = default(string), string taskIdIn = default(string), string processInstanceId = default(string), string processInstanceIdIn = default(string), string processInstanceBusinessKey = default(string), string processInstanceBusinessKeyExpression = default(string), string processInstanceBusinessKeyIn = default(string), string processInstanceBusinessKeyLike = default(string), string processInstanceBusinessKeyLikeExpression = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string processDefinitionKeyIn = default(string), string processDefinitionName = default(string), string processDefinitionNameLike = default(string), string executionId = default(string), string caseInstanceId = default(string), string caseInstanceBusinessKey = default(string), string caseInstanceBusinessKeyLike = default(string), string caseDefinitionId = default(string), string caseDefinitionKey = default(string), string caseDefinitionName = default(string), string caseDefinitionNameLike = default(string), string caseExecutionId = default(string), string activityInstanceIdIn = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), string assignee = default(string), string assigneeExpression = default(string), string assigneeLike = default(string), string assigneeLikeExpression = default(string), string assigneeIn = default(string), string owner = default(string), string ownerExpression = default(string), string candidateGroup = default(string), string candidateGroupExpression = default(string), string candidateUser = default(string), string candidateUserExpression = default(string), bool? includeAssignedTasks = default(bool?), string involvedUser = default(string), string involvedUserExpression = default(string), bool? assigned = default(bool?), bool? unassigned = default(bool?), string taskDefinitionKey = default(string), string taskDefinitionKeyIn = default(string), string taskDefinitionKeyLike = default(string), string name = default(string), string nameNotEqual = default(string), string nameLike = default(string), string nameNotLike = default(string), string description = default(string), string descriptionLike = default(string), int? priority = default(int?), int? maxPriority = default(int?), int? minPriority = default(int?), string dueDate = default(string), string dueDateExpression = default(string), string dueAfter = default(string), string dueAfterExpression = default(string), string dueBefore = default(string), string dueBeforeExpression = default(string), bool? withoutDueDate = default(bool?), string followUpDate = default(string), string followUpDateExpression = default(string), string followUpAfter = default(string), string followUpAfterExpression = default(string), string followUpBefore = default(string), string followUpBeforeExpression = default(string), string followUpBeforeOrNotExistent = default(string), string followUpBeforeOrNotExistentExpression = default(string), string createdOn = default(string), string createdOnExpression = default(string), string createdAfter = default(string), string createdAfterExpression = default(string), string createdBefore = default(string), string createdBeforeExpression = default(string), string delegationState = default(string), string candidateGroups = default(string), string candidateGroupsExpression = default(string), bool? withCandidateGroups = default(bool?), bool? withoutCandidateGroups = default(bool?), bool? withCandidateUsers = default(bool?), bool? withoutCandidateUsers = default(bool?), bool? active = default(bool?), bool? suspended = default(bool?), string taskVariables = default(string), string processVariables = default(string), string caseInstanceVariables = default(string), bool? variableNamesIgnoreCase = default(bool?), bool? variableValuesIgnoreCase = default(bool?), string parentTaskId = default(string), string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get List
        /// </summary>
        /// <remarks>
        /// Queries for tasks that fulfill a given filter. The size of the result set can be retrieved by using the Get Task Count method.  **Security Consideration:** There are several query parameters (such as assigneeExpression) for specifying an EL expression. These are disabled by default to prevent remote code execution. See the section on [security considerations](https://docs.camunda.org/manual/7.15/user-guide/process-engine/securing-custom-code/) for custom code in the user guide for details.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Restrict to task with the given id. (optional)</param>
        /// <param name="taskIdIn">Restrict to tasks with any of the given ids. (optional)</param>
        /// <param name="processInstanceId">Restrict to tasks that belong to process instances with the given id. (optional)</param>
        /// <param name="processInstanceIdIn">Restrict to tasks that belong to process instances with the given ids. (optional)</param>
        /// <param name="processInstanceBusinessKey">Restrict to tasks that belong to process instances with the given business key. (optional)</param>
        /// <param name="processInstanceBusinessKeyExpression">Restrict to tasks that belong to process instances with the given business key which  is described by an expression. See the  [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. (optional)</param>
        /// <param name="processInstanceBusinessKeyIn">Restrict to tasks that belong to process instances with one of the give business keys.  The keys need to be in a comma-separated list. (optional)</param>
        /// <param name="processInstanceBusinessKeyLike">Restrict to tasks that have a process instance business key that has the parameter  value as a substring. (optional)</param>
        /// <param name="processInstanceBusinessKeyLikeExpression">Restrict to tasks that have a process instance business key that has the parameter  value as a substring and is described by an expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions)  for more information on available functions. (optional)</param>
        /// <param name="processDefinitionId">Restrict to tasks that belong to a process definition with the given id. (optional)</param>
        /// <param name="processDefinitionKey">Restrict to tasks that belong to a process definition with the given key. (optional)</param>
        /// <param name="processDefinitionKeyIn">Restrict to tasks that belong to a process definition with one of the given keys. The  keys need to be in a comma-separated list. (optional)</param>
        /// <param name="processDefinitionName">Restrict to tasks that belong to a process definition with the given name. (optional)</param>
        /// <param name="processDefinitionNameLike">Restrict to tasks that have a process definition name that has the parameter value as  a substring. (optional)</param>
        /// <param name="executionId">Restrict to tasks that belong to an execution with the given id. (optional)</param>
        /// <param name="caseInstanceId">Restrict to tasks that belong to case instances with the given id. (optional)</param>
        /// <param name="caseInstanceBusinessKey">Restrict to tasks that belong to case instances with the given business key. (optional)</param>
        /// <param name="caseInstanceBusinessKeyLike">Restrict to tasks that have a case instance business key that has the parameter value  as a substring. (optional)</param>
        /// <param name="caseDefinitionId">Restrict to tasks that belong to a case definition with the given id. (optional)</param>
        /// <param name="caseDefinitionKey">Restrict to tasks that belong to a case definition with the given key. (optional)</param>
        /// <param name="caseDefinitionName">Restrict to tasks that belong to a case definition with the given name. (optional)</param>
        /// <param name="caseDefinitionNameLike">Restrict to tasks that have a case definition name that has the parameter value as a  substring. (optional)</param>
        /// <param name="caseExecutionId">Restrict to tasks that belong to a case execution with the given id. (optional)</param>
        /// <param name="activityInstanceIdIn">Only include tasks which belong to one of the passed and comma-separated activity  instance ids. (optional)</param>
        /// <param name="tenantIdIn">Only include tasks which belong to one of the passed and comma-separated  tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include tasks which belong to no tenant. Value may only be &#x60;true&#x60;,  as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="assignee">Restrict to tasks that the given user is assigned to. (optional)</param>
        /// <param name="assigneeExpression">Restrict to tasks that the user described by the given expression is assigned to.  See the  [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions)  for more information on available functions. (optional)</param>
        /// <param name="assigneeLike">Restrict to tasks that have an assignee that has the parameter  value as a substring. (optional)</param>
        /// <param name="assigneeLikeExpression">Restrict to tasks that have an assignee that has the parameter value described by the  given expression as a substring. See the  [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions)  for more information on available functions. (optional)</param>
        /// <param name="assigneeIn">Only include tasks which are assigned to one of the passed and  comma-separated user ids. (optional)</param>
        /// <param name="owner">Restrict to tasks that the given user owns. (optional)</param>
        /// <param name="ownerExpression">Restrict to tasks that the user described by the given expression owns. See the  [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions)  for more information on available functions. (optional)</param>
        /// <param name="candidateGroup">Only include tasks that are offered to the given group. (optional)</param>
        /// <param name="candidateGroupExpression">Only include tasks that are offered to the group described by the given expression.  See the  [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions)  for more information on available functions. (optional)</param>
        /// <param name="candidateUser">Only include tasks that are offered to the given user or to one of his groups. (optional)</param>
        /// <param name="candidateUserExpression">Only include tasks that are offered to the user described by the given expression.  See the  [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions)  for more information on available functions. (optional)</param>
        /// <param name="includeAssignedTasks">Also include tasks that are assigned to users in candidate queries. Default is to only  include tasks that are not assigned to any user if you query by candidate user or group(s). (optional, default to false)</param>
        /// <param name="involvedUser">Only include tasks that the given user is involved in. A user is involved in a task if  an identity link exists between task and user (e.g., the user is the assignee). (optional)</param>
        /// <param name="involvedUserExpression">Only include tasks that the user described by the given expression is involved in. A user is involved in a task if an identity link exists between task and user (e.g., the user is the assignee). See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. (optional)</param>
        /// <param name="assigned">If set to &#x60;true&#x60;, restricts the query to all tasks that are assigned. (optional, default to false)</param>
        /// <param name="unassigned">If set to &#x60;true&#x60;, restricts the query to all tasks that are unassigned. (optional, default to false)</param>
        /// <param name="taskDefinitionKey">Restrict to tasks that have the given key. (optional)</param>
        /// <param name="taskDefinitionKeyIn">Restrict to tasks that have one of the given keys. The keys need to be in a comma-separated list. (optional)</param>
        /// <param name="taskDefinitionKeyLike">Restrict to tasks that have a key that has the parameter value as a substring. (optional)</param>
        /// <param name="name">Restrict to tasks that have the given name. (optional)</param>
        /// <param name="nameNotEqual">Restrict to tasks that do not have the given name. (optional)</param>
        /// <param name="nameLike">Restrict to tasks that have a name with the given parameter value as substring. (optional)</param>
        /// <param name="nameNotLike">Restrict to tasks that do not have a name with the given parameter value as substring. (optional)</param>
        /// <param name="description">Restrict to tasks that have the given description. (optional)</param>
        /// <param name="descriptionLike">Restrict to tasks that have a description that has the parameter value as a substring. (optional)</param>
        /// <param name="priority">Restrict to tasks that have the given priority. (optional)</param>
        /// <param name="maxPriority">Restrict to tasks that have a lower or equal priority. (optional)</param>
        /// <param name="minPriority">Restrict to tasks that have a higher or equal priority. (optional)</param>
        /// <param name="dueDate">Restrict to tasks that are due on the given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.546+0200&#x60;. (optional)</param>
        /// <param name="dueDateExpression">Restrict to tasks that are due on the date described by the given expression. See the [User Guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)</param>
        /// <param name="dueAfter">Restrict to tasks that are due after the given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.435+0200&#x60;. (optional)</param>
        /// <param name="dueAfterExpression">Restrict to tasks that are due after the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)</param>
        /// <param name="dueBefore">Restrict to tasks that are due before the given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.243+0200&#x60;. (optional)</param>
        /// <param name="dueBeforeExpression">Restrict to tasks that are due before the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)</param>
        /// <param name="withoutDueDate">Only include tasks which have no due date. Value may only be &#x60;true&#x60;,  as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="followUpDate">Restrict to tasks that have a followUp date on the given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.342+0200&#x60;. (optional)</param>
        /// <param name="followUpDateExpression">Restrict to tasks that have a followUp date on the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)</param>
        /// <param name="followUpAfter">Restrict to tasks that have a followUp date after the given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.542+0200&#x60;. (optional)</param>
        /// <param name="followUpAfterExpression">Restrict to tasks that have a followUp date after the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)</param>
        /// <param name="followUpBefore">Restrict to tasks that have a followUp date before the given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.234+0200&#x60;. (optional)</param>
        /// <param name="followUpBeforeExpression">Restrict to tasks that have a followUp date before the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)</param>
        /// <param name="followUpBeforeOrNotExistent">Restrict to tasks that have no followUp date or a followUp date before the given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.432+0200&#x60;. The typical use case is to query all &#x60;active&#x60; tasks for a user for a given date. (optional)</param>
        /// <param name="followUpBeforeOrNotExistentExpression">Restrict to tasks that have no followUp date or a followUp date before the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)</param>
        /// <param name="createdOn">Restrict to tasks that were created on the given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.324+0200&#x60;. (optional)</param>
        /// <param name="createdOnExpression">Restrict to tasks that were created on the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)</param>
        /// <param name="createdAfter">Restrict to tasks that were created after the given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.342+0200&#x60;. (optional)</param>
        /// <param name="createdAfterExpression">Restrict to tasks that were created after the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)</param>
        /// <param name="createdBefore">Restrict to tasks that were created before the given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.332+0200&#x60;. (optional)</param>
        /// <param name="createdBeforeExpression">Restrict to tasks that were created before the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)</param>
        /// <param name="delegationState">Restrict to tasks that are in the given delegation state. Valid values are &#x60;PENDING&#x60; and &#x60;RESOLVED&#x60;. (optional)</param>
        /// <param name="candidateGroups">Restrict to tasks that are offered to any of the given candidate groups. Takes a comma-separated list of group names, so for example &#x60;developers,support,sales&#x60;. (optional)</param>
        /// <param name="candidateGroupsExpression">Restrict to tasks that are offered to any of the candidate groups described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to &#x60;java.util.List&#x60; of Strings. (optional)</param>
        /// <param name="withCandidateGroups">Only include tasks which have a candidate group. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="withoutCandidateGroups">Only include tasks which have no candidate group. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="withCandidateUsers">Only include tasks which have a candidate user. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="withoutCandidateUsers">Only include tasks which have no candidate users. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="active">Only include active tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="suspended">Only include suspended tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="taskVariables">Only include tasks that have variables with certain values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value.  **Note**: Values are always treated as String objects on server side.  Valid &#x60;operator&#x60; values are: &#x60;eq&#x60; - equal to; &#x60;neq&#x60; - not equal to; &#x60;gt&#x60; - greater than; &#x60;gteq&#x60; - greater than or equal to; &#x60;lt&#x60; - lower than; &#x60;lteq&#x60; - lower than or equal to; &#x60;like&#x60;. &#x60;key&#x60; and &#x60;value&#x60; may not contain underscore or comma characters. (optional)</param>
        /// <param name="processVariables">Only include tasks that belong to process instances that have variables with certain  values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value.  **Note**: Values are always treated as String objects on server side.  Valid &#x60;operator&#x60; values are: &#x60;eq&#x60; - equal to; &#x60;neq&#x60; - not equal to; &#x60;gt&#x60; - greater than; &#x60;gteq&#x60; - greater than or equal to; &#x60;lt&#x60; - lower than; &#x60;lteq&#x60; - lower than or equal to; &#x60;like&#x60;; &#x60;notLike&#x60;. &#x60;key&#x60; and &#x60;value&#x60; may not contain underscore or comma characters. (optional)</param>
        /// <param name="caseInstanceVariables">Only include tasks that belong to case instances that have variables with certain values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value.  **Note**: Values are always treated as String objects on server side.  Valid &#x60;operator&#x60; values are: &#x60;eq&#x60; - equal to; &#x60;neq&#x60; - not equal to; &#x60;gt&#x60; - greater than; &#x60;gteq&#x60; - greater than or equal to; &#x60;lt&#x60; - lower than; &#x60;lteq&#x60; - lower than or equal to; &#x60;like&#x60;. &#x60;key&#x60; and &#x60;value&#x60; may not contain underscore or comma characters. (optional)</param>
        /// <param name="variableNamesIgnoreCase">Match all variable names in this query case-insensitively. If set &#x60;variableName&#x60; and &#x60;variablename&#x60; are treated as equal. (optional, default to false)</param>
        /// <param name="variableValuesIgnoreCase">Match all variable values in this query case-insensitively. If set &#x60;variableValue&#x60; and &#x60;variablevalue&#x60; are treated as equal. (optional, default to false)</param>
        /// <param name="parentTaskId">Restrict query to all tasks that are sub tasks of the given task. Takes a task id. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;TaskDto&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TaskDto>>> GetTasksWithHttpInfoAsync(string taskId = default(string), string taskIdIn = default(string), string processInstanceId = default(string), string processInstanceIdIn = default(string), string processInstanceBusinessKey = default(string), string processInstanceBusinessKeyExpression = default(string), string processInstanceBusinessKeyIn = default(string), string processInstanceBusinessKeyLike = default(string), string processInstanceBusinessKeyLikeExpression = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string processDefinitionKeyIn = default(string), string processDefinitionName = default(string), string processDefinitionNameLike = default(string), string executionId = default(string), string caseInstanceId = default(string), string caseInstanceBusinessKey = default(string), string caseInstanceBusinessKeyLike = default(string), string caseDefinitionId = default(string), string caseDefinitionKey = default(string), string caseDefinitionName = default(string), string caseDefinitionNameLike = default(string), string caseExecutionId = default(string), string activityInstanceIdIn = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), string assignee = default(string), string assigneeExpression = default(string), string assigneeLike = default(string), string assigneeLikeExpression = default(string), string assigneeIn = default(string), string owner = default(string), string ownerExpression = default(string), string candidateGroup = default(string), string candidateGroupExpression = default(string), string candidateUser = default(string), string candidateUserExpression = default(string), bool? includeAssignedTasks = default(bool?), string involvedUser = default(string), string involvedUserExpression = default(string), bool? assigned = default(bool?), bool? unassigned = default(bool?), string taskDefinitionKey = default(string), string taskDefinitionKeyIn = default(string), string taskDefinitionKeyLike = default(string), string name = default(string), string nameNotEqual = default(string), string nameLike = default(string), string nameNotLike = default(string), string description = default(string), string descriptionLike = default(string), int? priority = default(int?), int? maxPriority = default(int?), int? minPriority = default(int?), string dueDate = default(string), string dueDateExpression = default(string), string dueAfter = default(string), string dueAfterExpression = default(string), string dueBefore = default(string), string dueBeforeExpression = default(string), bool? withoutDueDate = default(bool?), string followUpDate = default(string), string followUpDateExpression = default(string), string followUpAfter = default(string), string followUpAfterExpression = default(string), string followUpBefore = default(string), string followUpBeforeExpression = default(string), string followUpBeforeOrNotExistent = default(string), string followUpBeforeOrNotExistentExpression = default(string), string createdOn = default(string), string createdOnExpression = default(string), string createdAfter = default(string), string createdAfterExpression = default(string), string createdBefore = default(string), string createdBeforeExpression = default(string), string delegationState = default(string), string candidateGroups = default(string), string candidateGroupsExpression = default(string), bool? withCandidateGroups = default(bool?), bool? withoutCandidateGroups = default(bool?), bool? withCandidateUsers = default(bool?), bool? withoutCandidateUsers = default(bool?), bool? active = default(bool?), bool? suspended = default(bool?), string taskVariables = default(string), string processVariables = default(string), string caseInstanceVariables = default(string), bool? variableNamesIgnoreCase = default(bool?), bool? variableValuesIgnoreCase = default(bool?), string parentTaskId = default(string), string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get List Count
        /// </summary>
        /// <remarks>
        /// Retrieves the number of tasks that fulfill a provided filter. Corresponds to the size of the result set when using the [Get Tasks](https://docs.camunda.org/manual/7.15/reference/rest/task/) method.  **Security Consideration:** There are several query parameters (such as assigneeExpression) for specifying an EL expression. These are disabled by default to prevent remote code execution. See the section on [security considerations](https://docs.camunda.org/manual/7.15/user-guide/process-engine/securing-custom-code/) for custom code in the user guide for details.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Restrict to task with the given id. (optional)</param>
        /// <param name="taskIdIn">Restrict to tasks with any of the given ids. (optional)</param>
        /// <param name="processInstanceId">Restrict to tasks that belong to process instances with the given id. (optional)</param>
        /// <param name="processInstanceIdIn">Restrict to tasks that belong to process instances with the given ids. (optional)</param>
        /// <param name="processInstanceBusinessKey">Restrict to tasks that belong to process instances with the given business key. (optional)</param>
        /// <param name="processInstanceBusinessKeyExpression">Restrict to tasks that belong to process instances with the given business key which  is described by an expression. See the  [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. (optional)</param>
        /// <param name="processInstanceBusinessKeyIn">Restrict to tasks that belong to process instances with one of the give business keys.  The keys need to be in a comma-separated list. (optional)</param>
        /// <param name="processInstanceBusinessKeyLike">Restrict to tasks that have a process instance business key that has the parameter  value as a substring. (optional)</param>
        /// <param name="processInstanceBusinessKeyLikeExpression">Restrict to tasks that have a process instance business key that has the parameter  value as a substring and is described by an expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions)  for more information on available functions. (optional)</param>
        /// <param name="processDefinitionId">Restrict to tasks that belong to a process definition with the given id. (optional)</param>
        /// <param name="processDefinitionKey">Restrict to tasks that belong to a process definition with the given key. (optional)</param>
        /// <param name="processDefinitionKeyIn">Restrict to tasks that belong to a process definition with one of the given keys. The  keys need to be in a comma-separated list. (optional)</param>
        /// <param name="processDefinitionName">Restrict to tasks that belong to a process definition with the given name. (optional)</param>
        /// <param name="processDefinitionNameLike">Restrict to tasks that have a process definition name that has the parameter value as  a substring. (optional)</param>
        /// <param name="executionId">Restrict to tasks that belong to an execution with the given id. (optional)</param>
        /// <param name="caseInstanceId">Restrict to tasks that belong to case instances with the given id. (optional)</param>
        /// <param name="caseInstanceBusinessKey">Restrict to tasks that belong to case instances with the given business key. (optional)</param>
        /// <param name="caseInstanceBusinessKeyLike">Restrict to tasks that have a case instance business key that has the parameter value  as a substring. (optional)</param>
        /// <param name="caseDefinitionId">Restrict to tasks that belong to a case definition with the given id. (optional)</param>
        /// <param name="caseDefinitionKey">Restrict to tasks that belong to a case definition with the given key. (optional)</param>
        /// <param name="caseDefinitionName">Restrict to tasks that belong to a case definition with the given name. (optional)</param>
        /// <param name="caseDefinitionNameLike">Restrict to tasks that have a case definition name that has the parameter value as a  substring. (optional)</param>
        /// <param name="caseExecutionId">Restrict to tasks that belong to a case execution with the given id. (optional)</param>
        /// <param name="activityInstanceIdIn">Only include tasks which belong to one of the passed and comma-separated activity  instance ids. (optional)</param>
        /// <param name="tenantIdIn">Only include tasks which belong to one of the passed and comma-separated  tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include tasks which belong to no tenant. Value may only be &#x60;true&#x60;,  as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="assignee">Restrict to tasks that the given user is assigned to. (optional)</param>
        /// <param name="assigneeExpression">Restrict to tasks that the user described by the given expression is assigned to.  See the  [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions)  for more information on available functions. (optional)</param>
        /// <param name="assigneeLike">Restrict to tasks that have an assignee that has the parameter  value as a substring. (optional)</param>
        /// <param name="assigneeLikeExpression">Restrict to tasks that have an assignee that has the parameter value described by the  given expression as a substring. See the  [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions)  for more information on available functions. (optional)</param>
        /// <param name="assigneeIn">Only include tasks which are assigned to one of the passed and  comma-separated user ids. (optional)</param>
        /// <param name="owner">Restrict to tasks that the given user owns. (optional)</param>
        /// <param name="ownerExpression">Restrict to tasks that the user described by the given expression owns. See the  [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions)  for more information on available functions. (optional)</param>
        /// <param name="candidateGroup">Only include tasks that are offered to the given group. (optional)</param>
        /// <param name="candidateGroupExpression">Only include tasks that are offered to the group described by the given expression.  See the  [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions)  for more information on available functions. (optional)</param>
        /// <param name="candidateUser">Only include tasks that are offered to the given user or to one of his groups. (optional)</param>
        /// <param name="candidateUserExpression">Only include tasks that are offered to the user described by the given expression.  See the  [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions)  for more information on available functions. (optional)</param>
        /// <param name="includeAssignedTasks">Also include tasks that are assigned to users in candidate queries. Default is to only  include tasks that are not assigned to any user if you query by candidate user or group(s). (optional, default to false)</param>
        /// <param name="involvedUser">Only include tasks that the given user is involved in. A user is involved in a task if  an identity link exists between task and user (e.g., the user is the assignee). (optional)</param>
        /// <param name="involvedUserExpression">Only include tasks that the user described by the given expression is involved in. A user is involved in a task if an identity link exists between task and user (e.g., the user is the assignee). See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. (optional)</param>
        /// <param name="assigned">If set to &#x60;true&#x60;, restricts the query to all tasks that are assigned. (optional, default to false)</param>
        /// <param name="unassigned">If set to &#x60;true&#x60;, restricts the query to all tasks that are unassigned. (optional, default to false)</param>
        /// <param name="taskDefinitionKey">Restrict to tasks that have the given key. (optional)</param>
        /// <param name="taskDefinitionKeyIn">Restrict to tasks that have one of the given keys. The keys need to be in a comma-separated list. (optional)</param>
        /// <param name="taskDefinitionKeyLike">Restrict to tasks that have a key that has the parameter value as a substring. (optional)</param>
        /// <param name="name">Restrict to tasks that have the given name. (optional)</param>
        /// <param name="nameNotEqual">Restrict to tasks that do not have the given name. (optional)</param>
        /// <param name="nameLike">Restrict to tasks that have a name with the given parameter value as substring. (optional)</param>
        /// <param name="nameNotLike">Restrict to tasks that do not have a name with the given parameter value as substring. (optional)</param>
        /// <param name="description">Restrict to tasks that have the given description. (optional)</param>
        /// <param name="descriptionLike">Restrict to tasks that have a description that has the parameter value as a substring. (optional)</param>
        /// <param name="priority">Restrict to tasks that have the given priority. (optional)</param>
        /// <param name="maxPriority">Restrict to tasks that have a lower or equal priority. (optional)</param>
        /// <param name="minPriority">Restrict to tasks that have a higher or equal priority. (optional)</param>
        /// <param name="dueDate">Restrict to tasks that are due on the given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.546+0200&#x60;. (optional)</param>
        /// <param name="dueDateExpression">Restrict to tasks that are due on the date described by the given expression. See the [User Guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)</param>
        /// <param name="dueAfter">Restrict to tasks that are due after the given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.435+0200&#x60;. (optional)</param>
        /// <param name="dueAfterExpression">Restrict to tasks that are due after the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)</param>
        /// <param name="dueBefore">Restrict to tasks that are due before the given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.243+0200&#x60;. (optional)</param>
        /// <param name="dueBeforeExpression">Restrict to tasks that are due before the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)</param>
        /// <param name="withoutDueDate">Only include tasks which have no due date. Value may only be &#x60;true&#x60;,  as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="followUpDate">Restrict to tasks that have a followUp date on the given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.342+0200&#x60;. (optional)</param>
        /// <param name="followUpDateExpression">Restrict to tasks that have a followUp date on the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)</param>
        /// <param name="followUpAfter">Restrict to tasks that have a followUp date after the given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.542+0200&#x60;. (optional)</param>
        /// <param name="followUpAfterExpression">Restrict to tasks that have a followUp date after the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)</param>
        /// <param name="followUpBefore">Restrict to tasks that have a followUp date before the given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.234+0200&#x60;. (optional)</param>
        /// <param name="followUpBeforeExpression">Restrict to tasks that have a followUp date before the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)</param>
        /// <param name="followUpBeforeOrNotExistent">Restrict to tasks that have no followUp date or a followUp date before the given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.432+0200&#x60;. The typical use case is to query all &#x60;active&#x60; tasks for a user for a given date. (optional)</param>
        /// <param name="followUpBeforeOrNotExistentExpression">Restrict to tasks that have no followUp date or a followUp date before the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)</param>
        /// <param name="createdOn">Restrict to tasks that were created on the given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.324+0200&#x60;. (optional)</param>
        /// <param name="createdOnExpression">Restrict to tasks that were created on the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)</param>
        /// <param name="createdAfter">Restrict to tasks that were created after the given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.342+0200&#x60;. (optional)</param>
        /// <param name="createdAfterExpression">Restrict to tasks that were created after the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)</param>
        /// <param name="createdBefore">Restrict to tasks that were created before the given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.332+0200&#x60;. (optional)</param>
        /// <param name="createdBeforeExpression">Restrict to tasks that were created before the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)</param>
        /// <param name="delegationState">Restrict to tasks that are in the given delegation state. Valid values are &#x60;PENDING&#x60; and &#x60;RESOLVED&#x60;. (optional)</param>
        /// <param name="candidateGroups">Restrict to tasks that are offered to any of the given candidate groups. Takes a comma-separated list of group names, so for example &#x60;developers,support,sales&#x60;. (optional)</param>
        /// <param name="candidateGroupsExpression">Restrict to tasks that are offered to any of the candidate groups described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to &#x60;java.util.List&#x60; of Strings. (optional)</param>
        /// <param name="withCandidateGroups">Only include tasks which have a candidate group. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="withoutCandidateGroups">Only include tasks which have no candidate group. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="withCandidateUsers">Only include tasks which have a candidate user. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="withoutCandidateUsers">Only include tasks which have no candidate users. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="active">Only include active tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="suspended">Only include suspended tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="taskVariables">Only include tasks that have variables with certain values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value.  **Note**: Values are always treated as String objects on server side.  Valid &#x60;operator&#x60; values are: &#x60;eq&#x60; - equal to; &#x60;neq&#x60; - not equal to; &#x60;gt&#x60; - greater than; &#x60;gteq&#x60; - greater than or equal to; &#x60;lt&#x60; - lower than; &#x60;lteq&#x60; - lower than or equal to; &#x60;like&#x60;. &#x60;key&#x60; and &#x60;value&#x60; may not contain underscore or comma characters. (optional)</param>
        /// <param name="processVariables">Only include tasks that belong to process instances that have variables with certain  values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value.  **Note**: Values are always treated as String objects on server side.  Valid &#x60;operator&#x60; values are: &#x60;eq&#x60; - equal to; &#x60;neq&#x60; - not equal to; &#x60;gt&#x60; - greater than; &#x60;gteq&#x60; - greater than or equal to; &#x60;lt&#x60; - lower than; &#x60;lteq&#x60; - lower than or equal to; &#x60;like&#x60;; &#x60;notLike&#x60;. &#x60;key&#x60; and &#x60;value&#x60; may not contain underscore or comma characters. (optional)</param>
        /// <param name="caseInstanceVariables">Only include tasks that belong to case instances that have variables with certain values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value.  **Note**: Values are always treated as String objects on server side.  Valid &#x60;operator&#x60; values are: &#x60;eq&#x60; - equal to; &#x60;neq&#x60; - not equal to; &#x60;gt&#x60; - greater than; &#x60;gteq&#x60; - greater than or equal to; &#x60;lt&#x60; - lower than; &#x60;lteq&#x60; - lower than or equal to; &#x60;like&#x60;. &#x60;key&#x60; and &#x60;value&#x60; may not contain underscore or comma characters. (optional)</param>
        /// <param name="variableNamesIgnoreCase">Match all variable names in this query case-insensitively. If set &#x60;variableName&#x60; and &#x60;variablename&#x60; are treated as equal. (optional, default to false)</param>
        /// <param name="variableValuesIgnoreCase">Match all variable values in this query case-insensitively. If set &#x60;variableValue&#x60; and &#x60;variablevalue&#x60; are treated as equal. (optional, default to false)</param>
        /// <param name="parentTaskId">Restrict query to all tasks that are sub tasks of the given task. Takes a task id. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CountResultDto</returns>
        System.Threading.Tasks.Task<CountResultDto> GetTasksCountAsync(string taskId = default(string), string taskIdIn = default(string), string processInstanceId = default(string), string processInstanceIdIn = default(string), string processInstanceBusinessKey = default(string), string processInstanceBusinessKeyExpression = default(string), string processInstanceBusinessKeyIn = default(string), string processInstanceBusinessKeyLike = default(string), string processInstanceBusinessKeyLikeExpression = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string processDefinitionKeyIn = default(string), string processDefinitionName = default(string), string processDefinitionNameLike = default(string), string executionId = default(string), string caseInstanceId = default(string), string caseInstanceBusinessKey = default(string), string caseInstanceBusinessKeyLike = default(string), string caseDefinitionId = default(string), string caseDefinitionKey = default(string), string caseDefinitionName = default(string), string caseDefinitionNameLike = default(string), string caseExecutionId = default(string), string activityInstanceIdIn = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), string assignee = default(string), string assigneeExpression = default(string), string assigneeLike = default(string), string assigneeLikeExpression = default(string), string assigneeIn = default(string), string owner = default(string), string ownerExpression = default(string), string candidateGroup = default(string), string candidateGroupExpression = default(string), string candidateUser = default(string), string candidateUserExpression = default(string), bool? includeAssignedTasks = default(bool?), string involvedUser = default(string), string involvedUserExpression = default(string), bool? assigned = default(bool?), bool? unassigned = default(bool?), string taskDefinitionKey = default(string), string taskDefinitionKeyIn = default(string), string taskDefinitionKeyLike = default(string), string name = default(string), string nameNotEqual = default(string), string nameLike = default(string), string nameNotLike = default(string), string description = default(string), string descriptionLike = default(string), int? priority = default(int?), int? maxPriority = default(int?), int? minPriority = default(int?), string dueDate = default(string), string dueDateExpression = default(string), string dueAfter = default(string), string dueAfterExpression = default(string), string dueBefore = default(string), string dueBeforeExpression = default(string), bool? withoutDueDate = default(bool?), string followUpDate = default(string), string followUpDateExpression = default(string), string followUpAfter = default(string), string followUpAfterExpression = default(string), string followUpBefore = default(string), string followUpBeforeExpression = default(string), string followUpBeforeOrNotExistent = default(string), string followUpBeforeOrNotExistentExpression = default(string), string createdOn = default(string), string createdOnExpression = default(string), string createdAfter = default(string), string createdAfterExpression = default(string), string createdBefore = default(string), string createdBeforeExpression = default(string), string delegationState = default(string), string candidateGroups = default(string), string candidateGroupsExpression = default(string), bool? withCandidateGroups = default(bool?), bool? withoutCandidateGroups = default(bool?), bool? withCandidateUsers = default(bool?), bool? withoutCandidateUsers = default(bool?), bool? active = default(bool?), bool? suspended = default(bool?), string taskVariables = default(string), string processVariables = default(string), string caseInstanceVariables = default(string), bool? variableNamesIgnoreCase = default(bool?), bool? variableValuesIgnoreCase = default(bool?), string parentTaskId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get List Count
        /// </summary>
        /// <remarks>
        /// Retrieves the number of tasks that fulfill a provided filter. Corresponds to the size of the result set when using the [Get Tasks](https://docs.camunda.org/manual/7.15/reference/rest/task/) method.  **Security Consideration:** There are several query parameters (such as assigneeExpression) for specifying an EL expression. These are disabled by default to prevent remote code execution. See the section on [security considerations](https://docs.camunda.org/manual/7.15/user-guide/process-engine/securing-custom-code/) for custom code in the user guide for details.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Restrict to task with the given id. (optional)</param>
        /// <param name="taskIdIn">Restrict to tasks with any of the given ids. (optional)</param>
        /// <param name="processInstanceId">Restrict to tasks that belong to process instances with the given id. (optional)</param>
        /// <param name="processInstanceIdIn">Restrict to tasks that belong to process instances with the given ids. (optional)</param>
        /// <param name="processInstanceBusinessKey">Restrict to tasks that belong to process instances with the given business key. (optional)</param>
        /// <param name="processInstanceBusinessKeyExpression">Restrict to tasks that belong to process instances with the given business key which  is described by an expression. See the  [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. (optional)</param>
        /// <param name="processInstanceBusinessKeyIn">Restrict to tasks that belong to process instances with one of the give business keys.  The keys need to be in a comma-separated list. (optional)</param>
        /// <param name="processInstanceBusinessKeyLike">Restrict to tasks that have a process instance business key that has the parameter  value as a substring. (optional)</param>
        /// <param name="processInstanceBusinessKeyLikeExpression">Restrict to tasks that have a process instance business key that has the parameter  value as a substring and is described by an expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions)  for more information on available functions. (optional)</param>
        /// <param name="processDefinitionId">Restrict to tasks that belong to a process definition with the given id. (optional)</param>
        /// <param name="processDefinitionKey">Restrict to tasks that belong to a process definition with the given key. (optional)</param>
        /// <param name="processDefinitionKeyIn">Restrict to tasks that belong to a process definition with one of the given keys. The  keys need to be in a comma-separated list. (optional)</param>
        /// <param name="processDefinitionName">Restrict to tasks that belong to a process definition with the given name. (optional)</param>
        /// <param name="processDefinitionNameLike">Restrict to tasks that have a process definition name that has the parameter value as  a substring. (optional)</param>
        /// <param name="executionId">Restrict to tasks that belong to an execution with the given id. (optional)</param>
        /// <param name="caseInstanceId">Restrict to tasks that belong to case instances with the given id. (optional)</param>
        /// <param name="caseInstanceBusinessKey">Restrict to tasks that belong to case instances with the given business key. (optional)</param>
        /// <param name="caseInstanceBusinessKeyLike">Restrict to tasks that have a case instance business key that has the parameter value  as a substring. (optional)</param>
        /// <param name="caseDefinitionId">Restrict to tasks that belong to a case definition with the given id. (optional)</param>
        /// <param name="caseDefinitionKey">Restrict to tasks that belong to a case definition with the given key. (optional)</param>
        /// <param name="caseDefinitionName">Restrict to tasks that belong to a case definition with the given name. (optional)</param>
        /// <param name="caseDefinitionNameLike">Restrict to tasks that have a case definition name that has the parameter value as a  substring. (optional)</param>
        /// <param name="caseExecutionId">Restrict to tasks that belong to a case execution with the given id. (optional)</param>
        /// <param name="activityInstanceIdIn">Only include tasks which belong to one of the passed and comma-separated activity  instance ids. (optional)</param>
        /// <param name="tenantIdIn">Only include tasks which belong to one of the passed and comma-separated  tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include tasks which belong to no tenant. Value may only be &#x60;true&#x60;,  as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="assignee">Restrict to tasks that the given user is assigned to. (optional)</param>
        /// <param name="assigneeExpression">Restrict to tasks that the user described by the given expression is assigned to.  See the  [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions)  for more information on available functions. (optional)</param>
        /// <param name="assigneeLike">Restrict to tasks that have an assignee that has the parameter  value as a substring. (optional)</param>
        /// <param name="assigneeLikeExpression">Restrict to tasks that have an assignee that has the parameter value described by the  given expression as a substring. See the  [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions)  for more information on available functions. (optional)</param>
        /// <param name="assigneeIn">Only include tasks which are assigned to one of the passed and  comma-separated user ids. (optional)</param>
        /// <param name="owner">Restrict to tasks that the given user owns. (optional)</param>
        /// <param name="ownerExpression">Restrict to tasks that the user described by the given expression owns. See the  [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions)  for more information on available functions. (optional)</param>
        /// <param name="candidateGroup">Only include tasks that are offered to the given group. (optional)</param>
        /// <param name="candidateGroupExpression">Only include tasks that are offered to the group described by the given expression.  See the  [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions)  for more information on available functions. (optional)</param>
        /// <param name="candidateUser">Only include tasks that are offered to the given user or to one of his groups. (optional)</param>
        /// <param name="candidateUserExpression">Only include tasks that are offered to the user described by the given expression.  See the  [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions)  for more information on available functions. (optional)</param>
        /// <param name="includeAssignedTasks">Also include tasks that are assigned to users in candidate queries. Default is to only  include tasks that are not assigned to any user if you query by candidate user or group(s). (optional, default to false)</param>
        /// <param name="involvedUser">Only include tasks that the given user is involved in. A user is involved in a task if  an identity link exists between task and user (e.g., the user is the assignee). (optional)</param>
        /// <param name="involvedUserExpression">Only include tasks that the user described by the given expression is involved in. A user is involved in a task if an identity link exists between task and user (e.g., the user is the assignee). See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. (optional)</param>
        /// <param name="assigned">If set to &#x60;true&#x60;, restricts the query to all tasks that are assigned. (optional, default to false)</param>
        /// <param name="unassigned">If set to &#x60;true&#x60;, restricts the query to all tasks that are unassigned. (optional, default to false)</param>
        /// <param name="taskDefinitionKey">Restrict to tasks that have the given key. (optional)</param>
        /// <param name="taskDefinitionKeyIn">Restrict to tasks that have one of the given keys. The keys need to be in a comma-separated list. (optional)</param>
        /// <param name="taskDefinitionKeyLike">Restrict to tasks that have a key that has the parameter value as a substring. (optional)</param>
        /// <param name="name">Restrict to tasks that have the given name. (optional)</param>
        /// <param name="nameNotEqual">Restrict to tasks that do not have the given name. (optional)</param>
        /// <param name="nameLike">Restrict to tasks that have a name with the given parameter value as substring. (optional)</param>
        /// <param name="nameNotLike">Restrict to tasks that do not have a name with the given parameter value as substring. (optional)</param>
        /// <param name="description">Restrict to tasks that have the given description. (optional)</param>
        /// <param name="descriptionLike">Restrict to tasks that have a description that has the parameter value as a substring. (optional)</param>
        /// <param name="priority">Restrict to tasks that have the given priority. (optional)</param>
        /// <param name="maxPriority">Restrict to tasks that have a lower or equal priority. (optional)</param>
        /// <param name="minPriority">Restrict to tasks that have a higher or equal priority. (optional)</param>
        /// <param name="dueDate">Restrict to tasks that are due on the given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.546+0200&#x60;. (optional)</param>
        /// <param name="dueDateExpression">Restrict to tasks that are due on the date described by the given expression. See the [User Guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)</param>
        /// <param name="dueAfter">Restrict to tasks that are due after the given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.435+0200&#x60;. (optional)</param>
        /// <param name="dueAfterExpression">Restrict to tasks that are due after the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)</param>
        /// <param name="dueBefore">Restrict to tasks that are due before the given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.243+0200&#x60;. (optional)</param>
        /// <param name="dueBeforeExpression">Restrict to tasks that are due before the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)</param>
        /// <param name="withoutDueDate">Only include tasks which have no due date. Value may only be &#x60;true&#x60;,  as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="followUpDate">Restrict to tasks that have a followUp date on the given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.342+0200&#x60;. (optional)</param>
        /// <param name="followUpDateExpression">Restrict to tasks that have a followUp date on the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)</param>
        /// <param name="followUpAfter">Restrict to tasks that have a followUp date after the given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.542+0200&#x60;. (optional)</param>
        /// <param name="followUpAfterExpression">Restrict to tasks that have a followUp date after the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)</param>
        /// <param name="followUpBefore">Restrict to tasks that have a followUp date before the given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.234+0200&#x60;. (optional)</param>
        /// <param name="followUpBeforeExpression">Restrict to tasks that have a followUp date before the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)</param>
        /// <param name="followUpBeforeOrNotExistent">Restrict to tasks that have no followUp date or a followUp date before the given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.432+0200&#x60;. The typical use case is to query all &#x60;active&#x60; tasks for a user for a given date. (optional)</param>
        /// <param name="followUpBeforeOrNotExistentExpression">Restrict to tasks that have no followUp date or a followUp date before the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)</param>
        /// <param name="createdOn">Restrict to tasks that were created on the given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.324+0200&#x60;. (optional)</param>
        /// <param name="createdOnExpression">Restrict to tasks that were created on the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)</param>
        /// <param name="createdAfter">Restrict to tasks that were created after the given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.342+0200&#x60;. (optional)</param>
        /// <param name="createdAfterExpression">Restrict to tasks that were created after the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)</param>
        /// <param name="createdBefore">Restrict to tasks that were created before the given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.332+0200&#x60;. (optional)</param>
        /// <param name="createdBeforeExpression">Restrict to tasks that were created before the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)</param>
        /// <param name="delegationState">Restrict to tasks that are in the given delegation state. Valid values are &#x60;PENDING&#x60; and &#x60;RESOLVED&#x60;. (optional)</param>
        /// <param name="candidateGroups">Restrict to tasks that are offered to any of the given candidate groups. Takes a comma-separated list of group names, so for example &#x60;developers,support,sales&#x60;. (optional)</param>
        /// <param name="candidateGroupsExpression">Restrict to tasks that are offered to any of the candidate groups described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to &#x60;java.util.List&#x60; of Strings. (optional)</param>
        /// <param name="withCandidateGroups">Only include tasks which have a candidate group. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="withoutCandidateGroups">Only include tasks which have no candidate group. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="withCandidateUsers">Only include tasks which have a candidate user. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="withoutCandidateUsers">Only include tasks which have no candidate users. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="active">Only include active tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="suspended">Only include suspended tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="taskVariables">Only include tasks that have variables with certain values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value.  **Note**: Values are always treated as String objects on server side.  Valid &#x60;operator&#x60; values are: &#x60;eq&#x60; - equal to; &#x60;neq&#x60; - not equal to; &#x60;gt&#x60; - greater than; &#x60;gteq&#x60; - greater than or equal to; &#x60;lt&#x60; - lower than; &#x60;lteq&#x60; - lower than or equal to; &#x60;like&#x60;. &#x60;key&#x60; and &#x60;value&#x60; may not contain underscore or comma characters. (optional)</param>
        /// <param name="processVariables">Only include tasks that belong to process instances that have variables with certain  values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value.  **Note**: Values are always treated as String objects on server side.  Valid &#x60;operator&#x60; values are: &#x60;eq&#x60; - equal to; &#x60;neq&#x60; - not equal to; &#x60;gt&#x60; - greater than; &#x60;gteq&#x60; - greater than or equal to; &#x60;lt&#x60; - lower than; &#x60;lteq&#x60; - lower than or equal to; &#x60;like&#x60;; &#x60;notLike&#x60;. &#x60;key&#x60; and &#x60;value&#x60; may not contain underscore or comma characters. (optional)</param>
        /// <param name="caseInstanceVariables">Only include tasks that belong to case instances that have variables with certain values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value.  **Note**: Values are always treated as String objects on server side.  Valid &#x60;operator&#x60; values are: &#x60;eq&#x60; - equal to; &#x60;neq&#x60; - not equal to; &#x60;gt&#x60; - greater than; &#x60;gteq&#x60; - greater than or equal to; &#x60;lt&#x60; - lower than; &#x60;lteq&#x60; - lower than or equal to; &#x60;like&#x60;. &#x60;key&#x60; and &#x60;value&#x60; may not contain underscore or comma characters. (optional)</param>
        /// <param name="variableNamesIgnoreCase">Match all variable names in this query case-insensitively. If set &#x60;variableName&#x60; and &#x60;variablename&#x60; are treated as equal. (optional, default to false)</param>
        /// <param name="variableValuesIgnoreCase">Match all variable values in this query case-insensitively. If set &#x60;variableValue&#x60; and &#x60;variablevalue&#x60; are treated as equal. (optional, default to false)</param>
        /// <param name="parentTaskId">Restrict query to all tasks that are sub tasks of the given task. Takes a task id. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CountResultDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<CountResultDto>> GetTasksCountWithHttpInfoAsync(string taskId = default(string), string taskIdIn = default(string), string processInstanceId = default(string), string processInstanceIdIn = default(string), string processInstanceBusinessKey = default(string), string processInstanceBusinessKeyExpression = default(string), string processInstanceBusinessKeyIn = default(string), string processInstanceBusinessKeyLike = default(string), string processInstanceBusinessKeyLikeExpression = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string processDefinitionKeyIn = default(string), string processDefinitionName = default(string), string processDefinitionNameLike = default(string), string executionId = default(string), string caseInstanceId = default(string), string caseInstanceBusinessKey = default(string), string caseInstanceBusinessKeyLike = default(string), string caseDefinitionId = default(string), string caseDefinitionKey = default(string), string caseDefinitionName = default(string), string caseDefinitionNameLike = default(string), string caseExecutionId = default(string), string activityInstanceIdIn = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), string assignee = default(string), string assigneeExpression = default(string), string assigneeLike = default(string), string assigneeLikeExpression = default(string), string assigneeIn = default(string), string owner = default(string), string ownerExpression = default(string), string candidateGroup = default(string), string candidateGroupExpression = default(string), string candidateUser = default(string), string candidateUserExpression = default(string), bool? includeAssignedTasks = default(bool?), string involvedUser = default(string), string involvedUserExpression = default(string), bool? assigned = default(bool?), bool? unassigned = default(bool?), string taskDefinitionKey = default(string), string taskDefinitionKeyIn = default(string), string taskDefinitionKeyLike = default(string), string name = default(string), string nameNotEqual = default(string), string nameLike = default(string), string nameNotLike = default(string), string description = default(string), string descriptionLike = default(string), int? priority = default(int?), int? maxPriority = default(int?), int? minPriority = default(int?), string dueDate = default(string), string dueDateExpression = default(string), string dueAfter = default(string), string dueAfterExpression = default(string), string dueBefore = default(string), string dueBeforeExpression = default(string), bool? withoutDueDate = default(bool?), string followUpDate = default(string), string followUpDateExpression = default(string), string followUpAfter = default(string), string followUpAfterExpression = default(string), string followUpBefore = default(string), string followUpBeforeExpression = default(string), string followUpBeforeOrNotExistent = default(string), string followUpBeforeOrNotExistentExpression = default(string), string createdOn = default(string), string createdOnExpression = default(string), string createdAfter = default(string), string createdAfterExpression = default(string), string createdBefore = default(string), string createdBeforeExpression = default(string), string delegationState = default(string), string candidateGroups = default(string), string candidateGroupsExpression = default(string), bool? withCandidateGroups = default(bool?), bool? withoutCandidateGroups = default(bool?), bool? withCandidateUsers = default(bool?), bool? withoutCandidateUsers = default(bool?), bool? active = default(bool?), bool? suspended = default(bool?), string taskVariables = default(string), string processVariables = default(string), string caseInstanceVariables = default(string), bool? variableNamesIgnoreCase = default(bool?), bool? variableValuesIgnoreCase = default(bool?), string parentTaskId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Handle BPMN Error
        /// </summary>
        /// <remarks>
        /// Reports a business error in the context of a running task by id. The error code must be specified to identify the BPMN error handler. See the documentation for [Reporting Bpmn Error](https://docs.camunda.org/manual/7.15/reference/bpmn20/tasks/user-task/#reporting-bpmn-error) in User Tasks.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task a BPMN error is reported for.</param>
        /// <param name="taskBpmnErrorDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task HandleBpmnErrorAsync(string id, TaskBpmnErrorDto taskBpmnErrorDto = default(TaskBpmnErrorDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Handle BPMN Error
        /// </summary>
        /// <remarks>
        /// Reports a business error in the context of a running task by id. The error code must be specified to identify the BPMN error handler. See the documentation for [Reporting Bpmn Error](https://docs.camunda.org/manual/7.15/reference/bpmn20/tasks/user-task/#reporting-bpmn-error) in User Tasks.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task a BPMN error is reported for.</param>
        /// <param name="taskBpmnErrorDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> HandleBpmnErrorWithHttpInfoAsync(string id, TaskBpmnErrorDto taskBpmnErrorDto = default(TaskBpmnErrorDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Handle BPMN Escalation
        /// </summary>
        /// <remarks>
        /// Reports an escalation in the context of a running task by id. The escalation code must be specified to identify the escalation handler. See the documentation for [Reporting Bpmn Escalation](https://docs.camunda.org/manual/7.15/reference/bpmn20/tasks/user-task/#reporting-bpmn-escalation) in User Tasks.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task in which context a BPMN escalation is reported.</param>
        /// <param name="taskEscalationDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task HandleEscalationAsync(string id, TaskEscalationDto taskEscalationDto = default(TaskEscalationDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Handle BPMN Escalation
        /// </summary>
        /// <remarks>
        /// Reports an escalation in the context of a running task by id. The escalation code must be specified to identify the escalation handler. See the documentation for [Reporting Bpmn Escalation](https://docs.camunda.org/manual/7.15/reference/bpmn20/tasks/user-task/#reporting-bpmn-escalation) in User Tasks.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task in which context a BPMN escalation is reported.</param>
        /// <param name="taskEscalationDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> HandleEscalationWithHttpInfoAsync(string id, TaskEscalationDto taskEscalationDto = default(TaskEscalationDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get List (POST)
        /// </summary>
        /// <remarks>
        /// Queries for tasks that fulfill a given filter. This method is slightly more powerful than the [Get Tasks](https://docs.camunda.org/manual/7.15/reference/rest/task/get-query/) method because it allows filtering by multiple process or task variables of types &#x60;String&#x60;, &#x60;Number&#x60; or &#x60;Boolean&#x60;. The size of the result set can be retrieved by using the [Get Task Count (POST)](https://docs.camunda.org/manual/7.15/reference/rest/task/post-query-count/) method.  **Security Consideration**: There are several parameters (such as &#x60;assigneeExpression&#x60;) for specifying an EL expression. These are disabled by default to prevent remote code execution. See the section on [security considerations for custom code](https://docs.camunda.org/manual/7.15/user-guide/process-engine/securing-custom-code/) in the user guide for details.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="taskQueryDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;TaskDto&gt;</returns>
        System.Threading.Tasks.Task<List<TaskDto>> QueryTasksAsync(int? firstResult = default(int?), int? maxResults = default(int?), TaskQueryDto taskQueryDto = default(TaskQueryDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get List (POST)
        /// </summary>
        /// <remarks>
        /// Queries for tasks that fulfill a given filter. This method is slightly more powerful than the [Get Tasks](https://docs.camunda.org/manual/7.15/reference/rest/task/get-query/) method because it allows filtering by multiple process or task variables of types &#x60;String&#x60;, &#x60;Number&#x60; or &#x60;Boolean&#x60;. The size of the result set can be retrieved by using the [Get Task Count (POST)](https://docs.camunda.org/manual/7.15/reference/rest/task/post-query-count/) method.  **Security Consideration**: There are several parameters (such as &#x60;assigneeExpression&#x60;) for specifying an EL expression. These are disabled by default to prevent remote code execution. See the section on [security considerations for custom code](https://docs.camunda.org/manual/7.15/user-guide/process-engine/securing-custom-code/) in the user guide for details.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="taskQueryDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;TaskDto&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TaskDto>>> QueryTasksWithHttpInfoAsync(int? firstResult = default(int?), int? maxResults = default(int?), TaskQueryDto taskQueryDto = default(TaskQueryDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get List Count (POST)
        /// </summary>
        /// <remarks>
        /// Retrieves the number of tasks that fulfill the given filter. Corresponds to the size of the result set of the [Get Tasks (POST)](https://docs.camunda.org/manual/7.15/reference/rest/task/post-query/) method and takes the same parameters.  **Security Consideration**: There are several parameters (such as &#x60;assigneeExpression&#x60;) for specifying an EL expression. These are disabled by default to prevent remote code execution. See the section on [security considerations for custom code](https://docs.camunda.org/manual/7.15/user-guide/process-engine/securing-custom-code/) in the user guide for details.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskQueryDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CountResultDto</returns>
        System.Threading.Tasks.Task<CountResultDto> QueryTasksCountAsync(TaskQueryDto taskQueryDto = default(TaskQueryDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get List Count (POST)
        /// </summary>
        /// <remarks>
        /// Retrieves the number of tasks that fulfill the given filter. Corresponds to the size of the result set of the [Get Tasks (POST)](https://docs.camunda.org/manual/7.15/reference/rest/task/post-query/) method and takes the same parameters.  **Security Consideration**: There are several parameters (such as &#x60;assigneeExpression&#x60;) for specifying an EL expression. These are disabled by default to prevent remote code execution. See the section on [security considerations for custom code](https://docs.camunda.org/manual/7.15/user-guide/process-engine/securing-custom-code/) in the user guide for details.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskQueryDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CountResultDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<CountResultDto>> QueryTasksCountWithHttpInfoAsync(TaskQueryDto taskQueryDto = default(TaskQueryDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Resolve
        /// </summary>
        /// <remarks>
        /// Resolves a task and updates execution variables.  Resolving a task marks that the assignee is done with the task delegated to them, and that it can be sent back to the owner. Can only be executed when the task has been delegated. The assignee will be set to the owner, who performed the delegation.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to resolve.</param>
        /// <param name="completeTaskDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ResolveAsync(string id, CompleteTaskDto completeTaskDto = default(CompleteTaskDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Resolve
        /// </summary>
        /// <remarks>
        /// Resolves a task and updates execution variables.  Resolving a task marks that the assignee is done with the task delegated to them, and that it can be sent back to the owner. Can only be executed when the task has been delegated. The assignee will be set to the owner, who performed the delegation.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to resolve.</param>
        /// <param name="completeTaskDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ResolveWithHttpInfoAsync(string id, CompleteTaskDto completeTaskDto = default(CompleteTaskDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Set Assignee
        /// </summary>
        /// <remarks>
        /// Changes the assignee of a task to a specific user.  **Note:** The difference with the [Claim Task](https://docs.camunda.org/manual/7.15/reference/rest/task/post-claim/) method is that this method does not check if the task already has a user assigned to it.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to set the assignee for.</param>
        /// <param name="userIdDto">Provide the id of the user that will be the assignee of the task. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SetAssigneeAsync(string id, UserIdDto userIdDto = default(UserIdDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Set Assignee
        /// </summary>
        /// <remarks>
        /// Changes the assignee of a task to a specific user.  **Note:** The difference with the [Claim Task](https://docs.camunda.org/manual/7.15/reference/rest/task/post-claim/) method is that this method does not check if the task already has a user assigned to it.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to set the assignee for.</param>
        /// <param name="userIdDto">Provide the id of the user that will be the assignee of the task. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SetAssigneeWithHttpInfoAsync(string id, UserIdDto userIdDto = default(UserIdDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Submit Form
        /// </summary>
        /// <remarks>
        /// Completes a task and updates process variables using a form submit. There are two difference between this method and the &#x60;complete&#x60; method:  * If the task is in state &#x60;PENDING&#x60; - i.e., has been delegated before, it is not completed but resolved. Otherwise it will be completed. * If the task has Form Field Metadata defined, the process engine will perform backend validation for any form fields which have validators defined. See the [Generated Task Forms](https://docs.camunda.org/manual/7.15/user-guide/task-forms/_index/#generated-task-forms) section of the [User Guide](https://docs.camunda.org/manual/7.15/user-guide/) for more information.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to submit the form for.</param>
        /// <param name="completeTaskDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Dictionary&lt;string, VariableValueDto&gt;</returns>
        System.Threading.Tasks.Task<Dictionary<string, VariableValueDto>> SubmitAsync(string id, CompleteTaskDto completeTaskDto = default(CompleteTaskDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Submit Form
        /// </summary>
        /// <remarks>
        /// Completes a task and updates process variables using a form submit. There are two difference between this method and the &#x60;complete&#x60; method:  * If the task is in state &#x60;PENDING&#x60; - i.e., has been delegated before, it is not completed but resolved. Otherwise it will be completed. * If the task has Form Field Metadata defined, the process engine will perform backend validation for any form fields which have validators defined. See the [Generated Task Forms](https://docs.camunda.org/manual/7.15/user-guide/task-forms/_index/#generated-task-forms) section of the [User Guide](https://docs.camunda.org/manual/7.15/user-guide/) for more information.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to submit the form for.</param>
        /// <param name="completeTaskDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, VariableValueDto&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dictionary<string, VariableValueDto>>> SubmitWithHttpInfoAsync(string id, CompleteTaskDto completeTaskDto = default(CompleteTaskDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Unclaim
        /// </summary>
        /// <remarks>
        /// Resets a task&#39;s assignee. If successful, the task is not assigned to a user.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to unclaim.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UnclaimAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Unclaim
        /// </summary>
        /// <remarks>
        /// Resets a task&#39;s assignee. If successful, the task is not assigned to a user.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to unclaim.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UnclaimWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update
        /// </summary>
        /// <remarks>
        /// Updates a task.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to be updated.</param>
        /// <param name="taskDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateTaskAsync(string id, TaskDto taskDto = default(TaskDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update
        /// </summary>
        /// <remarks>
        /// Updates a task.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to be updated.</param>
        /// <param name="taskDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateTaskWithHttpInfoAsync(string id, TaskDto taskDto = default(TaskDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITaskApi : ITaskApiSync, ITaskApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TaskApi : ITaskApi
    {
        private Camunda.OpenApi.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TaskApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TaskApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TaskApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TaskApi(String basePath)
        {
            this.Configuration = Camunda.OpenApi.Client.Client.Configuration.MergeConfigurations(
                Camunda.OpenApi.Client.Client.GlobalConfiguration.Instance,
                new Camunda.OpenApi.Client.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Camunda.OpenApi.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Camunda.OpenApi.Client.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Camunda.OpenApi.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TaskApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TaskApi(Camunda.OpenApi.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Camunda.OpenApi.Client.Client.Configuration.MergeConfigurations(
                Camunda.OpenApi.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Camunda.OpenApi.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Camunda.OpenApi.Client.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Camunda.OpenApi.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TaskApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public TaskApi(Camunda.OpenApi.Client.Client.ISynchronousClient client, Camunda.OpenApi.Client.Client.IAsynchronousClient asyncClient, Camunda.OpenApi.Client.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Camunda.OpenApi.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Camunda.OpenApi.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Camunda.OpenApi.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Camunda.OpenApi.Client.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Camunda.OpenApi.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Claim Claims a task for a specific user.  **Note:** The difference with the [Set Assignee](https://docs.camunda.org/manual/7.15/reference/rest/task/post-assignee/) method is that here a check is performed to see if the task already has a user assigned to it.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to claim.</param>
        /// <param name="userIdDto">Provide the id of the user that claims the task. (optional)</param>
        /// <returns></returns>
        public void Claim(string id, UserIdDto userIdDto = default(UserIdDto))
        {
            ClaimWithHttpInfo(id, userIdDto);
        }

        /// <summary>
        /// Claim Claims a task for a specific user.  **Note:** The difference with the [Set Assignee](https://docs.camunda.org/manual/7.15/reference/rest/task/post-assignee/) method is that here a check is performed to see if the task already has a user assigned to it.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to claim.</param>
        /// <param name="userIdDto">Provide the id of the user that claims the task. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<Object> ClaimWithHttpInfo(string id, UserIdDto userIdDto = default(UserIdDto))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling TaskApi->Claim");

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = userIdDto;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/task/{id}/claim", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Claim", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Claim Claims a task for a specific user.  **Note:** The difference with the [Set Assignee](https://docs.camunda.org/manual/7.15/reference/rest/task/post-assignee/) method is that here a check is performed to see if the task already has a user assigned to it.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to claim.</param>
        /// <param name="userIdDto">Provide the id of the user that claims the task. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ClaimAsync(string id, UserIdDto userIdDto = default(UserIdDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ClaimWithHttpInfoAsync(id, userIdDto, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Claim Claims a task for a specific user.  **Note:** The difference with the [Set Assignee](https://docs.camunda.org/manual/7.15/reference/rest/task/post-assignee/) method is that here a check is performed to see if the task already has a user assigned to it.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to claim.</param>
        /// <param name="userIdDto">Provide the id of the user that claims the task. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<Object>> ClaimWithHttpInfoAsync(string id, UserIdDto userIdDto = default(UserIdDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling TaskApi->Claim");


            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = userIdDto;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/task/{id}/claim", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Claim", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Complete Completes a task and updates process variables.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to complete.</param>
        /// <param name="completeTaskDto"> (optional)</param>
        /// <returns>Dictionary&lt;string, VariableValueDto&gt;</returns>
        public Dictionary<string, VariableValueDto> Complete(string id, CompleteTaskDto completeTaskDto = default(CompleteTaskDto))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<Dictionary<string, VariableValueDto>> localVarResponse = CompleteWithHttpInfo(id, completeTaskDto);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Complete Completes a task and updates process variables.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to complete.</param>
        /// <param name="completeTaskDto"> (optional)</param>
        /// <returns>ApiResponse of Dictionary&lt;string, VariableValueDto&gt;</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<Dictionary<string, VariableValueDto>> CompleteWithHttpInfo(string id, CompleteTaskDto completeTaskDto = default(CompleteTaskDto))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling TaskApi->Complete");

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = completeTaskDto;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Dictionary<string, VariableValueDto>>("/task/{id}/complete", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Complete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Complete Completes a task and updates process variables.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to complete.</param>
        /// <param name="completeTaskDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Dictionary&lt;string, VariableValueDto&gt;</returns>
        public async System.Threading.Tasks.Task<Dictionary<string, VariableValueDto>> CompleteAsync(string id, CompleteTaskDto completeTaskDto = default(CompleteTaskDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<Dictionary<string, VariableValueDto>> localVarResponse = await CompleteWithHttpInfoAsync(id, completeTaskDto, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Complete Completes a task and updates process variables.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to complete.</param>
        /// <param name="completeTaskDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, VariableValueDto&gt;)</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<Dictionary<string, VariableValueDto>>> CompleteWithHttpInfoAsync(string id, CompleteTaskDto completeTaskDto = default(CompleteTaskDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling TaskApi->Complete");


            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = completeTaskDto;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Dictionary<string, VariableValueDto>>("/task/{id}/complete", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Complete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Creates a new task.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskDto"> (optional)</param>
        /// <returns></returns>
        public void CreateTask(TaskDto taskDto = default(TaskDto))
        {
            CreateTaskWithHttpInfo(taskDto);
        }

        /// <summary>
        /// Create Creates a new task.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskDto"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<Object> CreateTaskWithHttpInfo(TaskDto taskDto = default(TaskDto))
        {
            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = taskDto;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/task/create", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateTask", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Creates a new task.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CreateTaskAsync(TaskDto taskDto = default(TaskDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await CreateTaskWithHttpInfoAsync(taskDto, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Create Creates a new task.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<Object>> CreateTaskWithHttpInfoAsync(TaskDto taskDto = default(TaskDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = taskDto;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/task/create", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateTask", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delegate Delegates a task to another user.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to delegate.</param>
        /// <param name="userIdDto">Provide the id of the user that the task should be delegated to. (optional)</param>
        /// <returns></returns>
        public void DelegateTask(string id, UserIdDto userIdDto = default(UserIdDto))
        {
            DelegateTaskWithHttpInfo(id, userIdDto);
        }

        /// <summary>
        /// Delegate Delegates a task to another user.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to delegate.</param>
        /// <param name="userIdDto">Provide the id of the user that the task should be delegated to. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<Object> DelegateTaskWithHttpInfo(string id, UserIdDto userIdDto = default(UserIdDto))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling TaskApi->DelegateTask");

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = userIdDto;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/task/{id}/delegate", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DelegateTask", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delegate Delegates a task to another user.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to delegate.</param>
        /// <param name="userIdDto">Provide the id of the user that the task should be delegated to. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DelegateTaskAsync(string id, UserIdDto userIdDto = default(UserIdDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DelegateTaskWithHttpInfoAsync(id, userIdDto, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delegate Delegates a task to another user.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to delegate.</param>
        /// <param name="userIdDto">Provide the id of the user that the task should be delegated to. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<Object>> DelegateTaskWithHttpInfoAsync(string id, UserIdDto userIdDto = default(UserIdDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling TaskApi->DelegateTask");


            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = userIdDto;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/task/{id}/delegate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DelegateTask", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Removes a task by id.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to be removed.</param>
        /// <returns></returns>
        public void DeleteTask(string id)
        {
            DeleteTaskWithHttpInfo(id);
        }

        /// <summary>
        /// Delete Removes a task by id.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to be removed.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<Object> DeleteTaskWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling TaskApi->DeleteTask");

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/task/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteTask", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Removes a task by id.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to be removed.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteTaskAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteTaskWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete Removes a task by id.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to be removed.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<Object>> DeleteTaskWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling TaskApi->DeleteTask");


            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/task/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteTask", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Deployed Form Retrieves the deployed form that is referenced from a given task. For further information please refer to the [User Guide](https://docs.camunda.org/manual/7.15/user-guide/task-forms/#embedded-task-forms).
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to get the deployed form for.</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetDeployedForm(string id)
        {
            Camunda.OpenApi.Client.Client.ApiResponse<System.IO.Stream> localVarResponse = GetDeployedFormWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Deployed Form Retrieves the deployed form that is referenced from a given task. For further information please refer to the [User Guide](https://docs.camunda.org/manual/7.15/user-guide/task-forms/#embedded-task-forms).
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to get the deployed form for.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<System.IO.Stream> GetDeployedFormWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling TaskApi->GetDeployedForm");

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/xhtml+xml",
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<System.IO.Stream>("/task/{id}/deployed-form", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDeployedForm", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Deployed Form Retrieves the deployed form that is referenced from a given task. For further information please refer to the [User Guide](https://docs.camunda.org/manual/7.15/user-guide/task-forms/#embedded-task-forms).
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to get the deployed form for.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetDeployedFormAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<System.IO.Stream> localVarResponse = await GetDeployedFormWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Deployed Form Retrieves the deployed form that is referenced from a given task. For further information please refer to the [User Guide](https://docs.camunda.org/manual/7.15/user-guide/task-forms/#embedded-task-forms).
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to get the deployed form for.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<System.IO.Stream>> GetDeployedFormWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling TaskApi->GetDeployedForm");


            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/xhtml+xml",
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<System.IO.Stream>("/task/{id}/deployed-form", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDeployedForm", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Form Key Retrieves the form key for a task. The form key corresponds to the &#x60;FormData#formKey&#x60; property in the engine. This key can be used to do task-specific form rendering in client applications. Additionally, the context path of the containing process application is returned.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to retrieve the form for.</param>
        /// <returns>FormDto</returns>
        public FormDto GetForm(string id)
        {
            Camunda.OpenApi.Client.Client.ApiResponse<FormDto> localVarResponse = GetFormWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Form Key Retrieves the form key for a task. The form key corresponds to the &#x60;FormData#formKey&#x60; property in the engine. This key can be used to do task-specific form rendering in client applications. Additionally, the context path of the containing process application is returned.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to retrieve the form for.</param>
        /// <returns>ApiResponse of FormDto</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<FormDto> GetFormWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling TaskApi->GetForm");

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<FormDto>("/task/{id}/form", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetForm", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Form Key Retrieves the form key for a task. The form key corresponds to the &#x60;FormData#formKey&#x60; property in the engine. This key can be used to do task-specific form rendering in client applications. Additionally, the context path of the containing process application is returned.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to retrieve the form for.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FormDto</returns>
        public async System.Threading.Tasks.Task<FormDto> GetFormAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<FormDto> localVarResponse = await GetFormWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Form Key Retrieves the form key for a task. The form key corresponds to the &#x60;FormData#formKey&#x60; property in the engine. This key can be used to do task-specific form rendering in client applications. Additionally, the context path of the containing process application is returned.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to retrieve the form for.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FormDto)</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<FormDto>> GetFormWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling TaskApi->GetForm");


            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<FormDto>("/task/{id}/form", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetForm", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Task Form Variables Retrieves the form variables for a task. The form variables take form data specified on the task into account. If form fields are defined, the variable types and default values of the form fields are taken into account.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to retrieve the variables for.</param>
        /// <param name="variableNames">A comma-separated list of variable names. Allows restricting the list of requested variables to the variable names in the list. It is best practice to restrict the list of variables to the variables actually required by the form in order to minimize fetching of data. If the query parameter is ommitted all variables are fetched. If the query parameter contains non-existent variable names, the variable names are ignored. (optional)</param>
        /// <param name="deserializeValues">Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default true).  If set to true, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](http://jackson.codehaus.org/) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to false, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  Note: While true is the default value for reasons of backward compatibility, we recommend setting this parameter to false when developing web applications that are independent of the Java process applications deployed to the engine. (optional, default to true)</param>
        /// <returns>Dictionary&lt;string, VariableValueDto&gt;</returns>
        public Dictionary<string, VariableValueDto> GetFormVariables(string id, string variableNames = default(string), bool? deserializeValues = default(bool?))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<Dictionary<string, VariableValueDto>> localVarResponse = GetFormVariablesWithHttpInfo(id, variableNames, deserializeValues);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Task Form Variables Retrieves the form variables for a task. The form variables take form data specified on the task into account. If form fields are defined, the variable types and default values of the form fields are taken into account.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to retrieve the variables for.</param>
        /// <param name="variableNames">A comma-separated list of variable names. Allows restricting the list of requested variables to the variable names in the list. It is best practice to restrict the list of variables to the variables actually required by the form in order to minimize fetching of data. If the query parameter is ommitted all variables are fetched. If the query parameter contains non-existent variable names, the variable names are ignored. (optional)</param>
        /// <param name="deserializeValues">Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default true).  If set to true, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](http://jackson.codehaus.org/) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to false, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  Note: While true is the default value for reasons of backward compatibility, we recommend setting this parameter to false when developing web applications that are independent of the Java process applications deployed to the engine. (optional, default to true)</param>
        /// <returns>ApiResponse of Dictionary&lt;string, VariableValueDto&gt;</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<Dictionary<string, VariableValueDto>> GetFormVariablesWithHttpInfo(string id, string variableNames = default(string), bool? deserializeValues = default(bool?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling TaskApi->GetFormVariables");

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (variableNames != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "variableNames", variableNames));
            }
            if (deserializeValues != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "deserializeValues", deserializeValues));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<Dictionary<string, VariableValueDto>>("/task/{id}/form-variables", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFormVariables", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Task Form Variables Retrieves the form variables for a task. The form variables take form data specified on the task into account. If form fields are defined, the variable types and default values of the form fields are taken into account.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to retrieve the variables for.</param>
        /// <param name="variableNames">A comma-separated list of variable names. Allows restricting the list of requested variables to the variable names in the list. It is best practice to restrict the list of variables to the variables actually required by the form in order to minimize fetching of data. If the query parameter is ommitted all variables are fetched. If the query parameter contains non-existent variable names, the variable names are ignored. (optional)</param>
        /// <param name="deserializeValues">Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default true).  If set to true, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](http://jackson.codehaus.org/) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to false, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  Note: While true is the default value for reasons of backward compatibility, we recommend setting this parameter to false when developing web applications that are independent of the Java process applications deployed to the engine. (optional, default to true)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Dictionary&lt;string, VariableValueDto&gt;</returns>
        public async System.Threading.Tasks.Task<Dictionary<string, VariableValueDto>> GetFormVariablesAsync(string id, string variableNames = default(string), bool? deserializeValues = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<Dictionary<string, VariableValueDto>> localVarResponse = await GetFormVariablesWithHttpInfoAsync(id, variableNames, deserializeValues, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Task Form Variables Retrieves the form variables for a task. The form variables take form data specified on the task into account. If form fields are defined, the variable types and default values of the form fields are taken into account.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to retrieve the variables for.</param>
        /// <param name="variableNames">A comma-separated list of variable names. Allows restricting the list of requested variables to the variable names in the list. It is best practice to restrict the list of variables to the variables actually required by the form in order to minimize fetching of data. If the query parameter is ommitted all variables are fetched. If the query parameter contains non-existent variable names, the variable names are ignored. (optional)</param>
        /// <param name="deserializeValues">Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default true).  If set to true, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](http://jackson.codehaus.org/) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to false, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  Note: While true is the default value for reasons of backward compatibility, we recommend setting this parameter to false when developing web applications that are independent of the Java process applications deployed to the engine. (optional, default to true)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, VariableValueDto&gt;)</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<Dictionary<string, VariableValueDto>>> GetFormVariablesWithHttpInfoAsync(string id, string variableNames = default(string), bool? deserializeValues = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling TaskApi->GetFormVariables");


            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (variableNames != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "variableNames", variableNames));
            }
            if (deserializeValues != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "deserializeValues", deserializeValues));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Dictionary<string, VariableValueDto>>("/task/{id}/form-variables", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFormVariables", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Rendered Form Retrieves the rendered form for a task. This method can be used to get the HTML rendering of a [Generated Task Form](https://docs.camunda.org/manual/7.15/user-guide/task-forms/#generated-task-forms).
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to get the rendered form for.</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetRenderedForm(string id)
        {
            Camunda.OpenApi.Client.Client.ApiResponse<System.IO.Stream> localVarResponse = GetRenderedFormWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Rendered Form Retrieves the rendered form for a task. This method can be used to get the HTML rendering of a [Generated Task Form](https://docs.camunda.org/manual/7.15/user-guide/task-forms/#generated-task-forms).
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to get the rendered form for.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<System.IO.Stream> GetRenderedFormWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling TaskApi->GetRenderedForm");

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/xhtml+xml",
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<System.IO.Stream>("/task/{id}/rendered-form", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRenderedForm", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Rendered Form Retrieves the rendered form for a task. This method can be used to get the HTML rendering of a [Generated Task Form](https://docs.camunda.org/manual/7.15/user-guide/task-forms/#generated-task-forms).
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to get the rendered form for.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetRenderedFormAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<System.IO.Stream> localVarResponse = await GetRenderedFormWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Rendered Form Retrieves the rendered form for a task. This method can be used to get the HTML rendering of a [Generated Task Form](https://docs.camunda.org/manual/7.15/user-guide/task-forms/#generated-task-forms).
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to get the rendered form for.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<System.IO.Stream>> GetRenderedFormWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling TaskApi->GetRenderedForm");


            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/xhtml+xml",
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<System.IO.Stream>("/task/{id}/rendered-form", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRenderedForm", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Retrieves a task by id.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to be retrieved.</param>
        /// <returns>TaskDto</returns>
        public TaskDto GetTask(string id)
        {
            Camunda.OpenApi.Client.Client.ApiResponse<TaskDto> localVarResponse = GetTaskWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Retrieves a task by id.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to be retrieved.</param>
        /// <returns>ApiResponse of TaskDto</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<TaskDto> GetTaskWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling TaskApi->GetTask");

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<TaskDto>("/task/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTask", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Retrieves a task by id.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to be retrieved.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TaskDto</returns>
        public async System.Threading.Tasks.Task<TaskDto> GetTaskAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<TaskDto> localVarResponse = await GetTaskWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Retrieves a task by id.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to be retrieved.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TaskDto)</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<TaskDto>> GetTaskWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling TaskApi->GetTask");


            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<TaskDto>("/task/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTask", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get List Queries for tasks that fulfill a given filter. The size of the result set can be retrieved by using the Get Task Count method.  **Security Consideration:** There are several query parameters (such as assigneeExpression) for specifying an EL expression. These are disabled by default to prevent remote code execution. See the section on [security considerations](https://docs.camunda.org/manual/7.15/user-guide/process-engine/securing-custom-code/) for custom code in the user guide for details.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Restrict to task with the given id. (optional)</param>
        /// <param name="taskIdIn">Restrict to tasks with any of the given ids. (optional)</param>
        /// <param name="processInstanceId">Restrict to tasks that belong to process instances with the given id. (optional)</param>
        /// <param name="processInstanceIdIn">Restrict to tasks that belong to process instances with the given ids. (optional)</param>
        /// <param name="processInstanceBusinessKey">Restrict to tasks that belong to process instances with the given business key. (optional)</param>
        /// <param name="processInstanceBusinessKeyExpression">Restrict to tasks that belong to process instances with the given business key which  is described by an expression. See the  [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. (optional)</param>
        /// <param name="processInstanceBusinessKeyIn">Restrict to tasks that belong to process instances with one of the give business keys.  The keys need to be in a comma-separated list. (optional)</param>
        /// <param name="processInstanceBusinessKeyLike">Restrict to tasks that have a process instance business key that has the parameter  value as a substring. (optional)</param>
        /// <param name="processInstanceBusinessKeyLikeExpression">Restrict to tasks that have a process instance business key that has the parameter  value as a substring and is described by an expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions)  for more information on available functions. (optional)</param>
        /// <param name="processDefinitionId">Restrict to tasks that belong to a process definition with the given id. (optional)</param>
        /// <param name="processDefinitionKey">Restrict to tasks that belong to a process definition with the given key. (optional)</param>
        /// <param name="processDefinitionKeyIn">Restrict to tasks that belong to a process definition with one of the given keys. The  keys need to be in a comma-separated list. (optional)</param>
        /// <param name="processDefinitionName">Restrict to tasks that belong to a process definition with the given name. (optional)</param>
        /// <param name="processDefinitionNameLike">Restrict to tasks that have a process definition name that has the parameter value as  a substring. (optional)</param>
        /// <param name="executionId">Restrict to tasks that belong to an execution with the given id. (optional)</param>
        /// <param name="caseInstanceId">Restrict to tasks that belong to case instances with the given id. (optional)</param>
        /// <param name="caseInstanceBusinessKey">Restrict to tasks that belong to case instances with the given business key. (optional)</param>
        /// <param name="caseInstanceBusinessKeyLike">Restrict to tasks that have a case instance business key that has the parameter value  as a substring. (optional)</param>
        /// <param name="caseDefinitionId">Restrict to tasks that belong to a case definition with the given id. (optional)</param>
        /// <param name="caseDefinitionKey">Restrict to tasks that belong to a case definition with the given key. (optional)</param>
        /// <param name="caseDefinitionName">Restrict to tasks that belong to a case definition with the given name. (optional)</param>
        /// <param name="caseDefinitionNameLike">Restrict to tasks that have a case definition name that has the parameter value as a  substring. (optional)</param>
        /// <param name="caseExecutionId">Restrict to tasks that belong to a case execution with the given id. (optional)</param>
        /// <param name="activityInstanceIdIn">Only include tasks which belong to one of the passed and comma-separated activity  instance ids. (optional)</param>
        /// <param name="tenantIdIn">Only include tasks which belong to one of the passed and comma-separated  tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include tasks which belong to no tenant. Value may only be &#x60;true&#x60;,  as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="assignee">Restrict to tasks that the given user is assigned to. (optional)</param>
        /// <param name="assigneeExpression">Restrict to tasks that the user described by the given expression is assigned to.  See the  [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions)  for more information on available functions. (optional)</param>
        /// <param name="assigneeLike">Restrict to tasks that have an assignee that has the parameter  value as a substring. (optional)</param>
        /// <param name="assigneeLikeExpression">Restrict to tasks that have an assignee that has the parameter value described by the  given expression as a substring. See the  [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions)  for more information on available functions. (optional)</param>
        /// <param name="assigneeIn">Only include tasks which are assigned to one of the passed and  comma-separated user ids. (optional)</param>
        /// <param name="owner">Restrict to tasks that the given user owns. (optional)</param>
        /// <param name="ownerExpression">Restrict to tasks that the user described by the given expression owns. See the  [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions)  for more information on available functions. (optional)</param>
        /// <param name="candidateGroup">Only include tasks that are offered to the given group. (optional)</param>
        /// <param name="candidateGroupExpression">Only include tasks that are offered to the group described by the given expression.  See the  [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions)  for more information on available functions. (optional)</param>
        /// <param name="candidateUser">Only include tasks that are offered to the given user or to one of his groups. (optional)</param>
        /// <param name="candidateUserExpression">Only include tasks that are offered to the user described by the given expression.  See the  [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions)  for more information on available functions. (optional)</param>
        /// <param name="includeAssignedTasks">Also include tasks that are assigned to users in candidate queries. Default is to only  include tasks that are not assigned to any user if you query by candidate user or group(s). (optional, default to false)</param>
        /// <param name="involvedUser">Only include tasks that the given user is involved in. A user is involved in a task if  an identity link exists between task and user (e.g., the user is the assignee). (optional)</param>
        /// <param name="involvedUserExpression">Only include tasks that the user described by the given expression is involved in. A user is involved in a task if an identity link exists between task and user (e.g., the user is the assignee). See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. (optional)</param>
        /// <param name="assigned">If set to &#x60;true&#x60;, restricts the query to all tasks that are assigned. (optional, default to false)</param>
        /// <param name="unassigned">If set to &#x60;true&#x60;, restricts the query to all tasks that are unassigned. (optional, default to false)</param>
        /// <param name="taskDefinitionKey">Restrict to tasks that have the given key. (optional)</param>
        /// <param name="taskDefinitionKeyIn">Restrict to tasks that have one of the given keys. The keys need to be in a comma-separated list. (optional)</param>
        /// <param name="taskDefinitionKeyLike">Restrict to tasks that have a key that has the parameter value as a substring. (optional)</param>
        /// <param name="name">Restrict to tasks that have the given name. (optional)</param>
        /// <param name="nameNotEqual">Restrict to tasks that do not have the given name. (optional)</param>
        /// <param name="nameLike">Restrict to tasks that have a name with the given parameter value as substring. (optional)</param>
        /// <param name="nameNotLike">Restrict to tasks that do not have a name with the given parameter value as substring. (optional)</param>
        /// <param name="description">Restrict to tasks that have the given description. (optional)</param>
        /// <param name="descriptionLike">Restrict to tasks that have a description that has the parameter value as a substring. (optional)</param>
        /// <param name="priority">Restrict to tasks that have the given priority. (optional)</param>
        /// <param name="maxPriority">Restrict to tasks that have a lower or equal priority. (optional)</param>
        /// <param name="minPriority">Restrict to tasks that have a higher or equal priority. (optional)</param>
        /// <param name="dueDate">Restrict to tasks that are due on the given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.546+0200&#x60;. (optional)</param>
        /// <param name="dueDateExpression">Restrict to tasks that are due on the date described by the given expression. See the [User Guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)</param>
        /// <param name="dueAfter">Restrict to tasks that are due after the given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.435+0200&#x60;. (optional)</param>
        /// <param name="dueAfterExpression">Restrict to tasks that are due after the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)</param>
        /// <param name="dueBefore">Restrict to tasks that are due before the given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.243+0200&#x60;. (optional)</param>
        /// <param name="dueBeforeExpression">Restrict to tasks that are due before the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)</param>
        /// <param name="withoutDueDate">Only include tasks which have no due date. Value may only be &#x60;true&#x60;,  as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="followUpDate">Restrict to tasks that have a followUp date on the given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.342+0200&#x60;. (optional)</param>
        /// <param name="followUpDateExpression">Restrict to tasks that have a followUp date on the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)</param>
        /// <param name="followUpAfter">Restrict to tasks that have a followUp date after the given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.542+0200&#x60;. (optional)</param>
        /// <param name="followUpAfterExpression">Restrict to tasks that have a followUp date after the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)</param>
        /// <param name="followUpBefore">Restrict to tasks that have a followUp date before the given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.234+0200&#x60;. (optional)</param>
        /// <param name="followUpBeforeExpression">Restrict to tasks that have a followUp date before the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)</param>
        /// <param name="followUpBeforeOrNotExistent">Restrict to tasks that have no followUp date or a followUp date before the given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.432+0200&#x60;. The typical use case is to query all &#x60;active&#x60; tasks for a user for a given date. (optional)</param>
        /// <param name="followUpBeforeOrNotExistentExpression">Restrict to tasks that have no followUp date or a followUp date before the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)</param>
        /// <param name="createdOn">Restrict to tasks that were created on the given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.324+0200&#x60;. (optional)</param>
        /// <param name="createdOnExpression">Restrict to tasks that were created on the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)</param>
        /// <param name="createdAfter">Restrict to tasks that were created after the given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.342+0200&#x60;. (optional)</param>
        /// <param name="createdAfterExpression">Restrict to tasks that were created after the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)</param>
        /// <param name="createdBefore">Restrict to tasks that were created before the given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.332+0200&#x60;. (optional)</param>
        /// <param name="createdBeforeExpression">Restrict to tasks that were created before the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)</param>
        /// <param name="delegationState">Restrict to tasks that are in the given delegation state. Valid values are &#x60;PENDING&#x60; and &#x60;RESOLVED&#x60;. (optional)</param>
        /// <param name="candidateGroups">Restrict to tasks that are offered to any of the given candidate groups. Takes a comma-separated list of group names, so for example &#x60;developers,support,sales&#x60;. (optional)</param>
        /// <param name="candidateGroupsExpression">Restrict to tasks that are offered to any of the candidate groups described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to &#x60;java.util.List&#x60; of Strings. (optional)</param>
        /// <param name="withCandidateGroups">Only include tasks which have a candidate group. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="withoutCandidateGroups">Only include tasks which have no candidate group. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="withCandidateUsers">Only include tasks which have a candidate user. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="withoutCandidateUsers">Only include tasks which have no candidate users. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="active">Only include active tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="suspended">Only include suspended tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="taskVariables">Only include tasks that have variables with certain values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value.  **Note**: Values are always treated as String objects on server side.  Valid &#x60;operator&#x60; values are: &#x60;eq&#x60; - equal to; &#x60;neq&#x60; - not equal to; &#x60;gt&#x60; - greater than; &#x60;gteq&#x60; - greater than or equal to; &#x60;lt&#x60; - lower than; &#x60;lteq&#x60; - lower than or equal to; &#x60;like&#x60;. &#x60;key&#x60; and &#x60;value&#x60; may not contain underscore or comma characters. (optional)</param>
        /// <param name="processVariables">Only include tasks that belong to process instances that have variables with certain  values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value.  **Note**: Values are always treated as String objects on server side.  Valid &#x60;operator&#x60; values are: &#x60;eq&#x60; - equal to; &#x60;neq&#x60; - not equal to; &#x60;gt&#x60; - greater than; &#x60;gteq&#x60; - greater than or equal to; &#x60;lt&#x60; - lower than; &#x60;lteq&#x60; - lower than or equal to; &#x60;like&#x60;; &#x60;notLike&#x60;. &#x60;key&#x60; and &#x60;value&#x60; may not contain underscore or comma characters. (optional)</param>
        /// <param name="caseInstanceVariables">Only include tasks that belong to case instances that have variables with certain values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value.  **Note**: Values are always treated as String objects on server side.  Valid &#x60;operator&#x60; values are: &#x60;eq&#x60; - equal to; &#x60;neq&#x60; - not equal to; &#x60;gt&#x60; - greater than; &#x60;gteq&#x60; - greater than or equal to; &#x60;lt&#x60; - lower than; &#x60;lteq&#x60; - lower than or equal to; &#x60;like&#x60;. &#x60;key&#x60; and &#x60;value&#x60; may not contain underscore or comma characters. (optional)</param>
        /// <param name="variableNamesIgnoreCase">Match all variable names in this query case-insensitively. If set &#x60;variableName&#x60; and &#x60;variablename&#x60; are treated as equal. (optional, default to false)</param>
        /// <param name="variableValuesIgnoreCase">Match all variable values in this query case-insensitively. If set &#x60;variableValue&#x60; and &#x60;variablevalue&#x60; are treated as equal. (optional, default to false)</param>
        /// <param name="parentTaskId">Restrict query to all tasks that are sub tasks of the given task. Takes a task id. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <returns>List&lt;TaskDto&gt;</returns>
        public List<TaskDto> GetTasks(string taskId = default(string), string taskIdIn = default(string), string processInstanceId = default(string), string processInstanceIdIn = default(string), string processInstanceBusinessKey = default(string), string processInstanceBusinessKeyExpression = default(string), string processInstanceBusinessKeyIn = default(string), string processInstanceBusinessKeyLike = default(string), string processInstanceBusinessKeyLikeExpression = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string processDefinitionKeyIn = default(string), string processDefinitionName = default(string), string processDefinitionNameLike = default(string), string executionId = default(string), string caseInstanceId = default(string), string caseInstanceBusinessKey = default(string), string caseInstanceBusinessKeyLike = default(string), string caseDefinitionId = default(string), string caseDefinitionKey = default(string), string caseDefinitionName = default(string), string caseDefinitionNameLike = default(string), string caseExecutionId = default(string), string activityInstanceIdIn = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), string assignee = default(string), string assigneeExpression = default(string), string assigneeLike = default(string), string assigneeLikeExpression = default(string), string assigneeIn = default(string), string owner = default(string), string ownerExpression = default(string), string candidateGroup = default(string), string candidateGroupExpression = default(string), string candidateUser = default(string), string candidateUserExpression = default(string), bool? includeAssignedTasks = default(bool?), string involvedUser = default(string), string involvedUserExpression = default(string), bool? assigned = default(bool?), bool? unassigned = default(bool?), string taskDefinitionKey = default(string), string taskDefinitionKeyIn = default(string), string taskDefinitionKeyLike = default(string), string name = default(string), string nameNotEqual = default(string), string nameLike = default(string), string nameNotLike = default(string), string description = default(string), string descriptionLike = default(string), int? priority = default(int?), int? maxPriority = default(int?), int? minPriority = default(int?), string dueDate = default(string), string dueDateExpression = default(string), string dueAfter = default(string), string dueAfterExpression = default(string), string dueBefore = default(string), string dueBeforeExpression = default(string), bool? withoutDueDate = default(bool?), string followUpDate = default(string), string followUpDateExpression = default(string), string followUpAfter = default(string), string followUpAfterExpression = default(string), string followUpBefore = default(string), string followUpBeforeExpression = default(string), string followUpBeforeOrNotExistent = default(string), string followUpBeforeOrNotExistentExpression = default(string), string createdOn = default(string), string createdOnExpression = default(string), string createdAfter = default(string), string createdAfterExpression = default(string), string createdBefore = default(string), string createdBeforeExpression = default(string), string delegationState = default(string), string candidateGroups = default(string), string candidateGroupsExpression = default(string), bool? withCandidateGroups = default(bool?), bool? withoutCandidateGroups = default(bool?), bool? withCandidateUsers = default(bool?), bool? withoutCandidateUsers = default(bool?), bool? active = default(bool?), bool? suspended = default(bool?), string taskVariables = default(string), string processVariables = default(string), string caseInstanceVariables = default(string), bool? variableNamesIgnoreCase = default(bool?), bool? variableValuesIgnoreCase = default(bool?), string parentTaskId = default(string), string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<List<TaskDto>> localVarResponse = GetTasksWithHttpInfo(taskId, taskIdIn, processInstanceId, processInstanceIdIn, processInstanceBusinessKey, processInstanceBusinessKeyExpression, processInstanceBusinessKeyIn, processInstanceBusinessKeyLike, processInstanceBusinessKeyLikeExpression, processDefinitionId, processDefinitionKey, processDefinitionKeyIn, processDefinitionName, processDefinitionNameLike, executionId, caseInstanceId, caseInstanceBusinessKey, caseInstanceBusinessKeyLike, caseDefinitionId, caseDefinitionKey, caseDefinitionName, caseDefinitionNameLike, caseExecutionId, activityInstanceIdIn, tenantIdIn, withoutTenantId, assignee, assigneeExpression, assigneeLike, assigneeLikeExpression, assigneeIn, owner, ownerExpression, candidateGroup, candidateGroupExpression, candidateUser, candidateUserExpression, includeAssignedTasks, involvedUser, involvedUserExpression, assigned, unassigned, taskDefinitionKey, taskDefinitionKeyIn, taskDefinitionKeyLike, name, nameNotEqual, nameLike, nameNotLike, description, descriptionLike, priority, maxPriority, minPriority, dueDate, dueDateExpression, dueAfter, dueAfterExpression, dueBefore, dueBeforeExpression, withoutDueDate, followUpDate, followUpDateExpression, followUpAfter, followUpAfterExpression, followUpBefore, followUpBeforeExpression, followUpBeforeOrNotExistent, followUpBeforeOrNotExistentExpression, createdOn, createdOnExpression, createdAfter, createdAfterExpression, createdBefore, createdBeforeExpression, delegationState, candidateGroups, candidateGroupsExpression, withCandidateGroups, withoutCandidateGroups, withCandidateUsers, withoutCandidateUsers, active, suspended, taskVariables, processVariables, caseInstanceVariables, variableNamesIgnoreCase, variableValuesIgnoreCase, parentTaskId, sortBy, sortOrder, firstResult, maxResults);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get List Queries for tasks that fulfill a given filter. The size of the result set can be retrieved by using the Get Task Count method.  **Security Consideration:** There are several query parameters (such as assigneeExpression) for specifying an EL expression. These are disabled by default to prevent remote code execution. See the section on [security considerations](https://docs.camunda.org/manual/7.15/user-guide/process-engine/securing-custom-code/) for custom code in the user guide for details.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Restrict to task with the given id. (optional)</param>
        /// <param name="taskIdIn">Restrict to tasks with any of the given ids. (optional)</param>
        /// <param name="processInstanceId">Restrict to tasks that belong to process instances with the given id. (optional)</param>
        /// <param name="processInstanceIdIn">Restrict to tasks that belong to process instances with the given ids. (optional)</param>
        /// <param name="processInstanceBusinessKey">Restrict to tasks that belong to process instances with the given business key. (optional)</param>
        /// <param name="processInstanceBusinessKeyExpression">Restrict to tasks that belong to process instances with the given business key which  is described by an expression. See the  [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. (optional)</param>
        /// <param name="processInstanceBusinessKeyIn">Restrict to tasks that belong to process instances with one of the give business keys.  The keys need to be in a comma-separated list. (optional)</param>
        /// <param name="processInstanceBusinessKeyLike">Restrict to tasks that have a process instance business key that has the parameter  value as a substring. (optional)</param>
        /// <param name="processInstanceBusinessKeyLikeExpression">Restrict to tasks that have a process instance business key that has the parameter  value as a substring and is described by an expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions)  for more information on available functions. (optional)</param>
        /// <param name="processDefinitionId">Restrict to tasks that belong to a process definition with the given id. (optional)</param>
        /// <param name="processDefinitionKey">Restrict to tasks that belong to a process definition with the given key. (optional)</param>
        /// <param name="processDefinitionKeyIn">Restrict to tasks that belong to a process definition with one of the given keys. The  keys need to be in a comma-separated list. (optional)</param>
        /// <param name="processDefinitionName">Restrict to tasks that belong to a process definition with the given name. (optional)</param>
        /// <param name="processDefinitionNameLike">Restrict to tasks that have a process definition name that has the parameter value as  a substring. (optional)</param>
        /// <param name="executionId">Restrict to tasks that belong to an execution with the given id. (optional)</param>
        /// <param name="caseInstanceId">Restrict to tasks that belong to case instances with the given id. (optional)</param>
        /// <param name="caseInstanceBusinessKey">Restrict to tasks that belong to case instances with the given business key. (optional)</param>
        /// <param name="caseInstanceBusinessKeyLike">Restrict to tasks that have a case instance business key that has the parameter value  as a substring. (optional)</param>
        /// <param name="caseDefinitionId">Restrict to tasks that belong to a case definition with the given id. (optional)</param>
        /// <param name="caseDefinitionKey">Restrict to tasks that belong to a case definition with the given key. (optional)</param>
        /// <param name="caseDefinitionName">Restrict to tasks that belong to a case definition with the given name. (optional)</param>
        /// <param name="caseDefinitionNameLike">Restrict to tasks that have a case definition name that has the parameter value as a  substring. (optional)</param>
        /// <param name="caseExecutionId">Restrict to tasks that belong to a case execution with the given id. (optional)</param>
        /// <param name="activityInstanceIdIn">Only include tasks which belong to one of the passed and comma-separated activity  instance ids. (optional)</param>
        /// <param name="tenantIdIn">Only include tasks which belong to one of the passed and comma-separated  tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include tasks which belong to no tenant. Value may only be &#x60;true&#x60;,  as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="assignee">Restrict to tasks that the given user is assigned to. (optional)</param>
        /// <param name="assigneeExpression">Restrict to tasks that the user described by the given expression is assigned to.  See the  [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions)  for more information on available functions. (optional)</param>
        /// <param name="assigneeLike">Restrict to tasks that have an assignee that has the parameter  value as a substring. (optional)</param>
        /// <param name="assigneeLikeExpression">Restrict to tasks that have an assignee that has the parameter value described by the  given expression as a substring. See the  [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions)  for more information on available functions. (optional)</param>
        /// <param name="assigneeIn">Only include tasks which are assigned to one of the passed and  comma-separated user ids. (optional)</param>
        /// <param name="owner">Restrict to tasks that the given user owns. (optional)</param>
        /// <param name="ownerExpression">Restrict to tasks that the user described by the given expression owns. See the  [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions)  for more information on available functions. (optional)</param>
        /// <param name="candidateGroup">Only include tasks that are offered to the given group. (optional)</param>
        /// <param name="candidateGroupExpression">Only include tasks that are offered to the group described by the given expression.  See the  [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions)  for more information on available functions. (optional)</param>
        /// <param name="candidateUser">Only include tasks that are offered to the given user or to one of his groups. (optional)</param>
        /// <param name="candidateUserExpression">Only include tasks that are offered to the user described by the given expression.  See the  [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions)  for more information on available functions. (optional)</param>
        /// <param name="includeAssignedTasks">Also include tasks that are assigned to users in candidate queries. Default is to only  include tasks that are not assigned to any user if you query by candidate user or group(s). (optional, default to false)</param>
        /// <param name="involvedUser">Only include tasks that the given user is involved in. A user is involved in a task if  an identity link exists between task and user (e.g., the user is the assignee). (optional)</param>
        /// <param name="involvedUserExpression">Only include tasks that the user described by the given expression is involved in. A user is involved in a task if an identity link exists between task and user (e.g., the user is the assignee). See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. (optional)</param>
        /// <param name="assigned">If set to &#x60;true&#x60;, restricts the query to all tasks that are assigned. (optional, default to false)</param>
        /// <param name="unassigned">If set to &#x60;true&#x60;, restricts the query to all tasks that are unassigned. (optional, default to false)</param>
        /// <param name="taskDefinitionKey">Restrict to tasks that have the given key. (optional)</param>
        /// <param name="taskDefinitionKeyIn">Restrict to tasks that have one of the given keys. The keys need to be in a comma-separated list. (optional)</param>
        /// <param name="taskDefinitionKeyLike">Restrict to tasks that have a key that has the parameter value as a substring. (optional)</param>
        /// <param name="name">Restrict to tasks that have the given name. (optional)</param>
        /// <param name="nameNotEqual">Restrict to tasks that do not have the given name. (optional)</param>
        /// <param name="nameLike">Restrict to tasks that have a name with the given parameter value as substring. (optional)</param>
        /// <param name="nameNotLike">Restrict to tasks that do not have a name with the given parameter value as substring. (optional)</param>
        /// <param name="description">Restrict to tasks that have the given description. (optional)</param>
        /// <param name="descriptionLike">Restrict to tasks that have a description that has the parameter value as a substring. (optional)</param>
        /// <param name="priority">Restrict to tasks that have the given priority. (optional)</param>
        /// <param name="maxPriority">Restrict to tasks that have a lower or equal priority. (optional)</param>
        /// <param name="minPriority">Restrict to tasks that have a higher or equal priority. (optional)</param>
        /// <param name="dueDate">Restrict to tasks that are due on the given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.546+0200&#x60;. (optional)</param>
        /// <param name="dueDateExpression">Restrict to tasks that are due on the date described by the given expression. See the [User Guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)</param>
        /// <param name="dueAfter">Restrict to tasks that are due after the given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.435+0200&#x60;. (optional)</param>
        /// <param name="dueAfterExpression">Restrict to tasks that are due after the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)</param>
        /// <param name="dueBefore">Restrict to tasks that are due before the given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.243+0200&#x60;. (optional)</param>
        /// <param name="dueBeforeExpression">Restrict to tasks that are due before the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)</param>
        /// <param name="withoutDueDate">Only include tasks which have no due date. Value may only be &#x60;true&#x60;,  as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="followUpDate">Restrict to tasks that have a followUp date on the given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.342+0200&#x60;. (optional)</param>
        /// <param name="followUpDateExpression">Restrict to tasks that have a followUp date on the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)</param>
        /// <param name="followUpAfter">Restrict to tasks that have a followUp date after the given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.542+0200&#x60;. (optional)</param>
        /// <param name="followUpAfterExpression">Restrict to tasks that have a followUp date after the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)</param>
        /// <param name="followUpBefore">Restrict to tasks that have a followUp date before the given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.234+0200&#x60;. (optional)</param>
        /// <param name="followUpBeforeExpression">Restrict to tasks that have a followUp date before the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)</param>
        /// <param name="followUpBeforeOrNotExistent">Restrict to tasks that have no followUp date or a followUp date before the given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.432+0200&#x60;. The typical use case is to query all &#x60;active&#x60; tasks for a user for a given date. (optional)</param>
        /// <param name="followUpBeforeOrNotExistentExpression">Restrict to tasks that have no followUp date or a followUp date before the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)</param>
        /// <param name="createdOn">Restrict to tasks that were created on the given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.324+0200&#x60;. (optional)</param>
        /// <param name="createdOnExpression">Restrict to tasks that were created on the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)</param>
        /// <param name="createdAfter">Restrict to tasks that were created after the given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.342+0200&#x60;. (optional)</param>
        /// <param name="createdAfterExpression">Restrict to tasks that were created after the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)</param>
        /// <param name="createdBefore">Restrict to tasks that were created before the given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.332+0200&#x60;. (optional)</param>
        /// <param name="createdBeforeExpression">Restrict to tasks that were created before the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)</param>
        /// <param name="delegationState">Restrict to tasks that are in the given delegation state. Valid values are &#x60;PENDING&#x60; and &#x60;RESOLVED&#x60;. (optional)</param>
        /// <param name="candidateGroups">Restrict to tasks that are offered to any of the given candidate groups. Takes a comma-separated list of group names, so for example &#x60;developers,support,sales&#x60;. (optional)</param>
        /// <param name="candidateGroupsExpression">Restrict to tasks that are offered to any of the candidate groups described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to &#x60;java.util.List&#x60; of Strings. (optional)</param>
        /// <param name="withCandidateGroups">Only include tasks which have a candidate group. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="withoutCandidateGroups">Only include tasks which have no candidate group. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="withCandidateUsers">Only include tasks which have a candidate user. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="withoutCandidateUsers">Only include tasks which have no candidate users. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="active">Only include active tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="suspended">Only include suspended tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="taskVariables">Only include tasks that have variables with certain values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value.  **Note**: Values are always treated as String objects on server side.  Valid &#x60;operator&#x60; values are: &#x60;eq&#x60; - equal to; &#x60;neq&#x60; - not equal to; &#x60;gt&#x60; - greater than; &#x60;gteq&#x60; - greater than or equal to; &#x60;lt&#x60; - lower than; &#x60;lteq&#x60; - lower than or equal to; &#x60;like&#x60;. &#x60;key&#x60; and &#x60;value&#x60; may not contain underscore or comma characters. (optional)</param>
        /// <param name="processVariables">Only include tasks that belong to process instances that have variables with certain  values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value.  **Note**: Values are always treated as String objects on server side.  Valid &#x60;operator&#x60; values are: &#x60;eq&#x60; - equal to; &#x60;neq&#x60; - not equal to; &#x60;gt&#x60; - greater than; &#x60;gteq&#x60; - greater than or equal to; &#x60;lt&#x60; - lower than; &#x60;lteq&#x60; - lower than or equal to; &#x60;like&#x60;; &#x60;notLike&#x60;. &#x60;key&#x60; and &#x60;value&#x60; may not contain underscore or comma characters. (optional)</param>
        /// <param name="caseInstanceVariables">Only include tasks that belong to case instances that have variables with certain values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value.  **Note**: Values are always treated as String objects on server side.  Valid &#x60;operator&#x60; values are: &#x60;eq&#x60; - equal to; &#x60;neq&#x60; - not equal to; &#x60;gt&#x60; - greater than; &#x60;gteq&#x60; - greater than or equal to; &#x60;lt&#x60; - lower than; &#x60;lteq&#x60; - lower than or equal to; &#x60;like&#x60;. &#x60;key&#x60; and &#x60;value&#x60; may not contain underscore or comma characters. (optional)</param>
        /// <param name="variableNamesIgnoreCase">Match all variable names in this query case-insensitively. If set &#x60;variableName&#x60; and &#x60;variablename&#x60; are treated as equal. (optional, default to false)</param>
        /// <param name="variableValuesIgnoreCase">Match all variable values in this query case-insensitively. If set &#x60;variableValue&#x60; and &#x60;variablevalue&#x60; are treated as equal. (optional, default to false)</param>
        /// <param name="parentTaskId">Restrict query to all tasks that are sub tasks of the given task. Takes a task id. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <returns>ApiResponse of List&lt;TaskDto&gt;</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<List<TaskDto>> GetTasksWithHttpInfo(string taskId = default(string), string taskIdIn = default(string), string processInstanceId = default(string), string processInstanceIdIn = default(string), string processInstanceBusinessKey = default(string), string processInstanceBusinessKeyExpression = default(string), string processInstanceBusinessKeyIn = default(string), string processInstanceBusinessKeyLike = default(string), string processInstanceBusinessKeyLikeExpression = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string processDefinitionKeyIn = default(string), string processDefinitionName = default(string), string processDefinitionNameLike = default(string), string executionId = default(string), string caseInstanceId = default(string), string caseInstanceBusinessKey = default(string), string caseInstanceBusinessKeyLike = default(string), string caseDefinitionId = default(string), string caseDefinitionKey = default(string), string caseDefinitionName = default(string), string caseDefinitionNameLike = default(string), string caseExecutionId = default(string), string activityInstanceIdIn = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), string assignee = default(string), string assigneeExpression = default(string), string assigneeLike = default(string), string assigneeLikeExpression = default(string), string assigneeIn = default(string), string owner = default(string), string ownerExpression = default(string), string candidateGroup = default(string), string candidateGroupExpression = default(string), string candidateUser = default(string), string candidateUserExpression = default(string), bool? includeAssignedTasks = default(bool?), string involvedUser = default(string), string involvedUserExpression = default(string), bool? assigned = default(bool?), bool? unassigned = default(bool?), string taskDefinitionKey = default(string), string taskDefinitionKeyIn = default(string), string taskDefinitionKeyLike = default(string), string name = default(string), string nameNotEqual = default(string), string nameLike = default(string), string nameNotLike = default(string), string description = default(string), string descriptionLike = default(string), int? priority = default(int?), int? maxPriority = default(int?), int? minPriority = default(int?), string dueDate = default(string), string dueDateExpression = default(string), string dueAfter = default(string), string dueAfterExpression = default(string), string dueBefore = default(string), string dueBeforeExpression = default(string), bool? withoutDueDate = default(bool?), string followUpDate = default(string), string followUpDateExpression = default(string), string followUpAfter = default(string), string followUpAfterExpression = default(string), string followUpBefore = default(string), string followUpBeforeExpression = default(string), string followUpBeforeOrNotExistent = default(string), string followUpBeforeOrNotExistentExpression = default(string), string createdOn = default(string), string createdOnExpression = default(string), string createdAfter = default(string), string createdAfterExpression = default(string), string createdBefore = default(string), string createdBeforeExpression = default(string), string delegationState = default(string), string candidateGroups = default(string), string candidateGroupsExpression = default(string), bool? withCandidateGroups = default(bool?), bool? withoutCandidateGroups = default(bool?), bool? withCandidateUsers = default(bool?), bool? withoutCandidateUsers = default(bool?), bool? active = default(bool?), bool? suspended = default(bool?), string taskVariables = default(string), string processVariables = default(string), string caseInstanceVariables = default(string), bool? variableNamesIgnoreCase = default(bool?), bool? variableValuesIgnoreCase = default(bool?), string parentTaskId = default(string), string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?))
        {
            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (taskId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "taskId", taskId));
            }
            if (taskIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "taskIdIn", taskIdIn));
            }
            if (processInstanceId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processInstanceId", processInstanceId));
            }
            if (processInstanceIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processInstanceIdIn", processInstanceIdIn));
            }
            if (processInstanceBusinessKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processInstanceBusinessKey", processInstanceBusinessKey));
            }
            if (processInstanceBusinessKeyExpression != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processInstanceBusinessKeyExpression", processInstanceBusinessKeyExpression));
            }
            if (processInstanceBusinessKeyIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processInstanceBusinessKeyIn", processInstanceBusinessKeyIn));
            }
            if (processInstanceBusinessKeyLike != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processInstanceBusinessKeyLike", processInstanceBusinessKeyLike));
            }
            if (processInstanceBusinessKeyLikeExpression != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processInstanceBusinessKeyLikeExpression", processInstanceBusinessKeyLikeExpression));
            }
            if (processDefinitionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processDefinitionId", processDefinitionId));
            }
            if (processDefinitionKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processDefinitionKey", processDefinitionKey));
            }
            if (processDefinitionKeyIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processDefinitionKeyIn", processDefinitionKeyIn));
            }
            if (processDefinitionName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processDefinitionName", processDefinitionName));
            }
            if (processDefinitionNameLike != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processDefinitionNameLike", processDefinitionNameLike));
            }
            if (executionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "executionId", executionId));
            }
            if (caseInstanceId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "caseInstanceId", caseInstanceId));
            }
            if (caseInstanceBusinessKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "caseInstanceBusinessKey", caseInstanceBusinessKey));
            }
            if (caseInstanceBusinessKeyLike != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "caseInstanceBusinessKeyLike", caseInstanceBusinessKeyLike));
            }
            if (caseDefinitionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "caseDefinitionId", caseDefinitionId));
            }
            if (caseDefinitionKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "caseDefinitionKey", caseDefinitionKey));
            }
            if (caseDefinitionName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "caseDefinitionName", caseDefinitionName));
            }
            if (caseDefinitionNameLike != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "caseDefinitionNameLike", caseDefinitionNameLike));
            }
            if (caseExecutionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "caseExecutionId", caseExecutionId));
            }
            if (activityInstanceIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "activityInstanceIdIn", activityInstanceIdIn));
            }
            if (tenantIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "tenantIdIn", tenantIdIn));
            }
            if (withoutTenantId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "withoutTenantId", withoutTenantId));
            }
            if (assignee != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "assignee", assignee));
            }
            if (assigneeExpression != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "assigneeExpression", assigneeExpression));
            }
            if (assigneeLike != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "assigneeLike", assigneeLike));
            }
            if (assigneeLikeExpression != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "assigneeLikeExpression", assigneeLikeExpression));
            }
            if (assigneeIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "assigneeIn", assigneeIn));
            }
            if (owner != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "owner", owner));
            }
            if (ownerExpression != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "ownerExpression", ownerExpression));
            }
            if (candidateGroup != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "candidateGroup", candidateGroup));
            }
            if (candidateGroupExpression != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "candidateGroupExpression", candidateGroupExpression));
            }
            if (candidateUser != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "candidateUser", candidateUser));
            }
            if (candidateUserExpression != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "candidateUserExpression", candidateUserExpression));
            }
            if (includeAssignedTasks != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "includeAssignedTasks", includeAssignedTasks));
            }
            if (involvedUser != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "involvedUser", involvedUser));
            }
            if (involvedUserExpression != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "involvedUserExpression", involvedUserExpression));
            }
            if (assigned != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "assigned", assigned));
            }
            if (unassigned != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "unassigned", unassigned));
            }
            if (taskDefinitionKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "taskDefinitionKey", taskDefinitionKey));
            }
            if (taskDefinitionKeyIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "taskDefinitionKeyIn", taskDefinitionKeyIn));
            }
            if (taskDefinitionKeyLike != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "taskDefinitionKeyLike", taskDefinitionKeyLike));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (nameNotEqual != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "nameNotEqual", nameNotEqual));
            }
            if (nameLike != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "nameLike", nameLike));
            }
            if (nameNotLike != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "nameNotLike", nameNotLike));
            }
            if (description != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "description", description));
            }
            if (descriptionLike != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "descriptionLike", descriptionLike));
            }
            if (priority != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "priority", priority));
            }
            if (maxPriority != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "maxPriority", maxPriority));
            }
            if (minPriority != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "minPriority", minPriority));
            }
            if (dueDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "dueDate", dueDate));
            }
            if (dueDateExpression != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "dueDateExpression", dueDateExpression));
            }
            if (dueAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "dueAfter", dueAfter));
            }
            if (dueAfterExpression != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "dueAfterExpression", dueAfterExpression));
            }
            if (dueBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "dueBefore", dueBefore));
            }
            if (dueBeforeExpression != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "dueBeforeExpression", dueBeforeExpression));
            }
            if (withoutDueDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "withoutDueDate", withoutDueDate));
            }
            if (followUpDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "followUpDate", followUpDate));
            }
            if (followUpDateExpression != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "followUpDateExpression", followUpDateExpression));
            }
            if (followUpAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "followUpAfter", followUpAfter));
            }
            if (followUpAfterExpression != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "followUpAfterExpression", followUpAfterExpression));
            }
            if (followUpBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "followUpBefore", followUpBefore));
            }
            if (followUpBeforeExpression != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "followUpBeforeExpression", followUpBeforeExpression));
            }
            if (followUpBeforeOrNotExistent != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "followUpBeforeOrNotExistent", followUpBeforeOrNotExistent));
            }
            if (followUpBeforeOrNotExistentExpression != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "followUpBeforeOrNotExistentExpression", followUpBeforeOrNotExistentExpression));
            }
            if (createdOn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "createdOn", createdOn));
            }
            if (createdOnExpression != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "createdOnExpression", createdOnExpression));
            }
            if (createdAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "createdAfter", createdAfter));
            }
            if (createdAfterExpression != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "createdAfterExpression", createdAfterExpression));
            }
            if (createdBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "createdBefore", createdBefore));
            }
            if (createdBeforeExpression != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "createdBeforeExpression", createdBeforeExpression));
            }
            if (delegationState != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "delegationState", delegationState));
            }
            if (candidateGroups != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "candidateGroups", candidateGroups));
            }
            if (candidateGroupsExpression != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "candidateGroupsExpression", candidateGroupsExpression));
            }
            if (withCandidateGroups != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "withCandidateGroups", withCandidateGroups));
            }
            if (withoutCandidateGroups != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "withoutCandidateGroups", withoutCandidateGroups));
            }
            if (withCandidateUsers != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "withCandidateUsers", withCandidateUsers));
            }
            if (withoutCandidateUsers != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "withoutCandidateUsers", withoutCandidateUsers));
            }
            if (active != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "active", active));
            }
            if (suspended != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "suspended", suspended));
            }
            if (taskVariables != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "taskVariables", taskVariables));
            }
            if (processVariables != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processVariables", processVariables));
            }
            if (caseInstanceVariables != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "caseInstanceVariables", caseInstanceVariables));
            }
            if (variableNamesIgnoreCase != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "variableNamesIgnoreCase", variableNamesIgnoreCase));
            }
            if (variableValuesIgnoreCase != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "variableValuesIgnoreCase", variableValuesIgnoreCase));
            }
            if (parentTaskId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "parentTaskId", parentTaskId));
            }
            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "sortBy", sortBy));
            }
            if (sortOrder != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "sortOrder", sortOrder));
            }
            if (firstResult != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "firstResult", firstResult));
            }
            if (maxResults != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "maxResults", maxResults));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<TaskDto>>("/task", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTasks", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get List Queries for tasks that fulfill a given filter. The size of the result set can be retrieved by using the Get Task Count method.  **Security Consideration:** There are several query parameters (such as assigneeExpression) for specifying an EL expression. These are disabled by default to prevent remote code execution. See the section on [security considerations](https://docs.camunda.org/manual/7.15/user-guide/process-engine/securing-custom-code/) for custom code in the user guide for details.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Restrict to task with the given id. (optional)</param>
        /// <param name="taskIdIn">Restrict to tasks with any of the given ids. (optional)</param>
        /// <param name="processInstanceId">Restrict to tasks that belong to process instances with the given id. (optional)</param>
        /// <param name="processInstanceIdIn">Restrict to tasks that belong to process instances with the given ids. (optional)</param>
        /// <param name="processInstanceBusinessKey">Restrict to tasks that belong to process instances with the given business key. (optional)</param>
        /// <param name="processInstanceBusinessKeyExpression">Restrict to tasks that belong to process instances with the given business key which  is described by an expression. See the  [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. (optional)</param>
        /// <param name="processInstanceBusinessKeyIn">Restrict to tasks that belong to process instances with one of the give business keys.  The keys need to be in a comma-separated list. (optional)</param>
        /// <param name="processInstanceBusinessKeyLike">Restrict to tasks that have a process instance business key that has the parameter  value as a substring. (optional)</param>
        /// <param name="processInstanceBusinessKeyLikeExpression">Restrict to tasks that have a process instance business key that has the parameter  value as a substring and is described by an expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions)  for more information on available functions. (optional)</param>
        /// <param name="processDefinitionId">Restrict to tasks that belong to a process definition with the given id. (optional)</param>
        /// <param name="processDefinitionKey">Restrict to tasks that belong to a process definition with the given key. (optional)</param>
        /// <param name="processDefinitionKeyIn">Restrict to tasks that belong to a process definition with one of the given keys. The  keys need to be in a comma-separated list. (optional)</param>
        /// <param name="processDefinitionName">Restrict to tasks that belong to a process definition with the given name. (optional)</param>
        /// <param name="processDefinitionNameLike">Restrict to tasks that have a process definition name that has the parameter value as  a substring. (optional)</param>
        /// <param name="executionId">Restrict to tasks that belong to an execution with the given id. (optional)</param>
        /// <param name="caseInstanceId">Restrict to tasks that belong to case instances with the given id. (optional)</param>
        /// <param name="caseInstanceBusinessKey">Restrict to tasks that belong to case instances with the given business key. (optional)</param>
        /// <param name="caseInstanceBusinessKeyLike">Restrict to tasks that have a case instance business key that has the parameter value  as a substring. (optional)</param>
        /// <param name="caseDefinitionId">Restrict to tasks that belong to a case definition with the given id. (optional)</param>
        /// <param name="caseDefinitionKey">Restrict to tasks that belong to a case definition with the given key. (optional)</param>
        /// <param name="caseDefinitionName">Restrict to tasks that belong to a case definition with the given name. (optional)</param>
        /// <param name="caseDefinitionNameLike">Restrict to tasks that have a case definition name that has the parameter value as a  substring. (optional)</param>
        /// <param name="caseExecutionId">Restrict to tasks that belong to a case execution with the given id. (optional)</param>
        /// <param name="activityInstanceIdIn">Only include tasks which belong to one of the passed and comma-separated activity  instance ids. (optional)</param>
        /// <param name="tenantIdIn">Only include tasks which belong to one of the passed and comma-separated  tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include tasks which belong to no tenant. Value may only be &#x60;true&#x60;,  as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="assignee">Restrict to tasks that the given user is assigned to. (optional)</param>
        /// <param name="assigneeExpression">Restrict to tasks that the user described by the given expression is assigned to.  See the  [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions)  for more information on available functions. (optional)</param>
        /// <param name="assigneeLike">Restrict to tasks that have an assignee that has the parameter  value as a substring. (optional)</param>
        /// <param name="assigneeLikeExpression">Restrict to tasks that have an assignee that has the parameter value described by the  given expression as a substring. See the  [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions)  for more information on available functions. (optional)</param>
        /// <param name="assigneeIn">Only include tasks which are assigned to one of the passed and  comma-separated user ids. (optional)</param>
        /// <param name="owner">Restrict to tasks that the given user owns. (optional)</param>
        /// <param name="ownerExpression">Restrict to tasks that the user described by the given expression owns. See the  [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions)  for more information on available functions. (optional)</param>
        /// <param name="candidateGroup">Only include tasks that are offered to the given group. (optional)</param>
        /// <param name="candidateGroupExpression">Only include tasks that are offered to the group described by the given expression.  See the  [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions)  for more information on available functions. (optional)</param>
        /// <param name="candidateUser">Only include tasks that are offered to the given user or to one of his groups. (optional)</param>
        /// <param name="candidateUserExpression">Only include tasks that are offered to the user described by the given expression.  See the  [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions)  for more information on available functions. (optional)</param>
        /// <param name="includeAssignedTasks">Also include tasks that are assigned to users in candidate queries. Default is to only  include tasks that are not assigned to any user if you query by candidate user or group(s). (optional, default to false)</param>
        /// <param name="involvedUser">Only include tasks that the given user is involved in. A user is involved in a task if  an identity link exists between task and user (e.g., the user is the assignee). (optional)</param>
        /// <param name="involvedUserExpression">Only include tasks that the user described by the given expression is involved in. A user is involved in a task if an identity link exists between task and user (e.g., the user is the assignee). See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. (optional)</param>
        /// <param name="assigned">If set to &#x60;true&#x60;, restricts the query to all tasks that are assigned. (optional, default to false)</param>
        /// <param name="unassigned">If set to &#x60;true&#x60;, restricts the query to all tasks that are unassigned. (optional, default to false)</param>
        /// <param name="taskDefinitionKey">Restrict to tasks that have the given key. (optional)</param>
        /// <param name="taskDefinitionKeyIn">Restrict to tasks that have one of the given keys. The keys need to be in a comma-separated list. (optional)</param>
        /// <param name="taskDefinitionKeyLike">Restrict to tasks that have a key that has the parameter value as a substring. (optional)</param>
        /// <param name="name">Restrict to tasks that have the given name. (optional)</param>
        /// <param name="nameNotEqual">Restrict to tasks that do not have the given name. (optional)</param>
        /// <param name="nameLike">Restrict to tasks that have a name with the given parameter value as substring. (optional)</param>
        /// <param name="nameNotLike">Restrict to tasks that do not have a name with the given parameter value as substring. (optional)</param>
        /// <param name="description">Restrict to tasks that have the given description. (optional)</param>
        /// <param name="descriptionLike">Restrict to tasks that have a description that has the parameter value as a substring. (optional)</param>
        /// <param name="priority">Restrict to tasks that have the given priority. (optional)</param>
        /// <param name="maxPriority">Restrict to tasks that have a lower or equal priority. (optional)</param>
        /// <param name="minPriority">Restrict to tasks that have a higher or equal priority. (optional)</param>
        /// <param name="dueDate">Restrict to tasks that are due on the given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.546+0200&#x60;. (optional)</param>
        /// <param name="dueDateExpression">Restrict to tasks that are due on the date described by the given expression. See the [User Guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)</param>
        /// <param name="dueAfter">Restrict to tasks that are due after the given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.435+0200&#x60;. (optional)</param>
        /// <param name="dueAfterExpression">Restrict to tasks that are due after the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)</param>
        /// <param name="dueBefore">Restrict to tasks that are due before the given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.243+0200&#x60;. (optional)</param>
        /// <param name="dueBeforeExpression">Restrict to tasks that are due before the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)</param>
        /// <param name="withoutDueDate">Only include tasks which have no due date. Value may only be &#x60;true&#x60;,  as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="followUpDate">Restrict to tasks that have a followUp date on the given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.342+0200&#x60;. (optional)</param>
        /// <param name="followUpDateExpression">Restrict to tasks that have a followUp date on the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)</param>
        /// <param name="followUpAfter">Restrict to tasks that have a followUp date after the given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.542+0200&#x60;. (optional)</param>
        /// <param name="followUpAfterExpression">Restrict to tasks that have a followUp date after the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)</param>
        /// <param name="followUpBefore">Restrict to tasks that have a followUp date before the given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.234+0200&#x60;. (optional)</param>
        /// <param name="followUpBeforeExpression">Restrict to tasks that have a followUp date before the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)</param>
        /// <param name="followUpBeforeOrNotExistent">Restrict to tasks that have no followUp date or a followUp date before the given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.432+0200&#x60;. The typical use case is to query all &#x60;active&#x60; tasks for a user for a given date. (optional)</param>
        /// <param name="followUpBeforeOrNotExistentExpression">Restrict to tasks that have no followUp date or a followUp date before the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)</param>
        /// <param name="createdOn">Restrict to tasks that were created on the given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.324+0200&#x60;. (optional)</param>
        /// <param name="createdOnExpression">Restrict to tasks that were created on the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)</param>
        /// <param name="createdAfter">Restrict to tasks that were created after the given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.342+0200&#x60;. (optional)</param>
        /// <param name="createdAfterExpression">Restrict to tasks that were created after the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)</param>
        /// <param name="createdBefore">Restrict to tasks that were created before the given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.332+0200&#x60;. (optional)</param>
        /// <param name="createdBeforeExpression">Restrict to tasks that were created before the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)</param>
        /// <param name="delegationState">Restrict to tasks that are in the given delegation state. Valid values are &#x60;PENDING&#x60; and &#x60;RESOLVED&#x60;. (optional)</param>
        /// <param name="candidateGroups">Restrict to tasks that are offered to any of the given candidate groups. Takes a comma-separated list of group names, so for example &#x60;developers,support,sales&#x60;. (optional)</param>
        /// <param name="candidateGroupsExpression">Restrict to tasks that are offered to any of the candidate groups described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to &#x60;java.util.List&#x60; of Strings. (optional)</param>
        /// <param name="withCandidateGroups">Only include tasks which have a candidate group. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="withoutCandidateGroups">Only include tasks which have no candidate group. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="withCandidateUsers">Only include tasks which have a candidate user. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="withoutCandidateUsers">Only include tasks which have no candidate users. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="active">Only include active tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="suspended">Only include suspended tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="taskVariables">Only include tasks that have variables with certain values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value.  **Note**: Values are always treated as String objects on server side.  Valid &#x60;operator&#x60; values are: &#x60;eq&#x60; - equal to; &#x60;neq&#x60; - not equal to; &#x60;gt&#x60; - greater than; &#x60;gteq&#x60; - greater than or equal to; &#x60;lt&#x60; - lower than; &#x60;lteq&#x60; - lower than or equal to; &#x60;like&#x60;. &#x60;key&#x60; and &#x60;value&#x60; may not contain underscore or comma characters. (optional)</param>
        /// <param name="processVariables">Only include tasks that belong to process instances that have variables with certain  values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value.  **Note**: Values are always treated as String objects on server side.  Valid &#x60;operator&#x60; values are: &#x60;eq&#x60; - equal to; &#x60;neq&#x60; - not equal to; &#x60;gt&#x60; - greater than; &#x60;gteq&#x60; - greater than or equal to; &#x60;lt&#x60; - lower than; &#x60;lteq&#x60; - lower than or equal to; &#x60;like&#x60;; &#x60;notLike&#x60;. &#x60;key&#x60; and &#x60;value&#x60; may not contain underscore or comma characters. (optional)</param>
        /// <param name="caseInstanceVariables">Only include tasks that belong to case instances that have variables with certain values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value.  **Note**: Values are always treated as String objects on server side.  Valid &#x60;operator&#x60; values are: &#x60;eq&#x60; - equal to; &#x60;neq&#x60; - not equal to; &#x60;gt&#x60; - greater than; &#x60;gteq&#x60; - greater than or equal to; &#x60;lt&#x60; - lower than; &#x60;lteq&#x60; - lower than or equal to; &#x60;like&#x60;. &#x60;key&#x60; and &#x60;value&#x60; may not contain underscore or comma characters. (optional)</param>
        /// <param name="variableNamesIgnoreCase">Match all variable names in this query case-insensitively. If set &#x60;variableName&#x60; and &#x60;variablename&#x60; are treated as equal. (optional, default to false)</param>
        /// <param name="variableValuesIgnoreCase">Match all variable values in this query case-insensitively. If set &#x60;variableValue&#x60; and &#x60;variablevalue&#x60; are treated as equal. (optional, default to false)</param>
        /// <param name="parentTaskId">Restrict query to all tasks that are sub tasks of the given task. Takes a task id. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;TaskDto&gt;</returns>
        public async System.Threading.Tasks.Task<List<TaskDto>> GetTasksAsync(string taskId = default(string), string taskIdIn = default(string), string processInstanceId = default(string), string processInstanceIdIn = default(string), string processInstanceBusinessKey = default(string), string processInstanceBusinessKeyExpression = default(string), string processInstanceBusinessKeyIn = default(string), string processInstanceBusinessKeyLike = default(string), string processInstanceBusinessKeyLikeExpression = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string processDefinitionKeyIn = default(string), string processDefinitionName = default(string), string processDefinitionNameLike = default(string), string executionId = default(string), string caseInstanceId = default(string), string caseInstanceBusinessKey = default(string), string caseInstanceBusinessKeyLike = default(string), string caseDefinitionId = default(string), string caseDefinitionKey = default(string), string caseDefinitionName = default(string), string caseDefinitionNameLike = default(string), string caseExecutionId = default(string), string activityInstanceIdIn = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), string assignee = default(string), string assigneeExpression = default(string), string assigneeLike = default(string), string assigneeLikeExpression = default(string), string assigneeIn = default(string), string owner = default(string), string ownerExpression = default(string), string candidateGroup = default(string), string candidateGroupExpression = default(string), string candidateUser = default(string), string candidateUserExpression = default(string), bool? includeAssignedTasks = default(bool?), string involvedUser = default(string), string involvedUserExpression = default(string), bool? assigned = default(bool?), bool? unassigned = default(bool?), string taskDefinitionKey = default(string), string taskDefinitionKeyIn = default(string), string taskDefinitionKeyLike = default(string), string name = default(string), string nameNotEqual = default(string), string nameLike = default(string), string nameNotLike = default(string), string description = default(string), string descriptionLike = default(string), int? priority = default(int?), int? maxPriority = default(int?), int? minPriority = default(int?), string dueDate = default(string), string dueDateExpression = default(string), string dueAfter = default(string), string dueAfterExpression = default(string), string dueBefore = default(string), string dueBeforeExpression = default(string), bool? withoutDueDate = default(bool?), string followUpDate = default(string), string followUpDateExpression = default(string), string followUpAfter = default(string), string followUpAfterExpression = default(string), string followUpBefore = default(string), string followUpBeforeExpression = default(string), string followUpBeforeOrNotExistent = default(string), string followUpBeforeOrNotExistentExpression = default(string), string createdOn = default(string), string createdOnExpression = default(string), string createdAfter = default(string), string createdAfterExpression = default(string), string createdBefore = default(string), string createdBeforeExpression = default(string), string delegationState = default(string), string candidateGroups = default(string), string candidateGroupsExpression = default(string), bool? withCandidateGroups = default(bool?), bool? withoutCandidateGroups = default(bool?), bool? withCandidateUsers = default(bool?), bool? withoutCandidateUsers = default(bool?), bool? active = default(bool?), bool? suspended = default(bool?), string taskVariables = default(string), string processVariables = default(string), string caseInstanceVariables = default(string), bool? variableNamesIgnoreCase = default(bool?), bool? variableValuesIgnoreCase = default(bool?), string parentTaskId = default(string), string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<List<TaskDto>> localVarResponse = await GetTasksWithHttpInfoAsync(taskId, taskIdIn, processInstanceId, processInstanceIdIn, processInstanceBusinessKey, processInstanceBusinessKeyExpression, processInstanceBusinessKeyIn, processInstanceBusinessKeyLike, processInstanceBusinessKeyLikeExpression, processDefinitionId, processDefinitionKey, processDefinitionKeyIn, processDefinitionName, processDefinitionNameLike, executionId, caseInstanceId, caseInstanceBusinessKey, caseInstanceBusinessKeyLike, caseDefinitionId, caseDefinitionKey, caseDefinitionName, caseDefinitionNameLike, caseExecutionId, activityInstanceIdIn, tenantIdIn, withoutTenantId, assignee, assigneeExpression, assigneeLike, assigneeLikeExpression, assigneeIn, owner, ownerExpression, candidateGroup, candidateGroupExpression, candidateUser, candidateUserExpression, includeAssignedTasks, involvedUser, involvedUserExpression, assigned, unassigned, taskDefinitionKey, taskDefinitionKeyIn, taskDefinitionKeyLike, name, nameNotEqual, nameLike, nameNotLike, description, descriptionLike, priority, maxPriority, minPriority, dueDate, dueDateExpression, dueAfter, dueAfterExpression, dueBefore, dueBeforeExpression, withoutDueDate, followUpDate, followUpDateExpression, followUpAfter, followUpAfterExpression, followUpBefore, followUpBeforeExpression, followUpBeforeOrNotExistent, followUpBeforeOrNotExistentExpression, createdOn, createdOnExpression, createdAfter, createdAfterExpression, createdBefore, createdBeforeExpression, delegationState, candidateGroups, candidateGroupsExpression, withCandidateGroups, withoutCandidateGroups, withCandidateUsers, withoutCandidateUsers, active, suspended, taskVariables, processVariables, caseInstanceVariables, variableNamesIgnoreCase, variableValuesIgnoreCase, parentTaskId, sortBy, sortOrder, firstResult, maxResults, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get List Queries for tasks that fulfill a given filter. The size of the result set can be retrieved by using the Get Task Count method.  **Security Consideration:** There are several query parameters (such as assigneeExpression) for specifying an EL expression. These are disabled by default to prevent remote code execution. See the section on [security considerations](https://docs.camunda.org/manual/7.15/user-guide/process-engine/securing-custom-code/) for custom code in the user guide for details.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Restrict to task with the given id. (optional)</param>
        /// <param name="taskIdIn">Restrict to tasks with any of the given ids. (optional)</param>
        /// <param name="processInstanceId">Restrict to tasks that belong to process instances with the given id. (optional)</param>
        /// <param name="processInstanceIdIn">Restrict to tasks that belong to process instances with the given ids. (optional)</param>
        /// <param name="processInstanceBusinessKey">Restrict to tasks that belong to process instances with the given business key. (optional)</param>
        /// <param name="processInstanceBusinessKeyExpression">Restrict to tasks that belong to process instances with the given business key which  is described by an expression. See the  [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. (optional)</param>
        /// <param name="processInstanceBusinessKeyIn">Restrict to tasks that belong to process instances with one of the give business keys.  The keys need to be in a comma-separated list. (optional)</param>
        /// <param name="processInstanceBusinessKeyLike">Restrict to tasks that have a process instance business key that has the parameter  value as a substring. (optional)</param>
        /// <param name="processInstanceBusinessKeyLikeExpression">Restrict to tasks that have a process instance business key that has the parameter  value as a substring and is described by an expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions)  for more information on available functions. (optional)</param>
        /// <param name="processDefinitionId">Restrict to tasks that belong to a process definition with the given id. (optional)</param>
        /// <param name="processDefinitionKey">Restrict to tasks that belong to a process definition with the given key. (optional)</param>
        /// <param name="processDefinitionKeyIn">Restrict to tasks that belong to a process definition with one of the given keys. The  keys need to be in a comma-separated list. (optional)</param>
        /// <param name="processDefinitionName">Restrict to tasks that belong to a process definition with the given name. (optional)</param>
        /// <param name="processDefinitionNameLike">Restrict to tasks that have a process definition name that has the parameter value as  a substring. (optional)</param>
        /// <param name="executionId">Restrict to tasks that belong to an execution with the given id. (optional)</param>
        /// <param name="caseInstanceId">Restrict to tasks that belong to case instances with the given id. (optional)</param>
        /// <param name="caseInstanceBusinessKey">Restrict to tasks that belong to case instances with the given business key. (optional)</param>
        /// <param name="caseInstanceBusinessKeyLike">Restrict to tasks that have a case instance business key that has the parameter value  as a substring. (optional)</param>
        /// <param name="caseDefinitionId">Restrict to tasks that belong to a case definition with the given id. (optional)</param>
        /// <param name="caseDefinitionKey">Restrict to tasks that belong to a case definition with the given key. (optional)</param>
        /// <param name="caseDefinitionName">Restrict to tasks that belong to a case definition with the given name. (optional)</param>
        /// <param name="caseDefinitionNameLike">Restrict to tasks that have a case definition name that has the parameter value as a  substring. (optional)</param>
        /// <param name="caseExecutionId">Restrict to tasks that belong to a case execution with the given id. (optional)</param>
        /// <param name="activityInstanceIdIn">Only include tasks which belong to one of the passed and comma-separated activity  instance ids. (optional)</param>
        /// <param name="tenantIdIn">Only include tasks which belong to one of the passed and comma-separated  tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include tasks which belong to no tenant. Value may only be &#x60;true&#x60;,  as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="assignee">Restrict to tasks that the given user is assigned to. (optional)</param>
        /// <param name="assigneeExpression">Restrict to tasks that the user described by the given expression is assigned to.  See the  [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions)  for more information on available functions. (optional)</param>
        /// <param name="assigneeLike">Restrict to tasks that have an assignee that has the parameter  value as a substring. (optional)</param>
        /// <param name="assigneeLikeExpression">Restrict to tasks that have an assignee that has the parameter value described by the  given expression as a substring. See the  [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions)  for more information on available functions. (optional)</param>
        /// <param name="assigneeIn">Only include tasks which are assigned to one of the passed and  comma-separated user ids. (optional)</param>
        /// <param name="owner">Restrict to tasks that the given user owns. (optional)</param>
        /// <param name="ownerExpression">Restrict to tasks that the user described by the given expression owns. See the  [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions)  for more information on available functions. (optional)</param>
        /// <param name="candidateGroup">Only include tasks that are offered to the given group. (optional)</param>
        /// <param name="candidateGroupExpression">Only include tasks that are offered to the group described by the given expression.  See the  [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions)  for more information on available functions. (optional)</param>
        /// <param name="candidateUser">Only include tasks that are offered to the given user or to one of his groups. (optional)</param>
        /// <param name="candidateUserExpression">Only include tasks that are offered to the user described by the given expression.  See the  [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions)  for more information on available functions. (optional)</param>
        /// <param name="includeAssignedTasks">Also include tasks that are assigned to users in candidate queries. Default is to only  include tasks that are not assigned to any user if you query by candidate user or group(s). (optional, default to false)</param>
        /// <param name="involvedUser">Only include tasks that the given user is involved in. A user is involved in a task if  an identity link exists between task and user (e.g., the user is the assignee). (optional)</param>
        /// <param name="involvedUserExpression">Only include tasks that the user described by the given expression is involved in. A user is involved in a task if an identity link exists between task and user (e.g., the user is the assignee). See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. (optional)</param>
        /// <param name="assigned">If set to &#x60;true&#x60;, restricts the query to all tasks that are assigned. (optional, default to false)</param>
        /// <param name="unassigned">If set to &#x60;true&#x60;, restricts the query to all tasks that are unassigned. (optional, default to false)</param>
        /// <param name="taskDefinitionKey">Restrict to tasks that have the given key. (optional)</param>
        /// <param name="taskDefinitionKeyIn">Restrict to tasks that have one of the given keys. The keys need to be in a comma-separated list. (optional)</param>
        /// <param name="taskDefinitionKeyLike">Restrict to tasks that have a key that has the parameter value as a substring. (optional)</param>
        /// <param name="name">Restrict to tasks that have the given name. (optional)</param>
        /// <param name="nameNotEqual">Restrict to tasks that do not have the given name. (optional)</param>
        /// <param name="nameLike">Restrict to tasks that have a name with the given parameter value as substring. (optional)</param>
        /// <param name="nameNotLike">Restrict to tasks that do not have a name with the given parameter value as substring. (optional)</param>
        /// <param name="description">Restrict to tasks that have the given description. (optional)</param>
        /// <param name="descriptionLike">Restrict to tasks that have a description that has the parameter value as a substring. (optional)</param>
        /// <param name="priority">Restrict to tasks that have the given priority. (optional)</param>
        /// <param name="maxPriority">Restrict to tasks that have a lower or equal priority. (optional)</param>
        /// <param name="minPriority">Restrict to tasks that have a higher or equal priority. (optional)</param>
        /// <param name="dueDate">Restrict to tasks that are due on the given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.546+0200&#x60;. (optional)</param>
        /// <param name="dueDateExpression">Restrict to tasks that are due on the date described by the given expression. See the [User Guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)</param>
        /// <param name="dueAfter">Restrict to tasks that are due after the given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.435+0200&#x60;. (optional)</param>
        /// <param name="dueAfterExpression">Restrict to tasks that are due after the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)</param>
        /// <param name="dueBefore">Restrict to tasks that are due before the given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.243+0200&#x60;. (optional)</param>
        /// <param name="dueBeforeExpression">Restrict to tasks that are due before the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)</param>
        /// <param name="withoutDueDate">Only include tasks which have no due date. Value may only be &#x60;true&#x60;,  as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="followUpDate">Restrict to tasks that have a followUp date on the given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.342+0200&#x60;. (optional)</param>
        /// <param name="followUpDateExpression">Restrict to tasks that have a followUp date on the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)</param>
        /// <param name="followUpAfter">Restrict to tasks that have a followUp date after the given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.542+0200&#x60;. (optional)</param>
        /// <param name="followUpAfterExpression">Restrict to tasks that have a followUp date after the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)</param>
        /// <param name="followUpBefore">Restrict to tasks that have a followUp date before the given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.234+0200&#x60;. (optional)</param>
        /// <param name="followUpBeforeExpression">Restrict to tasks that have a followUp date before the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)</param>
        /// <param name="followUpBeforeOrNotExistent">Restrict to tasks that have no followUp date or a followUp date before the given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.432+0200&#x60;. The typical use case is to query all &#x60;active&#x60; tasks for a user for a given date. (optional)</param>
        /// <param name="followUpBeforeOrNotExistentExpression">Restrict to tasks that have no followUp date or a followUp date before the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)</param>
        /// <param name="createdOn">Restrict to tasks that were created on the given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.324+0200&#x60;. (optional)</param>
        /// <param name="createdOnExpression">Restrict to tasks that were created on the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)</param>
        /// <param name="createdAfter">Restrict to tasks that were created after the given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.342+0200&#x60;. (optional)</param>
        /// <param name="createdAfterExpression">Restrict to tasks that were created after the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)</param>
        /// <param name="createdBefore">Restrict to tasks that were created before the given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.332+0200&#x60;. (optional)</param>
        /// <param name="createdBeforeExpression">Restrict to tasks that were created before the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)</param>
        /// <param name="delegationState">Restrict to tasks that are in the given delegation state. Valid values are &#x60;PENDING&#x60; and &#x60;RESOLVED&#x60;. (optional)</param>
        /// <param name="candidateGroups">Restrict to tasks that are offered to any of the given candidate groups. Takes a comma-separated list of group names, so for example &#x60;developers,support,sales&#x60;. (optional)</param>
        /// <param name="candidateGroupsExpression">Restrict to tasks that are offered to any of the candidate groups described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to &#x60;java.util.List&#x60; of Strings. (optional)</param>
        /// <param name="withCandidateGroups">Only include tasks which have a candidate group. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="withoutCandidateGroups">Only include tasks which have no candidate group. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="withCandidateUsers">Only include tasks which have a candidate user. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="withoutCandidateUsers">Only include tasks which have no candidate users. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="active">Only include active tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="suspended">Only include suspended tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="taskVariables">Only include tasks that have variables with certain values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value.  **Note**: Values are always treated as String objects on server side.  Valid &#x60;operator&#x60; values are: &#x60;eq&#x60; - equal to; &#x60;neq&#x60; - not equal to; &#x60;gt&#x60; - greater than; &#x60;gteq&#x60; - greater than or equal to; &#x60;lt&#x60; - lower than; &#x60;lteq&#x60; - lower than or equal to; &#x60;like&#x60;. &#x60;key&#x60; and &#x60;value&#x60; may not contain underscore or comma characters. (optional)</param>
        /// <param name="processVariables">Only include tasks that belong to process instances that have variables with certain  values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value.  **Note**: Values are always treated as String objects on server side.  Valid &#x60;operator&#x60; values are: &#x60;eq&#x60; - equal to; &#x60;neq&#x60; - not equal to; &#x60;gt&#x60; - greater than; &#x60;gteq&#x60; - greater than or equal to; &#x60;lt&#x60; - lower than; &#x60;lteq&#x60; - lower than or equal to; &#x60;like&#x60;; &#x60;notLike&#x60;. &#x60;key&#x60; and &#x60;value&#x60; may not contain underscore or comma characters. (optional)</param>
        /// <param name="caseInstanceVariables">Only include tasks that belong to case instances that have variables with certain values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value.  **Note**: Values are always treated as String objects on server side.  Valid &#x60;operator&#x60; values are: &#x60;eq&#x60; - equal to; &#x60;neq&#x60; - not equal to; &#x60;gt&#x60; - greater than; &#x60;gteq&#x60; - greater than or equal to; &#x60;lt&#x60; - lower than; &#x60;lteq&#x60; - lower than or equal to; &#x60;like&#x60;. &#x60;key&#x60; and &#x60;value&#x60; may not contain underscore or comma characters. (optional)</param>
        /// <param name="variableNamesIgnoreCase">Match all variable names in this query case-insensitively. If set &#x60;variableName&#x60; and &#x60;variablename&#x60; are treated as equal. (optional, default to false)</param>
        /// <param name="variableValuesIgnoreCase">Match all variable values in this query case-insensitively. If set &#x60;variableValue&#x60; and &#x60;variablevalue&#x60; are treated as equal. (optional, default to false)</param>
        /// <param name="parentTaskId">Restrict query to all tasks that are sub tasks of the given task. Takes a task id. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;TaskDto&gt;)</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<List<TaskDto>>> GetTasksWithHttpInfoAsync(string taskId = default(string), string taskIdIn = default(string), string processInstanceId = default(string), string processInstanceIdIn = default(string), string processInstanceBusinessKey = default(string), string processInstanceBusinessKeyExpression = default(string), string processInstanceBusinessKeyIn = default(string), string processInstanceBusinessKeyLike = default(string), string processInstanceBusinessKeyLikeExpression = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string processDefinitionKeyIn = default(string), string processDefinitionName = default(string), string processDefinitionNameLike = default(string), string executionId = default(string), string caseInstanceId = default(string), string caseInstanceBusinessKey = default(string), string caseInstanceBusinessKeyLike = default(string), string caseDefinitionId = default(string), string caseDefinitionKey = default(string), string caseDefinitionName = default(string), string caseDefinitionNameLike = default(string), string caseExecutionId = default(string), string activityInstanceIdIn = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), string assignee = default(string), string assigneeExpression = default(string), string assigneeLike = default(string), string assigneeLikeExpression = default(string), string assigneeIn = default(string), string owner = default(string), string ownerExpression = default(string), string candidateGroup = default(string), string candidateGroupExpression = default(string), string candidateUser = default(string), string candidateUserExpression = default(string), bool? includeAssignedTasks = default(bool?), string involvedUser = default(string), string involvedUserExpression = default(string), bool? assigned = default(bool?), bool? unassigned = default(bool?), string taskDefinitionKey = default(string), string taskDefinitionKeyIn = default(string), string taskDefinitionKeyLike = default(string), string name = default(string), string nameNotEqual = default(string), string nameLike = default(string), string nameNotLike = default(string), string description = default(string), string descriptionLike = default(string), int? priority = default(int?), int? maxPriority = default(int?), int? minPriority = default(int?), string dueDate = default(string), string dueDateExpression = default(string), string dueAfter = default(string), string dueAfterExpression = default(string), string dueBefore = default(string), string dueBeforeExpression = default(string), bool? withoutDueDate = default(bool?), string followUpDate = default(string), string followUpDateExpression = default(string), string followUpAfter = default(string), string followUpAfterExpression = default(string), string followUpBefore = default(string), string followUpBeforeExpression = default(string), string followUpBeforeOrNotExistent = default(string), string followUpBeforeOrNotExistentExpression = default(string), string createdOn = default(string), string createdOnExpression = default(string), string createdAfter = default(string), string createdAfterExpression = default(string), string createdBefore = default(string), string createdBeforeExpression = default(string), string delegationState = default(string), string candidateGroups = default(string), string candidateGroupsExpression = default(string), bool? withCandidateGroups = default(bool?), bool? withoutCandidateGroups = default(bool?), bool? withCandidateUsers = default(bool?), bool? withoutCandidateUsers = default(bool?), bool? active = default(bool?), bool? suspended = default(bool?), string taskVariables = default(string), string processVariables = default(string), string caseInstanceVariables = default(string), bool? variableNamesIgnoreCase = default(bool?), bool? variableValuesIgnoreCase = default(bool?), string parentTaskId = default(string), string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (taskId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "taskId", taskId));
            }
            if (taskIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "taskIdIn", taskIdIn));
            }
            if (processInstanceId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processInstanceId", processInstanceId));
            }
            if (processInstanceIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processInstanceIdIn", processInstanceIdIn));
            }
            if (processInstanceBusinessKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processInstanceBusinessKey", processInstanceBusinessKey));
            }
            if (processInstanceBusinessKeyExpression != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processInstanceBusinessKeyExpression", processInstanceBusinessKeyExpression));
            }
            if (processInstanceBusinessKeyIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processInstanceBusinessKeyIn", processInstanceBusinessKeyIn));
            }
            if (processInstanceBusinessKeyLike != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processInstanceBusinessKeyLike", processInstanceBusinessKeyLike));
            }
            if (processInstanceBusinessKeyLikeExpression != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processInstanceBusinessKeyLikeExpression", processInstanceBusinessKeyLikeExpression));
            }
            if (processDefinitionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processDefinitionId", processDefinitionId));
            }
            if (processDefinitionKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processDefinitionKey", processDefinitionKey));
            }
            if (processDefinitionKeyIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processDefinitionKeyIn", processDefinitionKeyIn));
            }
            if (processDefinitionName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processDefinitionName", processDefinitionName));
            }
            if (processDefinitionNameLike != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processDefinitionNameLike", processDefinitionNameLike));
            }
            if (executionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "executionId", executionId));
            }
            if (caseInstanceId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "caseInstanceId", caseInstanceId));
            }
            if (caseInstanceBusinessKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "caseInstanceBusinessKey", caseInstanceBusinessKey));
            }
            if (caseInstanceBusinessKeyLike != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "caseInstanceBusinessKeyLike", caseInstanceBusinessKeyLike));
            }
            if (caseDefinitionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "caseDefinitionId", caseDefinitionId));
            }
            if (caseDefinitionKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "caseDefinitionKey", caseDefinitionKey));
            }
            if (caseDefinitionName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "caseDefinitionName", caseDefinitionName));
            }
            if (caseDefinitionNameLike != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "caseDefinitionNameLike", caseDefinitionNameLike));
            }
            if (caseExecutionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "caseExecutionId", caseExecutionId));
            }
            if (activityInstanceIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "activityInstanceIdIn", activityInstanceIdIn));
            }
            if (tenantIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "tenantIdIn", tenantIdIn));
            }
            if (withoutTenantId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "withoutTenantId", withoutTenantId));
            }
            if (assignee != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "assignee", assignee));
            }
            if (assigneeExpression != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "assigneeExpression", assigneeExpression));
            }
            if (assigneeLike != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "assigneeLike", assigneeLike));
            }
            if (assigneeLikeExpression != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "assigneeLikeExpression", assigneeLikeExpression));
            }
            if (assigneeIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "assigneeIn", assigneeIn));
            }
            if (owner != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "owner", owner));
            }
            if (ownerExpression != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "ownerExpression", ownerExpression));
            }
            if (candidateGroup != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "candidateGroup", candidateGroup));
            }
            if (candidateGroupExpression != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "candidateGroupExpression", candidateGroupExpression));
            }
            if (candidateUser != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "candidateUser", candidateUser));
            }
            if (candidateUserExpression != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "candidateUserExpression", candidateUserExpression));
            }
            if (includeAssignedTasks != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "includeAssignedTasks", includeAssignedTasks));
            }
            if (involvedUser != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "involvedUser", involvedUser));
            }
            if (involvedUserExpression != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "involvedUserExpression", involvedUserExpression));
            }
            if (assigned != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "assigned", assigned));
            }
            if (unassigned != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "unassigned", unassigned));
            }
            if (taskDefinitionKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "taskDefinitionKey", taskDefinitionKey));
            }
            if (taskDefinitionKeyIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "taskDefinitionKeyIn", taskDefinitionKeyIn));
            }
            if (taskDefinitionKeyLike != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "taskDefinitionKeyLike", taskDefinitionKeyLike));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (nameNotEqual != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "nameNotEqual", nameNotEqual));
            }
            if (nameLike != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "nameLike", nameLike));
            }
            if (nameNotLike != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "nameNotLike", nameNotLike));
            }
            if (description != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "description", description));
            }
            if (descriptionLike != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "descriptionLike", descriptionLike));
            }
            if (priority != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "priority", priority));
            }
            if (maxPriority != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "maxPriority", maxPriority));
            }
            if (minPriority != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "minPriority", minPriority));
            }
            if (dueDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "dueDate", dueDate));
            }
            if (dueDateExpression != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "dueDateExpression", dueDateExpression));
            }
            if (dueAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "dueAfter", dueAfter));
            }
            if (dueAfterExpression != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "dueAfterExpression", dueAfterExpression));
            }
            if (dueBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "dueBefore", dueBefore));
            }
            if (dueBeforeExpression != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "dueBeforeExpression", dueBeforeExpression));
            }
            if (withoutDueDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "withoutDueDate", withoutDueDate));
            }
            if (followUpDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "followUpDate", followUpDate));
            }
            if (followUpDateExpression != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "followUpDateExpression", followUpDateExpression));
            }
            if (followUpAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "followUpAfter", followUpAfter));
            }
            if (followUpAfterExpression != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "followUpAfterExpression", followUpAfterExpression));
            }
            if (followUpBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "followUpBefore", followUpBefore));
            }
            if (followUpBeforeExpression != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "followUpBeforeExpression", followUpBeforeExpression));
            }
            if (followUpBeforeOrNotExistent != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "followUpBeforeOrNotExistent", followUpBeforeOrNotExistent));
            }
            if (followUpBeforeOrNotExistentExpression != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "followUpBeforeOrNotExistentExpression", followUpBeforeOrNotExistentExpression));
            }
            if (createdOn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "createdOn", createdOn));
            }
            if (createdOnExpression != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "createdOnExpression", createdOnExpression));
            }
            if (createdAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "createdAfter", createdAfter));
            }
            if (createdAfterExpression != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "createdAfterExpression", createdAfterExpression));
            }
            if (createdBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "createdBefore", createdBefore));
            }
            if (createdBeforeExpression != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "createdBeforeExpression", createdBeforeExpression));
            }
            if (delegationState != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "delegationState", delegationState));
            }
            if (candidateGroups != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "candidateGroups", candidateGroups));
            }
            if (candidateGroupsExpression != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "candidateGroupsExpression", candidateGroupsExpression));
            }
            if (withCandidateGroups != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "withCandidateGroups", withCandidateGroups));
            }
            if (withoutCandidateGroups != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "withoutCandidateGroups", withoutCandidateGroups));
            }
            if (withCandidateUsers != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "withCandidateUsers", withCandidateUsers));
            }
            if (withoutCandidateUsers != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "withoutCandidateUsers", withoutCandidateUsers));
            }
            if (active != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "active", active));
            }
            if (suspended != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "suspended", suspended));
            }
            if (taskVariables != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "taskVariables", taskVariables));
            }
            if (processVariables != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processVariables", processVariables));
            }
            if (caseInstanceVariables != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "caseInstanceVariables", caseInstanceVariables));
            }
            if (variableNamesIgnoreCase != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "variableNamesIgnoreCase", variableNamesIgnoreCase));
            }
            if (variableValuesIgnoreCase != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "variableValuesIgnoreCase", variableValuesIgnoreCase));
            }
            if (parentTaskId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "parentTaskId", parentTaskId));
            }
            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "sortBy", sortBy));
            }
            if (sortOrder != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "sortOrder", sortOrder));
            }
            if (firstResult != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "firstResult", firstResult));
            }
            if (maxResults != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "maxResults", maxResults));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<TaskDto>>("/task", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTasks", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get List Count Retrieves the number of tasks that fulfill a provided filter. Corresponds to the size of the result set when using the [Get Tasks](https://docs.camunda.org/manual/7.15/reference/rest/task/) method.  **Security Consideration:** There are several query parameters (such as assigneeExpression) for specifying an EL expression. These are disabled by default to prevent remote code execution. See the section on [security considerations](https://docs.camunda.org/manual/7.15/user-guide/process-engine/securing-custom-code/) for custom code in the user guide for details.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Restrict to task with the given id. (optional)</param>
        /// <param name="taskIdIn">Restrict to tasks with any of the given ids. (optional)</param>
        /// <param name="processInstanceId">Restrict to tasks that belong to process instances with the given id. (optional)</param>
        /// <param name="processInstanceIdIn">Restrict to tasks that belong to process instances with the given ids. (optional)</param>
        /// <param name="processInstanceBusinessKey">Restrict to tasks that belong to process instances with the given business key. (optional)</param>
        /// <param name="processInstanceBusinessKeyExpression">Restrict to tasks that belong to process instances with the given business key which  is described by an expression. See the  [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. (optional)</param>
        /// <param name="processInstanceBusinessKeyIn">Restrict to tasks that belong to process instances with one of the give business keys.  The keys need to be in a comma-separated list. (optional)</param>
        /// <param name="processInstanceBusinessKeyLike">Restrict to tasks that have a process instance business key that has the parameter  value as a substring. (optional)</param>
        /// <param name="processInstanceBusinessKeyLikeExpression">Restrict to tasks that have a process instance business key that has the parameter  value as a substring and is described by an expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions)  for more information on available functions. (optional)</param>
        /// <param name="processDefinitionId">Restrict to tasks that belong to a process definition with the given id. (optional)</param>
        /// <param name="processDefinitionKey">Restrict to tasks that belong to a process definition with the given key. (optional)</param>
        /// <param name="processDefinitionKeyIn">Restrict to tasks that belong to a process definition with one of the given keys. The  keys need to be in a comma-separated list. (optional)</param>
        /// <param name="processDefinitionName">Restrict to tasks that belong to a process definition with the given name. (optional)</param>
        /// <param name="processDefinitionNameLike">Restrict to tasks that have a process definition name that has the parameter value as  a substring. (optional)</param>
        /// <param name="executionId">Restrict to tasks that belong to an execution with the given id. (optional)</param>
        /// <param name="caseInstanceId">Restrict to tasks that belong to case instances with the given id. (optional)</param>
        /// <param name="caseInstanceBusinessKey">Restrict to tasks that belong to case instances with the given business key. (optional)</param>
        /// <param name="caseInstanceBusinessKeyLike">Restrict to tasks that have a case instance business key that has the parameter value  as a substring. (optional)</param>
        /// <param name="caseDefinitionId">Restrict to tasks that belong to a case definition with the given id. (optional)</param>
        /// <param name="caseDefinitionKey">Restrict to tasks that belong to a case definition with the given key. (optional)</param>
        /// <param name="caseDefinitionName">Restrict to tasks that belong to a case definition with the given name. (optional)</param>
        /// <param name="caseDefinitionNameLike">Restrict to tasks that have a case definition name that has the parameter value as a  substring. (optional)</param>
        /// <param name="caseExecutionId">Restrict to tasks that belong to a case execution with the given id. (optional)</param>
        /// <param name="activityInstanceIdIn">Only include tasks which belong to one of the passed and comma-separated activity  instance ids. (optional)</param>
        /// <param name="tenantIdIn">Only include tasks which belong to one of the passed and comma-separated  tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include tasks which belong to no tenant. Value may only be &#x60;true&#x60;,  as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="assignee">Restrict to tasks that the given user is assigned to. (optional)</param>
        /// <param name="assigneeExpression">Restrict to tasks that the user described by the given expression is assigned to.  See the  [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions)  for more information on available functions. (optional)</param>
        /// <param name="assigneeLike">Restrict to tasks that have an assignee that has the parameter  value as a substring. (optional)</param>
        /// <param name="assigneeLikeExpression">Restrict to tasks that have an assignee that has the parameter value described by the  given expression as a substring. See the  [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions)  for more information on available functions. (optional)</param>
        /// <param name="assigneeIn">Only include tasks which are assigned to one of the passed and  comma-separated user ids. (optional)</param>
        /// <param name="owner">Restrict to tasks that the given user owns. (optional)</param>
        /// <param name="ownerExpression">Restrict to tasks that the user described by the given expression owns. See the  [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions)  for more information on available functions. (optional)</param>
        /// <param name="candidateGroup">Only include tasks that are offered to the given group. (optional)</param>
        /// <param name="candidateGroupExpression">Only include tasks that are offered to the group described by the given expression.  See the  [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions)  for more information on available functions. (optional)</param>
        /// <param name="candidateUser">Only include tasks that are offered to the given user or to one of his groups. (optional)</param>
        /// <param name="candidateUserExpression">Only include tasks that are offered to the user described by the given expression.  See the  [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions)  for more information on available functions. (optional)</param>
        /// <param name="includeAssignedTasks">Also include tasks that are assigned to users in candidate queries. Default is to only  include tasks that are not assigned to any user if you query by candidate user or group(s). (optional, default to false)</param>
        /// <param name="involvedUser">Only include tasks that the given user is involved in. A user is involved in a task if  an identity link exists between task and user (e.g., the user is the assignee). (optional)</param>
        /// <param name="involvedUserExpression">Only include tasks that the user described by the given expression is involved in. A user is involved in a task if an identity link exists between task and user (e.g., the user is the assignee). See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. (optional)</param>
        /// <param name="assigned">If set to &#x60;true&#x60;, restricts the query to all tasks that are assigned. (optional, default to false)</param>
        /// <param name="unassigned">If set to &#x60;true&#x60;, restricts the query to all tasks that are unassigned. (optional, default to false)</param>
        /// <param name="taskDefinitionKey">Restrict to tasks that have the given key. (optional)</param>
        /// <param name="taskDefinitionKeyIn">Restrict to tasks that have one of the given keys. The keys need to be in a comma-separated list. (optional)</param>
        /// <param name="taskDefinitionKeyLike">Restrict to tasks that have a key that has the parameter value as a substring. (optional)</param>
        /// <param name="name">Restrict to tasks that have the given name. (optional)</param>
        /// <param name="nameNotEqual">Restrict to tasks that do not have the given name. (optional)</param>
        /// <param name="nameLike">Restrict to tasks that have a name with the given parameter value as substring. (optional)</param>
        /// <param name="nameNotLike">Restrict to tasks that do not have a name with the given parameter value as substring. (optional)</param>
        /// <param name="description">Restrict to tasks that have the given description. (optional)</param>
        /// <param name="descriptionLike">Restrict to tasks that have a description that has the parameter value as a substring. (optional)</param>
        /// <param name="priority">Restrict to tasks that have the given priority. (optional)</param>
        /// <param name="maxPriority">Restrict to tasks that have a lower or equal priority. (optional)</param>
        /// <param name="minPriority">Restrict to tasks that have a higher or equal priority. (optional)</param>
        /// <param name="dueDate">Restrict to tasks that are due on the given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.546+0200&#x60;. (optional)</param>
        /// <param name="dueDateExpression">Restrict to tasks that are due on the date described by the given expression. See the [User Guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)</param>
        /// <param name="dueAfter">Restrict to tasks that are due after the given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.435+0200&#x60;. (optional)</param>
        /// <param name="dueAfterExpression">Restrict to tasks that are due after the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)</param>
        /// <param name="dueBefore">Restrict to tasks that are due before the given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.243+0200&#x60;. (optional)</param>
        /// <param name="dueBeforeExpression">Restrict to tasks that are due before the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)</param>
        /// <param name="withoutDueDate">Only include tasks which have no due date. Value may only be &#x60;true&#x60;,  as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="followUpDate">Restrict to tasks that have a followUp date on the given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.342+0200&#x60;. (optional)</param>
        /// <param name="followUpDateExpression">Restrict to tasks that have a followUp date on the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)</param>
        /// <param name="followUpAfter">Restrict to tasks that have a followUp date after the given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.542+0200&#x60;. (optional)</param>
        /// <param name="followUpAfterExpression">Restrict to tasks that have a followUp date after the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)</param>
        /// <param name="followUpBefore">Restrict to tasks that have a followUp date before the given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.234+0200&#x60;. (optional)</param>
        /// <param name="followUpBeforeExpression">Restrict to tasks that have a followUp date before the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)</param>
        /// <param name="followUpBeforeOrNotExistent">Restrict to tasks that have no followUp date or a followUp date before the given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.432+0200&#x60;. The typical use case is to query all &#x60;active&#x60; tasks for a user for a given date. (optional)</param>
        /// <param name="followUpBeforeOrNotExistentExpression">Restrict to tasks that have no followUp date or a followUp date before the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)</param>
        /// <param name="createdOn">Restrict to tasks that were created on the given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.324+0200&#x60;. (optional)</param>
        /// <param name="createdOnExpression">Restrict to tasks that were created on the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)</param>
        /// <param name="createdAfter">Restrict to tasks that were created after the given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.342+0200&#x60;. (optional)</param>
        /// <param name="createdAfterExpression">Restrict to tasks that were created after the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)</param>
        /// <param name="createdBefore">Restrict to tasks that were created before the given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.332+0200&#x60;. (optional)</param>
        /// <param name="createdBeforeExpression">Restrict to tasks that were created before the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)</param>
        /// <param name="delegationState">Restrict to tasks that are in the given delegation state. Valid values are &#x60;PENDING&#x60; and &#x60;RESOLVED&#x60;. (optional)</param>
        /// <param name="candidateGroups">Restrict to tasks that are offered to any of the given candidate groups. Takes a comma-separated list of group names, so for example &#x60;developers,support,sales&#x60;. (optional)</param>
        /// <param name="candidateGroupsExpression">Restrict to tasks that are offered to any of the candidate groups described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to &#x60;java.util.List&#x60; of Strings. (optional)</param>
        /// <param name="withCandidateGroups">Only include tasks which have a candidate group. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="withoutCandidateGroups">Only include tasks which have no candidate group. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="withCandidateUsers">Only include tasks which have a candidate user. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="withoutCandidateUsers">Only include tasks which have no candidate users. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="active">Only include active tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="suspended">Only include suspended tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="taskVariables">Only include tasks that have variables with certain values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value.  **Note**: Values are always treated as String objects on server side.  Valid &#x60;operator&#x60; values are: &#x60;eq&#x60; - equal to; &#x60;neq&#x60; - not equal to; &#x60;gt&#x60; - greater than; &#x60;gteq&#x60; - greater than or equal to; &#x60;lt&#x60; - lower than; &#x60;lteq&#x60; - lower than or equal to; &#x60;like&#x60;. &#x60;key&#x60; and &#x60;value&#x60; may not contain underscore or comma characters. (optional)</param>
        /// <param name="processVariables">Only include tasks that belong to process instances that have variables with certain  values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value.  **Note**: Values are always treated as String objects on server side.  Valid &#x60;operator&#x60; values are: &#x60;eq&#x60; - equal to; &#x60;neq&#x60; - not equal to; &#x60;gt&#x60; - greater than; &#x60;gteq&#x60; - greater than or equal to; &#x60;lt&#x60; - lower than; &#x60;lteq&#x60; - lower than or equal to; &#x60;like&#x60;; &#x60;notLike&#x60;. &#x60;key&#x60; and &#x60;value&#x60; may not contain underscore or comma characters. (optional)</param>
        /// <param name="caseInstanceVariables">Only include tasks that belong to case instances that have variables with certain values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value.  **Note**: Values are always treated as String objects on server side.  Valid &#x60;operator&#x60; values are: &#x60;eq&#x60; - equal to; &#x60;neq&#x60; - not equal to; &#x60;gt&#x60; - greater than; &#x60;gteq&#x60; - greater than or equal to; &#x60;lt&#x60; - lower than; &#x60;lteq&#x60; - lower than or equal to; &#x60;like&#x60;. &#x60;key&#x60; and &#x60;value&#x60; may not contain underscore or comma characters. (optional)</param>
        /// <param name="variableNamesIgnoreCase">Match all variable names in this query case-insensitively. If set &#x60;variableName&#x60; and &#x60;variablename&#x60; are treated as equal. (optional, default to false)</param>
        /// <param name="variableValuesIgnoreCase">Match all variable values in this query case-insensitively. If set &#x60;variableValue&#x60; and &#x60;variablevalue&#x60; are treated as equal. (optional, default to false)</param>
        /// <param name="parentTaskId">Restrict query to all tasks that are sub tasks of the given task. Takes a task id. (optional)</param>
        /// <returns>CountResultDto</returns>
        public CountResultDto GetTasksCount(string taskId = default(string), string taskIdIn = default(string), string processInstanceId = default(string), string processInstanceIdIn = default(string), string processInstanceBusinessKey = default(string), string processInstanceBusinessKeyExpression = default(string), string processInstanceBusinessKeyIn = default(string), string processInstanceBusinessKeyLike = default(string), string processInstanceBusinessKeyLikeExpression = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string processDefinitionKeyIn = default(string), string processDefinitionName = default(string), string processDefinitionNameLike = default(string), string executionId = default(string), string caseInstanceId = default(string), string caseInstanceBusinessKey = default(string), string caseInstanceBusinessKeyLike = default(string), string caseDefinitionId = default(string), string caseDefinitionKey = default(string), string caseDefinitionName = default(string), string caseDefinitionNameLike = default(string), string caseExecutionId = default(string), string activityInstanceIdIn = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), string assignee = default(string), string assigneeExpression = default(string), string assigneeLike = default(string), string assigneeLikeExpression = default(string), string assigneeIn = default(string), string owner = default(string), string ownerExpression = default(string), string candidateGroup = default(string), string candidateGroupExpression = default(string), string candidateUser = default(string), string candidateUserExpression = default(string), bool? includeAssignedTasks = default(bool?), string involvedUser = default(string), string involvedUserExpression = default(string), bool? assigned = default(bool?), bool? unassigned = default(bool?), string taskDefinitionKey = default(string), string taskDefinitionKeyIn = default(string), string taskDefinitionKeyLike = default(string), string name = default(string), string nameNotEqual = default(string), string nameLike = default(string), string nameNotLike = default(string), string description = default(string), string descriptionLike = default(string), int? priority = default(int?), int? maxPriority = default(int?), int? minPriority = default(int?), string dueDate = default(string), string dueDateExpression = default(string), string dueAfter = default(string), string dueAfterExpression = default(string), string dueBefore = default(string), string dueBeforeExpression = default(string), bool? withoutDueDate = default(bool?), string followUpDate = default(string), string followUpDateExpression = default(string), string followUpAfter = default(string), string followUpAfterExpression = default(string), string followUpBefore = default(string), string followUpBeforeExpression = default(string), string followUpBeforeOrNotExistent = default(string), string followUpBeforeOrNotExistentExpression = default(string), string createdOn = default(string), string createdOnExpression = default(string), string createdAfter = default(string), string createdAfterExpression = default(string), string createdBefore = default(string), string createdBeforeExpression = default(string), string delegationState = default(string), string candidateGroups = default(string), string candidateGroupsExpression = default(string), bool? withCandidateGroups = default(bool?), bool? withoutCandidateGroups = default(bool?), bool? withCandidateUsers = default(bool?), bool? withoutCandidateUsers = default(bool?), bool? active = default(bool?), bool? suspended = default(bool?), string taskVariables = default(string), string processVariables = default(string), string caseInstanceVariables = default(string), bool? variableNamesIgnoreCase = default(bool?), bool? variableValuesIgnoreCase = default(bool?), string parentTaskId = default(string))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<CountResultDto> localVarResponse = GetTasksCountWithHttpInfo(taskId, taskIdIn, processInstanceId, processInstanceIdIn, processInstanceBusinessKey, processInstanceBusinessKeyExpression, processInstanceBusinessKeyIn, processInstanceBusinessKeyLike, processInstanceBusinessKeyLikeExpression, processDefinitionId, processDefinitionKey, processDefinitionKeyIn, processDefinitionName, processDefinitionNameLike, executionId, caseInstanceId, caseInstanceBusinessKey, caseInstanceBusinessKeyLike, caseDefinitionId, caseDefinitionKey, caseDefinitionName, caseDefinitionNameLike, caseExecutionId, activityInstanceIdIn, tenantIdIn, withoutTenantId, assignee, assigneeExpression, assigneeLike, assigneeLikeExpression, assigneeIn, owner, ownerExpression, candidateGroup, candidateGroupExpression, candidateUser, candidateUserExpression, includeAssignedTasks, involvedUser, involvedUserExpression, assigned, unassigned, taskDefinitionKey, taskDefinitionKeyIn, taskDefinitionKeyLike, name, nameNotEqual, nameLike, nameNotLike, description, descriptionLike, priority, maxPriority, minPriority, dueDate, dueDateExpression, dueAfter, dueAfterExpression, dueBefore, dueBeforeExpression, withoutDueDate, followUpDate, followUpDateExpression, followUpAfter, followUpAfterExpression, followUpBefore, followUpBeforeExpression, followUpBeforeOrNotExistent, followUpBeforeOrNotExistentExpression, createdOn, createdOnExpression, createdAfter, createdAfterExpression, createdBefore, createdBeforeExpression, delegationState, candidateGroups, candidateGroupsExpression, withCandidateGroups, withoutCandidateGroups, withCandidateUsers, withoutCandidateUsers, active, suspended, taskVariables, processVariables, caseInstanceVariables, variableNamesIgnoreCase, variableValuesIgnoreCase, parentTaskId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get List Count Retrieves the number of tasks that fulfill a provided filter. Corresponds to the size of the result set when using the [Get Tasks](https://docs.camunda.org/manual/7.15/reference/rest/task/) method.  **Security Consideration:** There are several query parameters (such as assigneeExpression) for specifying an EL expression. These are disabled by default to prevent remote code execution. See the section on [security considerations](https://docs.camunda.org/manual/7.15/user-guide/process-engine/securing-custom-code/) for custom code in the user guide for details.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Restrict to task with the given id. (optional)</param>
        /// <param name="taskIdIn">Restrict to tasks with any of the given ids. (optional)</param>
        /// <param name="processInstanceId">Restrict to tasks that belong to process instances with the given id. (optional)</param>
        /// <param name="processInstanceIdIn">Restrict to tasks that belong to process instances with the given ids. (optional)</param>
        /// <param name="processInstanceBusinessKey">Restrict to tasks that belong to process instances with the given business key. (optional)</param>
        /// <param name="processInstanceBusinessKeyExpression">Restrict to tasks that belong to process instances with the given business key which  is described by an expression. See the  [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. (optional)</param>
        /// <param name="processInstanceBusinessKeyIn">Restrict to tasks that belong to process instances with one of the give business keys.  The keys need to be in a comma-separated list. (optional)</param>
        /// <param name="processInstanceBusinessKeyLike">Restrict to tasks that have a process instance business key that has the parameter  value as a substring. (optional)</param>
        /// <param name="processInstanceBusinessKeyLikeExpression">Restrict to tasks that have a process instance business key that has the parameter  value as a substring and is described by an expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions)  for more information on available functions. (optional)</param>
        /// <param name="processDefinitionId">Restrict to tasks that belong to a process definition with the given id. (optional)</param>
        /// <param name="processDefinitionKey">Restrict to tasks that belong to a process definition with the given key. (optional)</param>
        /// <param name="processDefinitionKeyIn">Restrict to tasks that belong to a process definition with one of the given keys. The  keys need to be in a comma-separated list. (optional)</param>
        /// <param name="processDefinitionName">Restrict to tasks that belong to a process definition with the given name. (optional)</param>
        /// <param name="processDefinitionNameLike">Restrict to tasks that have a process definition name that has the parameter value as  a substring. (optional)</param>
        /// <param name="executionId">Restrict to tasks that belong to an execution with the given id. (optional)</param>
        /// <param name="caseInstanceId">Restrict to tasks that belong to case instances with the given id. (optional)</param>
        /// <param name="caseInstanceBusinessKey">Restrict to tasks that belong to case instances with the given business key. (optional)</param>
        /// <param name="caseInstanceBusinessKeyLike">Restrict to tasks that have a case instance business key that has the parameter value  as a substring. (optional)</param>
        /// <param name="caseDefinitionId">Restrict to tasks that belong to a case definition with the given id. (optional)</param>
        /// <param name="caseDefinitionKey">Restrict to tasks that belong to a case definition with the given key. (optional)</param>
        /// <param name="caseDefinitionName">Restrict to tasks that belong to a case definition with the given name. (optional)</param>
        /// <param name="caseDefinitionNameLike">Restrict to tasks that have a case definition name that has the parameter value as a  substring. (optional)</param>
        /// <param name="caseExecutionId">Restrict to tasks that belong to a case execution with the given id. (optional)</param>
        /// <param name="activityInstanceIdIn">Only include tasks which belong to one of the passed and comma-separated activity  instance ids. (optional)</param>
        /// <param name="tenantIdIn">Only include tasks which belong to one of the passed and comma-separated  tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include tasks which belong to no tenant. Value may only be &#x60;true&#x60;,  as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="assignee">Restrict to tasks that the given user is assigned to. (optional)</param>
        /// <param name="assigneeExpression">Restrict to tasks that the user described by the given expression is assigned to.  See the  [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions)  for more information on available functions. (optional)</param>
        /// <param name="assigneeLike">Restrict to tasks that have an assignee that has the parameter  value as a substring. (optional)</param>
        /// <param name="assigneeLikeExpression">Restrict to tasks that have an assignee that has the parameter value described by the  given expression as a substring. See the  [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions)  for more information on available functions. (optional)</param>
        /// <param name="assigneeIn">Only include tasks which are assigned to one of the passed and  comma-separated user ids. (optional)</param>
        /// <param name="owner">Restrict to tasks that the given user owns. (optional)</param>
        /// <param name="ownerExpression">Restrict to tasks that the user described by the given expression owns. See the  [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions)  for more information on available functions. (optional)</param>
        /// <param name="candidateGroup">Only include tasks that are offered to the given group. (optional)</param>
        /// <param name="candidateGroupExpression">Only include tasks that are offered to the group described by the given expression.  See the  [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions)  for more information on available functions. (optional)</param>
        /// <param name="candidateUser">Only include tasks that are offered to the given user or to one of his groups. (optional)</param>
        /// <param name="candidateUserExpression">Only include tasks that are offered to the user described by the given expression.  See the  [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions)  for more information on available functions. (optional)</param>
        /// <param name="includeAssignedTasks">Also include tasks that are assigned to users in candidate queries. Default is to only  include tasks that are not assigned to any user if you query by candidate user or group(s). (optional, default to false)</param>
        /// <param name="involvedUser">Only include tasks that the given user is involved in. A user is involved in a task if  an identity link exists between task and user (e.g., the user is the assignee). (optional)</param>
        /// <param name="involvedUserExpression">Only include tasks that the user described by the given expression is involved in. A user is involved in a task if an identity link exists between task and user (e.g., the user is the assignee). See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. (optional)</param>
        /// <param name="assigned">If set to &#x60;true&#x60;, restricts the query to all tasks that are assigned. (optional, default to false)</param>
        /// <param name="unassigned">If set to &#x60;true&#x60;, restricts the query to all tasks that are unassigned. (optional, default to false)</param>
        /// <param name="taskDefinitionKey">Restrict to tasks that have the given key. (optional)</param>
        /// <param name="taskDefinitionKeyIn">Restrict to tasks that have one of the given keys. The keys need to be in a comma-separated list. (optional)</param>
        /// <param name="taskDefinitionKeyLike">Restrict to tasks that have a key that has the parameter value as a substring. (optional)</param>
        /// <param name="name">Restrict to tasks that have the given name. (optional)</param>
        /// <param name="nameNotEqual">Restrict to tasks that do not have the given name. (optional)</param>
        /// <param name="nameLike">Restrict to tasks that have a name with the given parameter value as substring. (optional)</param>
        /// <param name="nameNotLike">Restrict to tasks that do not have a name with the given parameter value as substring. (optional)</param>
        /// <param name="description">Restrict to tasks that have the given description. (optional)</param>
        /// <param name="descriptionLike">Restrict to tasks that have a description that has the parameter value as a substring. (optional)</param>
        /// <param name="priority">Restrict to tasks that have the given priority. (optional)</param>
        /// <param name="maxPriority">Restrict to tasks that have a lower or equal priority. (optional)</param>
        /// <param name="minPriority">Restrict to tasks that have a higher or equal priority. (optional)</param>
        /// <param name="dueDate">Restrict to tasks that are due on the given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.546+0200&#x60;. (optional)</param>
        /// <param name="dueDateExpression">Restrict to tasks that are due on the date described by the given expression. See the [User Guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)</param>
        /// <param name="dueAfter">Restrict to tasks that are due after the given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.435+0200&#x60;. (optional)</param>
        /// <param name="dueAfterExpression">Restrict to tasks that are due after the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)</param>
        /// <param name="dueBefore">Restrict to tasks that are due before the given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.243+0200&#x60;. (optional)</param>
        /// <param name="dueBeforeExpression">Restrict to tasks that are due before the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)</param>
        /// <param name="withoutDueDate">Only include tasks which have no due date. Value may only be &#x60;true&#x60;,  as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="followUpDate">Restrict to tasks that have a followUp date on the given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.342+0200&#x60;. (optional)</param>
        /// <param name="followUpDateExpression">Restrict to tasks that have a followUp date on the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)</param>
        /// <param name="followUpAfter">Restrict to tasks that have a followUp date after the given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.542+0200&#x60;. (optional)</param>
        /// <param name="followUpAfterExpression">Restrict to tasks that have a followUp date after the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)</param>
        /// <param name="followUpBefore">Restrict to tasks that have a followUp date before the given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.234+0200&#x60;. (optional)</param>
        /// <param name="followUpBeforeExpression">Restrict to tasks that have a followUp date before the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)</param>
        /// <param name="followUpBeforeOrNotExistent">Restrict to tasks that have no followUp date or a followUp date before the given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.432+0200&#x60;. The typical use case is to query all &#x60;active&#x60; tasks for a user for a given date. (optional)</param>
        /// <param name="followUpBeforeOrNotExistentExpression">Restrict to tasks that have no followUp date or a followUp date before the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)</param>
        /// <param name="createdOn">Restrict to tasks that were created on the given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.324+0200&#x60;. (optional)</param>
        /// <param name="createdOnExpression">Restrict to tasks that were created on the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)</param>
        /// <param name="createdAfter">Restrict to tasks that were created after the given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.342+0200&#x60;. (optional)</param>
        /// <param name="createdAfterExpression">Restrict to tasks that were created after the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)</param>
        /// <param name="createdBefore">Restrict to tasks that were created before the given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.332+0200&#x60;. (optional)</param>
        /// <param name="createdBeforeExpression">Restrict to tasks that were created before the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)</param>
        /// <param name="delegationState">Restrict to tasks that are in the given delegation state. Valid values are &#x60;PENDING&#x60; and &#x60;RESOLVED&#x60;. (optional)</param>
        /// <param name="candidateGroups">Restrict to tasks that are offered to any of the given candidate groups. Takes a comma-separated list of group names, so for example &#x60;developers,support,sales&#x60;. (optional)</param>
        /// <param name="candidateGroupsExpression">Restrict to tasks that are offered to any of the candidate groups described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to &#x60;java.util.List&#x60; of Strings. (optional)</param>
        /// <param name="withCandidateGroups">Only include tasks which have a candidate group. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="withoutCandidateGroups">Only include tasks which have no candidate group. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="withCandidateUsers">Only include tasks which have a candidate user. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="withoutCandidateUsers">Only include tasks which have no candidate users. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="active">Only include active tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="suspended">Only include suspended tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="taskVariables">Only include tasks that have variables with certain values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value.  **Note**: Values are always treated as String objects on server side.  Valid &#x60;operator&#x60; values are: &#x60;eq&#x60; - equal to; &#x60;neq&#x60; - not equal to; &#x60;gt&#x60; - greater than; &#x60;gteq&#x60; - greater than or equal to; &#x60;lt&#x60; - lower than; &#x60;lteq&#x60; - lower than or equal to; &#x60;like&#x60;. &#x60;key&#x60; and &#x60;value&#x60; may not contain underscore or comma characters. (optional)</param>
        /// <param name="processVariables">Only include tasks that belong to process instances that have variables with certain  values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value.  **Note**: Values are always treated as String objects on server side.  Valid &#x60;operator&#x60; values are: &#x60;eq&#x60; - equal to; &#x60;neq&#x60; - not equal to; &#x60;gt&#x60; - greater than; &#x60;gteq&#x60; - greater than or equal to; &#x60;lt&#x60; - lower than; &#x60;lteq&#x60; - lower than or equal to; &#x60;like&#x60;; &#x60;notLike&#x60;. &#x60;key&#x60; and &#x60;value&#x60; may not contain underscore or comma characters. (optional)</param>
        /// <param name="caseInstanceVariables">Only include tasks that belong to case instances that have variables with certain values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value.  **Note**: Values are always treated as String objects on server side.  Valid &#x60;operator&#x60; values are: &#x60;eq&#x60; - equal to; &#x60;neq&#x60; - not equal to; &#x60;gt&#x60; - greater than; &#x60;gteq&#x60; - greater than or equal to; &#x60;lt&#x60; - lower than; &#x60;lteq&#x60; - lower than or equal to; &#x60;like&#x60;. &#x60;key&#x60; and &#x60;value&#x60; may not contain underscore or comma characters. (optional)</param>
        /// <param name="variableNamesIgnoreCase">Match all variable names in this query case-insensitively. If set &#x60;variableName&#x60; and &#x60;variablename&#x60; are treated as equal. (optional, default to false)</param>
        /// <param name="variableValuesIgnoreCase">Match all variable values in this query case-insensitively. If set &#x60;variableValue&#x60; and &#x60;variablevalue&#x60; are treated as equal. (optional, default to false)</param>
        /// <param name="parentTaskId">Restrict query to all tasks that are sub tasks of the given task. Takes a task id. (optional)</param>
        /// <returns>ApiResponse of CountResultDto</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<CountResultDto> GetTasksCountWithHttpInfo(string taskId = default(string), string taskIdIn = default(string), string processInstanceId = default(string), string processInstanceIdIn = default(string), string processInstanceBusinessKey = default(string), string processInstanceBusinessKeyExpression = default(string), string processInstanceBusinessKeyIn = default(string), string processInstanceBusinessKeyLike = default(string), string processInstanceBusinessKeyLikeExpression = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string processDefinitionKeyIn = default(string), string processDefinitionName = default(string), string processDefinitionNameLike = default(string), string executionId = default(string), string caseInstanceId = default(string), string caseInstanceBusinessKey = default(string), string caseInstanceBusinessKeyLike = default(string), string caseDefinitionId = default(string), string caseDefinitionKey = default(string), string caseDefinitionName = default(string), string caseDefinitionNameLike = default(string), string caseExecutionId = default(string), string activityInstanceIdIn = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), string assignee = default(string), string assigneeExpression = default(string), string assigneeLike = default(string), string assigneeLikeExpression = default(string), string assigneeIn = default(string), string owner = default(string), string ownerExpression = default(string), string candidateGroup = default(string), string candidateGroupExpression = default(string), string candidateUser = default(string), string candidateUserExpression = default(string), bool? includeAssignedTasks = default(bool?), string involvedUser = default(string), string involvedUserExpression = default(string), bool? assigned = default(bool?), bool? unassigned = default(bool?), string taskDefinitionKey = default(string), string taskDefinitionKeyIn = default(string), string taskDefinitionKeyLike = default(string), string name = default(string), string nameNotEqual = default(string), string nameLike = default(string), string nameNotLike = default(string), string description = default(string), string descriptionLike = default(string), int? priority = default(int?), int? maxPriority = default(int?), int? minPriority = default(int?), string dueDate = default(string), string dueDateExpression = default(string), string dueAfter = default(string), string dueAfterExpression = default(string), string dueBefore = default(string), string dueBeforeExpression = default(string), bool? withoutDueDate = default(bool?), string followUpDate = default(string), string followUpDateExpression = default(string), string followUpAfter = default(string), string followUpAfterExpression = default(string), string followUpBefore = default(string), string followUpBeforeExpression = default(string), string followUpBeforeOrNotExistent = default(string), string followUpBeforeOrNotExistentExpression = default(string), string createdOn = default(string), string createdOnExpression = default(string), string createdAfter = default(string), string createdAfterExpression = default(string), string createdBefore = default(string), string createdBeforeExpression = default(string), string delegationState = default(string), string candidateGroups = default(string), string candidateGroupsExpression = default(string), bool? withCandidateGroups = default(bool?), bool? withoutCandidateGroups = default(bool?), bool? withCandidateUsers = default(bool?), bool? withoutCandidateUsers = default(bool?), bool? active = default(bool?), bool? suspended = default(bool?), string taskVariables = default(string), string processVariables = default(string), string caseInstanceVariables = default(string), bool? variableNamesIgnoreCase = default(bool?), bool? variableValuesIgnoreCase = default(bool?), string parentTaskId = default(string))
        {
            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (taskId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "taskId", taskId));
            }
            if (taskIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "taskIdIn", taskIdIn));
            }
            if (processInstanceId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processInstanceId", processInstanceId));
            }
            if (processInstanceIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processInstanceIdIn", processInstanceIdIn));
            }
            if (processInstanceBusinessKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processInstanceBusinessKey", processInstanceBusinessKey));
            }
            if (processInstanceBusinessKeyExpression != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processInstanceBusinessKeyExpression", processInstanceBusinessKeyExpression));
            }
            if (processInstanceBusinessKeyIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processInstanceBusinessKeyIn", processInstanceBusinessKeyIn));
            }
            if (processInstanceBusinessKeyLike != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processInstanceBusinessKeyLike", processInstanceBusinessKeyLike));
            }
            if (processInstanceBusinessKeyLikeExpression != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processInstanceBusinessKeyLikeExpression", processInstanceBusinessKeyLikeExpression));
            }
            if (processDefinitionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processDefinitionId", processDefinitionId));
            }
            if (processDefinitionKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processDefinitionKey", processDefinitionKey));
            }
            if (processDefinitionKeyIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processDefinitionKeyIn", processDefinitionKeyIn));
            }
            if (processDefinitionName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processDefinitionName", processDefinitionName));
            }
            if (processDefinitionNameLike != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processDefinitionNameLike", processDefinitionNameLike));
            }
            if (executionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "executionId", executionId));
            }
            if (caseInstanceId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "caseInstanceId", caseInstanceId));
            }
            if (caseInstanceBusinessKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "caseInstanceBusinessKey", caseInstanceBusinessKey));
            }
            if (caseInstanceBusinessKeyLike != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "caseInstanceBusinessKeyLike", caseInstanceBusinessKeyLike));
            }
            if (caseDefinitionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "caseDefinitionId", caseDefinitionId));
            }
            if (caseDefinitionKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "caseDefinitionKey", caseDefinitionKey));
            }
            if (caseDefinitionName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "caseDefinitionName", caseDefinitionName));
            }
            if (caseDefinitionNameLike != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "caseDefinitionNameLike", caseDefinitionNameLike));
            }
            if (caseExecutionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "caseExecutionId", caseExecutionId));
            }
            if (activityInstanceIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "activityInstanceIdIn", activityInstanceIdIn));
            }
            if (tenantIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "tenantIdIn", tenantIdIn));
            }
            if (withoutTenantId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "withoutTenantId", withoutTenantId));
            }
            if (assignee != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "assignee", assignee));
            }
            if (assigneeExpression != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "assigneeExpression", assigneeExpression));
            }
            if (assigneeLike != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "assigneeLike", assigneeLike));
            }
            if (assigneeLikeExpression != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "assigneeLikeExpression", assigneeLikeExpression));
            }
            if (assigneeIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "assigneeIn", assigneeIn));
            }
            if (owner != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "owner", owner));
            }
            if (ownerExpression != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "ownerExpression", ownerExpression));
            }
            if (candidateGroup != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "candidateGroup", candidateGroup));
            }
            if (candidateGroupExpression != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "candidateGroupExpression", candidateGroupExpression));
            }
            if (candidateUser != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "candidateUser", candidateUser));
            }
            if (candidateUserExpression != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "candidateUserExpression", candidateUserExpression));
            }
            if (includeAssignedTasks != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "includeAssignedTasks", includeAssignedTasks));
            }
            if (involvedUser != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "involvedUser", involvedUser));
            }
            if (involvedUserExpression != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "involvedUserExpression", involvedUserExpression));
            }
            if (assigned != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "assigned", assigned));
            }
            if (unassigned != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "unassigned", unassigned));
            }
            if (taskDefinitionKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "taskDefinitionKey", taskDefinitionKey));
            }
            if (taskDefinitionKeyIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "taskDefinitionKeyIn", taskDefinitionKeyIn));
            }
            if (taskDefinitionKeyLike != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "taskDefinitionKeyLike", taskDefinitionKeyLike));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (nameNotEqual != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "nameNotEqual", nameNotEqual));
            }
            if (nameLike != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "nameLike", nameLike));
            }
            if (nameNotLike != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "nameNotLike", nameNotLike));
            }
            if (description != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "description", description));
            }
            if (descriptionLike != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "descriptionLike", descriptionLike));
            }
            if (priority != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "priority", priority));
            }
            if (maxPriority != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "maxPriority", maxPriority));
            }
            if (minPriority != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "minPriority", minPriority));
            }
            if (dueDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "dueDate", dueDate));
            }
            if (dueDateExpression != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "dueDateExpression", dueDateExpression));
            }
            if (dueAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "dueAfter", dueAfter));
            }
            if (dueAfterExpression != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "dueAfterExpression", dueAfterExpression));
            }
            if (dueBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "dueBefore", dueBefore));
            }
            if (dueBeforeExpression != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "dueBeforeExpression", dueBeforeExpression));
            }
            if (withoutDueDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "withoutDueDate", withoutDueDate));
            }
            if (followUpDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "followUpDate", followUpDate));
            }
            if (followUpDateExpression != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "followUpDateExpression", followUpDateExpression));
            }
            if (followUpAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "followUpAfter", followUpAfter));
            }
            if (followUpAfterExpression != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "followUpAfterExpression", followUpAfterExpression));
            }
            if (followUpBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "followUpBefore", followUpBefore));
            }
            if (followUpBeforeExpression != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "followUpBeforeExpression", followUpBeforeExpression));
            }
            if (followUpBeforeOrNotExistent != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "followUpBeforeOrNotExistent", followUpBeforeOrNotExistent));
            }
            if (followUpBeforeOrNotExistentExpression != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "followUpBeforeOrNotExistentExpression", followUpBeforeOrNotExistentExpression));
            }
            if (createdOn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "createdOn", createdOn));
            }
            if (createdOnExpression != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "createdOnExpression", createdOnExpression));
            }
            if (createdAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "createdAfter", createdAfter));
            }
            if (createdAfterExpression != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "createdAfterExpression", createdAfterExpression));
            }
            if (createdBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "createdBefore", createdBefore));
            }
            if (createdBeforeExpression != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "createdBeforeExpression", createdBeforeExpression));
            }
            if (delegationState != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "delegationState", delegationState));
            }
            if (candidateGroups != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "candidateGroups", candidateGroups));
            }
            if (candidateGroupsExpression != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "candidateGroupsExpression", candidateGroupsExpression));
            }
            if (withCandidateGroups != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "withCandidateGroups", withCandidateGroups));
            }
            if (withoutCandidateGroups != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "withoutCandidateGroups", withoutCandidateGroups));
            }
            if (withCandidateUsers != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "withCandidateUsers", withCandidateUsers));
            }
            if (withoutCandidateUsers != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "withoutCandidateUsers", withoutCandidateUsers));
            }
            if (active != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "active", active));
            }
            if (suspended != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "suspended", suspended));
            }
            if (taskVariables != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "taskVariables", taskVariables));
            }
            if (processVariables != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processVariables", processVariables));
            }
            if (caseInstanceVariables != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "caseInstanceVariables", caseInstanceVariables));
            }
            if (variableNamesIgnoreCase != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "variableNamesIgnoreCase", variableNamesIgnoreCase));
            }
            if (variableValuesIgnoreCase != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "variableValuesIgnoreCase", variableValuesIgnoreCase));
            }
            if (parentTaskId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "parentTaskId", parentTaskId));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<CountResultDto>("/task/count", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTasksCount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get List Count Retrieves the number of tasks that fulfill a provided filter. Corresponds to the size of the result set when using the [Get Tasks](https://docs.camunda.org/manual/7.15/reference/rest/task/) method.  **Security Consideration:** There are several query parameters (such as assigneeExpression) for specifying an EL expression. These are disabled by default to prevent remote code execution. See the section on [security considerations](https://docs.camunda.org/manual/7.15/user-guide/process-engine/securing-custom-code/) for custom code in the user guide for details.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Restrict to task with the given id. (optional)</param>
        /// <param name="taskIdIn">Restrict to tasks with any of the given ids. (optional)</param>
        /// <param name="processInstanceId">Restrict to tasks that belong to process instances with the given id. (optional)</param>
        /// <param name="processInstanceIdIn">Restrict to tasks that belong to process instances with the given ids. (optional)</param>
        /// <param name="processInstanceBusinessKey">Restrict to tasks that belong to process instances with the given business key. (optional)</param>
        /// <param name="processInstanceBusinessKeyExpression">Restrict to tasks that belong to process instances with the given business key which  is described by an expression. See the  [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. (optional)</param>
        /// <param name="processInstanceBusinessKeyIn">Restrict to tasks that belong to process instances with one of the give business keys.  The keys need to be in a comma-separated list. (optional)</param>
        /// <param name="processInstanceBusinessKeyLike">Restrict to tasks that have a process instance business key that has the parameter  value as a substring. (optional)</param>
        /// <param name="processInstanceBusinessKeyLikeExpression">Restrict to tasks that have a process instance business key that has the parameter  value as a substring and is described by an expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions)  for more information on available functions. (optional)</param>
        /// <param name="processDefinitionId">Restrict to tasks that belong to a process definition with the given id. (optional)</param>
        /// <param name="processDefinitionKey">Restrict to tasks that belong to a process definition with the given key. (optional)</param>
        /// <param name="processDefinitionKeyIn">Restrict to tasks that belong to a process definition with one of the given keys. The  keys need to be in a comma-separated list. (optional)</param>
        /// <param name="processDefinitionName">Restrict to tasks that belong to a process definition with the given name. (optional)</param>
        /// <param name="processDefinitionNameLike">Restrict to tasks that have a process definition name that has the parameter value as  a substring. (optional)</param>
        /// <param name="executionId">Restrict to tasks that belong to an execution with the given id. (optional)</param>
        /// <param name="caseInstanceId">Restrict to tasks that belong to case instances with the given id. (optional)</param>
        /// <param name="caseInstanceBusinessKey">Restrict to tasks that belong to case instances with the given business key. (optional)</param>
        /// <param name="caseInstanceBusinessKeyLike">Restrict to tasks that have a case instance business key that has the parameter value  as a substring. (optional)</param>
        /// <param name="caseDefinitionId">Restrict to tasks that belong to a case definition with the given id. (optional)</param>
        /// <param name="caseDefinitionKey">Restrict to tasks that belong to a case definition with the given key. (optional)</param>
        /// <param name="caseDefinitionName">Restrict to tasks that belong to a case definition with the given name. (optional)</param>
        /// <param name="caseDefinitionNameLike">Restrict to tasks that have a case definition name that has the parameter value as a  substring. (optional)</param>
        /// <param name="caseExecutionId">Restrict to tasks that belong to a case execution with the given id. (optional)</param>
        /// <param name="activityInstanceIdIn">Only include tasks which belong to one of the passed and comma-separated activity  instance ids. (optional)</param>
        /// <param name="tenantIdIn">Only include tasks which belong to one of the passed and comma-separated  tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include tasks which belong to no tenant. Value may only be &#x60;true&#x60;,  as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="assignee">Restrict to tasks that the given user is assigned to. (optional)</param>
        /// <param name="assigneeExpression">Restrict to tasks that the user described by the given expression is assigned to.  See the  [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions)  for more information on available functions. (optional)</param>
        /// <param name="assigneeLike">Restrict to tasks that have an assignee that has the parameter  value as a substring. (optional)</param>
        /// <param name="assigneeLikeExpression">Restrict to tasks that have an assignee that has the parameter value described by the  given expression as a substring. See the  [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions)  for more information on available functions. (optional)</param>
        /// <param name="assigneeIn">Only include tasks which are assigned to one of the passed and  comma-separated user ids. (optional)</param>
        /// <param name="owner">Restrict to tasks that the given user owns. (optional)</param>
        /// <param name="ownerExpression">Restrict to tasks that the user described by the given expression owns. See the  [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions)  for more information on available functions. (optional)</param>
        /// <param name="candidateGroup">Only include tasks that are offered to the given group. (optional)</param>
        /// <param name="candidateGroupExpression">Only include tasks that are offered to the group described by the given expression.  See the  [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions)  for more information on available functions. (optional)</param>
        /// <param name="candidateUser">Only include tasks that are offered to the given user or to one of his groups. (optional)</param>
        /// <param name="candidateUserExpression">Only include tasks that are offered to the user described by the given expression.  See the  [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions)  for more information on available functions. (optional)</param>
        /// <param name="includeAssignedTasks">Also include tasks that are assigned to users in candidate queries. Default is to only  include tasks that are not assigned to any user if you query by candidate user or group(s). (optional, default to false)</param>
        /// <param name="involvedUser">Only include tasks that the given user is involved in. A user is involved in a task if  an identity link exists between task and user (e.g., the user is the assignee). (optional)</param>
        /// <param name="involvedUserExpression">Only include tasks that the user described by the given expression is involved in. A user is involved in a task if an identity link exists between task and user (e.g., the user is the assignee). See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. (optional)</param>
        /// <param name="assigned">If set to &#x60;true&#x60;, restricts the query to all tasks that are assigned. (optional, default to false)</param>
        /// <param name="unassigned">If set to &#x60;true&#x60;, restricts the query to all tasks that are unassigned. (optional, default to false)</param>
        /// <param name="taskDefinitionKey">Restrict to tasks that have the given key. (optional)</param>
        /// <param name="taskDefinitionKeyIn">Restrict to tasks that have one of the given keys. The keys need to be in a comma-separated list. (optional)</param>
        /// <param name="taskDefinitionKeyLike">Restrict to tasks that have a key that has the parameter value as a substring. (optional)</param>
        /// <param name="name">Restrict to tasks that have the given name. (optional)</param>
        /// <param name="nameNotEqual">Restrict to tasks that do not have the given name. (optional)</param>
        /// <param name="nameLike">Restrict to tasks that have a name with the given parameter value as substring. (optional)</param>
        /// <param name="nameNotLike">Restrict to tasks that do not have a name with the given parameter value as substring. (optional)</param>
        /// <param name="description">Restrict to tasks that have the given description. (optional)</param>
        /// <param name="descriptionLike">Restrict to tasks that have a description that has the parameter value as a substring. (optional)</param>
        /// <param name="priority">Restrict to tasks that have the given priority. (optional)</param>
        /// <param name="maxPriority">Restrict to tasks that have a lower or equal priority. (optional)</param>
        /// <param name="minPriority">Restrict to tasks that have a higher or equal priority. (optional)</param>
        /// <param name="dueDate">Restrict to tasks that are due on the given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.546+0200&#x60;. (optional)</param>
        /// <param name="dueDateExpression">Restrict to tasks that are due on the date described by the given expression. See the [User Guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)</param>
        /// <param name="dueAfter">Restrict to tasks that are due after the given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.435+0200&#x60;. (optional)</param>
        /// <param name="dueAfterExpression">Restrict to tasks that are due after the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)</param>
        /// <param name="dueBefore">Restrict to tasks that are due before the given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.243+0200&#x60;. (optional)</param>
        /// <param name="dueBeforeExpression">Restrict to tasks that are due before the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)</param>
        /// <param name="withoutDueDate">Only include tasks which have no due date. Value may only be &#x60;true&#x60;,  as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="followUpDate">Restrict to tasks that have a followUp date on the given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.342+0200&#x60;. (optional)</param>
        /// <param name="followUpDateExpression">Restrict to tasks that have a followUp date on the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)</param>
        /// <param name="followUpAfter">Restrict to tasks that have a followUp date after the given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.542+0200&#x60;. (optional)</param>
        /// <param name="followUpAfterExpression">Restrict to tasks that have a followUp date after the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)</param>
        /// <param name="followUpBefore">Restrict to tasks that have a followUp date before the given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.234+0200&#x60;. (optional)</param>
        /// <param name="followUpBeforeExpression">Restrict to tasks that have a followUp date before the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)</param>
        /// <param name="followUpBeforeOrNotExistent">Restrict to tasks that have no followUp date or a followUp date before the given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.432+0200&#x60;. The typical use case is to query all &#x60;active&#x60; tasks for a user for a given date. (optional)</param>
        /// <param name="followUpBeforeOrNotExistentExpression">Restrict to tasks that have no followUp date or a followUp date before the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)</param>
        /// <param name="createdOn">Restrict to tasks that were created on the given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.324+0200&#x60;. (optional)</param>
        /// <param name="createdOnExpression">Restrict to tasks that were created on the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)</param>
        /// <param name="createdAfter">Restrict to tasks that were created after the given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.342+0200&#x60;. (optional)</param>
        /// <param name="createdAfterExpression">Restrict to tasks that were created after the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)</param>
        /// <param name="createdBefore">Restrict to tasks that were created before the given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.332+0200&#x60;. (optional)</param>
        /// <param name="createdBeforeExpression">Restrict to tasks that were created before the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)</param>
        /// <param name="delegationState">Restrict to tasks that are in the given delegation state. Valid values are &#x60;PENDING&#x60; and &#x60;RESOLVED&#x60;. (optional)</param>
        /// <param name="candidateGroups">Restrict to tasks that are offered to any of the given candidate groups. Takes a comma-separated list of group names, so for example &#x60;developers,support,sales&#x60;. (optional)</param>
        /// <param name="candidateGroupsExpression">Restrict to tasks that are offered to any of the candidate groups described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to &#x60;java.util.List&#x60; of Strings. (optional)</param>
        /// <param name="withCandidateGroups">Only include tasks which have a candidate group. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="withoutCandidateGroups">Only include tasks which have no candidate group. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="withCandidateUsers">Only include tasks which have a candidate user. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="withoutCandidateUsers">Only include tasks which have no candidate users. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="active">Only include active tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="suspended">Only include suspended tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="taskVariables">Only include tasks that have variables with certain values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value.  **Note**: Values are always treated as String objects on server side.  Valid &#x60;operator&#x60; values are: &#x60;eq&#x60; - equal to; &#x60;neq&#x60; - not equal to; &#x60;gt&#x60; - greater than; &#x60;gteq&#x60; - greater than or equal to; &#x60;lt&#x60; - lower than; &#x60;lteq&#x60; - lower than or equal to; &#x60;like&#x60;. &#x60;key&#x60; and &#x60;value&#x60; may not contain underscore or comma characters. (optional)</param>
        /// <param name="processVariables">Only include tasks that belong to process instances that have variables with certain  values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value.  **Note**: Values are always treated as String objects on server side.  Valid &#x60;operator&#x60; values are: &#x60;eq&#x60; - equal to; &#x60;neq&#x60; - not equal to; &#x60;gt&#x60; - greater than; &#x60;gteq&#x60; - greater than or equal to; &#x60;lt&#x60; - lower than; &#x60;lteq&#x60; - lower than or equal to; &#x60;like&#x60;; &#x60;notLike&#x60;. &#x60;key&#x60; and &#x60;value&#x60; may not contain underscore or comma characters. (optional)</param>
        /// <param name="caseInstanceVariables">Only include tasks that belong to case instances that have variables with certain values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value.  **Note**: Values are always treated as String objects on server side.  Valid &#x60;operator&#x60; values are: &#x60;eq&#x60; - equal to; &#x60;neq&#x60; - not equal to; &#x60;gt&#x60; - greater than; &#x60;gteq&#x60; - greater than or equal to; &#x60;lt&#x60; - lower than; &#x60;lteq&#x60; - lower than or equal to; &#x60;like&#x60;. &#x60;key&#x60; and &#x60;value&#x60; may not contain underscore or comma characters. (optional)</param>
        /// <param name="variableNamesIgnoreCase">Match all variable names in this query case-insensitively. If set &#x60;variableName&#x60; and &#x60;variablename&#x60; are treated as equal. (optional, default to false)</param>
        /// <param name="variableValuesIgnoreCase">Match all variable values in this query case-insensitively. If set &#x60;variableValue&#x60; and &#x60;variablevalue&#x60; are treated as equal. (optional, default to false)</param>
        /// <param name="parentTaskId">Restrict query to all tasks that are sub tasks of the given task. Takes a task id. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CountResultDto</returns>
        public async System.Threading.Tasks.Task<CountResultDto> GetTasksCountAsync(string taskId = default(string), string taskIdIn = default(string), string processInstanceId = default(string), string processInstanceIdIn = default(string), string processInstanceBusinessKey = default(string), string processInstanceBusinessKeyExpression = default(string), string processInstanceBusinessKeyIn = default(string), string processInstanceBusinessKeyLike = default(string), string processInstanceBusinessKeyLikeExpression = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string processDefinitionKeyIn = default(string), string processDefinitionName = default(string), string processDefinitionNameLike = default(string), string executionId = default(string), string caseInstanceId = default(string), string caseInstanceBusinessKey = default(string), string caseInstanceBusinessKeyLike = default(string), string caseDefinitionId = default(string), string caseDefinitionKey = default(string), string caseDefinitionName = default(string), string caseDefinitionNameLike = default(string), string caseExecutionId = default(string), string activityInstanceIdIn = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), string assignee = default(string), string assigneeExpression = default(string), string assigneeLike = default(string), string assigneeLikeExpression = default(string), string assigneeIn = default(string), string owner = default(string), string ownerExpression = default(string), string candidateGroup = default(string), string candidateGroupExpression = default(string), string candidateUser = default(string), string candidateUserExpression = default(string), bool? includeAssignedTasks = default(bool?), string involvedUser = default(string), string involvedUserExpression = default(string), bool? assigned = default(bool?), bool? unassigned = default(bool?), string taskDefinitionKey = default(string), string taskDefinitionKeyIn = default(string), string taskDefinitionKeyLike = default(string), string name = default(string), string nameNotEqual = default(string), string nameLike = default(string), string nameNotLike = default(string), string description = default(string), string descriptionLike = default(string), int? priority = default(int?), int? maxPriority = default(int?), int? minPriority = default(int?), string dueDate = default(string), string dueDateExpression = default(string), string dueAfter = default(string), string dueAfterExpression = default(string), string dueBefore = default(string), string dueBeforeExpression = default(string), bool? withoutDueDate = default(bool?), string followUpDate = default(string), string followUpDateExpression = default(string), string followUpAfter = default(string), string followUpAfterExpression = default(string), string followUpBefore = default(string), string followUpBeforeExpression = default(string), string followUpBeforeOrNotExistent = default(string), string followUpBeforeOrNotExistentExpression = default(string), string createdOn = default(string), string createdOnExpression = default(string), string createdAfter = default(string), string createdAfterExpression = default(string), string createdBefore = default(string), string createdBeforeExpression = default(string), string delegationState = default(string), string candidateGroups = default(string), string candidateGroupsExpression = default(string), bool? withCandidateGroups = default(bool?), bool? withoutCandidateGroups = default(bool?), bool? withCandidateUsers = default(bool?), bool? withoutCandidateUsers = default(bool?), bool? active = default(bool?), bool? suspended = default(bool?), string taskVariables = default(string), string processVariables = default(string), string caseInstanceVariables = default(string), bool? variableNamesIgnoreCase = default(bool?), bool? variableValuesIgnoreCase = default(bool?), string parentTaskId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<CountResultDto> localVarResponse = await GetTasksCountWithHttpInfoAsync(taskId, taskIdIn, processInstanceId, processInstanceIdIn, processInstanceBusinessKey, processInstanceBusinessKeyExpression, processInstanceBusinessKeyIn, processInstanceBusinessKeyLike, processInstanceBusinessKeyLikeExpression, processDefinitionId, processDefinitionKey, processDefinitionKeyIn, processDefinitionName, processDefinitionNameLike, executionId, caseInstanceId, caseInstanceBusinessKey, caseInstanceBusinessKeyLike, caseDefinitionId, caseDefinitionKey, caseDefinitionName, caseDefinitionNameLike, caseExecutionId, activityInstanceIdIn, tenantIdIn, withoutTenantId, assignee, assigneeExpression, assigneeLike, assigneeLikeExpression, assigneeIn, owner, ownerExpression, candidateGroup, candidateGroupExpression, candidateUser, candidateUserExpression, includeAssignedTasks, involvedUser, involvedUserExpression, assigned, unassigned, taskDefinitionKey, taskDefinitionKeyIn, taskDefinitionKeyLike, name, nameNotEqual, nameLike, nameNotLike, description, descriptionLike, priority, maxPriority, minPriority, dueDate, dueDateExpression, dueAfter, dueAfterExpression, dueBefore, dueBeforeExpression, withoutDueDate, followUpDate, followUpDateExpression, followUpAfter, followUpAfterExpression, followUpBefore, followUpBeforeExpression, followUpBeforeOrNotExistent, followUpBeforeOrNotExistentExpression, createdOn, createdOnExpression, createdAfter, createdAfterExpression, createdBefore, createdBeforeExpression, delegationState, candidateGroups, candidateGroupsExpression, withCandidateGroups, withoutCandidateGroups, withCandidateUsers, withoutCandidateUsers, active, suspended, taskVariables, processVariables, caseInstanceVariables, variableNamesIgnoreCase, variableValuesIgnoreCase, parentTaskId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get List Count Retrieves the number of tasks that fulfill a provided filter. Corresponds to the size of the result set when using the [Get Tasks](https://docs.camunda.org/manual/7.15/reference/rest/task/) method.  **Security Consideration:** There are several query parameters (such as assigneeExpression) for specifying an EL expression. These are disabled by default to prevent remote code execution. See the section on [security considerations](https://docs.camunda.org/manual/7.15/user-guide/process-engine/securing-custom-code/) for custom code in the user guide for details.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Restrict to task with the given id. (optional)</param>
        /// <param name="taskIdIn">Restrict to tasks with any of the given ids. (optional)</param>
        /// <param name="processInstanceId">Restrict to tasks that belong to process instances with the given id. (optional)</param>
        /// <param name="processInstanceIdIn">Restrict to tasks that belong to process instances with the given ids. (optional)</param>
        /// <param name="processInstanceBusinessKey">Restrict to tasks that belong to process instances with the given business key. (optional)</param>
        /// <param name="processInstanceBusinessKeyExpression">Restrict to tasks that belong to process instances with the given business key which  is described by an expression. See the  [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. (optional)</param>
        /// <param name="processInstanceBusinessKeyIn">Restrict to tasks that belong to process instances with one of the give business keys.  The keys need to be in a comma-separated list. (optional)</param>
        /// <param name="processInstanceBusinessKeyLike">Restrict to tasks that have a process instance business key that has the parameter  value as a substring. (optional)</param>
        /// <param name="processInstanceBusinessKeyLikeExpression">Restrict to tasks that have a process instance business key that has the parameter  value as a substring and is described by an expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions)  for more information on available functions. (optional)</param>
        /// <param name="processDefinitionId">Restrict to tasks that belong to a process definition with the given id. (optional)</param>
        /// <param name="processDefinitionKey">Restrict to tasks that belong to a process definition with the given key. (optional)</param>
        /// <param name="processDefinitionKeyIn">Restrict to tasks that belong to a process definition with one of the given keys. The  keys need to be in a comma-separated list. (optional)</param>
        /// <param name="processDefinitionName">Restrict to tasks that belong to a process definition with the given name. (optional)</param>
        /// <param name="processDefinitionNameLike">Restrict to tasks that have a process definition name that has the parameter value as  a substring. (optional)</param>
        /// <param name="executionId">Restrict to tasks that belong to an execution with the given id. (optional)</param>
        /// <param name="caseInstanceId">Restrict to tasks that belong to case instances with the given id. (optional)</param>
        /// <param name="caseInstanceBusinessKey">Restrict to tasks that belong to case instances with the given business key. (optional)</param>
        /// <param name="caseInstanceBusinessKeyLike">Restrict to tasks that have a case instance business key that has the parameter value  as a substring. (optional)</param>
        /// <param name="caseDefinitionId">Restrict to tasks that belong to a case definition with the given id. (optional)</param>
        /// <param name="caseDefinitionKey">Restrict to tasks that belong to a case definition with the given key. (optional)</param>
        /// <param name="caseDefinitionName">Restrict to tasks that belong to a case definition with the given name. (optional)</param>
        /// <param name="caseDefinitionNameLike">Restrict to tasks that have a case definition name that has the parameter value as a  substring. (optional)</param>
        /// <param name="caseExecutionId">Restrict to tasks that belong to a case execution with the given id. (optional)</param>
        /// <param name="activityInstanceIdIn">Only include tasks which belong to one of the passed and comma-separated activity  instance ids. (optional)</param>
        /// <param name="tenantIdIn">Only include tasks which belong to one of the passed and comma-separated  tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include tasks which belong to no tenant. Value may only be &#x60;true&#x60;,  as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="assignee">Restrict to tasks that the given user is assigned to. (optional)</param>
        /// <param name="assigneeExpression">Restrict to tasks that the user described by the given expression is assigned to.  See the  [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions)  for more information on available functions. (optional)</param>
        /// <param name="assigneeLike">Restrict to tasks that have an assignee that has the parameter  value as a substring. (optional)</param>
        /// <param name="assigneeLikeExpression">Restrict to tasks that have an assignee that has the parameter value described by the  given expression as a substring. See the  [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions)  for more information on available functions. (optional)</param>
        /// <param name="assigneeIn">Only include tasks which are assigned to one of the passed and  comma-separated user ids. (optional)</param>
        /// <param name="owner">Restrict to tasks that the given user owns. (optional)</param>
        /// <param name="ownerExpression">Restrict to tasks that the user described by the given expression owns. See the  [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions)  for more information on available functions. (optional)</param>
        /// <param name="candidateGroup">Only include tasks that are offered to the given group. (optional)</param>
        /// <param name="candidateGroupExpression">Only include tasks that are offered to the group described by the given expression.  See the  [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions)  for more information on available functions. (optional)</param>
        /// <param name="candidateUser">Only include tasks that are offered to the given user or to one of his groups. (optional)</param>
        /// <param name="candidateUserExpression">Only include tasks that are offered to the user described by the given expression.  See the  [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions)  for more information on available functions. (optional)</param>
        /// <param name="includeAssignedTasks">Also include tasks that are assigned to users in candidate queries. Default is to only  include tasks that are not assigned to any user if you query by candidate user or group(s). (optional, default to false)</param>
        /// <param name="involvedUser">Only include tasks that the given user is involved in. A user is involved in a task if  an identity link exists between task and user (e.g., the user is the assignee). (optional)</param>
        /// <param name="involvedUserExpression">Only include tasks that the user described by the given expression is involved in. A user is involved in a task if an identity link exists between task and user (e.g., the user is the assignee). See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. (optional)</param>
        /// <param name="assigned">If set to &#x60;true&#x60;, restricts the query to all tasks that are assigned. (optional, default to false)</param>
        /// <param name="unassigned">If set to &#x60;true&#x60;, restricts the query to all tasks that are unassigned. (optional, default to false)</param>
        /// <param name="taskDefinitionKey">Restrict to tasks that have the given key. (optional)</param>
        /// <param name="taskDefinitionKeyIn">Restrict to tasks that have one of the given keys. The keys need to be in a comma-separated list. (optional)</param>
        /// <param name="taskDefinitionKeyLike">Restrict to tasks that have a key that has the parameter value as a substring. (optional)</param>
        /// <param name="name">Restrict to tasks that have the given name. (optional)</param>
        /// <param name="nameNotEqual">Restrict to tasks that do not have the given name. (optional)</param>
        /// <param name="nameLike">Restrict to tasks that have a name with the given parameter value as substring. (optional)</param>
        /// <param name="nameNotLike">Restrict to tasks that do not have a name with the given parameter value as substring. (optional)</param>
        /// <param name="description">Restrict to tasks that have the given description. (optional)</param>
        /// <param name="descriptionLike">Restrict to tasks that have a description that has the parameter value as a substring. (optional)</param>
        /// <param name="priority">Restrict to tasks that have the given priority. (optional)</param>
        /// <param name="maxPriority">Restrict to tasks that have a lower or equal priority. (optional)</param>
        /// <param name="minPriority">Restrict to tasks that have a higher or equal priority. (optional)</param>
        /// <param name="dueDate">Restrict to tasks that are due on the given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.546+0200&#x60;. (optional)</param>
        /// <param name="dueDateExpression">Restrict to tasks that are due on the date described by the given expression. See the [User Guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)</param>
        /// <param name="dueAfter">Restrict to tasks that are due after the given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.435+0200&#x60;. (optional)</param>
        /// <param name="dueAfterExpression">Restrict to tasks that are due after the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)</param>
        /// <param name="dueBefore">Restrict to tasks that are due before the given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.243+0200&#x60;. (optional)</param>
        /// <param name="dueBeforeExpression">Restrict to tasks that are due before the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)</param>
        /// <param name="withoutDueDate">Only include tasks which have no due date. Value may only be &#x60;true&#x60;,  as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="followUpDate">Restrict to tasks that have a followUp date on the given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.342+0200&#x60;. (optional)</param>
        /// <param name="followUpDateExpression">Restrict to tasks that have a followUp date on the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)</param>
        /// <param name="followUpAfter">Restrict to tasks that have a followUp date after the given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.542+0200&#x60;. (optional)</param>
        /// <param name="followUpAfterExpression">Restrict to tasks that have a followUp date after the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)</param>
        /// <param name="followUpBefore">Restrict to tasks that have a followUp date before the given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.234+0200&#x60;. (optional)</param>
        /// <param name="followUpBeforeExpression">Restrict to tasks that have a followUp date before the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)</param>
        /// <param name="followUpBeforeOrNotExistent">Restrict to tasks that have no followUp date or a followUp date before the given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.432+0200&#x60;. The typical use case is to query all &#x60;active&#x60; tasks for a user for a given date. (optional)</param>
        /// <param name="followUpBeforeOrNotExistentExpression">Restrict to tasks that have no followUp date or a followUp date before the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)</param>
        /// <param name="createdOn">Restrict to tasks that were created on the given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.324+0200&#x60;. (optional)</param>
        /// <param name="createdOnExpression">Restrict to tasks that were created on the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)</param>
        /// <param name="createdAfter">Restrict to tasks that were created after the given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.342+0200&#x60;. (optional)</param>
        /// <param name="createdAfterExpression">Restrict to tasks that were created after the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)</param>
        /// <param name="createdBefore">Restrict to tasks that were created before the given date. By [default](https://docs.camunda.org/manual/7.15/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.332+0200&#x60;. (optional)</param>
        /// <param name="createdBeforeExpression">Restrict to tasks that were created before the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a &#x60;java.util.Date&#x60; or &#x60;org.joda.time.DateTime&#x60; object. (optional)</param>
        /// <param name="delegationState">Restrict to tasks that are in the given delegation state. Valid values are &#x60;PENDING&#x60; and &#x60;RESOLVED&#x60;. (optional)</param>
        /// <param name="candidateGroups">Restrict to tasks that are offered to any of the given candidate groups. Takes a comma-separated list of group names, so for example &#x60;developers,support,sales&#x60;. (optional)</param>
        /// <param name="candidateGroupsExpression">Restrict to tasks that are offered to any of the candidate groups described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.15/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to &#x60;java.util.List&#x60; of Strings. (optional)</param>
        /// <param name="withCandidateGroups">Only include tasks which have a candidate group. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="withoutCandidateGroups">Only include tasks which have no candidate group. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="withCandidateUsers">Only include tasks which have a candidate user. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="withoutCandidateUsers">Only include tasks which have no candidate users. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="active">Only include active tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="suspended">Only include suspended tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="taskVariables">Only include tasks that have variables with certain values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value.  **Note**: Values are always treated as String objects on server side.  Valid &#x60;operator&#x60; values are: &#x60;eq&#x60; - equal to; &#x60;neq&#x60; - not equal to; &#x60;gt&#x60; - greater than; &#x60;gteq&#x60; - greater than or equal to; &#x60;lt&#x60; - lower than; &#x60;lteq&#x60; - lower than or equal to; &#x60;like&#x60;. &#x60;key&#x60; and &#x60;value&#x60; may not contain underscore or comma characters. (optional)</param>
        /// <param name="processVariables">Only include tasks that belong to process instances that have variables with certain  values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value.  **Note**: Values are always treated as String objects on server side.  Valid &#x60;operator&#x60; values are: &#x60;eq&#x60; - equal to; &#x60;neq&#x60; - not equal to; &#x60;gt&#x60; - greater than; &#x60;gteq&#x60; - greater than or equal to; &#x60;lt&#x60; - lower than; &#x60;lteq&#x60; - lower than or equal to; &#x60;like&#x60;; &#x60;notLike&#x60;. &#x60;key&#x60; and &#x60;value&#x60; may not contain underscore or comma characters. (optional)</param>
        /// <param name="caseInstanceVariables">Only include tasks that belong to case instances that have variables with certain values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value.  **Note**: Values are always treated as String objects on server side.  Valid &#x60;operator&#x60; values are: &#x60;eq&#x60; - equal to; &#x60;neq&#x60; - not equal to; &#x60;gt&#x60; - greater than; &#x60;gteq&#x60; - greater than or equal to; &#x60;lt&#x60; - lower than; &#x60;lteq&#x60; - lower than or equal to; &#x60;like&#x60;. &#x60;key&#x60; and &#x60;value&#x60; may not contain underscore or comma characters. (optional)</param>
        /// <param name="variableNamesIgnoreCase">Match all variable names in this query case-insensitively. If set &#x60;variableName&#x60; and &#x60;variablename&#x60; are treated as equal. (optional, default to false)</param>
        /// <param name="variableValuesIgnoreCase">Match all variable values in this query case-insensitively. If set &#x60;variableValue&#x60; and &#x60;variablevalue&#x60; are treated as equal. (optional, default to false)</param>
        /// <param name="parentTaskId">Restrict query to all tasks that are sub tasks of the given task. Takes a task id. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CountResultDto)</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<CountResultDto>> GetTasksCountWithHttpInfoAsync(string taskId = default(string), string taskIdIn = default(string), string processInstanceId = default(string), string processInstanceIdIn = default(string), string processInstanceBusinessKey = default(string), string processInstanceBusinessKeyExpression = default(string), string processInstanceBusinessKeyIn = default(string), string processInstanceBusinessKeyLike = default(string), string processInstanceBusinessKeyLikeExpression = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string processDefinitionKeyIn = default(string), string processDefinitionName = default(string), string processDefinitionNameLike = default(string), string executionId = default(string), string caseInstanceId = default(string), string caseInstanceBusinessKey = default(string), string caseInstanceBusinessKeyLike = default(string), string caseDefinitionId = default(string), string caseDefinitionKey = default(string), string caseDefinitionName = default(string), string caseDefinitionNameLike = default(string), string caseExecutionId = default(string), string activityInstanceIdIn = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), string assignee = default(string), string assigneeExpression = default(string), string assigneeLike = default(string), string assigneeLikeExpression = default(string), string assigneeIn = default(string), string owner = default(string), string ownerExpression = default(string), string candidateGroup = default(string), string candidateGroupExpression = default(string), string candidateUser = default(string), string candidateUserExpression = default(string), bool? includeAssignedTasks = default(bool?), string involvedUser = default(string), string involvedUserExpression = default(string), bool? assigned = default(bool?), bool? unassigned = default(bool?), string taskDefinitionKey = default(string), string taskDefinitionKeyIn = default(string), string taskDefinitionKeyLike = default(string), string name = default(string), string nameNotEqual = default(string), string nameLike = default(string), string nameNotLike = default(string), string description = default(string), string descriptionLike = default(string), int? priority = default(int?), int? maxPriority = default(int?), int? minPriority = default(int?), string dueDate = default(string), string dueDateExpression = default(string), string dueAfter = default(string), string dueAfterExpression = default(string), string dueBefore = default(string), string dueBeforeExpression = default(string), bool? withoutDueDate = default(bool?), string followUpDate = default(string), string followUpDateExpression = default(string), string followUpAfter = default(string), string followUpAfterExpression = default(string), string followUpBefore = default(string), string followUpBeforeExpression = default(string), string followUpBeforeOrNotExistent = default(string), string followUpBeforeOrNotExistentExpression = default(string), string createdOn = default(string), string createdOnExpression = default(string), string createdAfter = default(string), string createdAfterExpression = default(string), string createdBefore = default(string), string createdBeforeExpression = default(string), string delegationState = default(string), string candidateGroups = default(string), string candidateGroupsExpression = default(string), bool? withCandidateGroups = default(bool?), bool? withoutCandidateGroups = default(bool?), bool? withCandidateUsers = default(bool?), bool? withoutCandidateUsers = default(bool?), bool? active = default(bool?), bool? suspended = default(bool?), string taskVariables = default(string), string processVariables = default(string), string caseInstanceVariables = default(string), bool? variableNamesIgnoreCase = default(bool?), bool? variableValuesIgnoreCase = default(bool?), string parentTaskId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (taskId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "taskId", taskId));
            }
            if (taskIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "taskIdIn", taskIdIn));
            }
            if (processInstanceId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processInstanceId", processInstanceId));
            }
            if (processInstanceIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processInstanceIdIn", processInstanceIdIn));
            }
            if (processInstanceBusinessKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processInstanceBusinessKey", processInstanceBusinessKey));
            }
            if (processInstanceBusinessKeyExpression != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processInstanceBusinessKeyExpression", processInstanceBusinessKeyExpression));
            }
            if (processInstanceBusinessKeyIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processInstanceBusinessKeyIn", processInstanceBusinessKeyIn));
            }
            if (processInstanceBusinessKeyLike != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processInstanceBusinessKeyLike", processInstanceBusinessKeyLike));
            }
            if (processInstanceBusinessKeyLikeExpression != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processInstanceBusinessKeyLikeExpression", processInstanceBusinessKeyLikeExpression));
            }
            if (processDefinitionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processDefinitionId", processDefinitionId));
            }
            if (processDefinitionKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processDefinitionKey", processDefinitionKey));
            }
            if (processDefinitionKeyIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processDefinitionKeyIn", processDefinitionKeyIn));
            }
            if (processDefinitionName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processDefinitionName", processDefinitionName));
            }
            if (processDefinitionNameLike != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processDefinitionNameLike", processDefinitionNameLike));
            }
            if (executionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "executionId", executionId));
            }
            if (caseInstanceId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "caseInstanceId", caseInstanceId));
            }
            if (caseInstanceBusinessKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "caseInstanceBusinessKey", caseInstanceBusinessKey));
            }
            if (caseInstanceBusinessKeyLike != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "caseInstanceBusinessKeyLike", caseInstanceBusinessKeyLike));
            }
            if (caseDefinitionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "caseDefinitionId", caseDefinitionId));
            }
            if (caseDefinitionKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "caseDefinitionKey", caseDefinitionKey));
            }
            if (caseDefinitionName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "caseDefinitionName", caseDefinitionName));
            }
            if (caseDefinitionNameLike != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "caseDefinitionNameLike", caseDefinitionNameLike));
            }
            if (caseExecutionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "caseExecutionId", caseExecutionId));
            }
            if (activityInstanceIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "activityInstanceIdIn", activityInstanceIdIn));
            }
            if (tenantIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "tenantIdIn", tenantIdIn));
            }
            if (withoutTenantId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "withoutTenantId", withoutTenantId));
            }
            if (assignee != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "assignee", assignee));
            }
            if (assigneeExpression != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "assigneeExpression", assigneeExpression));
            }
            if (assigneeLike != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "assigneeLike", assigneeLike));
            }
            if (assigneeLikeExpression != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "assigneeLikeExpression", assigneeLikeExpression));
            }
            if (assigneeIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "assigneeIn", assigneeIn));
            }
            if (owner != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "owner", owner));
            }
            if (ownerExpression != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "ownerExpression", ownerExpression));
            }
            if (candidateGroup != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "candidateGroup", candidateGroup));
            }
            if (candidateGroupExpression != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "candidateGroupExpression", candidateGroupExpression));
            }
            if (candidateUser != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "candidateUser", candidateUser));
            }
            if (candidateUserExpression != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "candidateUserExpression", candidateUserExpression));
            }
            if (includeAssignedTasks != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "includeAssignedTasks", includeAssignedTasks));
            }
            if (involvedUser != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "involvedUser", involvedUser));
            }
            if (involvedUserExpression != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "involvedUserExpression", involvedUserExpression));
            }
            if (assigned != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "assigned", assigned));
            }
            if (unassigned != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "unassigned", unassigned));
            }
            if (taskDefinitionKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "taskDefinitionKey", taskDefinitionKey));
            }
            if (taskDefinitionKeyIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "taskDefinitionKeyIn", taskDefinitionKeyIn));
            }
            if (taskDefinitionKeyLike != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "taskDefinitionKeyLike", taskDefinitionKeyLike));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (nameNotEqual != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "nameNotEqual", nameNotEqual));
            }
            if (nameLike != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "nameLike", nameLike));
            }
            if (nameNotLike != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "nameNotLike", nameNotLike));
            }
            if (description != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "description", description));
            }
            if (descriptionLike != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "descriptionLike", descriptionLike));
            }
            if (priority != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "priority", priority));
            }
            if (maxPriority != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "maxPriority", maxPriority));
            }
            if (minPriority != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "minPriority", minPriority));
            }
            if (dueDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "dueDate", dueDate));
            }
            if (dueDateExpression != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "dueDateExpression", dueDateExpression));
            }
            if (dueAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "dueAfter", dueAfter));
            }
            if (dueAfterExpression != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "dueAfterExpression", dueAfterExpression));
            }
            if (dueBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "dueBefore", dueBefore));
            }
            if (dueBeforeExpression != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "dueBeforeExpression", dueBeforeExpression));
            }
            if (withoutDueDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "withoutDueDate", withoutDueDate));
            }
            if (followUpDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "followUpDate", followUpDate));
            }
            if (followUpDateExpression != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "followUpDateExpression", followUpDateExpression));
            }
            if (followUpAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "followUpAfter", followUpAfter));
            }
            if (followUpAfterExpression != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "followUpAfterExpression", followUpAfterExpression));
            }
            if (followUpBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "followUpBefore", followUpBefore));
            }
            if (followUpBeforeExpression != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "followUpBeforeExpression", followUpBeforeExpression));
            }
            if (followUpBeforeOrNotExistent != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "followUpBeforeOrNotExistent", followUpBeforeOrNotExistent));
            }
            if (followUpBeforeOrNotExistentExpression != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "followUpBeforeOrNotExistentExpression", followUpBeforeOrNotExistentExpression));
            }
            if (createdOn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "createdOn", createdOn));
            }
            if (createdOnExpression != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "createdOnExpression", createdOnExpression));
            }
            if (createdAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "createdAfter", createdAfter));
            }
            if (createdAfterExpression != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "createdAfterExpression", createdAfterExpression));
            }
            if (createdBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "createdBefore", createdBefore));
            }
            if (createdBeforeExpression != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "createdBeforeExpression", createdBeforeExpression));
            }
            if (delegationState != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "delegationState", delegationState));
            }
            if (candidateGroups != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "candidateGroups", candidateGroups));
            }
            if (candidateGroupsExpression != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "candidateGroupsExpression", candidateGroupsExpression));
            }
            if (withCandidateGroups != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "withCandidateGroups", withCandidateGroups));
            }
            if (withoutCandidateGroups != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "withoutCandidateGroups", withoutCandidateGroups));
            }
            if (withCandidateUsers != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "withCandidateUsers", withCandidateUsers));
            }
            if (withoutCandidateUsers != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "withoutCandidateUsers", withoutCandidateUsers));
            }
            if (active != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "active", active));
            }
            if (suspended != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "suspended", suspended));
            }
            if (taskVariables != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "taskVariables", taskVariables));
            }
            if (processVariables != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processVariables", processVariables));
            }
            if (caseInstanceVariables != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "caseInstanceVariables", caseInstanceVariables));
            }
            if (variableNamesIgnoreCase != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "variableNamesIgnoreCase", variableNamesIgnoreCase));
            }
            if (variableValuesIgnoreCase != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "variableValuesIgnoreCase", variableValuesIgnoreCase));
            }
            if (parentTaskId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "parentTaskId", parentTaskId));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<CountResultDto>("/task/count", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTasksCount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Handle BPMN Error Reports a business error in the context of a running task by id. The error code must be specified to identify the BPMN error handler. See the documentation for [Reporting Bpmn Error](https://docs.camunda.org/manual/7.15/reference/bpmn20/tasks/user-task/#reporting-bpmn-error) in User Tasks.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task a BPMN error is reported for.</param>
        /// <param name="taskBpmnErrorDto"> (optional)</param>
        /// <returns></returns>
        public void HandleBpmnError(string id, TaskBpmnErrorDto taskBpmnErrorDto = default(TaskBpmnErrorDto))
        {
            HandleBpmnErrorWithHttpInfo(id, taskBpmnErrorDto);
        }

        /// <summary>
        /// Handle BPMN Error Reports a business error in the context of a running task by id. The error code must be specified to identify the BPMN error handler. See the documentation for [Reporting Bpmn Error](https://docs.camunda.org/manual/7.15/reference/bpmn20/tasks/user-task/#reporting-bpmn-error) in User Tasks.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task a BPMN error is reported for.</param>
        /// <param name="taskBpmnErrorDto"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<Object> HandleBpmnErrorWithHttpInfo(string id, TaskBpmnErrorDto taskBpmnErrorDto = default(TaskBpmnErrorDto))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling TaskApi->HandleBpmnError");

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = taskBpmnErrorDto;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/task/{id}/bpmnError", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("HandleBpmnError", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Handle BPMN Error Reports a business error in the context of a running task by id. The error code must be specified to identify the BPMN error handler. See the documentation for [Reporting Bpmn Error](https://docs.camunda.org/manual/7.15/reference/bpmn20/tasks/user-task/#reporting-bpmn-error) in User Tasks.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task a BPMN error is reported for.</param>
        /// <param name="taskBpmnErrorDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task HandleBpmnErrorAsync(string id, TaskBpmnErrorDto taskBpmnErrorDto = default(TaskBpmnErrorDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await HandleBpmnErrorWithHttpInfoAsync(id, taskBpmnErrorDto, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Handle BPMN Error Reports a business error in the context of a running task by id. The error code must be specified to identify the BPMN error handler. See the documentation for [Reporting Bpmn Error](https://docs.camunda.org/manual/7.15/reference/bpmn20/tasks/user-task/#reporting-bpmn-error) in User Tasks.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task a BPMN error is reported for.</param>
        /// <param name="taskBpmnErrorDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<Object>> HandleBpmnErrorWithHttpInfoAsync(string id, TaskBpmnErrorDto taskBpmnErrorDto = default(TaskBpmnErrorDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling TaskApi->HandleBpmnError");


            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = taskBpmnErrorDto;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/task/{id}/bpmnError", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("HandleBpmnError", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Handle BPMN Escalation Reports an escalation in the context of a running task by id. The escalation code must be specified to identify the escalation handler. See the documentation for [Reporting Bpmn Escalation](https://docs.camunda.org/manual/7.15/reference/bpmn20/tasks/user-task/#reporting-bpmn-escalation) in User Tasks.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task in which context a BPMN escalation is reported.</param>
        /// <param name="taskEscalationDto"> (optional)</param>
        /// <returns></returns>
        public void HandleEscalation(string id, TaskEscalationDto taskEscalationDto = default(TaskEscalationDto))
        {
            HandleEscalationWithHttpInfo(id, taskEscalationDto);
        }

        /// <summary>
        /// Handle BPMN Escalation Reports an escalation in the context of a running task by id. The escalation code must be specified to identify the escalation handler. See the documentation for [Reporting Bpmn Escalation](https://docs.camunda.org/manual/7.15/reference/bpmn20/tasks/user-task/#reporting-bpmn-escalation) in User Tasks.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task in which context a BPMN escalation is reported.</param>
        /// <param name="taskEscalationDto"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<Object> HandleEscalationWithHttpInfo(string id, TaskEscalationDto taskEscalationDto = default(TaskEscalationDto))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling TaskApi->HandleEscalation");

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = taskEscalationDto;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/task/{id}/bpmnEscalation", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("HandleEscalation", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Handle BPMN Escalation Reports an escalation in the context of a running task by id. The escalation code must be specified to identify the escalation handler. See the documentation for [Reporting Bpmn Escalation](https://docs.camunda.org/manual/7.15/reference/bpmn20/tasks/user-task/#reporting-bpmn-escalation) in User Tasks.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task in which context a BPMN escalation is reported.</param>
        /// <param name="taskEscalationDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task HandleEscalationAsync(string id, TaskEscalationDto taskEscalationDto = default(TaskEscalationDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await HandleEscalationWithHttpInfoAsync(id, taskEscalationDto, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Handle BPMN Escalation Reports an escalation in the context of a running task by id. The escalation code must be specified to identify the escalation handler. See the documentation for [Reporting Bpmn Escalation](https://docs.camunda.org/manual/7.15/reference/bpmn20/tasks/user-task/#reporting-bpmn-escalation) in User Tasks.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task in which context a BPMN escalation is reported.</param>
        /// <param name="taskEscalationDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<Object>> HandleEscalationWithHttpInfoAsync(string id, TaskEscalationDto taskEscalationDto = default(TaskEscalationDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling TaskApi->HandleEscalation");


            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = taskEscalationDto;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/task/{id}/bpmnEscalation", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("HandleEscalation", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get List (POST) Queries for tasks that fulfill a given filter. This method is slightly more powerful than the [Get Tasks](https://docs.camunda.org/manual/7.15/reference/rest/task/get-query/) method because it allows filtering by multiple process or task variables of types &#x60;String&#x60;, &#x60;Number&#x60; or &#x60;Boolean&#x60;. The size of the result set can be retrieved by using the [Get Task Count (POST)](https://docs.camunda.org/manual/7.15/reference/rest/task/post-query-count/) method.  **Security Consideration**: There are several parameters (such as &#x60;assigneeExpression&#x60;) for specifying an EL expression. These are disabled by default to prevent remote code execution. See the section on [security considerations for custom code](https://docs.camunda.org/manual/7.15/user-guide/process-engine/securing-custom-code/) in the user guide for details.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="taskQueryDto"> (optional)</param>
        /// <returns>List&lt;TaskDto&gt;</returns>
        public List<TaskDto> QueryTasks(int? firstResult = default(int?), int? maxResults = default(int?), TaskQueryDto taskQueryDto = default(TaskQueryDto))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<List<TaskDto>> localVarResponse = QueryTasksWithHttpInfo(firstResult, maxResults, taskQueryDto);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get List (POST) Queries for tasks that fulfill a given filter. This method is slightly more powerful than the [Get Tasks](https://docs.camunda.org/manual/7.15/reference/rest/task/get-query/) method because it allows filtering by multiple process or task variables of types &#x60;String&#x60;, &#x60;Number&#x60; or &#x60;Boolean&#x60;. The size of the result set can be retrieved by using the [Get Task Count (POST)](https://docs.camunda.org/manual/7.15/reference/rest/task/post-query-count/) method.  **Security Consideration**: There are several parameters (such as &#x60;assigneeExpression&#x60;) for specifying an EL expression. These are disabled by default to prevent remote code execution. See the section on [security considerations for custom code](https://docs.camunda.org/manual/7.15/user-guide/process-engine/securing-custom-code/) in the user guide for details.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="taskQueryDto"> (optional)</param>
        /// <returns>ApiResponse of List&lt;TaskDto&gt;</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<List<TaskDto>> QueryTasksWithHttpInfo(int? firstResult = default(int?), int? maxResults = default(int?), TaskQueryDto taskQueryDto = default(TaskQueryDto))
        {
            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (firstResult != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "firstResult", firstResult));
            }
            if (maxResults != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "maxResults", maxResults));
            }
            localVarRequestOptions.Data = taskQueryDto;


            // make the HTTP request
            var localVarResponse = this.Client.Post<List<TaskDto>>("/task", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QueryTasks", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get List (POST) Queries for tasks that fulfill a given filter. This method is slightly more powerful than the [Get Tasks](https://docs.camunda.org/manual/7.15/reference/rest/task/get-query/) method because it allows filtering by multiple process or task variables of types &#x60;String&#x60;, &#x60;Number&#x60; or &#x60;Boolean&#x60;. The size of the result set can be retrieved by using the [Get Task Count (POST)](https://docs.camunda.org/manual/7.15/reference/rest/task/post-query-count/) method.  **Security Consideration**: There are several parameters (such as &#x60;assigneeExpression&#x60;) for specifying an EL expression. These are disabled by default to prevent remote code execution. See the section on [security considerations for custom code](https://docs.camunda.org/manual/7.15/user-guide/process-engine/securing-custom-code/) in the user guide for details.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="taskQueryDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;TaskDto&gt;</returns>
        public async System.Threading.Tasks.Task<List<TaskDto>> QueryTasksAsync(int? firstResult = default(int?), int? maxResults = default(int?), TaskQueryDto taskQueryDto = default(TaskQueryDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<List<TaskDto>> localVarResponse = await QueryTasksWithHttpInfoAsync(firstResult, maxResults, taskQueryDto, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get List (POST) Queries for tasks that fulfill a given filter. This method is slightly more powerful than the [Get Tasks](https://docs.camunda.org/manual/7.15/reference/rest/task/get-query/) method because it allows filtering by multiple process or task variables of types &#x60;String&#x60;, &#x60;Number&#x60; or &#x60;Boolean&#x60;. The size of the result set can be retrieved by using the [Get Task Count (POST)](https://docs.camunda.org/manual/7.15/reference/rest/task/post-query-count/) method.  **Security Consideration**: There are several parameters (such as &#x60;assigneeExpression&#x60;) for specifying an EL expression. These are disabled by default to prevent remote code execution. See the section on [security considerations for custom code](https://docs.camunda.org/manual/7.15/user-guide/process-engine/securing-custom-code/) in the user guide for details.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="taskQueryDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;TaskDto&gt;)</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<List<TaskDto>>> QueryTasksWithHttpInfoAsync(int? firstResult = default(int?), int? maxResults = default(int?), TaskQueryDto taskQueryDto = default(TaskQueryDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (firstResult != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "firstResult", firstResult));
            }
            if (maxResults != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "maxResults", maxResults));
            }
            localVarRequestOptions.Data = taskQueryDto;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<List<TaskDto>>("/task", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QueryTasks", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get List Count (POST) Retrieves the number of tasks that fulfill the given filter. Corresponds to the size of the result set of the [Get Tasks (POST)](https://docs.camunda.org/manual/7.15/reference/rest/task/post-query/) method and takes the same parameters.  **Security Consideration**: There are several parameters (such as &#x60;assigneeExpression&#x60;) for specifying an EL expression. These are disabled by default to prevent remote code execution. See the section on [security considerations for custom code](https://docs.camunda.org/manual/7.15/user-guide/process-engine/securing-custom-code/) in the user guide for details.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskQueryDto"> (optional)</param>
        /// <returns>CountResultDto</returns>
        public CountResultDto QueryTasksCount(TaskQueryDto taskQueryDto = default(TaskQueryDto))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<CountResultDto> localVarResponse = QueryTasksCountWithHttpInfo(taskQueryDto);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get List Count (POST) Retrieves the number of tasks that fulfill the given filter. Corresponds to the size of the result set of the [Get Tasks (POST)](https://docs.camunda.org/manual/7.15/reference/rest/task/post-query/) method and takes the same parameters.  **Security Consideration**: There are several parameters (such as &#x60;assigneeExpression&#x60;) for specifying an EL expression. These are disabled by default to prevent remote code execution. See the section on [security considerations for custom code](https://docs.camunda.org/manual/7.15/user-guide/process-engine/securing-custom-code/) in the user guide for details.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskQueryDto"> (optional)</param>
        /// <returns>ApiResponse of CountResultDto</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<CountResultDto> QueryTasksCountWithHttpInfo(TaskQueryDto taskQueryDto = default(TaskQueryDto))
        {
            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = taskQueryDto;


            // make the HTTP request
            var localVarResponse = this.Client.Post<CountResultDto>("/task/count", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QueryTasksCount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get List Count (POST) Retrieves the number of tasks that fulfill the given filter. Corresponds to the size of the result set of the [Get Tasks (POST)](https://docs.camunda.org/manual/7.15/reference/rest/task/post-query/) method and takes the same parameters.  **Security Consideration**: There are several parameters (such as &#x60;assigneeExpression&#x60;) for specifying an EL expression. These are disabled by default to prevent remote code execution. See the section on [security considerations for custom code](https://docs.camunda.org/manual/7.15/user-guide/process-engine/securing-custom-code/) in the user guide for details.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskQueryDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CountResultDto</returns>
        public async System.Threading.Tasks.Task<CountResultDto> QueryTasksCountAsync(TaskQueryDto taskQueryDto = default(TaskQueryDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<CountResultDto> localVarResponse = await QueryTasksCountWithHttpInfoAsync(taskQueryDto, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get List Count (POST) Retrieves the number of tasks that fulfill the given filter. Corresponds to the size of the result set of the [Get Tasks (POST)](https://docs.camunda.org/manual/7.15/reference/rest/task/post-query/) method and takes the same parameters.  **Security Consideration**: There are several parameters (such as &#x60;assigneeExpression&#x60;) for specifying an EL expression. These are disabled by default to prevent remote code execution. See the section on [security considerations for custom code](https://docs.camunda.org/manual/7.15/user-guide/process-engine/securing-custom-code/) in the user guide for details.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskQueryDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CountResultDto)</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<CountResultDto>> QueryTasksCountWithHttpInfoAsync(TaskQueryDto taskQueryDto = default(TaskQueryDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = taskQueryDto;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<CountResultDto>("/task/count", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QueryTasksCount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Resolve Resolves a task and updates execution variables.  Resolving a task marks that the assignee is done with the task delegated to them, and that it can be sent back to the owner. Can only be executed when the task has been delegated. The assignee will be set to the owner, who performed the delegation.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to resolve.</param>
        /// <param name="completeTaskDto"> (optional)</param>
        /// <returns></returns>
        public void Resolve(string id, CompleteTaskDto completeTaskDto = default(CompleteTaskDto))
        {
            ResolveWithHttpInfo(id, completeTaskDto);
        }

        /// <summary>
        /// Resolve Resolves a task and updates execution variables.  Resolving a task marks that the assignee is done with the task delegated to them, and that it can be sent back to the owner. Can only be executed when the task has been delegated. The assignee will be set to the owner, who performed the delegation.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to resolve.</param>
        /// <param name="completeTaskDto"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<Object> ResolveWithHttpInfo(string id, CompleteTaskDto completeTaskDto = default(CompleteTaskDto))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling TaskApi->Resolve");

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = completeTaskDto;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/task/{id}/resolve", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Resolve", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Resolve Resolves a task and updates execution variables.  Resolving a task marks that the assignee is done with the task delegated to them, and that it can be sent back to the owner. Can only be executed when the task has been delegated. The assignee will be set to the owner, who performed the delegation.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to resolve.</param>
        /// <param name="completeTaskDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ResolveAsync(string id, CompleteTaskDto completeTaskDto = default(CompleteTaskDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ResolveWithHttpInfoAsync(id, completeTaskDto, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Resolve Resolves a task and updates execution variables.  Resolving a task marks that the assignee is done with the task delegated to them, and that it can be sent back to the owner. Can only be executed when the task has been delegated. The assignee will be set to the owner, who performed the delegation.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to resolve.</param>
        /// <param name="completeTaskDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<Object>> ResolveWithHttpInfoAsync(string id, CompleteTaskDto completeTaskDto = default(CompleteTaskDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling TaskApi->Resolve");


            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = completeTaskDto;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/task/{id}/resolve", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Resolve", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set Assignee Changes the assignee of a task to a specific user.  **Note:** The difference with the [Claim Task](https://docs.camunda.org/manual/7.15/reference/rest/task/post-claim/) method is that this method does not check if the task already has a user assigned to it.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to set the assignee for.</param>
        /// <param name="userIdDto">Provide the id of the user that will be the assignee of the task. (optional)</param>
        /// <returns></returns>
        public void SetAssignee(string id, UserIdDto userIdDto = default(UserIdDto))
        {
            SetAssigneeWithHttpInfo(id, userIdDto);
        }

        /// <summary>
        /// Set Assignee Changes the assignee of a task to a specific user.  **Note:** The difference with the [Claim Task](https://docs.camunda.org/manual/7.15/reference/rest/task/post-claim/) method is that this method does not check if the task already has a user assigned to it.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to set the assignee for.</param>
        /// <param name="userIdDto">Provide the id of the user that will be the assignee of the task. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<Object> SetAssigneeWithHttpInfo(string id, UserIdDto userIdDto = default(UserIdDto))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling TaskApi->SetAssignee");

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = userIdDto;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/task/{id}/assignee", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetAssignee", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set Assignee Changes the assignee of a task to a specific user.  **Note:** The difference with the [Claim Task](https://docs.camunda.org/manual/7.15/reference/rest/task/post-claim/) method is that this method does not check if the task already has a user assigned to it.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to set the assignee for.</param>
        /// <param name="userIdDto">Provide the id of the user that will be the assignee of the task. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SetAssigneeAsync(string id, UserIdDto userIdDto = default(UserIdDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await SetAssigneeWithHttpInfoAsync(id, userIdDto, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Set Assignee Changes the assignee of a task to a specific user.  **Note:** The difference with the [Claim Task](https://docs.camunda.org/manual/7.15/reference/rest/task/post-claim/) method is that this method does not check if the task already has a user assigned to it.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to set the assignee for.</param>
        /// <param name="userIdDto">Provide the id of the user that will be the assignee of the task. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<Object>> SetAssigneeWithHttpInfoAsync(string id, UserIdDto userIdDto = default(UserIdDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling TaskApi->SetAssignee");


            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = userIdDto;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/task/{id}/assignee", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetAssignee", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Submit Form Completes a task and updates process variables using a form submit. There are two difference between this method and the &#x60;complete&#x60; method:  * If the task is in state &#x60;PENDING&#x60; - i.e., has been delegated before, it is not completed but resolved. Otherwise it will be completed. * If the task has Form Field Metadata defined, the process engine will perform backend validation for any form fields which have validators defined. See the [Generated Task Forms](https://docs.camunda.org/manual/7.15/user-guide/task-forms/_index/#generated-task-forms) section of the [User Guide](https://docs.camunda.org/manual/7.15/user-guide/) for more information.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to submit the form for.</param>
        /// <param name="completeTaskDto"> (optional)</param>
        /// <returns>Dictionary&lt;string, VariableValueDto&gt;</returns>
        public Dictionary<string, VariableValueDto> Submit(string id, CompleteTaskDto completeTaskDto = default(CompleteTaskDto))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<Dictionary<string, VariableValueDto>> localVarResponse = SubmitWithHttpInfo(id, completeTaskDto);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Submit Form Completes a task and updates process variables using a form submit. There are two difference between this method and the &#x60;complete&#x60; method:  * If the task is in state &#x60;PENDING&#x60; - i.e., has been delegated before, it is not completed but resolved. Otherwise it will be completed. * If the task has Form Field Metadata defined, the process engine will perform backend validation for any form fields which have validators defined. See the [Generated Task Forms](https://docs.camunda.org/manual/7.15/user-guide/task-forms/_index/#generated-task-forms) section of the [User Guide](https://docs.camunda.org/manual/7.15/user-guide/) for more information.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to submit the form for.</param>
        /// <param name="completeTaskDto"> (optional)</param>
        /// <returns>ApiResponse of Dictionary&lt;string, VariableValueDto&gt;</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<Dictionary<string, VariableValueDto>> SubmitWithHttpInfo(string id, CompleteTaskDto completeTaskDto = default(CompleteTaskDto))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling TaskApi->Submit");

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = completeTaskDto;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Dictionary<string, VariableValueDto>>("/task/{id}/submit-form", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Submit", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Submit Form Completes a task and updates process variables using a form submit. There are two difference between this method and the &#x60;complete&#x60; method:  * If the task is in state &#x60;PENDING&#x60; - i.e., has been delegated before, it is not completed but resolved. Otherwise it will be completed. * If the task has Form Field Metadata defined, the process engine will perform backend validation for any form fields which have validators defined. See the [Generated Task Forms](https://docs.camunda.org/manual/7.15/user-guide/task-forms/_index/#generated-task-forms) section of the [User Guide](https://docs.camunda.org/manual/7.15/user-guide/) for more information.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to submit the form for.</param>
        /// <param name="completeTaskDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Dictionary&lt;string, VariableValueDto&gt;</returns>
        public async System.Threading.Tasks.Task<Dictionary<string, VariableValueDto>> SubmitAsync(string id, CompleteTaskDto completeTaskDto = default(CompleteTaskDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<Dictionary<string, VariableValueDto>> localVarResponse = await SubmitWithHttpInfoAsync(id, completeTaskDto, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Submit Form Completes a task and updates process variables using a form submit. There are two difference between this method and the &#x60;complete&#x60; method:  * If the task is in state &#x60;PENDING&#x60; - i.e., has been delegated before, it is not completed but resolved. Otherwise it will be completed. * If the task has Form Field Metadata defined, the process engine will perform backend validation for any form fields which have validators defined. See the [Generated Task Forms](https://docs.camunda.org/manual/7.15/user-guide/task-forms/_index/#generated-task-forms) section of the [User Guide](https://docs.camunda.org/manual/7.15/user-guide/) for more information.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to submit the form for.</param>
        /// <param name="completeTaskDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, VariableValueDto&gt;)</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<Dictionary<string, VariableValueDto>>> SubmitWithHttpInfoAsync(string id, CompleteTaskDto completeTaskDto = default(CompleteTaskDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling TaskApi->Submit");


            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = completeTaskDto;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Dictionary<string, VariableValueDto>>("/task/{id}/submit-form", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Submit", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Unclaim Resets a task&#39;s assignee. If successful, the task is not assigned to a user.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to unclaim.</param>
        /// <returns></returns>
        public void Unclaim(string id)
        {
            UnclaimWithHttpInfo(id);
        }

        /// <summary>
        /// Unclaim Resets a task&#39;s assignee. If successful, the task is not assigned to a user.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to unclaim.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<Object> UnclaimWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling TaskApi->Unclaim");

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/task/{id}/unclaim", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Unclaim", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Unclaim Resets a task&#39;s assignee. If successful, the task is not assigned to a user.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to unclaim.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UnclaimAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await UnclaimWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Unclaim Resets a task&#39;s assignee. If successful, the task is not assigned to a user.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to unclaim.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<Object>> UnclaimWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling TaskApi->Unclaim");


            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/task/{id}/unclaim", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Unclaim", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Updates a task.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to be updated.</param>
        /// <param name="taskDto"> (optional)</param>
        /// <returns></returns>
        public void UpdateTask(string id, TaskDto taskDto = default(TaskDto))
        {
            UpdateTaskWithHttpInfo(id, taskDto);
        }

        /// <summary>
        /// Update Updates a task.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to be updated.</param>
        /// <param name="taskDto"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<Object> UpdateTaskWithHttpInfo(string id, TaskDto taskDto = default(TaskDto))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling TaskApi->UpdateTask");

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = taskDto;


            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/task/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateTask", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Updates a task.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to be updated.</param>
        /// <param name="taskDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateTaskAsync(string id, TaskDto taskDto = default(TaskDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await UpdateTaskWithHttpInfoAsync(id, taskDto, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Update Updates a task.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to be updated.</param>
        /// <param name="taskDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<Object>> UpdateTaskWithHttpInfoAsync(string id, TaskDto taskDto = default(TaskDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling TaskApi->UpdateTask");


            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = taskDto;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/task/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateTask", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
