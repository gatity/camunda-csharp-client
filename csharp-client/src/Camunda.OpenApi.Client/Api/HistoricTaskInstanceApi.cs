/*
 * Camunda Platform REST API
 *
 * OpenApi Spec for Camunda Platform REST API.
 *
 * The version of the OpenAPI document: 7.16.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using Camunda.OpenApi.Client.Client;
using Camunda.OpenApi.Client.Model;

namespace Camunda.OpenApi.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IHistoricTaskInstanceApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get Task Report (Historic)
        /// </summary>
        /// <remarks>
        /// Retrieves a report of completed tasks. When the report type is set to &#x60;count&#x60;, the report contains a list of completed task counts where an entry contains the task name, the definition key of the task, the process definition id, the process definition key, the process definition name and the count of how many tasks were completed for the specified key in a given period. When the report type is set to &#x60;duration&#x60;, the report contains a minimum, maximum and average duration value of all completed task instances in a given period.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportType">**Mandatory.** Specifies the kind of the report to execute. To retrieve a report about the duration of process instances the value must be set to &#x60;duration&#x60;. For a report of the completed tasks in a specific timespan the value must be set to &#x60;count&#x60;. (optional)</param>
        /// <param name="periodUnit">When the report type is set to &#x60;duration&#x60;, this parameter is **mandatory**. Specifies the granularity of the report. Valid values are &#x60;month&#x60; and &#x60;quarter&#x60;. (optional)</param>
        /// <param name="completedBefore">Restrict to tasks that were completed before the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="completedAfter">Restrict to tasks that were completed after the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="groupBy">When the report type is set to &#x60;count&#x60;, this parameter is **mandatory**. Groups the tasks report by a given criterion. Valid values are &#x60;taskName&#x60; and &#x60;processDefinition&#x60;. (optional)</param>
        /// <returns>List&lt;HistoricTaskInstanceReportResultDto&gt;</returns>
        List<HistoricTaskInstanceReportResultDto> GetHistoricTaskInstanceReport(string reportType = default(string), string periodUnit = default(string), DateTime? completedBefore = default(DateTime?), DateTime? completedAfter = default(DateTime?), string groupBy = default(string));

        /// <summary>
        /// Get Task Report (Historic)
        /// </summary>
        /// <remarks>
        /// Retrieves a report of completed tasks. When the report type is set to &#x60;count&#x60;, the report contains a list of completed task counts where an entry contains the task name, the definition key of the task, the process definition id, the process definition key, the process definition name and the count of how many tasks were completed for the specified key in a given period. When the report type is set to &#x60;duration&#x60;, the report contains a minimum, maximum and average duration value of all completed task instances in a given period.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportType">**Mandatory.** Specifies the kind of the report to execute. To retrieve a report about the duration of process instances the value must be set to &#x60;duration&#x60;. For a report of the completed tasks in a specific timespan the value must be set to &#x60;count&#x60;. (optional)</param>
        /// <param name="periodUnit">When the report type is set to &#x60;duration&#x60;, this parameter is **mandatory**. Specifies the granularity of the report. Valid values are &#x60;month&#x60; and &#x60;quarter&#x60;. (optional)</param>
        /// <param name="completedBefore">Restrict to tasks that were completed before the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="completedAfter">Restrict to tasks that were completed after the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="groupBy">When the report type is set to &#x60;count&#x60;, this parameter is **mandatory**. Groups the tasks report by a given criterion. Valid values are &#x60;taskName&#x60; and &#x60;processDefinition&#x60;. (optional)</param>
        /// <returns>ApiResponse of List&lt;HistoricTaskInstanceReportResultDto&gt;</returns>
        ApiResponse<List<HistoricTaskInstanceReportResultDto>> GetHistoricTaskInstanceReportWithHttpInfo(string reportType = default(string), string periodUnit = default(string), DateTime? completedBefore = default(DateTime?), DateTime? completedAfter = default(DateTime?), string groupBy = default(string));
        /// <summary>
        /// Get Tasks (Historic)
        /// </summary>
        /// <remarks>
        /// Queries for historic tasks that fulfill the given parameters. The size of the result set can be retrieved by using the [Get Task Count](https://docs.camunda.org/manual/7.16/reference/rest/history/task/get-task-query-count/) method.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Filter by task id. (optional)</param>
        /// <param name="taskParentTaskId">Filter by parent task id. (optional)</param>
        /// <param name="processInstanceId">Filter by process instance id. (optional)</param>
        /// <param name="processInstanceBusinessKey">Filter by process instance business key. (optional)</param>
        /// <param name="processInstanceBusinessKeyIn">Filter by process instances with one of the give business keys. The keys need to be in a comma-separated list. (optional)</param>
        /// <param name="processInstanceBusinessKeyLike">Filter by  process instance business key that has the parameter value as a substring. (optional)</param>
        /// <param name="executionId">Filter by the id of the execution that executed the task. (optional)</param>
        /// <param name="processDefinitionId">Filter by process definition id. (optional)</param>
        /// <param name="processDefinitionKey">Restrict to tasks that belong to a process definition with the given key. (optional)</param>
        /// <param name="processDefinitionName">Restrict to tasks that belong to a process definition with the given name. (optional)</param>
        /// <param name="caseInstanceId">Filter by case instance id. (optional)</param>
        /// <param name="caseExecutionId">Filter by the id of the case execution that executed the task. (optional)</param>
        /// <param name="caseDefinitionId">Filter by case definition id. (optional)</param>
        /// <param name="caseDefinitionKey">Restrict to tasks that belong to a case definition with the given key. (optional)</param>
        /// <param name="caseDefinitionName">Restrict to tasks that belong to a case definition with the given name. (optional)</param>
        /// <param name="activityInstanceIdIn">Only include tasks which belong to one of the passed comma-separated activity instance ids. (optional)</param>
        /// <param name="taskName">Restrict to tasks that have the given name. (optional)</param>
        /// <param name="taskNameLike">Restrict to tasks that have a name with the given parameter value as substring. (optional)</param>
        /// <param name="taskDescription">Restrict to tasks that have the given description. (optional)</param>
        /// <param name="taskDescriptionLike">Restrict to tasks that have a description that has the parameter value as a substring. (optional)</param>
        /// <param name="taskDefinitionKey">Restrict to tasks that have the given key. (optional)</param>
        /// <param name="taskDefinitionKeyIn">Restrict to tasks that have one of the passed comma-separated task definition keys. (optional)</param>
        /// <param name="taskDeleteReason">Restrict to tasks that have the given delete reason. (optional)</param>
        /// <param name="taskDeleteReasonLike">Restrict to tasks that have a delete reason that has the parameter value as a substring. (optional)</param>
        /// <param name="taskAssignee">Restrict to tasks that the given user is assigned to. (optional)</param>
        /// <param name="taskAssigneeLike">Restrict to tasks that are assigned to users with the parameter value as a substring. (optional)</param>
        /// <param name="taskOwner">Restrict to tasks that the given user owns. (optional)</param>
        /// <param name="taskOwnerLike">Restrict to tasks that are owned by users with the parameter value as a substring. (optional)</param>
        /// <param name="taskPriority">Restrict to tasks that have the given priority. (optional)</param>
        /// <param name="assigned">If set to &#x60;true&#x60;, restricts the query to all tasks that are assigned. (optional)</param>
        /// <param name="unassigned">If set to &#x60;true&#x60;, restricts the query to all tasks that are unassigned. (optional)</param>
        /// <param name="finished">Only include finished tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="unfinished">Only include unfinished tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="processFinished">Only include tasks of finished processes. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="processUnfinished">Only include tasks of unfinished processes. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="taskDueDate">Restrict to tasks that are due on the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="taskDueDateBefore">Restrict to tasks that are due before the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="taskDueDateAfter">Restrict to tasks that are due after the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="withoutTaskDueDate">Only include tasks which have no due date. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="taskFollowUpDate">Restrict to tasks that have a followUp date on the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="taskFollowUpDateBefore">Restrict to tasks that have a followUp date before the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="taskFollowUpDateAfter">Restrict to tasks that have a followUp date after the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="startedBefore">Restrict to tasks that were started before the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="startedAfter">Restrict to tasks that were started after the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="finishedBefore">Restrict to tasks that were finished before the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="finishedAfter">Restrict to tasks that were finished after the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. A task instance must have one of the given tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include historic task instances that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="taskVariables">Only include tasks that have variables with certain values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value. **Note:** Values are always treated as &#x60;String&#x60; objects on server side.   Valid operator values are: * &#x60;eq&#x60; - equal to; * &#x60;neq&#x60; - not equal to; * &#x60;gt&#x60; - greater than; * &#x60;gteq&#x60; - greater than or equal to; * &#x60;lt&#x60; - lower than; * &#x60;lteq&#x60; - lower than or equal to; * &#x60;like&#x60;.  &#x60;key&#x60; and &#x60;value&#x60; may not contain underscore or comma characters. (optional)</param>
        /// <param name="processVariables">Only include tasks that belong to process instances that have variables with certain values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value. **Note:** Values are always treated as &#x60;String&#x60; objects on server side.   Valid operator values are: * &#x60;eq&#x60; - equal to; * &#x60;neq&#x60; - not equal to; * &#x60;gt&#x60; - greater than; * &#x60;gteq&#x60; - greater than or equal to; * &#x60;lt&#x60; - lower than; * &#x60;lteq&#x60; - lower than or equal to; * &#x60;like&#x60;; * &#x60;notLike&#x60;.  &#x60;key&#x60; and &#x60;value&#x60; may not contain underscore or comma characters. (optional)</param>
        /// <param name="variableNamesIgnoreCase">Match the variable name provided in &#x60;taskVariables&#x60; and &#x60;processVariables&#x60; case- insensitively. If set to &#x60;true&#x60; **variableName** and **variablename** are treated as equal. (optional)</param>
        /// <param name="variableValuesIgnoreCase">Match the variable value provided in &#x60;taskVariables&#x60; and &#x60;processVariables&#x60; case- insensitively. If set to &#x60;true&#x60; **variableValue** and **variablevalue** are treated as equal. (optional)</param>
        /// <param name="taskInvolvedUser">Restrict to tasks with a historic identity link to the given user. (optional)</param>
        /// <param name="taskInvolvedGroup">Restrict to tasks with a historic identity link to the given group. (optional)</param>
        /// <param name="taskHadCandidateUser">Restrict to tasks with a historic identity link to the given candidate user. (optional)</param>
        /// <param name="taskHadCandidateGroup">Restrict to tasks with a historic identity link to the given candidate group. (optional)</param>
        /// <param name="withCandidateGroups">Only include tasks which have a candidate group. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="withoutCandidateGroups">Only include tasks which have no candidate group. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <returns>List&lt;HistoricTaskInstanceDto&gt;</returns>
        List<HistoricTaskInstanceDto> GetHistoricTaskInstances(string taskId = default(string), string taskParentTaskId = default(string), string processInstanceId = default(string), string processInstanceBusinessKey = default(string), string processInstanceBusinessKeyIn = default(string), string processInstanceBusinessKeyLike = default(string), string executionId = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string processDefinitionName = default(string), string caseInstanceId = default(string), string caseExecutionId = default(string), string caseDefinitionId = default(string), string caseDefinitionKey = default(string), string caseDefinitionName = default(string), string activityInstanceIdIn = default(string), string taskName = default(string), string taskNameLike = default(string), string taskDescription = default(string), string taskDescriptionLike = default(string), string taskDefinitionKey = default(string), string taskDefinitionKeyIn = default(string), string taskDeleteReason = default(string), string taskDeleteReasonLike = default(string), string taskAssignee = default(string), string taskAssigneeLike = default(string), string taskOwner = default(string), string taskOwnerLike = default(string), int? taskPriority = default(int?), bool? assigned = default(bool?), bool? unassigned = default(bool?), bool? finished = default(bool?), bool? unfinished = default(bool?), bool? processFinished = default(bool?), bool? processUnfinished = default(bool?), DateTime? taskDueDate = default(DateTime?), DateTime? taskDueDateBefore = default(DateTime?), DateTime? taskDueDateAfter = default(DateTime?), bool? withoutTaskDueDate = default(bool?), DateTime? taskFollowUpDate = default(DateTime?), DateTime? taskFollowUpDateBefore = default(DateTime?), DateTime? taskFollowUpDateAfter = default(DateTime?), DateTime? startedBefore = default(DateTime?), DateTime? startedAfter = default(DateTime?), DateTime? finishedBefore = default(DateTime?), DateTime? finishedAfter = default(DateTime?), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), string taskVariables = default(string), string processVariables = default(string), bool? variableNamesIgnoreCase = default(bool?), bool? variableValuesIgnoreCase = default(bool?), string taskInvolvedUser = default(string), string taskInvolvedGroup = default(string), string taskHadCandidateUser = default(string), string taskHadCandidateGroup = default(string), bool? withCandidateGroups = default(bool?), bool? withoutCandidateGroups = default(bool?), string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?));

        /// <summary>
        /// Get Tasks (Historic)
        /// </summary>
        /// <remarks>
        /// Queries for historic tasks that fulfill the given parameters. The size of the result set can be retrieved by using the [Get Task Count](https://docs.camunda.org/manual/7.16/reference/rest/history/task/get-task-query-count/) method.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Filter by task id. (optional)</param>
        /// <param name="taskParentTaskId">Filter by parent task id. (optional)</param>
        /// <param name="processInstanceId">Filter by process instance id. (optional)</param>
        /// <param name="processInstanceBusinessKey">Filter by process instance business key. (optional)</param>
        /// <param name="processInstanceBusinessKeyIn">Filter by process instances with one of the give business keys. The keys need to be in a comma-separated list. (optional)</param>
        /// <param name="processInstanceBusinessKeyLike">Filter by  process instance business key that has the parameter value as a substring. (optional)</param>
        /// <param name="executionId">Filter by the id of the execution that executed the task. (optional)</param>
        /// <param name="processDefinitionId">Filter by process definition id. (optional)</param>
        /// <param name="processDefinitionKey">Restrict to tasks that belong to a process definition with the given key. (optional)</param>
        /// <param name="processDefinitionName">Restrict to tasks that belong to a process definition with the given name. (optional)</param>
        /// <param name="caseInstanceId">Filter by case instance id. (optional)</param>
        /// <param name="caseExecutionId">Filter by the id of the case execution that executed the task. (optional)</param>
        /// <param name="caseDefinitionId">Filter by case definition id. (optional)</param>
        /// <param name="caseDefinitionKey">Restrict to tasks that belong to a case definition with the given key. (optional)</param>
        /// <param name="caseDefinitionName">Restrict to tasks that belong to a case definition with the given name. (optional)</param>
        /// <param name="activityInstanceIdIn">Only include tasks which belong to one of the passed comma-separated activity instance ids. (optional)</param>
        /// <param name="taskName">Restrict to tasks that have the given name. (optional)</param>
        /// <param name="taskNameLike">Restrict to tasks that have a name with the given parameter value as substring. (optional)</param>
        /// <param name="taskDescription">Restrict to tasks that have the given description. (optional)</param>
        /// <param name="taskDescriptionLike">Restrict to tasks that have a description that has the parameter value as a substring. (optional)</param>
        /// <param name="taskDefinitionKey">Restrict to tasks that have the given key. (optional)</param>
        /// <param name="taskDefinitionKeyIn">Restrict to tasks that have one of the passed comma-separated task definition keys. (optional)</param>
        /// <param name="taskDeleteReason">Restrict to tasks that have the given delete reason. (optional)</param>
        /// <param name="taskDeleteReasonLike">Restrict to tasks that have a delete reason that has the parameter value as a substring. (optional)</param>
        /// <param name="taskAssignee">Restrict to tasks that the given user is assigned to. (optional)</param>
        /// <param name="taskAssigneeLike">Restrict to tasks that are assigned to users with the parameter value as a substring. (optional)</param>
        /// <param name="taskOwner">Restrict to tasks that the given user owns. (optional)</param>
        /// <param name="taskOwnerLike">Restrict to tasks that are owned by users with the parameter value as a substring. (optional)</param>
        /// <param name="taskPriority">Restrict to tasks that have the given priority. (optional)</param>
        /// <param name="assigned">If set to &#x60;true&#x60;, restricts the query to all tasks that are assigned. (optional)</param>
        /// <param name="unassigned">If set to &#x60;true&#x60;, restricts the query to all tasks that are unassigned. (optional)</param>
        /// <param name="finished">Only include finished tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="unfinished">Only include unfinished tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="processFinished">Only include tasks of finished processes. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="processUnfinished">Only include tasks of unfinished processes. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="taskDueDate">Restrict to tasks that are due on the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="taskDueDateBefore">Restrict to tasks that are due before the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="taskDueDateAfter">Restrict to tasks that are due after the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="withoutTaskDueDate">Only include tasks which have no due date. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="taskFollowUpDate">Restrict to tasks that have a followUp date on the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="taskFollowUpDateBefore">Restrict to tasks that have a followUp date before the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="taskFollowUpDateAfter">Restrict to tasks that have a followUp date after the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="startedBefore">Restrict to tasks that were started before the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="startedAfter">Restrict to tasks that were started after the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="finishedBefore">Restrict to tasks that were finished before the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="finishedAfter">Restrict to tasks that were finished after the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. A task instance must have one of the given tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include historic task instances that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="taskVariables">Only include tasks that have variables with certain values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value. **Note:** Values are always treated as &#x60;String&#x60; objects on server side.   Valid operator values are: * &#x60;eq&#x60; - equal to; * &#x60;neq&#x60; - not equal to; * &#x60;gt&#x60; - greater than; * &#x60;gteq&#x60; - greater than or equal to; * &#x60;lt&#x60; - lower than; * &#x60;lteq&#x60; - lower than or equal to; * &#x60;like&#x60;.  &#x60;key&#x60; and &#x60;value&#x60; may not contain underscore or comma characters. (optional)</param>
        /// <param name="processVariables">Only include tasks that belong to process instances that have variables with certain values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value. **Note:** Values are always treated as &#x60;String&#x60; objects on server side.   Valid operator values are: * &#x60;eq&#x60; - equal to; * &#x60;neq&#x60; - not equal to; * &#x60;gt&#x60; - greater than; * &#x60;gteq&#x60; - greater than or equal to; * &#x60;lt&#x60; - lower than; * &#x60;lteq&#x60; - lower than or equal to; * &#x60;like&#x60;; * &#x60;notLike&#x60;.  &#x60;key&#x60; and &#x60;value&#x60; may not contain underscore or comma characters. (optional)</param>
        /// <param name="variableNamesIgnoreCase">Match the variable name provided in &#x60;taskVariables&#x60; and &#x60;processVariables&#x60; case- insensitively. If set to &#x60;true&#x60; **variableName** and **variablename** are treated as equal. (optional)</param>
        /// <param name="variableValuesIgnoreCase">Match the variable value provided in &#x60;taskVariables&#x60; and &#x60;processVariables&#x60; case- insensitively. If set to &#x60;true&#x60; **variableValue** and **variablevalue** are treated as equal. (optional)</param>
        /// <param name="taskInvolvedUser">Restrict to tasks with a historic identity link to the given user. (optional)</param>
        /// <param name="taskInvolvedGroup">Restrict to tasks with a historic identity link to the given group. (optional)</param>
        /// <param name="taskHadCandidateUser">Restrict to tasks with a historic identity link to the given candidate user. (optional)</param>
        /// <param name="taskHadCandidateGroup">Restrict to tasks with a historic identity link to the given candidate group. (optional)</param>
        /// <param name="withCandidateGroups">Only include tasks which have a candidate group. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="withoutCandidateGroups">Only include tasks which have no candidate group. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <returns>ApiResponse of List&lt;HistoricTaskInstanceDto&gt;</returns>
        ApiResponse<List<HistoricTaskInstanceDto>> GetHistoricTaskInstancesWithHttpInfo(string taskId = default(string), string taskParentTaskId = default(string), string processInstanceId = default(string), string processInstanceBusinessKey = default(string), string processInstanceBusinessKeyIn = default(string), string processInstanceBusinessKeyLike = default(string), string executionId = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string processDefinitionName = default(string), string caseInstanceId = default(string), string caseExecutionId = default(string), string caseDefinitionId = default(string), string caseDefinitionKey = default(string), string caseDefinitionName = default(string), string activityInstanceIdIn = default(string), string taskName = default(string), string taskNameLike = default(string), string taskDescription = default(string), string taskDescriptionLike = default(string), string taskDefinitionKey = default(string), string taskDefinitionKeyIn = default(string), string taskDeleteReason = default(string), string taskDeleteReasonLike = default(string), string taskAssignee = default(string), string taskAssigneeLike = default(string), string taskOwner = default(string), string taskOwnerLike = default(string), int? taskPriority = default(int?), bool? assigned = default(bool?), bool? unassigned = default(bool?), bool? finished = default(bool?), bool? unfinished = default(bool?), bool? processFinished = default(bool?), bool? processUnfinished = default(bool?), DateTime? taskDueDate = default(DateTime?), DateTime? taskDueDateBefore = default(DateTime?), DateTime? taskDueDateAfter = default(DateTime?), bool? withoutTaskDueDate = default(bool?), DateTime? taskFollowUpDate = default(DateTime?), DateTime? taskFollowUpDateBefore = default(DateTime?), DateTime? taskFollowUpDateAfter = default(DateTime?), DateTime? startedBefore = default(DateTime?), DateTime? startedAfter = default(DateTime?), DateTime? finishedBefore = default(DateTime?), DateTime? finishedAfter = default(DateTime?), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), string taskVariables = default(string), string processVariables = default(string), bool? variableNamesIgnoreCase = default(bool?), bool? variableValuesIgnoreCase = default(bool?), string taskInvolvedUser = default(string), string taskInvolvedGroup = default(string), string taskHadCandidateUser = default(string), string taskHadCandidateGroup = default(string), bool? withCandidateGroups = default(bool?), bool? withoutCandidateGroups = default(bool?), string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?));
        /// <summary>
        /// Get Task Count
        /// </summary>
        /// <remarks>
        /// Queries for the number of historic tasks that fulfill the given parameters. Takes the same parameters as the [Get Tasks (Historic)](https://docs.camunda.org/manual/7.16/reference/rest/history/task/get-task-query/) method.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Filter by task id. (optional)</param>
        /// <param name="taskParentTaskId">Filter by parent task id. (optional)</param>
        /// <param name="processInstanceId">Filter by process instance id. (optional)</param>
        /// <param name="processInstanceBusinessKey">Filter by process instance business key. (optional)</param>
        /// <param name="processInstanceBusinessKeyIn">Filter by process instances with one of the give business keys. The keys need to be in a comma-separated list. (optional)</param>
        /// <param name="processInstanceBusinessKeyLike">Filter by  process instance business key that has the parameter value as a substring. (optional)</param>
        /// <param name="executionId">Filter by the id of the execution that executed the task. (optional)</param>
        /// <param name="processDefinitionId">Filter by process definition id. (optional)</param>
        /// <param name="processDefinitionKey">Restrict to tasks that belong to a process definition with the given key. (optional)</param>
        /// <param name="processDefinitionName">Restrict to tasks that belong to a process definition with the given name. (optional)</param>
        /// <param name="caseInstanceId">Filter by case instance id. (optional)</param>
        /// <param name="caseExecutionId">Filter by the id of the case execution that executed the task. (optional)</param>
        /// <param name="caseDefinitionId">Filter by case definition id. (optional)</param>
        /// <param name="caseDefinitionKey">Restrict to tasks that belong to a case definition with the given key. (optional)</param>
        /// <param name="caseDefinitionName">Restrict to tasks that belong to a case definition with the given name. (optional)</param>
        /// <param name="activityInstanceIdIn">Only include tasks which belong to one of the passed comma-separated activity instance ids. (optional)</param>
        /// <param name="taskName">Restrict to tasks that have the given name. (optional)</param>
        /// <param name="taskNameLike">Restrict to tasks that have a name with the given parameter value as substring. (optional)</param>
        /// <param name="taskDescription">Restrict to tasks that have the given description. (optional)</param>
        /// <param name="taskDescriptionLike">Restrict to tasks that have a description that has the parameter value as a substring. (optional)</param>
        /// <param name="taskDefinitionKey">Restrict to tasks that have the given key. (optional)</param>
        /// <param name="taskDefinitionKeyIn">Restrict to tasks that have one of the passed comma-separated task definition keys. (optional)</param>
        /// <param name="taskDeleteReason">Restrict to tasks that have the given delete reason. (optional)</param>
        /// <param name="taskDeleteReasonLike">Restrict to tasks that have a delete reason that has the parameter value as a substring. (optional)</param>
        /// <param name="taskAssignee">Restrict to tasks that the given user is assigned to. (optional)</param>
        /// <param name="taskAssigneeLike">Restrict to tasks that are assigned to users with the parameter value as a substring. (optional)</param>
        /// <param name="taskOwner">Restrict to tasks that the given user owns. (optional)</param>
        /// <param name="taskOwnerLike">Restrict to tasks that are owned by users with the parameter value as a substring. (optional)</param>
        /// <param name="taskPriority">Restrict to tasks that have the given priority. (optional)</param>
        /// <param name="assigned">If set to &#x60;true&#x60;, restricts the query to all tasks that are assigned. (optional)</param>
        /// <param name="unassigned">If set to &#x60;true&#x60;, restricts the query to all tasks that are unassigned. (optional)</param>
        /// <param name="finished">Only include finished tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="unfinished">Only include unfinished tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="processFinished">Only include tasks of finished processes. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="processUnfinished">Only include tasks of unfinished processes. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="taskDueDate">Restrict to tasks that are due on the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="taskDueDateBefore">Restrict to tasks that are due before the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="taskDueDateAfter">Restrict to tasks that are due after the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="withoutTaskDueDate">Only include tasks which have no due date. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="taskFollowUpDate">Restrict to tasks that have a followUp date on the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="taskFollowUpDateBefore">Restrict to tasks that have a followUp date before the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="taskFollowUpDateAfter">Restrict to tasks that have a followUp date after the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="startedBefore">Restrict to tasks that were started before the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="startedAfter">Restrict to tasks that were started after the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="finishedBefore">Restrict to tasks that were finished before the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="finishedAfter">Restrict to tasks that were finished after the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. A task instance must have one of the given tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include historic task instances that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="taskVariables">Only include tasks that have variables with certain values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value. **Note:** Values are always treated as &#x60;String&#x60; objects on server side.   Valid operator values are: * &#x60;eq&#x60; - equal to; * &#x60;neq&#x60; - not equal to; * &#x60;gt&#x60; - greater than; * &#x60;gteq&#x60; - greater than or equal to; * &#x60;lt&#x60; - lower than; * &#x60;lteq&#x60; - lower than or equal to; * &#x60;like&#x60;.  &#x60;key&#x60; and &#x60;value&#x60; may not contain underscore or comma characters. (optional)</param>
        /// <param name="processVariables">Only include tasks that belong to process instances that have variables with certain values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value. **Note:** Values are always treated as &#x60;String&#x60; objects on server side.   Valid operator values are: * &#x60;eq&#x60; - equal to; * &#x60;neq&#x60; - not equal to; * &#x60;gt&#x60; - greater than; * &#x60;gteq&#x60; - greater than or equal to; * &#x60;lt&#x60; - lower than; * &#x60;lteq&#x60; - lower than or equal to; * &#x60;like&#x60;; * &#x60;notLike&#x60;.  &#x60;key&#x60; and &#x60;value&#x60; may not contain underscore or comma characters. (optional)</param>
        /// <param name="variableNamesIgnoreCase">Match the variable name provided in &#x60;taskVariables&#x60; and &#x60;processVariables&#x60; case- insensitively. If set to &#x60;true&#x60; **variableName** and **variablename** are treated as equal. (optional)</param>
        /// <param name="variableValuesIgnoreCase">Match the variable value provided in &#x60;taskVariables&#x60; and &#x60;processVariables&#x60; case- insensitively. If set to &#x60;true&#x60; **variableValue** and **variablevalue** are treated as equal. (optional)</param>
        /// <param name="taskInvolvedUser">Restrict to tasks with a historic identity link to the given user. (optional)</param>
        /// <param name="taskInvolvedGroup">Restrict to tasks with a historic identity link to the given group. (optional)</param>
        /// <param name="taskHadCandidateUser">Restrict to tasks with a historic identity link to the given candidate user. (optional)</param>
        /// <param name="taskHadCandidateGroup">Restrict to tasks with a historic identity link to the given candidate group. (optional)</param>
        /// <param name="withCandidateGroups">Only include tasks which have a candidate group. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="withoutCandidateGroups">Only include tasks which have no candidate group. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <returns>CountResultDto</returns>
        CountResultDto GetHistoricTaskInstancesCount(string taskId = default(string), string taskParentTaskId = default(string), string processInstanceId = default(string), string processInstanceBusinessKey = default(string), string processInstanceBusinessKeyIn = default(string), string processInstanceBusinessKeyLike = default(string), string executionId = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string processDefinitionName = default(string), string caseInstanceId = default(string), string caseExecutionId = default(string), string caseDefinitionId = default(string), string caseDefinitionKey = default(string), string caseDefinitionName = default(string), string activityInstanceIdIn = default(string), string taskName = default(string), string taskNameLike = default(string), string taskDescription = default(string), string taskDescriptionLike = default(string), string taskDefinitionKey = default(string), string taskDefinitionKeyIn = default(string), string taskDeleteReason = default(string), string taskDeleteReasonLike = default(string), string taskAssignee = default(string), string taskAssigneeLike = default(string), string taskOwner = default(string), string taskOwnerLike = default(string), int? taskPriority = default(int?), bool? assigned = default(bool?), bool? unassigned = default(bool?), bool? finished = default(bool?), bool? unfinished = default(bool?), bool? processFinished = default(bool?), bool? processUnfinished = default(bool?), DateTime? taskDueDate = default(DateTime?), DateTime? taskDueDateBefore = default(DateTime?), DateTime? taskDueDateAfter = default(DateTime?), bool? withoutTaskDueDate = default(bool?), DateTime? taskFollowUpDate = default(DateTime?), DateTime? taskFollowUpDateBefore = default(DateTime?), DateTime? taskFollowUpDateAfter = default(DateTime?), DateTime? startedBefore = default(DateTime?), DateTime? startedAfter = default(DateTime?), DateTime? finishedBefore = default(DateTime?), DateTime? finishedAfter = default(DateTime?), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), string taskVariables = default(string), string processVariables = default(string), bool? variableNamesIgnoreCase = default(bool?), bool? variableValuesIgnoreCase = default(bool?), string taskInvolvedUser = default(string), string taskInvolvedGroup = default(string), string taskHadCandidateUser = default(string), string taskHadCandidateGroup = default(string), bool? withCandidateGroups = default(bool?), bool? withoutCandidateGroups = default(bool?));

        /// <summary>
        /// Get Task Count
        /// </summary>
        /// <remarks>
        /// Queries for the number of historic tasks that fulfill the given parameters. Takes the same parameters as the [Get Tasks (Historic)](https://docs.camunda.org/manual/7.16/reference/rest/history/task/get-task-query/) method.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Filter by task id. (optional)</param>
        /// <param name="taskParentTaskId">Filter by parent task id. (optional)</param>
        /// <param name="processInstanceId">Filter by process instance id. (optional)</param>
        /// <param name="processInstanceBusinessKey">Filter by process instance business key. (optional)</param>
        /// <param name="processInstanceBusinessKeyIn">Filter by process instances with one of the give business keys. The keys need to be in a comma-separated list. (optional)</param>
        /// <param name="processInstanceBusinessKeyLike">Filter by  process instance business key that has the parameter value as a substring. (optional)</param>
        /// <param name="executionId">Filter by the id of the execution that executed the task. (optional)</param>
        /// <param name="processDefinitionId">Filter by process definition id. (optional)</param>
        /// <param name="processDefinitionKey">Restrict to tasks that belong to a process definition with the given key. (optional)</param>
        /// <param name="processDefinitionName">Restrict to tasks that belong to a process definition with the given name. (optional)</param>
        /// <param name="caseInstanceId">Filter by case instance id. (optional)</param>
        /// <param name="caseExecutionId">Filter by the id of the case execution that executed the task. (optional)</param>
        /// <param name="caseDefinitionId">Filter by case definition id. (optional)</param>
        /// <param name="caseDefinitionKey">Restrict to tasks that belong to a case definition with the given key. (optional)</param>
        /// <param name="caseDefinitionName">Restrict to tasks that belong to a case definition with the given name. (optional)</param>
        /// <param name="activityInstanceIdIn">Only include tasks which belong to one of the passed comma-separated activity instance ids. (optional)</param>
        /// <param name="taskName">Restrict to tasks that have the given name. (optional)</param>
        /// <param name="taskNameLike">Restrict to tasks that have a name with the given parameter value as substring. (optional)</param>
        /// <param name="taskDescription">Restrict to tasks that have the given description. (optional)</param>
        /// <param name="taskDescriptionLike">Restrict to tasks that have a description that has the parameter value as a substring. (optional)</param>
        /// <param name="taskDefinitionKey">Restrict to tasks that have the given key. (optional)</param>
        /// <param name="taskDefinitionKeyIn">Restrict to tasks that have one of the passed comma-separated task definition keys. (optional)</param>
        /// <param name="taskDeleteReason">Restrict to tasks that have the given delete reason. (optional)</param>
        /// <param name="taskDeleteReasonLike">Restrict to tasks that have a delete reason that has the parameter value as a substring. (optional)</param>
        /// <param name="taskAssignee">Restrict to tasks that the given user is assigned to. (optional)</param>
        /// <param name="taskAssigneeLike">Restrict to tasks that are assigned to users with the parameter value as a substring. (optional)</param>
        /// <param name="taskOwner">Restrict to tasks that the given user owns. (optional)</param>
        /// <param name="taskOwnerLike">Restrict to tasks that are owned by users with the parameter value as a substring. (optional)</param>
        /// <param name="taskPriority">Restrict to tasks that have the given priority. (optional)</param>
        /// <param name="assigned">If set to &#x60;true&#x60;, restricts the query to all tasks that are assigned. (optional)</param>
        /// <param name="unassigned">If set to &#x60;true&#x60;, restricts the query to all tasks that are unassigned. (optional)</param>
        /// <param name="finished">Only include finished tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="unfinished">Only include unfinished tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="processFinished">Only include tasks of finished processes. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="processUnfinished">Only include tasks of unfinished processes. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="taskDueDate">Restrict to tasks that are due on the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="taskDueDateBefore">Restrict to tasks that are due before the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="taskDueDateAfter">Restrict to tasks that are due after the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="withoutTaskDueDate">Only include tasks which have no due date. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="taskFollowUpDate">Restrict to tasks that have a followUp date on the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="taskFollowUpDateBefore">Restrict to tasks that have a followUp date before the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="taskFollowUpDateAfter">Restrict to tasks that have a followUp date after the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="startedBefore">Restrict to tasks that were started before the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="startedAfter">Restrict to tasks that were started after the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="finishedBefore">Restrict to tasks that were finished before the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="finishedAfter">Restrict to tasks that were finished after the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. A task instance must have one of the given tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include historic task instances that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="taskVariables">Only include tasks that have variables with certain values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value. **Note:** Values are always treated as &#x60;String&#x60; objects on server side.   Valid operator values are: * &#x60;eq&#x60; - equal to; * &#x60;neq&#x60; - not equal to; * &#x60;gt&#x60; - greater than; * &#x60;gteq&#x60; - greater than or equal to; * &#x60;lt&#x60; - lower than; * &#x60;lteq&#x60; - lower than or equal to; * &#x60;like&#x60;.  &#x60;key&#x60; and &#x60;value&#x60; may not contain underscore or comma characters. (optional)</param>
        /// <param name="processVariables">Only include tasks that belong to process instances that have variables with certain values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value. **Note:** Values are always treated as &#x60;String&#x60; objects on server side.   Valid operator values are: * &#x60;eq&#x60; - equal to; * &#x60;neq&#x60; - not equal to; * &#x60;gt&#x60; - greater than; * &#x60;gteq&#x60; - greater than or equal to; * &#x60;lt&#x60; - lower than; * &#x60;lteq&#x60; - lower than or equal to; * &#x60;like&#x60;; * &#x60;notLike&#x60;.  &#x60;key&#x60; and &#x60;value&#x60; may not contain underscore or comma characters. (optional)</param>
        /// <param name="variableNamesIgnoreCase">Match the variable name provided in &#x60;taskVariables&#x60; and &#x60;processVariables&#x60; case- insensitively. If set to &#x60;true&#x60; **variableName** and **variablename** are treated as equal. (optional)</param>
        /// <param name="variableValuesIgnoreCase">Match the variable value provided in &#x60;taskVariables&#x60; and &#x60;processVariables&#x60; case- insensitively. If set to &#x60;true&#x60; **variableValue** and **variablevalue** are treated as equal. (optional)</param>
        /// <param name="taskInvolvedUser">Restrict to tasks with a historic identity link to the given user. (optional)</param>
        /// <param name="taskInvolvedGroup">Restrict to tasks with a historic identity link to the given group. (optional)</param>
        /// <param name="taskHadCandidateUser">Restrict to tasks with a historic identity link to the given candidate user. (optional)</param>
        /// <param name="taskHadCandidateGroup">Restrict to tasks with a historic identity link to the given candidate group. (optional)</param>
        /// <param name="withCandidateGroups">Only include tasks which have a candidate group. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="withoutCandidateGroups">Only include tasks which have no candidate group. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <returns>ApiResponse of CountResultDto</returns>
        ApiResponse<CountResultDto> GetHistoricTaskInstancesCountWithHttpInfo(string taskId = default(string), string taskParentTaskId = default(string), string processInstanceId = default(string), string processInstanceBusinessKey = default(string), string processInstanceBusinessKeyIn = default(string), string processInstanceBusinessKeyLike = default(string), string executionId = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string processDefinitionName = default(string), string caseInstanceId = default(string), string caseExecutionId = default(string), string caseDefinitionId = default(string), string caseDefinitionKey = default(string), string caseDefinitionName = default(string), string activityInstanceIdIn = default(string), string taskName = default(string), string taskNameLike = default(string), string taskDescription = default(string), string taskDescriptionLike = default(string), string taskDefinitionKey = default(string), string taskDefinitionKeyIn = default(string), string taskDeleteReason = default(string), string taskDeleteReasonLike = default(string), string taskAssignee = default(string), string taskAssigneeLike = default(string), string taskOwner = default(string), string taskOwnerLike = default(string), int? taskPriority = default(int?), bool? assigned = default(bool?), bool? unassigned = default(bool?), bool? finished = default(bool?), bool? unfinished = default(bool?), bool? processFinished = default(bool?), bool? processUnfinished = default(bool?), DateTime? taskDueDate = default(DateTime?), DateTime? taskDueDateBefore = default(DateTime?), DateTime? taskDueDateAfter = default(DateTime?), bool? withoutTaskDueDate = default(bool?), DateTime? taskFollowUpDate = default(DateTime?), DateTime? taskFollowUpDateBefore = default(DateTime?), DateTime? taskFollowUpDateAfter = default(DateTime?), DateTime? startedBefore = default(DateTime?), DateTime? startedAfter = default(DateTime?), DateTime? finishedBefore = default(DateTime?), DateTime? finishedAfter = default(DateTime?), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), string taskVariables = default(string), string processVariables = default(string), bool? variableNamesIgnoreCase = default(bool?), bool? variableValuesIgnoreCase = default(bool?), string taskInvolvedUser = default(string), string taskInvolvedGroup = default(string), string taskHadCandidateUser = default(string), string taskHadCandidateGroup = default(string), bool? withCandidateGroups = default(bool?), bool? withoutCandidateGroups = default(bool?));
        /// <summary>
        /// Get Tasks (Historic) (POST)
        /// </summary>
        /// <remarks>
        /// Queries for historic tasks that fulfill the given parameters. This method is slightly more powerful than the [Get Tasks (Historic)](https://docs.camunda.org/manual/7.16/reference/rest/history/task/get-task-query/) method because it allows filtering by multiple process or task variables of types &#x60;String&#x60;, &#x60;Number&#x60; or &#x60;Boolean&#x60;. The size of the result set can be retrieved by using the [Get Task Count (POST)](https://docs.camunda.org/manual/7.16/reference/rest/history/task/post-task-query-count/) method.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="historicTaskInstanceQueryDto"> (optional)</param>
        /// <returns>List&lt;HistoricTaskInstanceDto&gt;</returns>
        List<HistoricTaskInstanceDto> QueryHistoricTaskInstances(int? firstResult = default(int?), int? maxResults = default(int?), HistoricTaskInstanceQueryDto historicTaskInstanceQueryDto = default(HistoricTaskInstanceQueryDto));

        /// <summary>
        /// Get Tasks (Historic) (POST)
        /// </summary>
        /// <remarks>
        /// Queries for historic tasks that fulfill the given parameters. This method is slightly more powerful than the [Get Tasks (Historic)](https://docs.camunda.org/manual/7.16/reference/rest/history/task/get-task-query/) method because it allows filtering by multiple process or task variables of types &#x60;String&#x60;, &#x60;Number&#x60; or &#x60;Boolean&#x60;. The size of the result set can be retrieved by using the [Get Task Count (POST)](https://docs.camunda.org/manual/7.16/reference/rest/history/task/post-task-query-count/) method.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="historicTaskInstanceQueryDto"> (optional)</param>
        /// <returns>ApiResponse of List&lt;HistoricTaskInstanceDto&gt;</returns>
        ApiResponse<List<HistoricTaskInstanceDto>> QueryHistoricTaskInstancesWithHttpInfo(int? firstResult = default(int?), int? maxResults = default(int?), HistoricTaskInstanceQueryDto historicTaskInstanceQueryDto = default(HistoricTaskInstanceQueryDto));
        /// <summary>
        /// Get Task Count (POST)
        /// </summary>
        /// <remarks>
        /// Queries for the number of historic tasks that fulfill the given parameters. Takes the same parameters as the [Get Tasks (Historic)](https://docs.camunda.org/manual/7.16/reference/rest/history/task/get-task-query/) method. Corresponds to the size of the result set of the [Get Tasks (Historic) (POST)](https://docs.camunda.org/manual/7.16/reference/rest/history/task/post-task-query/) method and takes the same parameters.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="historicTaskInstanceQueryDto"> (optional)</param>
        /// <returns>CountResultDto</returns>
        CountResultDto QueryHistoricTaskInstancesCount(HistoricTaskInstanceQueryDto historicTaskInstanceQueryDto = default(HistoricTaskInstanceQueryDto));

        /// <summary>
        /// Get Task Count (POST)
        /// </summary>
        /// <remarks>
        /// Queries for the number of historic tasks that fulfill the given parameters. Takes the same parameters as the [Get Tasks (Historic)](https://docs.camunda.org/manual/7.16/reference/rest/history/task/get-task-query/) method. Corresponds to the size of the result set of the [Get Tasks (Historic) (POST)](https://docs.camunda.org/manual/7.16/reference/rest/history/task/post-task-query/) method and takes the same parameters.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="historicTaskInstanceQueryDto"> (optional)</param>
        /// <returns>ApiResponse of CountResultDto</returns>
        ApiResponse<CountResultDto> QueryHistoricTaskInstancesCountWithHttpInfo(HistoricTaskInstanceQueryDto historicTaskInstanceQueryDto = default(HistoricTaskInstanceQueryDto));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IHistoricTaskInstanceApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get Task Report (Historic)
        /// </summary>
        /// <remarks>
        /// Retrieves a report of completed tasks. When the report type is set to &#x60;count&#x60;, the report contains a list of completed task counts where an entry contains the task name, the definition key of the task, the process definition id, the process definition key, the process definition name and the count of how many tasks were completed for the specified key in a given period. When the report type is set to &#x60;duration&#x60;, the report contains a minimum, maximum and average duration value of all completed task instances in a given period.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportType">**Mandatory.** Specifies the kind of the report to execute. To retrieve a report about the duration of process instances the value must be set to &#x60;duration&#x60;. For a report of the completed tasks in a specific timespan the value must be set to &#x60;count&#x60;. (optional)</param>
        /// <param name="periodUnit">When the report type is set to &#x60;duration&#x60;, this parameter is **mandatory**. Specifies the granularity of the report. Valid values are &#x60;month&#x60; and &#x60;quarter&#x60;. (optional)</param>
        /// <param name="completedBefore">Restrict to tasks that were completed before the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="completedAfter">Restrict to tasks that were completed after the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="groupBy">When the report type is set to &#x60;count&#x60;, this parameter is **mandatory**. Groups the tasks report by a given criterion. Valid values are &#x60;taskName&#x60; and &#x60;processDefinition&#x60;. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;HistoricTaskInstanceReportResultDto&gt;</returns>
        System.Threading.Tasks.Task<List<HistoricTaskInstanceReportResultDto>> GetHistoricTaskInstanceReportAsync(string reportType = default(string), string periodUnit = default(string), DateTime? completedBefore = default(DateTime?), DateTime? completedAfter = default(DateTime?), string groupBy = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Task Report (Historic)
        /// </summary>
        /// <remarks>
        /// Retrieves a report of completed tasks. When the report type is set to &#x60;count&#x60;, the report contains a list of completed task counts where an entry contains the task name, the definition key of the task, the process definition id, the process definition key, the process definition name and the count of how many tasks were completed for the specified key in a given period. When the report type is set to &#x60;duration&#x60;, the report contains a minimum, maximum and average duration value of all completed task instances in a given period.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportType">**Mandatory.** Specifies the kind of the report to execute. To retrieve a report about the duration of process instances the value must be set to &#x60;duration&#x60;. For a report of the completed tasks in a specific timespan the value must be set to &#x60;count&#x60;. (optional)</param>
        /// <param name="periodUnit">When the report type is set to &#x60;duration&#x60;, this parameter is **mandatory**. Specifies the granularity of the report. Valid values are &#x60;month&#x60; and &#x60;quarter&#x60;. (optional)</param>
        /// <param name="completedBefore">Restrict to tasks that were completed before the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="completedAfter">Restrict to tasks that were completed after the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="groupBy">When the report type is set to &#x60;count&#x60;, this parameter is **mandatory**. Groups the tasks report by a given criterion. Valid values are &#x60;taskName&#x60; and &#x60;processDefinition&#x60;. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;HistoricTaskInstanceReportResultDto&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<HistoricTaskInstanceReportResultDto>>> GetHistoricTaskInstanceReportWithHttpInfoAsync(string reportType = default(string), string periodUnit = default(string), DateTime? completedBefore = default(DateTime?), DateTime? completedAfter = default(DateTime?), string groupBy = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Tasks (Historic)
        /// </summary>
        /// <remarks>
        /// Queries for historic tasks that fulfill the given parameters. The size of the result set can be retrieved by using the [Get Task Count](https://docs.camunda.org/manual/7.16/reference/rest/history/task/get-task-query-count/) method.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Filter by task id. (optional)</param>
        /// <param name="taskParentTaskId">Filter by parent task id. (optional)</param>
        /// <param name="processInstanceId">Filter by process instance id. (optional)</param>
        /// <param name="processInstanceBusinessKey">Filter by process instance business key. (optional)</param>
        /// <param name="processInstanceBusinessKeyIn">Filter by process instances with one of the give business keys. The keys need to be in a comma-separated list. (optional)</param>
        /// <param name="processInstanceBusinessKeyLike">Filter by  process instance business key that has the parameter value as a substring. (optional)</param>
        /// <param name="executionId">Filter by the id of the execution that executed the task. (optional)</param>
        /// <param name="processDefinitionId">Filter by process definition id. (optional)</param>
        /// <param name="processDefinitionKey">Restrict to tasks that belong to a process definition with the given key. (optional)</param>
        /// <param name="processDefinitionName">Restrict to tasks that belong to a process definition with the given name. (optional)</param>
        /// <param name="caseInstanceId">Filter by case instance id. (optional)</param>
        /// <param name="caseExecutionId">Filter by the id of the case execution that executed the task. (optional)</param>
        /// <param name="caseDefinitionId">Filter by case definition id. (optional)</param>
        /// <param name="caseDefinitionKey">Restrict to tasks that belong to a case definition with the given key. (optional)</param>
        /// <param name="caseDefinitionName">Restrict to tasks that belong to a case definition with the given name. (optional)</param>
        /// <param name="activityInstanceIdIn">Only include tasks which belong to one of the passed comma-separated activity instance ids. (optional)</param>
        /// <param name="taskName">Restrict to tasks that have the given name. (optional)</param>
        /// <param name="taskNameLike">Restrict to tasks that have a name with the given parameter value as substring. (optional)</param>
        /// <param name="taskDescription">Restrict to tasks that have the given description. (optional)</param>
        /// <param name="taskDescriptionLike">Restrict to tasks that have a description that has the parameter value as a substring. (optional)</param>
        /// <param name="taskDefinitionKey">Restrict to tasks that have the given key. (optional)</param>
        /// <param name="taskDefinitionKeyIn">Restrict to tasks that have one of the passed comma-separated task definition keys. (optional)</param>
        /// <param name="taskDeleteReason">Restrict to tasks that have the given delete reason. (optional)</param>
        /// <param name="taskDeleteReasonLike">Restrict to tasks that have a delete reason that has the parameter value as a substring. (optional)</param>
        /// <param name="taskAssignee">Restrict to tasks that the given user is assigned to. (optional)</param>
        /// <param name="taskAssigneeLike">Restrict to tasks that are assigned to users with the parameter value as a substring. (optional)</param>
        /// <param name="taskOwner">Restrict to tasks that the given user owns. (optional)</param>
        /// <param name="taskOwnerLike">Restrict to tasks that are owned by users with the parameter value as a substring. (optional)</param>
        /// <param name="taskPriority">Restrict to tasks that have the given priority. (optional)</param>
        /// <param name="assigned">If set to &#x60;true&#x60;, restricts the query to all tasks that are assigned. (optional)</param>
        /// <param name="unassigned">If set to &#x60;true&#x60;, restricts the query to all tasks that are unassigned. (optional)</param>
        /// <param name="finished">Only include finished tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="unfinished">Only include unfinished tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="processFinished">Only include tasks of finished processes. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="processUnfinished">Only include tasks of unfinished processes. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="taskDueDate">Restrict to tasks that are due on the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="taskDueDateBefore">Restrict to tasks that are due before the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="taskDueDateAfter">Restrict to tasks that are due after the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="withoutTaskDueDate">Only include tasks which have no due date. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="taskFollowUpDate">Restrict to tasks that have a followUp date on the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="taskFollowUpDateBefore">Restrict to tasks that have a followUp date before the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="taskFollowUpDateAfter">Restrict to tasks that have a followUp date after the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="startedBefore">Restrict to tasks that were started before the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="startedAfter">Restrict to tasks that were started after the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="finishedBefore">Restrict to tasks that were finished before the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="finishedAfter">Restrict to tasks that were finished after the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. A task instance must have one of the given tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include historic task instances that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="taskVariables">Only include tasks that have variables with certain values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value. **Note:** Values are always treated as &#x60;String&#x60; objects on server side.   Valid operator values are: * &#x60;eq&#x60; - equal to; * &#x60;neq&#x60; - not equal to; * &#x60;gt&#x60; - greater than; * &#x60;gteq&#x60; - greater than or equal to; * &#x60;lt&#x60; - lower than; * &#x60;lteq&#x60; - lower than or equal to; * &#x60;like&#x60;.  &#x60;key&#x60; and &#x60;value&#x60; may not contain underscore or comma characters. (optional)</param>
        /// <param name="processVariables">Only include tasks that belong to process instances that have variables with certain values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value. **Note:** Values are always treated as &#x60;String&#x60; objects on server side.   Valid operator values are: * &#x60;eq&#x60; - equal to; * &#x60;neq&#x60; - not equal to; * &#x60;gt&#x60; - greater than; * &#x60;gteq&#x60; - greater than or equal to; * &#x60;lt&#x60; - lower than; * &#x60;lteq&#x60; - lower than or equal to; * &#x60;like&#x60;; * &#x60;notLike&#x60;.  &#x60;key&#x60; and &#x60;value&#x60; may not contain underscore or comma characters. (optional)</param>
        /// <param name="variableNamesIgnoreCase">Match the variable name provided in &#x60;taskVariables&#x60; and &#x60;processVariables&#x60; case- insensitively. If set to &#x60;true&#x60; **variableName** and **variablename** are treated as equal. (optional)</param>
        /// <param name="variableValuesIgnoreCase">Match the variable value provided in &#x60;taskVariables&#x60; and &#x60;processVariables&#x60; case- insensitively. If set to &#x60;true&#x60; **variableValue** and **variablevalue** are treated as equal. (optional)</param>
        /// <param name="taskInvolvedUser">Restrict to tasks with a historic identity link to the given user. (optional)</param>
        /// <param name="taskInvolvedGroup">Restrict to tasks with a historic identity link to the given group. (optional)</param>
        /// <param name="taskHadCandidateUser">Restrict to tasks with a historic identity link to the given candidate user. (optional)</param>
        /// <param name="taskHadCandidateGroup">Restrict to tasks with a historic identity link to the given candidate group. (optional)</param>
        /// <param name="withCandidateGroups">Only include tasks which have a candidate group. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="withoutCandidateGroups">Only include tasks which have no candidate group. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;HistoricTaskInstanceDto&gt;</returns>
        System.Threading.Tasks.Task<List<HistoricTaskInstanceDto>> GetHistoricTaskInstancesAsync(string taskId = default(string), string taskParentTaskId = default(string), string processInstanceId = default(string), string processInstanceBusinessKey = default(string), string processInstanceBusinessKeyIn = default(string), string processInstanceBusinessKeyLike = default(string), string executionId = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string processDefinitionName = default(string), string caseInstanceId = default(string), string caseExecutionId = default(string), string caseDefinitionId = default(string), string caseDefinitionKey = default(string), string caseDefinitionName = default(string), string activityInstanceIdIn = default(string), string taskName = default(string), string taskNameLike = default(string), string taskDescription = default(string), string taskDescriptionLike = default(string), string taskDefinitionKey = default(string), string taskDefinitionKeyIn = default(string), string taskDeleteReason = default(string), string taskDeleteReasonLike = default(string), string taskAssignee = default(string), string taskAssigneeLike = default(string), string taskOwner = default(string), string taskOwnerLike = default(string), int? taskPriority = default(int?), bool? assigned = default(bool?), bool? unassigned = default(bool?), bool? finished = default(bool?), bool? unfinished = default(bool?), bool? processFinished = default(bool?), bool? processUnfinished = default(bool?), DateTime? taskDueDate = default(DateTime?), DateTime? taskDueDateBefore = default(DateTime?), DateTime? taskDueDateAfter = default(DateTime?), bool? withoutTaskDueDate = default(bool?), DateTime? taskFollowUpDate = default(DateTime?), DateTime? taskFollowUpDateBefore = default(DateTime?), DateTime? taskFollowUpDateAfter = default(DateTime?), DateTime? startedBefore = default(DateTime?), DateTime? startedAfter = default(DateTime?), DateTime? finishedBefore = default(DateTime?), DateTime? finishedAfter = default(DateTime?), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), string taskVariables = default(string), string processVariables = default(string), bool? variableNamesIgnoreCase = default(bool?), bool? variableValuesIgnoreCase = default(bool?), string taskInvolvedUser = default(string), string taskInvolvedGroup = default(string), string taskHadCandidateUser = default(string), string taskHadCandidateGroup = default(string), bool? withCandidateGroups = default(bool?), bool? withoutCandidateGroups = default(bool?), string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Tasks (Historic)
        /// </summary>
        /// <remarks>
        /// Queries for historic tasks that fulfill the given parameters. The size of the result set can be retrieved by using the [Get Task Count](https://docs.camunda.org/manual/7.16/reference/rest/history/task/get-task-query-count/) method.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Filter by task id. (optional)</param>
        /// <param name="taskParentTaskId">Filter by parent task id. (optional)</param>
        /// <param name="processInstanceId">Filter by process instance id. (optional)</param>
        /// <param name="processInstanceBusinessKey">Filter by process instance business key. (optional)</param>
        /// <param name="processInstanceBusinessKeyIn">Filter by process instances with one of the give business keys. The keys need to be in a comma-separated list. (optional)</param>
        /// <param name="processInstanceBusinessKeyLike">Filter by  process instance business key that has the parameter value as a substring. (optional)</param>
        /// <param name="executionId">Filter by the id of the execution that executed the task. (optional)</param>
        /// <param name="processDefinitionId">Filter by process definition id. (optional)</param>
        /// <param name="processDefinitionKey">Restrict to tasks that belong to a process definition with the given key. (optional)</param>
        /// <param name="processDefinitionName">Restrict to tasks that belong to a process definition with the given name. (optional)</param>
        /// <param name="caseInstanceId">Filter by case instance id. (optional)</param>
        /// <param name="caseExecutionId">Filter by the id of the case execution that executed the task. (optional)</param>
        /// <param name="caseDefinitionId">Filter by case definition id. (optional)</param>
        /// <param name="caseDefinitionKey">Restrict to tasks that belong to a case definition with the given key. (optional)</param>
        /// <param name="caseDefinitionName">Restrict to tasks that belong to a case definition with the given name. (optional)</param>
        /// <param name="activityInstanceIdIn">Only include tasks which belong to one of the passed comma-separated activity instance ids. (optional)</param>
        /// <param name="taskName">Restrict to tasks that have the given name. (optional)</param>
        /// <param name="taskNameLike">Restrict to tasks that have a name with the given parameter value as substring. (optional)</param>
        /// <param name="taskDescription">Restrict to tasks that have the given description. (optional)</param>
        /// <param name="taskDescriptionLike">Restrict to tasks that have a description that has the parameter value as a substring. (optional)</param>
        /// <param name="taskDefinitionKey">Restrict to tasks that have the given key. (optional)</param>
        /// <param name="taskDefinitionKeyIn">Restrict to tasks that have one of the passed comma-separated task definition keys. (optional)</param>
        /// <param name="taskDeleteReason">Restrict to tasks that have the given delete reason. (optional)</param>
        /// <param name="taskDeleteReasonLike">Restrict to tasks that have a delete reason that has the parameter value as a substring. (optional)</param>
        /// <param name="taskAssignee">Restrict to tasks that the given user is assigned to. (optional)</param>
        /// <param name="taskAssigneeLike">Restrict to tasks that are assigned to users with the parameter value as a substring. (optional)</param>
        /// <param name="taskOwner">Restrict to tasks that the given user owns. (optional)</param>
        /// <param name="taskOwnerLike">Restrict to tasks that are owned by users with the parameter value as a substring. (optional)</param>
        /// <param name="taskPriority">Restrict to tasks that have the given priority. (optional)</param>
        /// <param name="assigned">If set to &#x60;true&#x60;, restricts the query to all tasks that are assigned. (optional)</param>
        /// <param name="unassigned">If set to &#x60;true&#x60;, restricts the query to all tasks that are unassigned. (optional)</param>
        /// <param name="finished">Only include finished tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="unfinished">Only include unfinished tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="processFinished">Only include tasks of finished processes. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="processUnfinished">Only include tasks of unfinished processes. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="taskDueDate">Restrict to tasks that are due on the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="taskDueDateBefore">Restrict to tasks that are due before the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="taskDueDateAfter">Restrict to tasks that are due after the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="withoutTaskDueDate">Only include tasks which have no due date. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="taskFollowUpDate">Restrict to tasks that have a followUp date on the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="taskFollowUpDateBefore">Restrict to tasks that have a followUp date before the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="taskFollowUpDateAfter">Restrict to tasks that have a followUp date after the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="startedBefore">Restrict to tasks that were started before the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="startedAfter">Restrict to tasks that were started after the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="finishedBefore">Restrict to tasks that were finished before the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="finishedAfter">Restrict to tasks that were finished after the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. A task instance must have one of the given tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include historic task instances that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="taskVariables">Only include tasks that have variables with certain values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value. **Note:** Values are always treated as &#x60;String&#x60; objects on server side.   Valid operator values are: * &#x60;eq&#x60; - equal to; * &#x60;neq&#x60; - not equal to; * &#x60;gt&#x60; - greater than; * &#x60;gteq&#x60; - greater than or equal to; * &#x60;lt&#x60; - lower than; * &#x60;lteq&#x60; - lower than or equal to; * &#x60;like&#x60;.  &#x60;key&#x60; and &#x60;value&#x60; may not contain underscore or comma characters. (optional)</param>
        /// <param name="processVariables">Only include tasks that belong to process instances that have variables with certain values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value. **Note:** Values are always treated as &#x60;String&#x60; objects on server side.   Valid operator values are: * &#x60;eq&#x60; - equal to; * &#x60;neq&#x60; - not equal to; * &#x60;gt&#x60; - greater than; * &#x60;gteq&#x60; - greater than or equal to; * &#x60;lt&#x60; - lower than; * &#x60;lteq&#x60; - lower than or equal to; * &#x60;like&#x60;; * &#x60;notLike&#x60;.  &#x60;key&#x60; and &#x60;value&#x60; may not contain underscore or comma characters. (optional)</param>
        /// <param name="variableNamesIgnoreCase">Match the variable name provided in &#x60;taskVariables&#x60; and &#x60;processVariables&#x60; case- insensitively. If set to &#x60;true&#x60; **variableName** and **variablename** are treated as equal. (optional)</param>
        /// <param name="variableValuesIgnoreCase">Match the variable value provided in &#x60;taskVariables&#x60; and &#x60;processVariables&#x60; case- insensitively. If set to &#x60;true&#x60; **variableValue** and **variablevalue** are treated as equal. (optional)</param>
        /// <param name="taskInvolvedUser">Restrict to tasks with a historic identity link to the given user. (optional)</param>
        /// <param name="taskInvolvedGroup">Restrict to tasks with a historic identity link to the given group. (optional)</param>
        /// <param name="taskHadCandidateUser">Restrict to tasks with a historic identity link to the given candidate user. (optional)</param>
        /// <param name="taskHadCandidateGroup">Restrict to tasks with a historic identity link to the given candidate group. (optional)</param>
        /// <param name="withCandidateGroups">Only include tasks which have a candidate group. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="withoutCandidateGroups">Only include tasks which have no candidate group. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;HistoricTaskInstanceDto&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<HistoricTaskInstanceDto>>> GetHistoricTaskInstancesWithHttpInfoAsync(string taskId = default(string), string taskParentTaskId = default(string), string processInstanceId = default(string), string processInstanceBusinessKey = default(string), string processInstanceBusinessKeyIn = default(string), string processInstanceBusinessKeyLike = default(string), string executionId = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string processDefinitionName = default(string), string caseInstanceId = default(string), string caseExecutionId = default(string), string caseDefinitionId = default(string), string caseDefinitionKey = default(string), string caseDefinitionName = default(string), string activityInstanceIdIn = default(string), string taskName = default(string), string taskNameLike = default(string), string taskDescription = default(string), string taskDescriptionLike = default(string), string taskDefinitionKey = default(string), string taskDefinitionKeyIn = default(string), string taskDeleteReason = default(string), string taskDeleteReasonLike = default(string), string taskAssignee = default(string), string taskAssigneeLike = default(string), string taskOwner = default(string), string taskOwnerLike = default(string), int? taskPriority = default(int?), bool? assigned = default(bool?), bool? unassigned = default(bool?), bool? finished = default(bool?), bool? unfinished = default(bool?), bool? processFinished = default(bool?), bool? processUnfinished = default(bool?), DateTime? taskDueDate = default(DateTime?), DateTime? taskDueDateBefore = default(DateTime?), DateTime? taskDueDateAfter = default(DateTime?), bool? withoutTaskDueDate = default(bool?), DateTime? taskFollowUpDate = default(DateTime?), DateTime? taskFollowUpDateBefore = default(DateTime?), DateTime? taskFollowUpDateAfter = default(DateTime?), DateTime? startedBefore = default(DateTime?), DateTime? startedAfter = default(DateTime?), DateTime? finishedBefore = default(DateTime?), DateTime? finishedAfter = default(DateTime?), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), string taskVariables = default(string), string processVariables = default(string), bool? variableNamesIgnoreCase = default(bool?), bool? variableValuesIgnoreCase = default(bool?), string taskInvolvedUser = default(string), string taskInvolvedGroup = default(string), string taskHadCandidateUser = default(string), string taskHadCandidateGroup = default(string), bool? withCandidateGroups = default(bool?), bool? withoutCandidateGroups = default(bool?), string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Task Count
        /// </summary>
        /// <remarks>
        /// Queries for the number of historic tasks that fulfill the given parameters. Takes the same parameters as the [Get Tasks (Historic)](https://docs.camunda.org/manual/7.16/reference/rest/history/task/get-task-query/) method.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Filter by task id. (optional)</param>
        /// <param name="taskParentTaskId">Filter by parent task id. (optional)</param>
        /// <param name="processInstanceId">Filter by process instance id. (optional)</param>
        /// <param name="processInstanceBusinessKey">Filter by process instance business key. (optional)</param>
        /// <param name="processInstanceBusinessKeyIn">Filter by process instances with one of the give business keys. The keys need to be in a comma-separated list. (optional)</param>
        /// <param name="processInstanceBusinessKeyLike">Filter by  process instance business key that has the parameter value as a substring. (optional)</param>
        /// <param name="executionId">Filter by the id of the execution that executed the task. (optional)</param>
        /// <param name="processDefinitionId">Filter by process definition id. (optional)</param>
        /// <param name="processDefinitionKey">Restrict to tasks that belong to a process definition with the given key. (optional)</param>
        /// <param name="processDefinitionName">Restrict to tasks that belong to a process definition with the given name. (optional)</param>
        /// <param name="caseInstanceId">Filter by case instance id. (optional)</param>
        /// <param name="caseExecutionId">Filter by the id of the case execution that executed the task. (optional)</param>
        /// <param name="caseDefinitionId">Filter by case definition id. (optional)</param>
        /// <param name="caseDefinitionKey">Restrict to tasks that belong to a case definition with the given key. (optional)</param>
        /// <param name="caseDefinitionName">Restrict to tasks that belong to a case definition with the given name. (optional)</param>
        /// <param name="activityInstanceIdIn">Only include tasks which belong to one of the passed comma-separated activity instance ids. (optional)</param>
        /// <param name="taskName">Restrict to tasks that have the given name. (optional)</param>
        /// <param name="taskNameLike">Restrict to tasks that have a name with the given parameter value as substring. (optional)</param>
        /// <param name="taskDescription">Restrict to tasks that have the given description. (optional)</param>
        /// <param name="taskDescriptionLike">Restrict to tasks that have a description that has the parameter value as a substring. (optional)</param>
        /// <param name="taskDefinitionKey">Restrict to tasks that have the given key. (optional)</param>
        /// <param name="taskDefinitionKeyIn">Restrict to tasks that have one of the passed comma-separated task definition keys. (optional)</param>
        /// <param name="taskDeleteReason">Restrict to tasks that have the given delete reason. (optional)</param>
        /// <param name="taskDeleteReasonLike">Restrict to tasks that have a delete reason that has the parameter value as a substring. (optional)</param>
        /// <param name="taskAssignee">Restrict to tasks that the given user is assigned to. (optional)</param>
        /// <param name="taskAssigneeLike">Restrict to tasks that are assigned to users with the parameter value as a substring. (optional)</param>
        /// <param name="taskOwner">Restrict to tasks that the given user owns. (optional)</param>
        /// <param name="taskOwnerLike">Restrict to tasks that are owned by users with the parameter value as a substring. (optional)</param>
        /// <param name="taskPriority">Restrict to tasks that have the given priority. (optional)</param>
        /// <param name="assigned">If set to &#x60;true&#x60;, restricts the query to all tasks that are assigned. (optional)</param>
        /// <param name="unassigned">If set to &#x60;true&#x60;, restricts the query to all tasks that are unassigned. (optional)</param>
        /// <param name="finished">Only include finished tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="unfinished">Only include unfinished tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="processFinished">Only include tasks of finished processes. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="processUnfinished">Only include tasks of unfinished processes. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="taskDueDate">Restrict to tasks that are due on the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="taskDueDateBefore">Restrict to tasks that are due before the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="taskDueDateAfter">Restrict to tasks that are due after the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="withoutTaskDueDate">Only include tasks which have no due date. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="taskFollowUpDate">Restrict to tasks that have a followUp date on the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="taskFollowUpDateBefore">Restrict to tasks that have a followUp date before the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="taskFollowUpDateAfter">Restrict to tasks that have a followUp date after the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="startedBefore">Restrict to tasks that were started before the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="startedAfter">Restrict to tasks that were started after the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="finishedBefore">Restrict to tasks that were finished before the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="finishedAfter">Restrict to tasks that were finished after the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. A task instance must have one of the given tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include historic task instances that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="taskVariables">Only include tasks that have variables with certain values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value. **Note:** Values are always treated as &#x60;String&#x60; objects on server side.   Valid operator values are: * &#x60;eq&#x60; - equal to; * &#x60;neq&#x60; - not equal to; * &#x60;gt&#x60; - greater than; * &#x60;gteq&#x60; - greater than or equal to; * &#x60;lt&#x60; - lower than; * &#x60;lteq&#x60; - lower than or equal to; * &#x60;like&#x60;.  &#x60;key&#x60; and &#x60;value&#x60; may not contain underscore or comma characters. (optional)</param>
        /// <param name="processVariables">Only include tasks that belong to process instances that have variables with certain values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value. **Note:** Values are always treated as &#x60;String&#x60; objects on server side.   Valid operator values are: * &#x60;eq&#x60; - equal to; * &#x60;neq&#x60; - not equal to; * &#x60;gt&#x60; - greater than; * &#x60;gteq&#x60; - greater than or equal to; * &#x60;lt&#x60; - lower than; * &#x60;lteq&#x60; - lower than or equal to; * &#x60;like&#x60;; * &#x60;notLike&#x60;.  &#x60;key&#x60; and &#x60;value&#x60; may not contain underscore or comma characters. (optional)</param>
        /// <param name="variableNamesIgnoreCase">Match the variable name provided in &#x60;taskVariables&#x60; and &#x60;processVariables&#x60; case- insensitively. If set to &#x60;true&#x60; **variableName** and **variablename** are treated as equal. (optional)</param>
        /// <param name="variableValuesIgnoreCase">Match the variable value provided in &#x60;taskVariables&#x60; and &#x60;processVariables&#x60; case- insensitively. If set to &#x60;true&#x60; **variableValue** and **variablevalue** are treated as equal. (optional)</param>
        /// <param name="taskInvolvedUser">Restrict to tasks with a historic identity link to the given user. (optional)</param>
        /// <param name="taskInvolvedGroup">Restrict to tasks with a historic identity link to the given group. (optional)</param>
        /// <param name="taskHadCandidateUser">Restrict to tasks with a historic identity link to the given candidate user. (optional)</param>
        /// <param name="taskHadCandidateGroup">Restrict to tasks with a historic identity link to the given candidate group. (optional)</param>
        /// <param name="withCandidateGroups">Only include tasks which have a candidate group. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="withoutCandidateGroups">Only include tasks which have no candidate group. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CountResultDto</returns>
        System.Threading.Tasks.Task<CountResultDto> GetHistoricTaskInstancesCountAsync(string taskId = default(string), string taskParentTaskId = default(string), string processInstanceId = default(string), string processInstanceBusinessKey = default(string), string processInstanceBusinessKeyIn = default(string), string processInstanceBusinessKeyLike = default(string), string executionId = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string processDefinitionName = default(string), string caseInstanceId = default(string), string caseExecutionId = default(string), string caseDefinitionId = default(string), string caseDefinitionKey = default(string), string caseDefinitionName = default(string), string activityInstanceIdIn = default(string), string taskName = default(string), string taskNameLike = default(string), string taskDescription = default(string), string taskDescriptionLike = default(string), string taskDefinitionKey = default(string), string taskDefinitionKeyIn = default(string), string taskDeleteReason = default(string), string taskDeleteReasonLike = default(string), string taskAssignee = default(string), string taskAssigneeLike = default(string), string taskOwner = default(string), string taskOwnerLike = default(string), int? taskPriority = default(int?), bool? assigned = default(bool?), bool? unassigned = default(bool?), bool? finished = default(bool?), bool? unfinished = default(bool?), bool? processFinished = default(bool?), bool? processUnfinished = default(bool?), DateTime? taskDueDate = default(DateTime?), DateTime? taskDueDateBefore = default(DateTime?), DateTime? taskDueDateAfter = default(DateTime?), bool? withoutTaskDueDate = default(bool?), DateTime? taskFollowUpDate = default(DateTime?), DateTime? taskFollowUpDateBefore = default(DateTime?), DateTime? taskFollowUpDateAfter = default(DateTime?), DateTime? startedBefore = default(DateTime?), DateTime? startedAfter = default(DateTime?), DateTime? finishedBefore = default(DateTime?), DateTime? finishedAfter = default(DateTime?), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), string taskVariables = default(string), string processVariables = default(string), bool? variableNamesIgnoreCase = default(bool?), bool? variableValuesIgnoreCase = default(bool?), string taskInvolvedUser = default(string), string taskInvolvedGroup = default(string), string taskHadCandidateUser = default(string), string taskHadCandidateGroup = default(string), bool? withCandidateGroups = default(bool?), bool? withoutCandidateGroups = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Task Count
        /// </summary>
        /// <remarks>
        /// Queries for the number of historic tasks that fulfill the given parameters. Takes the same parameters as the [Get Tasks (Historic)](https://docs.camunda.org/manual/7.16/reference/rest/history/task/get-task-query/) method.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Filter by task id. (optional)</param>
        /// <param name="taskParentTaskId">Filter by parent task id. (optional)</param>
        /// <param name="processInstanceId">Filter by process instance id. (optional)</param>
        /// <param name="processInstanceBusinessKey">Filter by process instance business key. (optional)</param>
        /// <param name="processInstanceBusinessKeyIn">Filter by process instances with one of the give business keys. The keys need to be in a comma-separated list. (optional)</param>
        /// <param name="processInstanceBusinessKeyLike">Filter by  process instance business key that has the parameter value as a substring. (optional)</param>
        /// <param name="executionId">Filter by the id of the execution that executed the task. (optional)</param>
        /// <param name="processDefinitionId">Filter by process definition id. (optional)</param>
        /// <param name="processDefinitionKey">Restrict to tasks that belong to a process definition with the given key. (optional)</param>
        /// <param name="processDefinitionName">Restrict to tasks that belong to a process definition with the given name. (optional)</param>
        /// <param name="caseInstanceId">Filter by case instance id. (optional)</param>
        /// <param name="caseExecutionId">Filter by the id of the case execution that executed the task. (optional)</param>
        /// <param name="caseDefinitionId">Filter by case definition id. (optional)</param>
        /// <param name="caseDefinitionKey">Restrict to tasks that belong to a case definition with the given key. (optional)</param>
        /// <param name="caseDefinitionName">Restrict to tasks that belong to a case definition with the given name. (optional)</param>
        /// <param name="activityInstanceIdIn">Only include tasks which belong to one of the passed comma-separated activity instance ids. (optional)</param>
        /// <param name="taskName">Restrict to tasks that have the given name. (optional)</param>
        /// <param name="taskNameLike">Restrict to tasks that have a name with the given parameter value as substring. (optional)</param>
        /// <param name="taskDescription">Restrict to tasks that have the given description. (optional)</param>
        /// <param name="taskDescriptionLike">Restrict to tasks that have a description that has the parameter value as a substring. (optional)</param>
        /// <param name="taskDefinitionKey">Restrict to tasks that have the given key. (optional)</param>
        /// <param name="taskDefinitionKeyIn">Restrict to tasks that have one of the passed comma-separated task definition keys. (optional)</param>
        /// <param name="taskDeleteReason">Restrict to tasks that have the given delete reason. (optional)</param>
        /// <param name="taskDeleteReasonLike">Restrict to tasks that have a delete reason that has the parameter value as a substring. (optional)</param>
        /// <param name="taskAssignee">Restrict to tasks that the given user is assigned to. (optional)</param>
        /// <param name="taskAssigneeLike">Restrict to tasks that are assigned to users with the parameter value as a substring. (optional)</param>
        /// <param name="taskOwner">Restrict to tasks that the given user owns. (optional)</param>
        /// <param name="taskOwnerLike">Restrict to tasks that are owned by users with the parameter value as a substring. (optional)</param>
        /// <param name="taskPriority">Restrict to tasks that have the given priority. (optional)</param>
        /// <param name="assigned">If set to &#x60;true&#x60;, restricts the query to all tasks that are assigned. (optional)</param>
        /// <param name="unassigned">If set to &#x60;true&#x60;, restricts the query to all tasks that are unassigned. (optional)</param>
        /// <param name="finished">Only include finished tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="unfinished">Only include unfinished tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="processFinished">Only include tasks of finished processes. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="processUnfinished">Only include tasks of unfinished processes. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="taskDueDate">Restrict to tasks that are due on the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="taskDueDateBefore">Restrict to tasks that are due before the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="taskDueDateAfter">Restrict to tasks that are due after the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="withoutTaskDueDate">Only include tasks which have no due date. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="taskFollowUpDate">Restrict to tasks that have a followUp date on the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="taskFollowUpDateBefore">Restrict to tasks that have a followUp date before the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="taskFollowUpDateAfter">Restrict to tasks that have a followUp date after the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="startedBefore">Restrict to tasks that were started before the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="startedAfter">Restrict to tasks that were started after the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="finishedBefore">Restrict to tasks that were finished before the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="finishedAfter">Restrict to tasks that were finished after the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. A task instance must have one of the given tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include historic task instances that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="taskVariables">Only include tasks that have variables with certain values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value. **Note:** Values are always treated as &#x60;String&#x60; objects on server side.   Valid operator values are: * &#x60;eq&#x60; - equal to; * &#x60;neq&#x60; - not equal to; * &#x60;gt&#x60; - greater than; * &#x60;gteq&#x60; - greater than or equal to; * &#x60;lt&#x60; - lower than; * &#x60;lteq&#x60; - lower than or equal to; * &#x60;like&#x60;.  &#x60;key&#x60; and &#x60;value&#x60; may not contain underscore or comma characters. (optional)</param>
        /// <param name="processVariables">Only include tasks that belong to process instances that have variables with certain values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value. **Note:** Values are always treated as &#x60;String&#x60; objects on server side.   Valid operator values are: * &#x60;eq&#x60; - equal to; * &#x60;neq&#x60; - not equal to; * &#x60;gt&#x60; - greater than; * &#x60;gteq&#x60; - greater than or equal to; * &#x60;lt&#x60; - lower than; * &#x60;lteq&#x60; - lower than or equal to; * &#x60;like&#x60;; * &#x60;notLike&#x60;.  &#x60;key&#x60; and &#x60;value&#x60; may not contain underscore or comma characters. (optional)</param>
        /// <param name="variableNamesIgnoreCase">Match the variable name provided in &#x60;taskVariables&#x60; and &#x60;processVariables&#x60; case- insensitively. If set to &#x60;true&#x60; **variableName** and **variablename** are treated as equal. (optional)</param>
        /// <param name="variableValuesIgnoreCase">Match the variable value provided in &#x60;taskVariables&#x60; and &#x60;processVariables&#x60; case- insensitively. If set to &#x60;true&#x60; **variableValue** and **variablevalue** are treated as equal. (optional)</param>
        /// <param name="taskInvolvedUser">Restrict to tasks with a historic identity link to the given user. (optional)</param>
        /// <param name="taskInvolvedGroup">Restrict to tasks with a historic identity link to the given group. (optional)</param>
        /// <param name="taskHadCandidateUser">Restrict to tasks with a historic identity link to the given candidate user. (optional)</param>
        /// <param name="taskHadCandidateGroup">Restrict to tasks with a historic identity link to the given candidate group. (optional)</param>
        /// <param name="withCandidateGroups">Only include tasks which have a candidate group. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="withoutCandidateGroups">Only include tasks which have no candidate group. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CountResultDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<CountResultDto>> GetHistoricTaskInstancesCountWithHttpInfoAsync(string taskId = default(string), string taskParentTaskId = default(string), string processInstanceId = default(string), string processInstanceBusinessKey = default(string), string processInstanceBusinessKeyIn = default(string), string processInstanceBusinessKeyLike = default(string), string executionId = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string processDefinitionName = default(string), string caseInstanceId = default(string), string caseExecutionId = default(string), string caseDefinitionId = default(string), string caseDefinitionKey = default(string), string caseDefinitionName = default(string), string activityInstanceIdIn = default(string), string taskName = default(string), string taskNameLike = default(string), string taskDescription = default(string), string taskDescriptionLike = default(string), string taskDefinitionKey = default(string), string taskDefinitionKeyIn = default(string), string taskDeleteReason = default(string), string taskDeleteReasonLike = default(string), string taskAssignee = default(string), string taskAssigneeLike = default(string), string taskOwner = default(string), string taskOwnerLike = default(string), int? taskPriority = default(int?), bool? assigned = default(bool?), bool? unassigned = default(bool?), bool? finished = default(bool?), bool? unfinished = default(bool?), bool? processFinished = default(bool?), bool? processUnfinished = default(bool?), DateTime? taskDueDate = default(DateTime?), DateTime? taskDueDateBefore = default(DateTime?), DateTime? taskDueDateAfter = default(DateTime?), bool? withoutTaskDueDate = default(bool?), DateTime? taskFollowUpDate = default(DateTime?), DateTime? taskFollowUpDateBefore = default(DateTime?), DateTime? taskFollowUpDateAfter = default(DateTime?), DateTime? startedBefore = default(DateTime?), DateTime? startedAfter = default(DateTime?), DateTime? finishedBefore = default(DateTime?), DateTime? finishedAfter = default(DateTime?), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), string taskVariables = default(string), string processVariables = default(string), bool? variableNamesIgnoreCase = default(bool?), bool? variableValuesIgnoreCase = default(bool?), string taskInvolvedUser = default(string), string taskInvolvedGroup = default(string), string taskHadCandidateUser = default(string), string taskHadCandidateGroup = default(string), bool? withCandidateGroups = default(bool?), bool? withoutCandidateGroups = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Tasks (Historic) (POST)
        /// </summary>
        /// <remarks>
        /// Queries for historic tasks that fulfill the given parameters. This method is slightly more powerful than the [Get Tasks (Historic)](https://docs.camunda.org/manual/7.16/reference/rest/history/task/get-task-query/) method because it allows filtering by multiple process or task variables of types &#x60;String&#x60;, &#x60;Number&#x60; or &#x60;Boolean&#x60;. The size of the result set can be retrieved by using the [Get Task Count (POST)](https://docs.camunda.org/manual/7.16/reference/rest/history/task/post-task-query-count/) method.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="historicTaskInstanceQueryDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;HistoricTaskInstanceDto&gt;</returns>
        System.Threading.Tasks.Task<List<HistoricTaskInstanceDto>> QueryHistoricTaskInstancesAsync(int? firstResult = default(int?), int? maxResults = default(int?), HistoricTaskInstanceQueryDto historicTaskInstanceQueryDto = default(HistoricTaskInstanceQueryDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Tasks (Historic) (POST)
        /// </summary>
        /// <remarks>
        /// Queries for historic tasks that fulfill the given parameters. This method is slightly more powerful than the [Get Tasks (Historic)](https://docs.camunda.org/manual/7.16/reference/rest/history/task/get-task-query/) method because it allows filtering by multiple process or task variables of types &#x60;String&#x60;, &#x60;Number&#x60; or &#x60;Boolean&#x60;. The size of the result set can be retrieved by using the [Get Task Count (POST)](https://docs.camunda.org/manual/7.16/reference/rest/history/task/post-task-query-count/) method.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="historicTaskInstanceQueryDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;HistoricTaskInstanceDto&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<HistoricTaskInstanceDto>>> QueryHistoricTaskInstancesWithHttpInfoAsync(int? firstResult = default(int?), int? maxResults = default(int?), HistoricTaskInstanceQueryDto historicTaskInstanceQueryDto = default(HistoricTaskInstanceQueryDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Task Count (POST)
        /// </summary>
        /// <remarks>
        /// Queries for the number of historic tasks that fulfill the given parameters. Takes the same parameters as the [Get Tasks (Historic)](https://docs.camunda.org/manual/7.16/reference/rest/history/task/get-task-query/) method. Corresponds to the size of the result set of the [Get Tasks (Historic) (POST)](https://docs.camunda.org/manual/7.16/reference/rest/history/task/post-task-query/) method and takes the same parameters.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="historicTaskInstanceQueryDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CountResultDto</returns>
        System.Threading.Tasks.Task<CountResultDto> QueryHistoricTaskInstancesCountAsync(HistoricTaskInstanceQueryDto historicTaskInstanceQueryDto = default(HistoricTaskInstanceQueryDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Task Count (POST)
        /// </summary>
        /// <remarks>
        /// Queries for the number of historic tasks that fulfill the given parameters. Takes the same parameters as the [Get Tasks (Historic)](https://docs.camunda.org/manual/7.16/reference/rest/history/task/get-task-query/) method. Corresponds to the size of the result set of the [Get Tasks (Historic) (POST)](https://docs.camunda.org/manual/7.16/reference/rest/history/task/post-task-query/) method and takes the same parameters.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="historicTaskInstanceQueryDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CountResultDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<CountResultDto>> QueryHistoricTaskInstancesCountWithHttpInfoAsync(HistoricTaskInstanceQueryDto historicTaskInstanceQueryDto = default(HistoricTaskInstanceQueryDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IHistoricTaskInstanceApi : IHistoricTaskInstanceApiSync, IHistoricTaskInstanceApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class HistoricTaskInstanceApi : IDisposable, IHistoricTaskInstanceApi
    {
        private Camunda.OpenApi.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="HistoricTaskInstanceApi"/> class.
        /// **IMPORTANT** This will also create an istance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHander</see>.
        /// </summary>
        /// <returns></returns>
        public HistoricTaskInstanceApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="HistoricTaskInstanceApi"/> class.
        /// **IMPORTANT** This will also create an istance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHander</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public HistoricTaskInstanceApi(string basePath)
        {
            this.Configuration = Camunda.OpenApi.Client.Client.Configuration.MergeConfigurations(
                Camunda.OpenApi.Client.Client.GlobalConfiguration.Instance,
                new Camunda.OpenApi.Client.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new Camunda.OpenApi.Client.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = Camunda.OpenApi.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="HistoricTaskInstanceApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an istance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHander</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public HistoricTaskInstanceApi(Camunda.OpenApi.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Camunda.OpenApi.Client.Client.Configuration.MergeConfigurations(
                Camunda.OpenApi.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new Camunda.OpenApi.Client.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = Camunda.OpenApi.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="HistoricTaskInstanceApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public HistoricTaskInstanceApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="HistoricTaskInstanceApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public HistoricTaskInstanceApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = Camunda.OpenApi.Client.Client.Configuration.MergeConfigurations(
                Camunda.OpenApi.Client.Client.GlobalConfiguration.Instance,
                new Camunda.OpenApi.Client.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new Camunda.OpenApi.Client.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = Camunda.OpenApi.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="HistoricTaskInstanceApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public HistoricTaskInstanceApi(HttpClient client, Camunda.OpenApi.Client.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = Camunda.OpenApi.Client.Client.Configuration.MergeConfigurations(
                Camunda.OpenApi.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new Camunda.OpenApi.Client.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = Camunda.OpenApi.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="HistoricTaskInstanceApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public HistoricTaskInstanceApi(Camunda.OpenApi.Client.Client.ISynchronousClient client, Camunda.OpenApi.Client.Client.IAsynchronousClient asyncClient, Camunda.OpenApi.Client.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Camunda.OpenApi.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public Camunda.OpenApi.Client.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Camunda.OpenApi.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Camunda.OpenApi.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Camunda.OpenApi.Client.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Camunda.OpenApi.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get Task Report (Historic) Retrieves a report of completed tasks. When the report type is set to &#x60;count&#x60;, the report contains a list of completed task counts where an entry contains the task name, the definition key of the task, the process definition id, the process definition key, the process definition name and the count of how many tasks were completed for the specified key in a given period. When the report type is set to &#x60;duration&#x60;, the report contains a minimum, maximum and average duration value of all completed task instances in a given period.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportType">**Mandatory.** Specifies the kind of the report to execute. To retrieve a report about the duration of process instances the value must be set to &#x60;duration&#x60;. For a report of the completed tasks in a specific timespan the value must be set to &#x60;count&#x60;. (optional)</param>
        /// <param name="periodUnit">When the report type is set to &#x60;duration&#x60;, this parameter is **mandatory**. Specifies the granularity of the report. Valid values are &#x60;month&#x60; and &#x60;quarter&#x60;. (optional)</param>
        /// <param name="completedBefore">Restrict to tasks that were completed before the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="completedAfter">Restrict to tasks that were completed after the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="groupBy">When the report type is set to &#x60;count&#x60;, this parameter is **mandatory**. Groups the tasks report by a given criterion. Valid values are &#x60;taskName&#x60; and &#x60;processDefinition&#x60;. (optional)</param>
        /// <returns>List&lt;HistoricTaskInstanceReportResultDto&gt;</returns>
        public List<HistoricTaskInstanceReportResultDto> GetHistoricTaskInstanceReport(string reportType = default(string), string periodUnit = default(string), DateTime? completedBefore = default(DateTime?), DateTime? completedAfter = default(DateTime?), string groupBy = default(string))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<List<HistoricTaskInstanceReportResultDto>> localVarResponse = GetHistoricTaskInstanceReportWithHttpInfo(reportType, periodUnit, completedBefore, completedAfter, groupBy);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Task Report (Historic) Retrieves a report of completed tasks. When the report type is set to &#x60;count&#x60;, the report contains a list of completed task counts where an entry contains the task name, the definition key of the task, the process definition id, the process definition key, the process definition name and the count of how many tasks were completed for the specified key in a given period. When the report type is set to &#x60;duration&#x60;, the report contains a minimum, maximum and average duration value of all completed task instances in a given period.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportType">**Mandatory.** Specifies the kind of the report to execute. To retrieve a report about the duration of process instances the value must be set to &#x60;duration&#x60;. For a report of the completed tasks in a specific timespan the value must be set to &#x60;count&#x60;. (optional)</param>
        /// <param name="periodUnit">When the report type is set to &#x60;duration&#x60;, this parameter is **mandatory**. Specifies the granularity of the report. Valid values are &#x60;month&#x60; and &#x60;quarter&#x60;. (optional)</param>
        /// <param name="completedBefore">Restrict to tasks that were completed before the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="completedAfter">Restrict to tasks that were completed after the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="groupBy">When the report type is set to &#x60;count&#x60;, this parameter is **mandatory**. Groups the tasks report by a given criterion. Valid values are &#x60;taskName&#x60; and &#x60;processDefinition&#x60;. (optional)</param>
        /// <returns>ApiResponse of List&lt;HistoricTaskInstanceReportResultDto&gt;</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<List<HistoricTaskInstanceReportResultDto>> GetHistoricTaskInstanceReportWithHttpInfo(string reportType = default(string), string periodUnit = default(string), DateTime? completedBefore = default(DateTime?), DateTime? completedAfter = default(DateTime?), string groupBy = default(string))
        {
            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (reportType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "reportType", reportType));
            }
            if (periodUnit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "periodUnit", periodUnit));
            }
            if (completedBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "completedBefore", completedBefore));
            }
            if (completedAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "completedAfter", completedAfter));
            }
            if (groupBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "groupBy", groupBy));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<HistoricTaskInstanceReportResultDto>>("/history/task/report", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetHistoricTaskInstanceReport", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Task Report (Historic) Retrieves a report of completed tasks. When the report type is set to &#x60;count&#x60;, the report contains a list of completed task counts where an entry contains the task name, the definition key of the task, the process definition id, the process definition key, the process definition name and the count of how many tasks were completed for the specified key in a given period. When the report type is set to &#x60;duration&#x60;, the report contains a minimum, maximum and average duration value of all completed task instances in a given period.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportType">**Mandatory.** Specifies the kind of the report to execute. To retrieve a report about the duration of process instances the value must be set to &#x60;duration&#x60;. For a report of the completed tasks in a specific timespan the value must be set to &#x60;count&#x60;. (optional)</param>
        /// <param name="periodUnit">When the report type is set to &#x60;duration&#x60;, this parameter is **mandatory**. Specifies the granularity of the report. Valid values are &#x60;month&#x60; and &#x60;quarter&#x60;. (optional)</param>
        /// <param name="completedBefore">Restrict to tasks that were completed before the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="completedAfter">Restrict to tasks that were completed after the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="groupBy">When the report type is set to &#x60;count&#x60;, this parameter is **mandatory**. Groups the tasks report by a given criterion. Valid values are &#x60;taskName&#x60; and &#x60;processDefinition&#x60;. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;HistoricTaskInstanceReportResultDto&gt;</returns>
        public async System.Threading.Tasks.Task<List<HistoricTaskInstanceReportResultDto>> GetHistoricTaskInstanceReportAsync(string reportType = default(string), string periodUnit = default(string), DateTime? completedBefore = default(DateTime?), DateTime? completedAfter = default(DateTime?), string groupBy = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<List<HistoricTaskInstanceReportResultDto>> localVarResponse = await GetHistoricTaskInstanceReportWithHttpInfoAsync(reportType, periodUnit, completedBefore, completedAfter, groupBy, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Task Report (Historic) Retrieves a report of completed tasks. When the report type is set to &#x60;count&#x60;, the report contains a list of completed task counts where an entry contains the task name, the definition key of the task, the process definition id, the process definition key, the process definition name and the count of how many tasks were completed for the specified key in a given period. When the report type is set to &#x60;duration&#x60;, the report contains a minimum, maximum and average duration value of all completed task instances in a given period.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportType">**Mandatory.** Specifies the kind of the report to execute. To retrieve a report about the duration of process instances the value must be set to &#x60;duration&#x60;. For a report of the completed tasks in a specific timespan the value must be set to &#x60;count&#x60;. (optional)</param>
        /// <param name="periodUnit">When the report type is set to &#x60;duration&#x60;, this parameter is **mandatory**. Specifies the granularity of the report. Valid values are &#x60;month&#x60; and &#x60;quarter&#x60;. (optional)</param>
        /// <param name="completedBefore">Restrict to tasks that were completed before the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="completedAfter">Restrict to tasks that were completed after the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="groupBy">When the report type is set to &#x60;count&#x60;, this parameter is **mandatory**. Groups the tasks report by a given criterion. Valid values are &#x60;taskName&#x60; and &#x60;processDefinition&#x60;. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;HistoricTaskInstanceReportResultDto&gt;)</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<List<HistoricTaskInstanceReportResultDto>>> GetHistoricTaskInstanceReportWithHttpInfoAsync(string reportType = default(string), string periodUnit = default(string), DateTime? completedBefore = default(DateTime?), DateTime? completedAfter = default(DateTime?), string groupBy = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (reportType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "reportType", reportType));
            }
            if (periodUnit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "periodUnit", periodUnit));
            }
            if (completedBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "completedBefore", completedBefore));
            }
            if (completedAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "completedAfter", completedAfter));
            }
            if (groupBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "groupBy", groupBy));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<HistoricTaskInstanceReportResultDto>>("/history/task/report", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetHistoricTaskInstanceReport", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Tasks (Historic) Queries for historic tasks that fulfill the given parameters. The size of the result set can be retrieved by using the [Get Task Count](https://docs.camunda.org/manual/7.16/reference/rest/history/task/get-task-query-count/) method.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Filter by task id. (optional)</param>
        /// <param name="taskParentTaskId">Filter by parent task id. (optional)</param>
        /// <param name="processInstanceId">Filter by process instance id. (optional)</param>
        /// <param name="processInstanceBusinessKey">Filter by process instance business key. (optional)</param>
        /// <param name="processInstanceBusinessKeyIn">Filter by process instances with one of the give business keys. The keys need to be in a comma-separated list. (optional)</param>
        /// <param name="processInstanceBusinessKeyLike">Filter by  process instance business key that has the parameter value as a substring. (optional)</param>
        /// <param name="executionId">Filter by the id of the execution that executed the task. (optional)</param>
        /// <param name="processDefinitionId">Filter by process definition id. (optional)</param>
        /// <param name="processDefinitionKey">Restrict to tasks that belong to a process definition with the given key. (optional)</param>
        /// <param name="processDefinitionName">Restrict to tasks that belong to a process definition with the given name. (optional)</param>
        /// <param name="caseInstanceId">Filter by case instance id. (optional)</param>
        /// <param name="caseExecutionId">Filter by the id of the case execution that executed the task. (optional)</param>
        /// <param name="caseDefinitionId">Filter by case definition id. (optional)</param>
        /// <param name="caseDefinitionKey">Restrict to tasks that belong to a case definition with the given key. (optional)</param>
        /// <param name="caseDefinitionName">Restrict to tasks that belong to a case definition with the given name. (optional)</param>
        /// <param name="activityInstanceIdIn">Only include tasks which belong to one of the passed comma-separated activity instance ids. (optional)</param>
        /// <param name="taskName">Restrict to tasks that have the given name. (optional)</param>
        /// <param name="taskNameLike">Restrict to tasks that have a name with the given parameter value as substring. (optional)</param>
        /// <param name="taskDescription">Restrict to tasks that have the given description. (optional)</param>
        /// <param name="taskDescriptionLike">Restrict to tasks that have a description that has the parameter value as a substring. (optional)</param>
        /// <param name="taskDefinitionKey">Restrict to tasks that have the given key. (optional)</param>
        /// <param name="taskDefinitionKeyIn">Restrict to tasks that have one of the passed comma-separated task definition keys. (optional)</param>
        /// <param name="taskDeleteReason">Restrict to tasks that have the given delete reason. (optional)</param>
        /// <param name="taskDeleteReasonLike">Restrict to tasks that have a delete reason that has the parameter value as a substring. (optional)</param>
        /// <param name="taskAssignee">Restrict to tasks that the given user is assigned to. (optional)</param>
        /// <param name="taskAssigneeLike">Restrict to tasks that are assigned to users with the parameter value as a substring. (optional)</param>
        /// <param name="taskOwner">Restrict to tasks that the given user owns. (optional)</param>
        /// <param name="taskOwnerLike">Restrict to tasks that are owned by users with the parameter value as a substring. (optional)</param>
        /// <param name="taskPriority">Restrict to tasks that have the given priority. (optional)</param>
        /// <param name="assigned">If set to &#x60;true&#x60;, restricts the query to all tasks that are assigned. (optional)</param>
        /// <param name="unassigned">If set to &#x60;true&#x60;, restricts the query to all tasks that are unassigned. (optional)</param>
        /// <param name="finished">Only include finished tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="unfinished">Only include unfinished tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="processFinished">Only include tasks of finished processes. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="processUnfinished">Only include tasks of unfinished processes. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="taskDueDate">Restrict to tasks that are due on the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="taskDueDateBefore">Restrict to tasks that are due before the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="taskDueDateAfter">Restrict to tasks that are due after the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="withoutTaskDueDate">Only include tasks which have no due date. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="taskFollowUpDate">Restrict to tasks that have a followUp date on the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="taskFollowUpDateBefore">Restrict to tasks that have a followUp date before the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="taskFollowUpDateAfter">Restrict to tasks that have a followUp date after the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="startedBefore">Restrict to tasks that were started before the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="startedAfter">Restrict to tasks that were started after the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="finishedBefore">Restrict to tasks that were finished before the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="finishedAfter">Restrict to tasks that were finished after the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. A task instance must have one of the given tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include historic task instances that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="taskVariables">Only include tasks that have variables with certain values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value. **Note:** Values are always treated as &#x60;String&#x60; objects on server side.   Valid operator values are: * &#x60;eq&#x60; - equal to; * &#x60;neq&#x60; - not equal to; * &#x60;gt&#x60; - greater than; * &#x60;gteq&#x60; - greater than or equal to; * &#x60;lt&#x60; - lower than; * &#x60;lteq&#x60; - lower than or equal to; * &#x60;like&#x60;.  &#x60;key&#x60; and &#x60;value&#x60; may not contain underscore or comma characters. (optional)</param>
        /// <param name="processVariables">Only include tasks that belong to process instances that have variables with certain values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value. **Note:** Values are always treated as &#x60;String&#x60; objects on server side.   Valid operator values are: * &#x60;eq&#x60; - equal to; * &#x60;neq&#x60; - not equal to; * &#x60;gt&#x60; - greater than; * &#x60;gteq&#x60; - greater than or equal to; * &#x60;lt&#x60; - lower than; * &#x60;lteq&#x60; - lower than or equal to; * &#x60;like&#x60;; * &#x60;notLike&#x60;.  &#x60;key&#x60; and &#x60;value&#x60; may not contain underscore or comma characters. (optional)</param>
        /// <param name="variableNamesIgnoreCase">Match the variable name provided in &#x60;taskVariables&#x60; and &#x60;processVariables&#x60; case- insensitively. If set to &#x60;true&#x60; **variableName** and **variablename** are treated as equal. (optional)</param>
        /// <param name="variableValuesIgnoreCase">Match the variable value provided in &#x60;taskVariables&#x60; and &#x60;processVariables&#x60; case- insensitively. If set to &#x60;true&#x60; **variableValue** and **variablevalue** are treated as equal. (optional)</param>
        /// <param name="taskInvolvedUser">Restrict to tasks with a historic identity link to the given user. (optional)</param>
        /// <param name="taskInvolvedGroup">Restrict to tasks with a historic identity link to the given group. (optional)</param>
        /// <param name="taskHadCandidateUser">Restrict to tasks with a historic identity link to the given candidate user. (optional)</param>
        /// <param name="taskHadCandidateGroup">Restrict to tasks with a historic identity link to the given candidate group. (optional)</param>
        /// <param name="withCandidateGroups">Only include tasks which have a candidate group. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="withoutCandidateGroups">Only include tasks which have no candidate group. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <returns>List&lt;HistoricTaskInstanceDto&gt;</returns>
        public List<HistoricTaskInstanceDto> GetHistoricTaskInstances(string taskId = default(string), string taskParentTaskId = default(string), string processInstanceId = default(string), string processInstanceBusinessKey = default(string), string processInstanceBusinessKeyIn = default(string), string processInstanceBusinessKeyLike = default(string), string executionId = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string processDefinitionName = default(string), string caseInstanceId = default(string), string caseExecutionId = default(string), string caseDefinitionId = default(string), string caseDefinitionKey = default(string), string caseDefinitionName = default(string), string activityInstanceIdIn = default(string), string taskName = default(string), string taskNameLike = default(string), string taskDescription = default(string), string taskDescriptionLike = default(string), string taskDefinitionKey = default(string), string taskDefinitionKeyIn = default(string), string taskDeleteReason = default(string), string taskDeleteReasonLike = default(string), string taskAssignee = default(string), string taskAssigneeLike = default(string), string taskOwner = default(string), string taskOwnerLike = default(string), int? taskPriority = default(int?), bool? assigned = default(bool?), bool? unassigned = default(bool?), bool? finished = default(bool?), bool? unfinished = default(bool?), bool? processFinished = default(bool?), bool? processUnfinished = default(bool?), DateTime? taskDueDate = default(DateTime?), DateTime? taskDueDateBefore = default(DateTime?), DateTime? taskDueDateAfter = default(DateTime?), bool? withoutTaskDueDate = default(bool?), DateTime? taskFollowUpDate = default(DateTime?), DateTime? taskFollowUpDateBefore = default(DateTime?), DateTime? taskFollowUpDateAfter = default(DateTime?), DateTime? startedBefore = default(DateTime?), DateTime? startedAfter = default(DateTime?), DateTime? finishedBefore = default(DateTime?), DateTime? finishedAfter = default(DateTime?), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), string taskVariables = default(string), string processVariables = default(string), bool? variableNamesIgnoreCase = default(bool?), bool? variableValuesIgnoreCase = default(bool?), string taskInvolvedUser = default(string), string taskInvolvedGroup = default(string), string taskHadCandidateUser = default(string), string taskHadCandidateGroup = default(string), bool? withCandidateGroups = default(bool?), bool? withoutCandidateGroups = default(bool?), string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<List<HistoricTaskInstanceDto>> localVarResponse = GetHistoricTaskInstancesWithHttpInfo(taskId, taskParentTaskId, processInstanceId, processInstanceBusinessKey, processInstanceBusinessKeyIn, processInstanceBusinessKeyLike, executionId, processDefinitionId, processDefinitionKey, processDefinitionName, caseInstanceId, caseExecutionId, caseDefinitionId, caseDefinitionKey, caseDefinitionName, activityInstanceIdIn, taskName, taskNameLike, taskDescription, taskDescriptionLike, taskDefinitionKey, taskDefinitionKeyIn, taskDeleteReason, taskDeleteReasonLike, taskAssignee, taskAssigneeLike, taskOwner, taskOwnerLike, taskPriority, assigned, unassigned, finished, unfinished, processFinished, processUnfinished, taskDueDate, taskDueDateBefore, taskDueDateAfter, withoutTaskDueDate, taskFollowUpDate, taskFollowUpDateBefore, taskFollowUpDateAfter, startedBefore, startedAfter, finishedBefore, finishedAfter, tenantIdIn, withoutTenantId, taskVariables, processVariables, variableNamesIgnoreCase, variableValuesIgnoreCase, taskInvolvedUser, taskInvolvedGroup, taskHadCandidateUser, taskHadCandidateGroup, withCandidateGroups, withoutCandidateGroups, sortBy, sortOrder, firstResult, maxResults);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Tasks (Historic) Queries for historic tasks that fulfill the given parameters. The size of the result set can be retrieved by using the [Get Task Count](https://docs.camunda.org/manual/7.16/reference/rest/history/task/get-task-query-count/) method.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Filter by task id. (optional)</param>
        /// <param name="taskParentTaskId">Filter by parent task id. (optional)</param>
        /// <param name="processInstanceId">Filter by process instance id. (optional)</param>
        /// <param name="processInstanceBusinessKey">Filter by process instance business key. (optional)</param>
        /// <param name="processInstanceBusinessKeyIn">Filter by process instances with one of the give business keys. The keys need to be in a comma-separated list. (optional)</param>
        /// <param name="processInstanceBusinessKeyLike">Filter by  process instance business key that has the parameter value as a substring. (optional)</param>
        /// <param name="executionId">Filter by the id of the execution that executed the task. (optional)</param>
        /// <param name="processDefinitionId">Filter by process definition id. (optional)</param>
        /// <param name="processDefinitionKey">Restrict to tasks that belong to a process definition with the given key. (optional)</param>
        /// <param name="processDefinitionName">Restrict to tasks that belong to a process definition with the given name. (optional)</param>
        /// <param name="caseInstanceId">Filter by case instance id. (optional)</param>
        /// <param name="caseExecutionId">Filter by the id of the case execution that executed the task. (optional)</param>
        /// <param name="caseDefinitionId">Filter by case definition id. (optional)</param>
        /// <param name="caseDefinitionKey">Restrict to tasks that belong to a case definition with the given key. (optional)</param>
        /// <param name="caseDefinitionName">Restrict to tasks that belong to a case definition with the given name. (optional)</param>
        /// <param name="activityInstanceIdIn">Only include tasks which belong to one of the passed comma-separated activity instance ids. (optional)</param>
        /// <param name="taskName">Restrict to tasks that have the given name. (optional)</param>
        /// <param name="taskNameLike">Restrict to tasks that have a name with the given parameter value as substring. (optional)</param>
        /// <param name="taskDescription">Restrict to tasks that have the given description. (optional)</param>
        /// <param name="taskDescriptionLike">Restrict to tasks that have a description that has the parameter value as a substring. (optional)</param>
        /// <param name="taskDefinitionKey">Restrict to tasks that have the given key. (optional)</param>
        /// <param name="taskDefinitionKeyIn">Restrict to tasks that have one of the passed comma-separated task definition keys. (optional)</param>
        /// <param name="taskDeleteReason">Restrict to tasks that have the given delete reason. (optional)</param>
        /// <param name="taskDeleteReasonLike">Restrict to tasks that have a delete reason that has the parameter value as a substring. (optional)</param>
        /// <param name="taskAssignee">Restrict to tasks that the given user is assigned to. (optional)</param>
        /// <param name="taskAssigneeLike">Restrict to tasks that are assigned to users with the parameter value as a substring. (optional)</param>
        /// <param name="taskOwner">Restrict to tasks that the given user owns. (optional)</param>
        /// <param name="taskOwnerLike">Restrict to tasks that are owned by users with the parameter value as a substring. (optional)</param>
        /// <param name="taskPriority">Restrict to tasks that have the given priority. (optional)</param>
        /// <param name="assigned">If set to &#x60;true&#x60;, restricts the query to all tasks that are assigned. (optional)</param>
        /// <param name="unassigned">If set to &#x60;true&#x60;, restricts the query to all tasks that are unassigned. (optional)</param>
        /// <param name="finished">Only include finished tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="unfinished">Only include unfinished tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="processFinished">Only include tasks of finished processes. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="processUnfinished">Only include tasks of unfinished processes. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="taskDueDate">Restrict to tasks that are due on the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="taskDueDateBefore">Restrict to tasks that are due before the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="taskDueDateAfter">Restrict to tasks that are due after the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="withoutTaskDueDate">Only include tasks which have no due date. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="taskFollowUpDate">Restrict to tasks that have a followUp date on the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="taskFollowUpDateBefore">Restrict to tasks that have a followUp date before the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="taskFollowUpDateAfter">Restrict to tasks that have a followUp date after the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="startedBefore">Restrict to tasks that were started before the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="startedAfter">Restrict to tasks that were started after the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="finishedBefore">Restrict to tasks that were finished before the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="finishedAfter">Restrict to tasks that were finished after the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. A task instance must have one of the given tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include historic task instances that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="taskVariables">Only include tasks that have variables with certain values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value. **Note:** Values are always treated as &#x60;String&#x60; objects on server side.   Valid operator values are: * &#x60;eq&#x60; - equal to; * &#x60;neq&#x60; - not equal to; * &#x60;gt&#x60; - greater than; * &#x60;gteq&#x60; - greater than or equal to; * &#x60;lt&#x60; - lower than; * &#x60;lteq&#x60; - lower than or equal to; * &#x60;like&#x60;.  &#x60;key&#x60; and &#x60;value&#x60; may not contain underscore or comma characters. (optional)</param>
        /// <param name="processVariables">Only include tasks that belong to process instances that have variables with certain values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value. **Note:** Values are always treated as &#x60;String&#x60; objects on server side.   Valid operator values are: * &#x60;eq&#x60; - equal to; * &#x60;neq&#x60; - not equal to; * &#x60;gt&#x60; - greater than; * &#x60;gteq&#x60; - greater than or equal to; * &#x60;lt&#x60; - lower than; * &#x60;lteq&#x60; - lower than or equal to; * &#x60;like&#x60;; * &#x60;notLike&#x60;.  &#x60;key&#x60; and &#x60;value&#x60; may not contain underscore or comma characters. (optional)</param>
        /// <param name="variableNamesIgnoreCase">Match the variable name provided in &#x60;taskVariables&#x60; and &#x60;processVariables&#x60; case- insensitively. If set to &#x60;true&#x60; **variableName** and **variablename** are treated as equal. (optional)</param>
        /// <param name="variableValuesIgnoreCase">Match the variable value provided in &#x60;taskVariables&#x60; and &#x60;processVariables&#x60; case- insensitively. If set to &#x60;true&#x60; **variableValue** and **variablevalue** are treated as equal. (optional)</param>
        /// <param name="taskInvolvedUser">Restrict to tasks with a historic identity link to the given user. (optional)</param>
        /// <param name="taskInvolvedGroup">Restrict to tasks with a historic identity link to the given group. (optional)</param>
        /// <param name="taskHadCandidateUser">Restrict to tasks with a historic identity link to the given candidate user. (optional)</param>
        /// <param name="taskHadCandidateGroup">Restrict to tasks with a historic identity link to the given candidate group. (optional)</param>
        /// <param name="withCandidateGroups">Only include tasks which have a candidate group. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="withoutCandidateGroups">Only include tasks which have no candidate group. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <returns>ApiResponse of List&lt;HistoricTaskInstanceDto&gt;</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<List<HistoricTaskInstanceDto>> GetHistoricTaskInstancesWithHttpInfo(string taskId = default(string), string taskParentTaskId = default(string), string processInstanceId = default(string), string processInstanceBusinessKey = default(string), string processInstanceBusinessKeyIn = default(string), string processInstanceBusinessKeyLike = default(string), string executionId = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string processDefinitionName = default(string), string caseInstanceId = default(string), string caseExecutionId = default(string), string caseDefinitionId = default(string), string caseDefinitionKey = default(string), string caseDefinitionName = default(string), string activityInstanceIdIn = default(string), string taskName = default(string), string taskNameLike = default(string), string taskDescription = default(string), string taskDescriptionLike = default(string), string taskDefinitionKey = default(string), string taskDefinitionKeyIn = default(string), string taskDeleteReason = default(string), string taskDeleteReasonLike = default(string), string taskAssignee = default(string), string taskAssigneeLike = default(string), string taskOwner = default(string), string taskOwnerLike = default(string), int? taskPriority = default(int?), bool? assigned = default(bool?), bool? unassigned = default(bool?), bool? finished = default(bool?), bool? unfinished = default(bool?), bool? processFinished = default(bool?), bool? processUnfinished = default(bool?), DateTime? taskDueDate = default(DateTime?), DateTime? taskDueDateBefore = default(DateTime?), DateTime? taskDueDateAfter = default(DateTime?), bool? withoutTaskDueDate = default(bool?), DateTime? taskFollowUpDate = default(DateTime?), DateTime? taskFollowUpDateBefore = default(DateTime?), DateTime? taskFollowUpDateAfter = default(DateTime?), DateTime? startedBefore = default(DateTime?), DateTime? startedAfter = default(DateTime?), DateTime? finishedBefore = default(DateTime?), DateTime? finishedAfter = default(DateTime?), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), string taskVariables = default(string), string processVariables = default(string), bool? variableNamesIgnoreCase = default(bool?), bool? variableValuesIgnoreCase = default(bool?), string taskInvolvedUser = default(string), string taskInvolvedGroup = default(string), string taskHadCandidateUser = default(string), string taskHadCandidateGroup = default(string), bool? withCandidateGroups = default(bool?), bool? withoutCandidateGroups = default(bool?), string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?))
        {
            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (taskId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "taskId", taskId));
            }
            if (taskParentTaskId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "taskParentTaskId", taskParentTaskId));
            }
            if (processInstanceId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processInstanceId", processInstanceId));
            }
            if (processInstanceBusinessKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processInstanceBusinessKey", processInstanceBusinessKey));
            }
            if (processInstanceBusinessKeyIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processInstanceBusinessKeyIn", processInstanceBusinessKeyIn));
            }
            if (processInstanceBusinessKeyLike != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processInstanceBusinessKeyLike", processInstanceBusinessKeyLike));
            }
            if (executionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "executionId", executionId));
            }
            if (processDefinitionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processDefinitionId", processDefinitionId));
            }
            if (processDefinitionKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processDefinitionKey", processDefinitionKey));
            }
            if (processDefinitionName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processDefinitionName", processDefinitionName));
            }
            if (caseInstanceId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "caseInstanceId", caseInstanceId));
            }
            if (caseExecutionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "caseExecutionId", caseExecutionId));
            }
            if (caseDefinitionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "caseDefinitionId", caseDefinitionId));
            }
            if (caseDefinitionKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "caseDefinitionKey", caseDefinitionKey));
            }
            if (caseDefinitionName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "caseDefinitionName", caseDefinitionName));
            }
            if (activityInstanceIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "activityInstanceIdIn", activityInstanceIdIn));
            }
            if (taskName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "taskName", taskName));
            }
            if (taskNameLike != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "taskNameLike", taskNameLike));
            }
            if (taskDescription != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "taskDescription", taskDescription));
            }
            if (taskDescriptionLike != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "taskDescriptionLike", taskDescriptionLike));
            }
            if (taskDefinitionKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "taskDefinitionKey", taskDefinitionKey));
            }
            if (taskDefinitionKeyIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "taskDefinitionKeyIn", taskDefinitionKeyIn));
            }
            if (taskDeleteReason != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "taskDeleteReason", taskDeleteReason));
            }
            if (taskDeleteReasonLike != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "taskDeleteReasonLike", taskDeleteReasonLike));
            }
            if (taskAssignee != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "taskAssignee", taskAssignee));
            }
            if (taskAssigneeLike != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "taskAssigneeLike", taskAssigneeLike));
            }
            if (taskOwner != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "taskOwner", taskOwner));
            }
            if (taskOwnerLike != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "taskOwnerLike", taskOwnerLike));
            }
            if (taskPriority != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "taskPriority", taskPriority));
            }
            if (assigned != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "assigned", assigned));
            }
            if (unassigned != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "unassigned", unassigned));
            }
            if (finished != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "finished", finished));
            }
            if (unfinished != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "unfinished", unfinished));
            }
            if (processFinished != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processFinished", processFinished));
            }
            if (processUnfinished != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processUnfinished", processUnfinished));
            }
            if (taskDueDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "taskDueDate", taskDueDate));
            }
            if (taskDueDateBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "taskDueDateBefore", taskDueDateBefore));
            }
            if (taskDueDateAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "taskDueDateAfter", taskDueDateAfter));
            }
            if (withoutTaskDueDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "withoutTaskDueDate", withoutTaskDueDate));
            }
            if (taskFollowUpDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "taskFollowUpDate", taskFollowUpDate));
            }
            if (taskFollowUpDateBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "taskFollowUpDateBefore", taskFollowUpDateBefore));
            }
            if (taskFollowUpDateAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "taskFollowUpDateAfter", taskFollowUpDateAfter));
            }
            if (startedBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "startedBefore", startedBefore));
            }
            if (startedAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "startedAfter", startedAfter));
            }
            if (finishedBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "finishedBefore", finishedBefore));
            }
            if (finishedAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "finishedAfter", finishedAfter));
            }
            if (tenantIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "tenantIdIn", tenantIdIn));
            }
            if (withoutTenantId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "withoutTenantId", withoutTenantId));
            }
            if (taskVariables != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "taskVariables", taskVariables));
            }
            if (processVariables != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processVariables", processVariables));
            }
            if (variableNamesIgnoreCase != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "variableNamesIgnoreCase", variableNamesIgnoreCase));
            }
            if (variableValuesIgnoreCase != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "variableValuesIgnoreCase", variableValuesIgnoreCase));
            }
            if (taskInvolvedUser != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "taskInvolvedUser", taskInvolvedUser));
            }
            if (taskInvolvedGroup != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "taskInvolvedGroup", taskInvolvedGroup));
            }
            if (taskHadCandidateUser != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "taskHadCandidateUser", taskHadCandidateUser));
            }
            if (taskHadCandidateGroup != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "taskHadCandidateGroup", taskHadCandidateGroup));
            }
            if (withCandidateGroups != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "withCandidateGroups", withCandidateGroups));
            }
            if (withoutCandidateGroups != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "withoutCandidateGroups", withoutCandidateGroups));
            }
            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "sortBy", sortBy));
            }
            if (sortOrder != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "sortOrder", sortOrder));
            }
            if (firstResult != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "firstResult", firstResult));
            }
            if (maxResults != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "maxResults", maxResults));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<HistoricTaskInstanceDto>>("/history/task", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetHistoricTaskInstances", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Tasks (Historic) Queries for historic tasks that fulfill the given parameters. The size of the result set can be retrieved by using the [Get Task Count](https://docs.camunda.org/manual/7.16/reference/rest/history/task/get-task-query-count/) method.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Filter by task id. (optional)</param>
        /// <param name="taskParentTaskId">Filter by parent task id. (optional)</param>
        /// <param name="processInstanceId">Filter by process instance id. (optional)</param>
        /// <param name="processInstanceBusinessKey">Filter by process instance business key. (optional)</param>
        /// <param name="processInstanceBusinessKeyIn">Filter by process instances with one of the give business keys. The keys need to be in a comma-separated list. (optional)</param>
        /// <param name="processInstanceBusinessKeyLike">Filter by  process instance business key that has the parameter value as a substring. (optional)</param>
        /// <param name="executionId">Filter by the id of the execution that executed the task. (optional)</param>
        /// <param name="processDefinitionId">Filter by process definition id. (optional)</param>
        /// <param name="processDefinitionKey">Restrict to tasks that belong to a process definition with the given key. (optional)</param>
        /// <param name="processDefinitionName">Restrict to tasks that belong to a process definition with the given name. (optional)</param>
        /// <param name="caseInstanceId">Filter by case instance id. (optional)</param>
        /// <param name="caseExecutionId">Filter by the id of the case execution that executed the task. (optional)</param>
        /// <param name="caseDefinitionId">Filter by case definition id. (optional)</param>
        /// <param name="caseDefinitionKey">Restrict to tasks that belong to a case definition with the given key. (optional)</param>
        /// <param name="caseDefinitionName">Restrict to tasks that belong to a case definition with the given name. (optional)</param>
        /// <param name="activityInstanceIdIn">Only include tasks which belong to one of the passed comma-separated activity instance ids. (optional)</param>
        /// <param name="taskName">Restrict to tasks that have the given name. (optional)</param>
        /// <param name="taskNameLike">Restrict to tasks that have a name with the given parameter value as substring. (optional)</param>
        /// <param name="taskDescription">Restrict to tasks that have the given description. (optional)</param>
        /// <param name="taskDescriptionLike">Restrict to tasks that have a description that has the parameter value as a substring. (optional)</param>
        /// <param name="taskDefinitionKey">Restrict to tasks that have the given key. (optional)</param>
        /// <param name="taskDefinitionKeyIn">Restrict to tasks that have one of the passed comma-separated task definition keys. (optional)</param>
        /// <param name="taskDeleteReason">Restrict to tasks that have the given delete reason. (optional)</param>
        /// <param name="taskDeleteReasonLike">Restrict to tasks that have a delete reason that has the parameter value as a substring. (optional)</param>
        /// <param name="taskAssignee">Restrict to tasks that the given user is assigned to. (optional)</param>
        /// <param name="taskAssigneeLike">Restrict to tasks that are assigned to users with the parameter value as a substring. (optional)</param>
        /// <param name="taskOwner">Restrict to tasks that the given user owns. (optional)</param>
        /// <param name="taskOwnerLike">Restrict to tasks that are owned by users with the parameter value as a substring. (optional)</param>
        /// <param name="taskPriority">Restrict to tasks that have the given priority. (optional)</param>
        /// <param name="assigned">If set to &#x60;true&#x60;, restricts the query to all tasks that are assigned. (optional)</param>
        /// <param name="unassigned">If set to &#x60;true&#x60;, restricts the query to all tasks that are unassigned. (optional)</param>
        /// <param name="finished">Only include finished tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="unfinished">Only include unfinished tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="processFinished">Only include tasks of finished processes. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="processUnfinished">Only include tasks of unfinished processes. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="taskDueDate">Restrict to tasks that are due on the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="taskDueDateBefore">Restrict to tasks that are due before the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="taskDueDateAfter">Restrict to tasks that are due after the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="withoutTaskDueDate">Only include tasks which have no due date. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="taskFollowUpDate">Restrict to tasks that have a followUp date on the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="taskFollowUpDateBefore">Restrict to tasks that have a followUp date before the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="taskFollowUpDateAfter">Restrict to tasks that have a followUp date after the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="startedBefore">Restrict to tasks that were started before the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="startedAfter">Restrict to tasks that were started after the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="finishedBefore">Restrict to tasks that were finished before the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="finishedAfter">Restrict to tasks that were finished after the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. A task instance must have one of the given tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include historic task instances that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="taskVariables">Only include tasks that have variables with certain values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value. **Note:** Values are always treated as &#x60;String&#x60; objects on server side.   Valid operator values are: * &#x60;eq&#x60; - equal to; * &#x60;neq&#x60; - not equal to; * &#x60;gt&#x60; - greater than; * &#x60;gteq&#x60; - greater than or equal to; * &#x60;lt&#x60; - lower than; * &#x60;lteq&#x60; - lower than or equal to; * &#x60;like&#x60;.  &#x60;key&#x60; and &#x60;value&#x60; may not contain underscore or comma characters. (optional)</param>
        /// <param name="processVariables">Only include tasks that belong to process instances that have variables with certain values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value. **Note:** Values are always treated as &#x60;String&#x60; objects on server side.   Valid operator values are: * &#x60;eq&#x60; - equal to; * &#x60;neq&#x60; - not equal to; * &#x60;gt&#x60; - greater than; * &#x60;gteq&#x60; - greater than or equal to; * &#x60;lt&#x60; - lower than; * &#x60;lteq&#x60; - lower than or equal to; * &#x60;like&#x60;; * &#x60;notLike&#x60;.  &#x60;key&#x60; and &#x60;value&#x60; may not contain underscore or comma characters. (optional)</param>
        /// <param name="variableNamesIgnoreCase">Match the variable name provided in &#x60;taskVariables&#x60; and &#x60;processVariables&#x60; case- insensitively. If set to &#x60;true&#x60; **variableName** and **variablename** are treated as equal. (optional)</param>
        /// <param name="variableValuesIgnoreCase">Match the variable value provided in &#x60;taskVariables&#x60; and &#x60;processVariables&#x60; case- insensitively. If set to &#x60;true&#x60; **variableValue** and **variablevalue** are treated as equal. (optional)</param>
        /// <param name="taskInvolvedUser">Restrict to tasks with a historic identity link to the given user. (optional)</param>
        /// <param name="taskInvolvedGroup">Restrict to tasks with a historic identity link to the given group. (optional)</param>
        /// <param name="taskHadCandidateUser">Restrict to tasks with a historic identity link to the given candidate user. (optional)</param>
        /// <param name="taskHadCandidateGroup">Restrict to tasks with a historic identity link to the given candidate group. (optional)</param>
        /// <param name="withCandidateGroups">Only include tasks which have a candidate group. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="withoutCandidateGroups">Only include tasks which have no candidate group. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;HistoricTaskInstanceDto&gt;</returns>
        public async System.Threading.Tasks.Task<List<HistoricTaskInstanceDto>> GetHistoricTaskInstancesAsync(string taskId = default(string), string taskParentTaskId = default(string), string processInstanceId = default(string), string processInstanceBusinessKey = default(string), string processInstanceBusinessKeyIn = default(string), string processInstanceBusinessKeyLike = default(string), string executionId = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string processDefinitionName = default(string), string caseInstanceId = default(string), string caseExecutionId = default(string), string caseDefinitionId = default(string), string caseDefinitionKey = default(string), string caseDefinitionName = default(string), string activityInstanceIdIn = default(string), string taskName = default(string), string taskNameLike = default(string), string taskDescription = default(string), string taskDescriptionLike = default(string), string taskDefinitionKey = default(string), string taskDefinitionKeyIn = default(string), string taskDeleteReason = default(string), string taskDeleteReasonLike = default(string), string taskAssignee = default(string), string taskAssigneeLike = default(string), string taskOwner = default(string), string taskOwnerLike = default(string), int? taskPriority = default(int?), bool? assigned = default(bool?), bool? unassigned = default(bool?), bool? finished = default(bool?), bool? unfinished = default(bool?), bool? processFinished = default(bool?), bool? processUnfinished = default(bool?), DateTime? taskDueDate = default(DateTime?), DateTime? taskDueDateBefore = default(DateTime?), DateTime? taskDueDateAfter = default(DateTime?), bool? withoutTaskDueDate = default(bool?), DateTime? taskFollowUpDate = default(DateTime?), DateTime? taskFollowUpDateBefore = default(DateTime?), DateTime? taskFollowUpDateAfter = default(DateTime?), DateTime? startedBefore = default(DateTime?), DateTime? startedAfter = default(DateTime?), DateTime? finishedBefore = default(DateTime?), DateTime? finishedAfter = default(DateTime?), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), string taskVariables = default(string), string processVariables = default(string), bool? variableNamesIgnoreCase = default(bool?), bool? variableValuesIgnoreCase = default(bool?), string taskInvolvedUser = default(string), string taskInvolvedGroup = default(string), string taskHadCandidateUser = default(string), string taskHadCandidateGroup = default(string), bool? withCandidateGroups = default(bool?), bool? withoutCandidateGroups = default(bool?), string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<List<HistoricTaskInstanceDto>> localVarResponse = await GetHistoricTaskInstancesWithHttpInfoAsync(taskId, taskParentTaskId, processInstanceId, processInstanceBusinessKey, processInstanceBusinessKeyIn, processInstanceBusinessKeyLike, executionId, processDefinitionId, processDefinitionKey, processDefinitionName, caseInstanceId, caseExecutionId, caseDefinitionId, caseDefinitionKey, caseDefinitionName, activityInstanceIdIn, taskName, taskNameLike, taskDescription, taskDescriptionLike, taskDefinitionKey, taskDefinitionKeyIn, taskDeleteReason, taskDeleteReasonLike, taskAssignee, taskAssigneeLike, taskOwner, taskOwnerLike, taskPriority, assigned, unassigned, finished, unfinished, processFinished, processUnfinished, taskDueDate, taskDueDateBefore, taskDueDateAfter, withoutTaskDueDate, taskFollowUpDate, taskFollowUpDateBefore, taskFollowUpDateAfter, startedBefore, startedAfter, finishedBefore, finishedAfter, tenantIdIn, withoutTenantId, taskVariables, processVariables, variableNamesIgnoreCase, variableValuesIgnoreCase, taskInvolvedUser, taskInvolvedGroup, taskHadCandidateUser, taskHadCandidateGroup, withCandidateGroups, withoutCandidateGroups, sortBy, sortOrder, firstResult, maxResults, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Tasks (Historic) Queries for historic tasks that fulfill the given parameters. The size of the result set can be retrieved by using the [Get Task Count](https://docs.camunda.org/manual/7.16/reference/rest/history/task/get-task-query-count/) method.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Filter by task id. (optional)</param>
        /// <param name="taskParentTaskId">Filter by parent task id. (optional)</param>
        /// <param name="processInstanceId">Filter by process instance id. (optional)</param>
        /// <param name="processInstanceBusinessKey">Filter by process instance business key. (optional)</param>
        /// <param name="processInstanceBusinessKeyIn">Filter by process instances with one of the give business keys. The keys need to be in a comma-separated list. (optional)</param>
        /// <param name="processInstanceBusinessKeyLike">Filter by  process instance business key that has the parameter value as a substring. (optional)</param>
        /// <param name="executionId">Filter by the id of the execution that executed the task. (optional)</param>
        /// <param name="processDefinitionId">Filter by process definition id. (optional)</param>
        /// <param name="processDefinitionKey">Restrict to tasks that belong to a process definition with the given key. (optional)</param>
        /// <param name="processDefinitionName">Restrict to tasks that belong to a process definition with the given name. (optional)</param>
        /// <param name="caseInstanceId">Filter by case instance id. (optional)</param>
        /// <param name="caseExecutionId">Filter by the id of the case execution that executed the task. (optional)</param>
        /// <param name="caseDefinitionId">Filter by case definition id. (optional)</param>
        /// <param name="caseDefinitionKey">Restrict to tasks that belong to a case definition with the given key. (optional)</param>
        /// <param name="caseDefinitionName">Restrict to tasks that belong to a case definition with the given name. (optional)</param>
        /// <param name="activityInstanceIdIn">Only include tasks which belong to one of the passed comma-separated activity instance ids. (optional)</param>
        /// <param name="taskName">Restrict to tasks that have the given name. (optional)</param>
        /// <param name="taskNameLike">Restrict to tasks that have a name with the given parameter value as substring. (optional)</param>
        /// <param name="taskDescription">Restrict to tasks that have the given description. (optional)</param>
        /// <param name="taskDescriptionLike">Restrict to tasks that have a description that has the parameter value as a substring. (optional)</param>
        /// <param name="taskDefinitionKey">Restrict to tasks that have the given key. (optional)</param>
        /// <param name="taskDefinitionKeyIn">Restrict to tasks that have one of the passed comma-separated task definition keys. (optional)</param>
        /// <param name="taskDeleteReason">Restrict to tasks that have the given delete reason. (optional)</param>
        /// <param name="taskDeleteReasonLike">Restrict to tasks that have a delete reason that has the parameter value as a substring. (optional)</param>
        /// <param name="taskAssignee">Restrict to tasks that the given user is assigned to. (optional)</param>
        /// <param name="taskAssigneeLike">Restrict to tasks that are assigned to users with the parameter value as a substring. (optional)</param>
        /// <param name="taskOwner">Restrict to tasks that the given user owns. (optional)</param>
        /// <param name="taskOwnerLike">Restrict to tasks that are owned by users with the parameter value as a substring. (optional)</param>
        /// <param name="taskPriority">Restrict to tasks that have the given priority. (optional)</param>
        /// <param name="assigned">If set to &#x60;true&#x60;, restricts the query to all tasks that are assigned. (optional)</param>
        /// <param name="unassigned">If set to &#x60;true&#x60;, restricts the query to all tasks that are unassigned. (optional)</param>
        /// <param name="finished">Only include finished tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="unfinished">Only include unfinished tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="processFinished">Only include tasks of finished processes. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="processUnfinished">Only include tasks of unfinished processes. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="taskDueDate">Restrict to tasks that are due on the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="taskDueDateBefore">Restrict to tasks that are due before the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="taskDueDateAfter">Restrict to tasks that are due after the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="withoutTaskDueDate">Only include tasks which have no due date. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="taskFollowUpDate">Restrict to tasks that have a followUp date on the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="taskFollowUpDateBefore">Restrict to tasks that have a followUp date before the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="taskFollowUpDateAfter">Restrict to tasks that have a followUp date after the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="startedBefore">Restrict to tasks that were started before the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="startedAfter">Restrict to tasks that were started after the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="finishedBefore">Restrict to tasks that were finished before the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="finishedAfter">Restrict to tasks that were finished after the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. A task instance must have one of the given tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include historic task instances that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="taskVariables">Only include tasks that have variables with certain values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value. **Note:** Values are always treated as &#x60;String&#x60; objects on server side.   Valid operator values are: * &#x60;eq&#x60; - equal to; * &#x60;neq&#x60; - not equal to; * &#x60;gt&#x60; - greater than; * &#x60;gteq&#x60; - greater than or equal to; * &#x60;lt&#x60; - lower than; * &#x60;lteq&#x60; - lower than or equal to; * &#x60;like&#x60;.  &#x60;key&#x60; and &#x60;value&#x60; may not contain underscore or comma characters. (optional)</param>
        /// <param name="processVariables">Only include tasks that belong to process instances that have variables with certain values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value. **Note:** Values are always treated as &#x60;String&#x60; objects on server side.   Valid operator values are: * &#x60;eq&#x60; - equal to; * &#x60;neq&#x60; - not equal to; * &#x60;gt&#x60; - greater than; * &#x60;gteq&#x60; - greater than or equal to; * &#x60;lt&#x60; - lower than; * &#x60;lteq&#x60; - lower than or equal to; * &#x60;like&#x60;; * &#x60;notLike&#x60;.  &#x60;key&#x60; and &#x60;value&#x60; may not contain underscore or comma characters. (optional)</param>
        /// <param name="variableNamesIgnoreCase">Match the variable name provided in &#x60;taskVariables&#x60; and &#x60;processVariables&#x60; case- insensitively. If set to &#x60;true&#x60; **variableName** and **variablename** are treated as equal. (optional)</param>
        /// <param name="variableValuesIgnoreCase">Match the variable value provided in &#x60;taskVariables&#x60; and &#x60;processVariables&#x60; case- insensitively. If set to &#x60;true&#x60; **variableValue** and **variablevalue** are treated as equal. (optional)</param>
        /// <param name="taskInvolvedUser">Restrict to tasks with a historic identity link to the given user. (optional)</param>
        /// <param name="taskInvolvedGroup">Restrict to tasks with a historic identity link to the given group. (optional)</param>
        /// <param name="taskHadCandidateUser">Restrict to tasks with a historic identity link to the given candidate user. (optional)</param>
        /// <param name="taskHadCandidateGroup">Restrict to tasks with a historic identity link to the given candidate group. (optional)</param>
        /// <param name="withCandidateGroups">Only include tasks which have a candidate group. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="withoutCandidateGroups">Only include tasks which have no candidate group. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;HistoricTaskInstanceDto&gt;)</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<List<HistoricTaskInstanceDto>>> GetHistoricTaskInstancesWithHttpInfoAsync(string taskId = default(string), string taskParentTaskId = default(string), string processInstanceId = default(string), string processInstanceBusinessKey = default(string), string processInstanceBusinessKeyIn = default(string), string processInstanceBusinessKeyLike = default(string), string executionId = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string processDefinitionName = default(string), string caseInstanceId = default(string), string caseExecutionId = default(string), string caseDefinitionId = default(string), string caseDefinitionKey = default(string), string caseDefinitionName = default(string), string activityInstanceIdIn = default(string), string taskName = default(string), string taskNameLike = default(string), string taskDescription = default(string), string taskDescriptionLike = default(string), string taskDefinitionKey = default(string), string taskDefinitionKeyIn = default(string), string taskDeleteReason = default(string), string taskDeleteReasonLike = default(string), string taskAssignee = default(string), string taskAssigneeLike = default(string), string taskOwner = default(string), string taskOwnerLike = default(string), int? taskPriority = default(int?), bool? assigned = default(bool?), bool? unassigned = default(bool?), bool? finished = default(bool?), bool? unfinished = default(bool?), bool? processFinished = default(bool?), bool? processUnfinished = default(bool?), DateTime? taskDueDate = default(DateTime?), DateTime? taskDueDateBefore = default(DateTime?), DateTime? taskDueDateAfter = default(DateTime?), bool? withoutTaskDueDate = default(bool?), DateTime? taskFollowUpDate = default(DateTime?), DateTime? taskFollowUpDateBefore = default(DateTime?), DateTime? taskFollowUpDateAfter = default(DateTime?), DateTime? startedBefore = default(DateTime?), DateTime? startedAfter = default(DateTime?), DateTime? finishedBefore = default(DateTime?), DateTime? finishedAfter = default(DateTime?), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), string taskVariables = default(string), string processVariables = default(string), bool? variableNamesIgnoreCase = default(bool?), bool? variableValuesIgnoreCase = default(bool?), string taskInvolvedUser = default(string), string taskInvolvedGroup = default(string), string taskHadCandidateUser = default(string), string taskHadCandidateGroup = default(string), bool? withCandidateGroups = default(bool?), bool? withoutCandidateGroups = default(bool?), string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (taskId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "taskId", taskId));
            }
            if (taskParentTaskId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "taskParentTaskId", taskParentTaskId));
            }
            if (processInstanceId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processInstanceId", processInstanceId));
            }
            if (processInstanceBusinessKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processInstanceBusinessKey", processInstanceBusinessKey));
            }
            if (processInstanceBusinessKeyIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processInstanceBusinessKeyIn", processInstanceBusinessKeyIn));
            }
            if (processInstanceBusinessKeyLike != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processInstanceBusinessKeyLike", processInstanceBusinessKeyLike));
            }
            if (executionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "executionId", executionId));
            }
            if (processDefinitionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processDefinitionId", processDefinitionId));
            }
            if (processDefinitionKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processDefinitionKey", processDefinitionKey));
            }
            if (processDefinitionName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processDefinitionName", processDefinitionName));
            }
            if (caseInstanceId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "caseInstanceId", caseInstanceId));
            }
            if (caseExecutionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "caseExecutionId", caseExecutionId));
            }
            if (caseDefinitionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "caseDefinitionId", caseDefinitionId));
            }
            if (caseDefinitionKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "caseDefinitionKey", caseDefinitionKey));
            }
            if (caseDefinitionName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "caseDefinitionName", caseDefinitionName));
            }
            if (activityInstanceIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "activityInstanceIdIn", activityInstanceIdIn));
            }
            if (taskName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "taskName", taskName));
            }
            if (taskNameLike != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "taskNameLike", taskNameLike));
            }
            if (taskDescription != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "taskDescription", taskDescription));
            }
            if (taskDescriptionLike != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "taskDescriptionLike", taskDescriptionLike));
            }
            if (taskDefinitionKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "taskDefinitionKey", taskDefinitionKey));
            }
            if (taskDefinitionKeyIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "taskDefinitionKeyIn", taskDefinitionKeyIn));
            }
            if (taskDeleteReason != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "taskDeleteReason", taskDeleteReason));
            }
            if (taskDeleteReasonLike != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "taskDeleteReasonLike", taskDeleteReasonLike));
            }
            if (taskAssignee != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "taskAssignee", taskAssignee));
            }
            if (taskAssigneeLike != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "taskAssigneeLike", taskAssigneeLike));
            }
            if (taskOwner != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "taskOwner", taskOwner));
            }
            if (taskOwnerLike != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "taskOwnerLike", taskOwnerLike));
            }
            if (taskPriority != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "taskPriority", taskPriority));
            }
            if (assigned != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "assigned", assigned));
            }
            if (unassigned != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "unassigned", unassigned));
            }
            if (finished != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "finished", finished));
            }
            if (unfinished != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "unfinished", unfinished));
            }
            if (processFinished != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processFinished", processFinished));
            }
            if (processUnfinished != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processUnfinished", processUnfinished));
            }
            if (taskDueDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "taskDueDate", taskDueDate));
            }
            if (taskDueDateBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "taskDueDateBefore", taskDueDateBefore));
            }
            if (taskDueDateAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "taskDueDateAfter", taskDueDateAfter));
            }
            if (withoutTaskDueDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "withoutTaskDueDate", withoutTaskDueDate));
            }
            if (taskFollowUpDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "taskFollowUpDate", taskFollowUpDate));
            }
            if (taskFollowUpDateBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "taskFollowUpDateBefore", taskFollowUpDateBefore));
            }
            if (taskFollowUpDateAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "taskFollowUpDateAfter", taskFollowUpDateAfter));
            }
            if (startedBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "startedBefore", startedBefore));
            }
            if (startedAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "startedAfter", startedAfter));
            }
            if (finishedBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "finishedBefore", finishedBefore));
            }
            if (finishedAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "finishedAfter", finishedAfter));
            }
            if (tenantIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "tenantIdIn", tenantIdIn));
            }
            if (withoutTenantId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "withoutTenantId", withoutTenantId));
            }
            if (taskVariables != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "taskVariables", taskVariables));
            }
            if (processVariables != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processVariables", processVariables));
            }
            if (variableNamesIgnoreCase != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "variableNamesIgnoreCase", variableNamesIgnoreCase));
            }
            if (variableValuesIgnoreCase != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "variableValuesIgnoreCase", variableValuesIgnoreCase));
            }
            if (taskInvolvedUser != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "taskInvolvedUser", taskInvolvedUser));
            }
            if (taskInvolvedGroup != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "taskInvolvedGroup", taskInvolvedGroup));
            }
            if (taskHadCandidateUser != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "taskHadCandidateUser", taskHadCandidateUser));
            }
            if (taskHadCandidateGroup != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "taskHadCandidateGroup", taskHadCandidateGroup));
            }
            if (withCandidateGroups != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "withCandidateGroups", withCandidateGroups));
            }
            if (withoutCandidateGroups != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "withoutCandidateGroups", withoutCandidateGroups));
            }
            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "sortBy", sortBy));
            }
            if (sortOrder != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "sortOrder", sortOrder));
            }
            if (firstResult != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "firstResult", firstResult));
            }
            if (maxResults != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "maxResults", maxResults));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<HistoricTaskInstanceDto>>("/history/task", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetHistoricTaskInstances", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Task Count Queries for the number of historic tasks that fulfill the given parameters. Takes the same parameters as the [Get Tasks (Historic)](https://docs.camunda.org/manual/7.16/reference/rest/history/task/get-task-query/) method.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Filter by task id. (optional)</param>
        /// <param name="taskParentTaskId">Filter by parent task id. (optional)</param>
        /// <param name="processInstanceId">Filter by process instance id. (optional)</param>
        /// <param name="processInstanceBusinessKey">Filter by process instance business key. (optional)</param>
        /// <param name="processInstanceBusinessKeyIn">Filter by process instances with one of the give business keys. The keys need to be in a comma-separated list. (optional)</param>
        /// <param name="processInstanceBusinessKeyLike">Filter by  process instance business key that has the parameter value as a substring. (optional)</param>
        /// <param name="executionId">Filter by the id of the execution that executed the task. (optional)</param>
        /// <param name="processDefinitionId">Filter by process definition id. (optional)</param>
        /// <param name="processDefinitionKey">Restrict to tasks that belong to a process definition with the given key. (optional)</param>
        /// <param name="processDefinitionName">Restrict to tasks that belong to a process definition with the given name. (optional)</param>
        /// <param name="caseInstanceId">Filter by case instance id. (optional)</param>
        /// <param name="caseExecutionId">Filter by the id of the case execution that executed the task. (optional)</param>
        /// <param name="caseDefinitionId">Filter by case definition id. (optional)</param>
        /// <param name="caseDefinitionKey">Restrict to tasks that belong to a case definition with the given key. (optional)</param>
        /// <param name="caseDefinitionName">Restrict to tasks that belong to a case definition with the given name. (optional)</param>
        /// <param name="activityInstanceIdIn">Only include tasks which belong to one of the passed comma-separated activity instance ids. (optional)</param>
        /// <param name="taskName">Restrict to tasks that have the given name. (optional)</param>
        /// <param name="taskNameLike">Restrict to tasks that have a name with the given parameter value as substring. (optional)</param>
        /// <param name="taskDescription">Restrict to tasks that have the given description. (optional)</param>
        /// <param name="taskDescriptionLike">Restrict to tasks that have a description that has the parameter value as a substring. (optional)</param>
        /// <param name="taskDefinitionKey">Restrict to tasks that have the given key. (optional)</param>
        /// <param name="taskDefinitionKeyIn">Restrict to tasks that have one of the passed comma-separated task definition keys. (optional)</param>
        /// <param name="taskDeleteReason">Restrict to tasks that have the given delete reason. (optional)</param>
        /// <param name="taskDeleteReasonLike">Restrict to tasks that have a delete reason that has the parameter value as a substring. (optional)</param>
        /// <param name="taskAssignee">Restrict to tasks that the given user is assigned to. (optional)</param>
        /// <param name="taskAssigneeLike">Restrict to tasks that are assigned to users with the parameter value as a substring. (optional)</param>
        /// <param name="taskOwner">Restrict to tasks that the given user owns. (optional)</param>
        /// <param name="taskOwnerLike">Restrict to tasks that are owned by users with the parameter value as a substring. (optional)</param>
        /// <param name="taskPriority">Restrict to tasks that have the given priority. (optional)</param>
        /// <param name="assigned">If set to &#x60;true&#x60;, restricts the query to all tasks that are assigned. (optional)</param>
        /// <param name="unassigned">If set to &#x60;true&#x60;, restricts the query to all tasks that are unassigned. (optional)</param>
        /// <param name="finished">Only include finished tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="unfinished">Only include unfinished tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="processFinished">Only include tasks of finished processes. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="processUnfinished">Only include tasks of unfinished processes. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="taskDueDate">Restrict to tasks that are due on the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="taskDueDateBefore">Restrict to tasks that are due before the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="taskDueDateAfter">Restrict to tasks that are due after the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="withoutTaskDueDate">Only include tasks which have no due date. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="taskFollowUpDate">Restrict to tasks that have a followUp date on the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="taskFollowUpDateBefore">Restrict to tasks that have a followUp date before the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="taskFollowUpDateAfter">Restrict to tasks that have a followUp date after the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="startedBefore">Restrict to tasks that were started before the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="startedAfter">Restrict to tasks that were started after the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="finishedBefore">Restrict to tasks that were finished before the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="finishedAfter">Restrict to tasks that were finished after the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. A task instance must have one of the given tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include historic task instances that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="taskVariables">Only include tasks that have variables with certain values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value. **Note:** Values are always treated as &#x60;String&#x60; objects on server side.   Valid operator values are: * &#x60;eq&#x60; - equal to; * &#x60;neq&#x60; - not equal to; * &#x60;gt&#x60; - greater than; * &#x60;gteq&#x60; - greater than or equal to; * &#x60;lt&#x60; - lower than; * &#x60;lteq&#x60; - lower than or equal to; * &#x60;like&#x60;.  &#x60;key&#x60; and &#x60;value&#x60; may not contain underscore or comma characters. (optional)</param>
        /// <param name="processVariables">Only include tasks that belong to process instances that have variables with certain values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value. **Note:** Values are always treated as &#x60;String&#x60; objects on server side.   Valid operator values are: * &#x60;eq&#x60; - equal to; * &#x60;neq&#x60; - not equal to; * &#x60;gt&#x60; - greater than; * &#x60;gteq&#x60; - greater than or equal to; * &#x60;lt&#x60; - lower than; * &#x60;lteq&#x60; - lower than or equal to; * &#x60;like&#x60;; * &#x60;notLike&#x60;.  &#x60;key&#x60; and &#x60;value&#x60; may not contain underscore or comma characters. (optional)</param>
        /// <param name="variableNamesIgnoreCase">Match the variable name provided in &#x60;taskVariables&#x60; and &#x60;processVariables&#x60; case- insensitively. If set to &#x60;true&#x60; **variableName** and **variablename** are treated as equal. (optional)</param>
        /// <param name="variableValuesIgnoreCase">Match the variable value provided in &#x60;taskVariables&#x60; and &#x60;processVariables&#x60; case- insensitively. If set to &#x60;true&#x60; **variableValue** and **variablevalue** are treated as equal. (optional)</param>
        /// <param name="taskInvolvedUser">Restrict to tasks with a historic identity link to the given user. (optional)</param>
        /// <param name="taskInvolvedGroup">Restrict to tasks with a historic identity link to the given group. (optional)</param>
        /// <param name="taskHadCandidateUser">Restrict to tasks with a historic identity link to the given candidate user. (optional)</param>
        /// <param name="taskHadCandidateGroup">Restrict to tasks with a historic identity link to the given candidate group. (optional)</param>
        /// <param name="withCandidateGroups">Only include tasks which have a candidate group. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="withoutCandidateGroups">Only include tasks which have no candidate group. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <returns>CountResultDto</returns>
        public CountResultDto GetHistoricTaskInstancesCount(string taskId = default(string), string taskParentTaskId = default(string), string processInstanceId = default(string), string processInstanceBusinessKey = default(string), string processInstanceBusinessKeyIn = default(string), string processInstanceBusinessKeyLike = default(string), string executionId = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string processDefinitionName = default(string), string caseInstanceId = default(string), string caseExecutionId = default(string), string caseDefinitionId = default(string), string caseDefinitionKey = default(string), string caseDefinitionName = default(string), string activityInstanceIdIn = default(string), string taskName = default(string), string taskNameLike = default(string), string taskDescription = default(string), string taskDescriptionLike = default(string), string taskDefinitionKey = default(string), string taskDefinitionKeyIn = default(string), string taskDeleteReason = default(string), string taskDeleteReasonLike = default(string), string taskAssignee = default(string), string taskAssigneeLike = default(string), string taskOwner = default(string), string taskOwnerLike = default(string), int? taskPriority = default(int?), bool? assigned = default(bool?), bool? unassigned = default(bool?), bool? finished = default(bool?), bool? unfinished = default(bool?), bool? processFinished = default(bool?), bool? processUnfinished = default(bool?), DateTime? taskDueDate = default(DateTime?), DateTime? taskDueDateBefore = default(DateTime?), DateTime? taskDueDateAfter = default(DateTime?), bool? withoutTaskDueDate = default(bool?), DateTime? taskFollowUpDate = default(DateTime?), DateTime? taskFollowUpDateBefore = default(DateTime?), DateTime? taskFollowUpDateAfter = default(DateTime?), DateTime? startedBefore = default(DateTime?), DateTime? startedAfter = default(DateTime?), DateTime? finishedBefore = default(DateTime?), DateTime? finishedAfter = default(DateTime?), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), string taskVariables = default(string), string processVariables = default(string), bool? variableNamesIgnoreCase = default(bool?), bool? variableValuesIgnoreCase = default(bool?), string taskInvolvedUser = default(string), string taskInvolvedGroup = default(string), string taskHadCandidateUser = default(string), string taskHadCandidateGroup = default(string), bool? withCandidateGroups = default(bool?), bool? withoutCandidateGroups = default(bool?))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<CountResultDto> localVarResponse = GetHistoricTaskInstancesCountWithHttpInfo(taskId, taskParentTaskId, processInstanceId, processInstanceBusinessKey, processInstanceBusinessKeyIn, processInstanceBusinessKeyLike, executionId, processDefinitionId, processDefinitionKey, processDefinitionName, caseInstanceId, caseExecutionId, caseDefinitionId, caseDefinitionKey, caseDefinitionName, activityInstanceIdIn, taskName, taskNameLike, taskDescription, taskDescriptionLike, taskDefinitionKey, taskDefinitionKeyIn, taskDeleteReason, taskDeleteReasonLike, taskAssignee, taskAssigneeLike, taskOwner, taskOwnerLike, taskPriority, assigned, unassigned, finished, unfinished, processFinished, processUnfinished, taskDueDate, taskDueDateBefore, taskDueDateAfter, withoutTaskDueDate, taskFollowUpDate, taskFollowUpDateBefore, taskFollowUpDateAfter, startedBefore, startedAfter, finishedBefore, finishedAfter, tenantIdIn, withoutTenantId, taskVariables, processVariables, variableNamesIgnoreCase, variableValuesIgnoreCase, taskInvolvedUser, taskInvolvedGroup, taskHadCandidateUser, taskHadCandidateGroup, withCandidateGroups, withoutCandidateGroups);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Task Count Queries for the number of historic tasks that fulfill the given parameters. Takes the same parameters as the [Get Tasks (Historic)](https://docs.camunda.org/manual/7.16/reference/rest/history/task/get-task-query/) method.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Filter by task id. (optional)</param>
        /// <param name="taskParentTaskId">Filter by parent task id. (optional)</param>
        /// <param name="processInstanceId">Filter by process instance id. (optional)</param>
        /// <param name="processInstanceBusinessKey">Filter by process instance business key. (optional)</param>
        /// <param name="processInstanceBusinessKeyIn">Filter by process instances with one of the give business keys. The keys need to be in a comma-separated list. (optional)</param>
        /// <param name="processInstanceBusinessKeyLike">Filter by  process instance business key that has the parameter value as a substring. (optional)</param>
        /// <param name="executionId">Filter by the id of the execution that executed the task. (optional)</param>
        /// <param name="processDefinitionId">Filter by process definition id. (optional)</param>
        /// <param name="processDefinitionKey">Restrict to tasks that belong to a process definition with the given key. (optional)</param>
        /// <param name="processDefinitionName">Restrict to tasks that belong to a process definition with the given name. (optional)</param>
        /// <param name="caseInstanceId">Filter by case instance id. (optional)</param>
        /// <param name="caseExecutionId">Filter by the id of the case execution that executed the task. (optional)</param>
        /// <param name="caseDefinitionId">Filter by case definition id. (optional)</param>
        /// <param name="caseDefinitionKey">Restrict to tasks that belong to a case definition with the given key. (optional)</param>
        /// <param name="caseDefinitionName">Restrict to tasks that belong to a case definition with the given name. (optional)</param>
        /// <param name="activityInstanceIdIn">Only include tasks which belong to one of the passed comma-separated activity instance ids. (optional)</param>
        /// <param name="taskName">Restrict to tasks that have the given name. (optional)</param>
        /// <param name="taskNameLike">Restrict to tasks that have a name with the given parameter value as substring. (optional)</param>
        /// <param name="taskDescription">Restrict to tasks that have the given description. (optional)</param>
        /// <param name="taskDescriptionLike">Restrict to tasks that have a description that has the parameter value as a substring. (optional)</param>
        /// <param name="taskDefinitionKey">Restrict to tasks that have the given key. (optional)</param>
        /// <param name="taskDefinitionKeyIn">Restrict to tasks that have one of the passed comma-separated task definition keys. (optional)</param>
        /// <param name="taskDeleteReason">Restrict to tasks that have the given delete reason. (optional)</param>
        /// <param name="taskDeleteReasonLike">Restrict to tasks that have a delete reason that has the parameter value as a substring. (optional)</param>
        /// <param name="taskAssignee">Restrict to tasks that the given user is assigned to. (optional)</param>
        /// <param name="taskAssigneeLike">Restrict to tasks that are assigned to users with the parameter value as a substring. (optional)</param>
        /// <param name="taskOwner">Restrict to tasks that the given user owns. (optional)</param>
        /// <param name="taskOwnerLike">Restrict to tasks that are owned by users with the parameter value as a substring. (optional)</param>
        /// <param name="taskPriority">Restrict to tasks that have the given priority. (optional)</param>
        /// <param name="assigned">If set to &#x60;true&#x60;, restricts the query to all tasks that are assigned. (optional)</param>
        /// <param name="unassigned">If set to &#x60;true&#x60;, restricts the query to all tasks that are unassigned. (optional)</param>
        /// <param name="finished">Only include finished tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="unfinished">Only include unfinished tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="processFinished">Only include tasks of finished processes. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="processUnfinished">Only include tasks of unfinished processes. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="taskDueDate">Restrict to tasks that are due on the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="taskDueDateBefore">Restrict to tasks that are due before the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="taskDueDateAfter">Restrict to tasks that are due after the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="withoutTaskDueDate">Only include tasks which have no due date. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="taskFollowUpDate">Restrict to tasks that have a followUp date on the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="taskFollowUpDateBefore">Restrict to tasks that have a followUp date before the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="taskFollowUpDateAfter">Restrict to tasks that have a followUp date after the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="startedBefore">Restrict to tasks that were started before the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="startedAfter">Restrict to tasks that were started after the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="finishedBefore">Restrict to tasks that were finished before the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="finishedAfter">Restrict to tasks that were finished after the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. A task instance must have one of the given tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include historic task instances that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="taskVariables">Only include tasks that have variables with certain values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value. **Note:** Values are always treated as &#x60;String&#x60; objects on server side.   Valid operator values are: * &#x60;eq&#x60; - equal to; * &#x60;neq&#x60; - not equal to; * &#x60;gt&#x60; - greater than; * &#x60;gteq&#x60; - greater than or equal to; * &#x60;lt&#x60; - lower than; * &#x60;lteq&#x60; - lower than or equal to; * &#x60;like&#x60;.  &#x60;key&#x60; and &#x60;value&#x60; may not contain underscore or comma characters. (optional)</param>
        /// <param name="processVariables">Only include tasks that belong to process instances that have variables with certain values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value. **Note:** Values are always treated as &#x60;String&#x60; objects on server side.   Valid operator values are: * &#x60;eq&#x60; - equal to; * &#x60;neq&#x60; - not equal to; * &#x60;gt&#x60; - greater than; * &#x60;gteq&#x60; - greater than or equal to; * &#x60;lt&#x60; - lower than; * &#x60;lteq&#x60; - lower than or equal to; * &#x60;like&#x60;; * &#x60;notLike&#x60;.  &#x60;key&#x60; and &#x60;value&#x60; may not contain underscore or comma characters. (optional)</param>
        /// <param name="variableNamesIgnoreCase">Match the variable name provided in &#x60;taskVariables&#x60; and &#x60;processVariables&#x60; case- insensitively. If set to &#x60;true&#x60; **variableName** and **variablename** are treated as equal. (optional)</param>
        /// <param name="variableValuesIgnoreCase">Match the variable value provided in &#x60;taskVariables&#x60; and &#x60;processVariables&#x60; case- insensitively. If set to &#x60;true&#x60; **variableValue** and **variablevalue** are treated as equal. (optional)</param>
        /// <param name="taskInvolvedUser">Restrict to tasks with a historic identity link to the given user. (optional)</param>
        /// <param name="taskInvolvedGroup">Restrict to tasks with a historic identity link to the given group. (optional)</param>
        /// <param name="taskHadCandidateUser">Restrict to tasks with a historic identity link to the given candidate user. (optional)</param>
        /// <param name="taskHadCandidateGroup">Restrict to tasks with a historic identity link to the given candidate group. (optional)</param>
        /// <param name="withCandidateGroups">Only include tasks which have a candidate group. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="withoutCandidateGroups">Only include tasks which have no candidate group. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <returns>ApiResponse of CountResultDto</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<CountResultDto> GetHistoricTaskInstancesCountWithHttpInfo(string taskId = default(string), string taskParentTaskId = default(string), string processInstanceId = default(string), string processInstanceBusinessKey = default(string), string processInstanceBusinessKeyIn = default(string), string processInstanceBusinessKeyLike = default(string), string executionId = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string processDefinitionName = default(string), string caseInstanceId = default(string), string caseExecutionId = default(string), string caseDefinitionId = default(string), string caseDefinitionKey = default(string), string caseDefinitionName = default(string), string activityInstanceIdIn = default(string), string taskName = default(string), string taskNameLike = default(string), string taskDescription = default(string), string taskDescriptionLike = default(string), string taskDefinitionKey = default(string), string taskDefinitionKeyIn = default(string), string taskDeleteReason = default(string), string taskDeleteReasonLike = default(string), string taskAssignee = default(string), string taskAssigneeLike = default(string), string taskOwner = default(string), string taskOwnerLike = default(string), int? taskPriority = default(int?), bool? assigned = default(bool?), bool? unassigned = default(bool?), bool? finished = default(bool?), bool? unfinished = default(bool?), bool? processFinished = default(bool?), bool? processUnfinished = default(bool?), DateTime? taskDueDate = default(DateTime?), DateTime? taskDueDateBefore = default(DateTime?), DateTime? taskDueDateAfter = default(DateTime?), bool? withoutTaskDueDate = default(bool?), DateTime? taskFollowUpDate = default(DateTime?), DateTime? taskFollowUpDateBefore = default(DateTime?), DateTime? taskFollowUpDateAfter = default(DateTime?), DateTime? startedBefore = default(DateTime?), DateTime? startedAfter = default(DateTime?), DateTime? finishedBefore = default(DateTime?), DateTime? finishedAfter = default(DateTime?), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), string taskVariables = default(string), string processVariables = default(string), bool? variableNamesIgnoreCase = default(bool?), bool? variableValuesIgnoreCase = default(bool?), string taskInvolvedUser = default(string), string taskInvolvedGroup = default(string), string taskHadCandidateUser = default(string), string taskHadCandidateGroup = default(string), bool? withCandidateGroups = default(bool?), bool? withoutCandidateGroups = default(bool?))
        {
            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (taskId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "taskId", taskId));
            }
            if (taskParentTaskId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "taskParentTaskId", taskParentTaskId));
            }
            if (processInstanceId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processInstanceId", processInstanceId));
            }
            if (processInstanceBusinessKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processInstanceBusinessKey", processInstanceBusinessKey));
            }
            if (processInstanceBusinessKeyIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processInstanceBusinessKeyIn", processInstanceBusinessKeyIn));
            }
            if (processInstanceBusinessKeyLike != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processInstanceBusinessKeyLike", processInstanceBusinessKeyLike));
            }
            if (executionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "executionId", executionId));
            }
            if (processDefinitionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processDefinitionId", processDefinitionId));
            }
            if (processDefinitionKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processDefinitionKey", processDefinitionKey));
            }
            if (processDefinitionName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processDefinitionName", processDefinitionName));
            }
            if (caseInstanceId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "caseInstanceId", caseInstanceId));
            }
            if (caseExecutionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "caseExecutionId", caseExecutionId));
            }
            if (caseDefinitionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "caseDefinitionId", caseDefinitionId));
            }
            if (caseDefinitionKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "caseDefinitionKey", caseDefinitionKey));
            }
            if (caseDefinitionName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "caseDefinitionName", caseDefinitionName));
            }
            if (activityInstanceIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "activityInstanceIdIn", activityInstanceIdIn));
            }
            if (taskName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "taskName", taskName));
            }
            if (taskNameLike != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "taskNameLike", taskNameLike));
            }
            if (taskDescription != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "taskDescription", taskDescription));
            }
            if (taskDescriptionLike != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "taskDescriptionLike", taskDescriptionLike));
            }
            if (taskDefinitionKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "taskDefinitionKey", taskDefinitionKey));
            }
            if (taskDefinitionKeyIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "taskDefinitionKeyIn", taskDefinitionKeyIn));
            }
            if (taskDeleteReason != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "taskDeleteReason", taskDeleteReason));
            }
            if (taskDeleteReasonLike != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "taskDeleteReasonLike", taskDeleteReasonLike));
            }
            if (taskAssignee != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "taskAssignee", taskAssignee));
            }
            if (taskAssigneeLike != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "taskAssigneeLike", taskAssigneeLike));
            }
            if (taskOwner != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "taskOwner", taskOwner));
            }
            if (taskOwnerLike != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "taskOwnerLike", taskOwnerLike));
            }
            if (taskPriority != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "taskPriority", taskPriority));
            }
            if (assigned != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "assigned", assigned));
            }
            if (unassigned != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "unassigned", unassigned));
            }
            if (finished != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "finished", finished));
            }
            if (unfinished != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "unfinished", unfinished));
            }
            if (processFinished != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processFinished", processFinished));
            }
            if (processUnfinished != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processUnfinished", processUnfinished));
            }
            if (taskDueDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "taskDueDate", taskDueDate));
            }
            if (taskDueDateBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "taskDueDateBefore", taskDueDateBefore));
            }
            if (taskDueDateAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "taskDueDateAfter", taskDueDateAfter));
            }
            if (withoutTaskDueDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "withoutTaskDueDate", withoutTaskDueDate));
            }
            if (taskFollowUpDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "taskFollowUpDate", taskFollowUpDate));
            }
            if (taskFollowUpDateBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "taskFollowUpDateBefore", taskFollowUpDateBefore));
            }
            if (taskFollowUpDateAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "taskFollowUpDateAfter", taskFollowUpDateAfter));
            }
            if (startedBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "startedBefore", startedBefore));
            }
            if (startedAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "startedAfter", startedAfter));
            }
            if (finishedBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "finishedBefore", finishedBefore));
            }
            if (finishedAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "finishedAfter", finishedAfter));
            }
            if (tenantIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "tenantIdIn", tenantIdIn));
            }
            if (withoutTenantId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "withoutTenantId", withoutTenantId));
            }
            if (taskVariables != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "taskVariables", taskVariables));
            }
            if (processVariables != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processVariables", processVariables));
            }
            if (variableNamesIgnoreCase != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "variableNamesIgnoreCase", variableNamesIgnoreCase));
            }
            if (variableValuesIgnoreCase != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "variableValuesIgnoreCase", variableValuesIgnoreCase));
            }
            if (taskInvolvedUser != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "taskInvolvedUser", taskInvolvedUser));
            }
            if (taskInvolvedGroup != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "taskInvolvedGroup", taskInvolvedGroup));
            }
            if (taskHadCandidateUser != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "taskHadCandidateUser", taskHadCandidateUser));
            }
            if (taskHadCandidateGroup != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "taskHadCandidateGroup", taskHadCandidateGroup));
            }
            if (withCandidateGroups != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "withCandidateGroups", withCandidateGroups));
            }
            if (withoutCandidateGroups != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "withoutCandidateGroups", withoutCandidateGroups));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<CountResultDto>("/history/task/count", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetHistoricTaskInstancesCount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Task Count Queries for the number of historic tasks that fulfill the given parameters. Takes the same parameters as the [Get Tasks (Historic)](https://docs.camunda.org/manual/7.16/reference/rest/history/task/get-task-query/) method.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Filter by task id. (optional)</param>
        /// <param name="taskParentTaskId">Filter by parent task id. (optional)</param>
        /// <param name="processInstanceId">Filter by process instance id. (optional)</param>
        /// <param name="processInstanceBusinessKey">Filter by process instance business key. (optional)</param>
        /// <param name="processInstanceBusinessKeyIn">Filter by process instances with one of the give business keys. The keys need to be in a comma-separated list. (optional)</param>
        /// <param name="processInstanceBusinessKeyLike">Filter by  process instance business key that has the parameter value as a substring. (optional)</param>
        /// <param name="executionId">Filter by the id of the execution that executed the task. (optional)</param>
        /// <param name="processDefinitionId">Filter by process definition id. (optional)</param>
        /// <param name="processDefinitionKey">Restrict to tasks that belong to a process definition with the given key. (optional)</param>
        /// <param name="processDefinitionName">Restrict to tasks that belong to a process definition with the given name. (optional)</param>
        /// <param name="caseInstanceId">Filter by case instance id. (optional)</param>
        /// <param name="caseExecutionId">Filter by the id of the case execution that executed the task. (optional)</param>
        /// <param name="caseDefinitionId">Filter by case definition id. (optional)</param>
        /// <param name="caseDefinitionKey">Restrict to tasks that belong to a case definition with the given key. (optional)</param>
        /// <param name="caseDefinitionName">Restrict to tasks that belong to a case definition with the given name. (optional)</param>
        /// <param name="activityInstanceIdIn">Only include tasks which belong to one of the passed comma-separated activity instance ids. (optional)</param>
        /// <param name="taskName">Restrict to tasks that have the given name. (optional)</param>
        /// <param name="taskNameLike">Restrict to tasks that have a name with the given parameter value as substring. (optional)</param>
        /// <param name="taskDescription">Restrict to tasks that have the given description. (optional)</param>
        /// <param name="taskDescriptionLike">Restrict to tasks that have a description that has the parameter value as a substring. (optional)</param>
        /// <param name="taskDefinitionKey">Restrict to tasks that have the given key. (optional)</param>
        /// <param name="taskDefinitionKeyIn">Restrict to tasks that have one of the passed comma-separated task definition keys. (optional)</param>
        /// <param name="taskDeleteReason">Restrict to tasks that have the given delete reason. (optional)</param>
        /// <param name="taskDeleteReasonLike">Restrict to tasks that have a delete reason that has the parameter value as a substring. (optional)</param>
        /// <param name="taskAssignee">Restrict to tasks that the given user is assigned to. (optional)</param>
        /// <param name="taskAssigneeLike">Restrict to tasks that are assigned to users with the parameter value as a substring. (optional)</param>
        /// <param name="taskOwner">Restrict to tasks that the given user owns. (optional)</param>
        /// <param name="taskOwnerLike">Restrict to tasks that are owned by users with the parameter value as a substring. (optional)</param>
        /// <param name="taskPriority">Restrict to tasks that have the given priority. (optional)</param>
        /// <param name="assigned">If set to &#x60;true&#x60;, restricts the query to all tasks that are assigned. (optional)</param>
        /// <param name="unassigned">If set to &#x60;true&#x60;, restricts the query to all tasks that are unassigned. (optional)</param>
        /// <param name="finished">Only include finished tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="unfinished">Only include unfinished tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="processFinished">Only include tasks of finished processes. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="processUnfinished">Only include tasks of unfinished processes. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="taskDueDate">Restrict to tasks that are due on the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="taskDueDateBefore">Restrict to tasks that are due before the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="taskDueDateAfter">Restrict to tasks that are due after the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="withoutTaskDueDate">Only include tasks which have no due date. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="taskFollowUpDate">Restrict to tasks that have a followUp date on the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="taskFollowUpDateBefore">Restrict to tasks that have a followUp date before the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="taskFollowUpDateAfter">Restrict to tasks that have a followUp date after the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="startedBefore">Restrict to tasks that were started before the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="startedAfter">Restrict to tasks that were started after the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="finishedBefore">Restrict to tasks that were finished before the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="finishedAfter">Restrict to tasks that were finished after the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. A task instance must have one of the given tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include historic task instances that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="taskVariables">Only include tasks that have variables with certain values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value. **Note:** Values are always treated as &#x60;String&#x60; objects on server side.   Valid operator values are: * &#x60;eq&#x60; - equal to; * &#x60;neq&#x60; - not equal to; * &#x60;gt&#x60; - greater than; * &#x60;gteq&#x60; - greater than or equal to; * &#x60;lt&#x60; - lower than; * &#x60;lteq&#x60; - lower than or equal to; * &#x60;like&#x60;.  &#x60;key&#x60; and &#x60;value&#x60; may not contain underscore or comma characters. (optional)</param>
        /// <param name="processVariables">Only include tasks that belong to process instances that have variables with certain values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value. **Note:** Values are always treated as &#x60;String&#x60; objects on server side.   Valid operator values are: * &#x60;eq&#x60; - equal to; * &#x60;neq&#x60; - not equal to; * &#x60;gt&#x60; - greater than; * &#x60;gteq&#x60; - greater than or equal to; * &#x60;lt&#x60; - lower than; * &#x60;lteq&#x60; - lower than or equal to; * &#x60;like&#x60;; * &#x60;notLike&#x60;.  &#x60;key&#x60; and &#x60;value&#x60; may not contain underscore or comma characters. (optional)</param>
        /// <param name="variableNamesIgnoreCase">Match the variable name provided in &#x60;taskVariables&#x60; and &#x60;processVariables&#x60; case- insensitively. If set to &#x60;true&#x60; **variableName** and **variablename** are treated as equal. (optional)</param>
        /// <param name="variableValuesIgnoreCase">Match the variable value provided in &#x60;taskVariables&#x60; and &#x60;processVariables&#x60; case- insensitively. If set to &#x60;true&#x60; **variableValue** and **variablevalue** are treated as equal. (optional)</param>
        /// <param name="taskInvolvedUser">Restrict to tasks with a historic identity link to the given user. (optional)</param>
        /// <param name="taskInvolvedGroup">Restrict to tasks with a historic identity link to the given group. (optional)</param>
        /// <param name="taskHadCandidateUser">Restrict to tasks with a historic identity link to the given candidate user. (optional)</param>
        /// <param name="taskHadCandidateGroup">Restrict to tasks with a historic identity link to the given candidate group. (optional)</param>
        /// <param name="withCandidateGroups">Only include tasks which have a candidate group. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="withoutCandidateGroups">Only include tasks which have no candidate group. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CountResultDto</returns>
        public async System.Threading.Tasks.Task<CountResultDto> GetHistoricTaskInstancesCountAsync(string taskId = default(string), string taskParentTaskId = default(string), string processInstanceId = default(string), string processInstanceBusinessKey = default(string), string processInstanceBusinessKeyIn = default(string), string processInstanceBusinessKeyLike = default(string), string executionId = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string processDefinitionName = default(string), string caseInstanceId = default(string), string caseExecutionId = default(string), string caseDefinitionId = default(string), string caseDefinitionKey = default(string), string caseDefinitionName = default(string), string activityInstanceIdIn = default(string), string taskName = default(string), string taskNameLike = default(string), string taskDescription = default(string), string taskDescriptionLike = default(string), string taskDefinitionKey = default(string), string taskDefinitionKeyIn = default(string), string taskDeleteReason = default(string), string taskDeleteReasonLike = default(string), string taskAssignee = default(string), string taskAssigneeLike = default(string), string taskOwner = default(string), string taskOwnerLike = default(string), int? taskPriority = default(int?), bool? assigned = default(bool?), bool? unassigned = default(bool?), bool? finished = default(bool?), bool? unfinished = default(bool?), bool? processFinished = default(bool?), bool? processUnfinished = default(bool?), DateTime? taskDueDate = default(DateTime?), DateTime? taskDueDateBefore = default(DateTime?), DateTime? taskDueDateAfter = default(DateTime?), bool? withoutTaskDueDate = default(bool?), DateTime? taskFollowUpDate = default(DateTime?), DateTime? taskFollowUpDateBefore = default(DateTime?), DateTime? taskFollowUpDateAfter = default(DateTime?), DateTime? startedBefore = default(DateTime?), DateTime? startedAfter = default(DateTime?), DateTime? finishedBefore = default(DateTime?), DateTime? finishedAfter = default(DateTime?), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), string taskVariables = default(string), string processVariables = default(string), bool? variableNamesIgnoreCase = default(bool?), bool? variableValuesIgnoreCase = default(bool?), string taskInvolvedUser = default(string), string taskInvolvedGroup = default(string), string taskHadCandidateUser = default(string), string taskHadCandidateGroup = default(string), bool? withCandidateGroups = default(bool?), bool? withoutCandidateGroups = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<CountResultDto> localVarResponse = await GetHistoricTaskInstancesCountWithHttpInfoAsync(taskId, taskParentTaskId, processInstanceId, processInstanceBusinessKey, processInstanceBusinessKeyIn, processInstanceBusinessKeyLike, executionId, processDefinitionId, processDefinitionKey, processDefinitionName, caseInstanceId, caseExecutionId, caseDefinitionId, caseDefinitionKey, caseDefinitionName, activityInstanceIdIn, taskName, taskNameLike, taskDescription, taskDescriptionLike, taskDefinitionKey, taskDefinitionKeyIn, taskDeleteReason, taskDeleteReasonLike, taskAssignee, taskAssigneeLike, taskOwner, taskOwnerLike, taskPriority, assigned, unassigned, finished, unfinished, processFinished, processUnfinished, taskDueDate, taskDueDateBefore, taskDueDateAfter, withoutTaskDueDate, taskFollowUpDate, taskFollowUpDateBefore, taskFollowUpDateAfter, startedBefore, startedAfter, finishedBefore, finishedAfter, tenantIdIn, withoutTenantId, taskVariables, processVariables, variableNamesIgnoreCase, variableValuesIgnoreCase, taskInvolvedUser, taskInvolvedGroup, taskHadCandidateUser, taskHadCandidateGroup, withCandidateGroups, withoutCandidateGroups, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Task Count Queries for the number of historic tasks that fulfill the given parameters. Takes the same parameters as the [Get Tasks (Historic)](https://docs.camunda.org/manual/7.16/reference/rest/history/task/get-task-query/) method.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Filter by task id. (optional)</param>
        /// <param name="taskParentTaskId">Filter by parent task id. (optional)</param>
        /// <param name="processInstanceId">Filter by process instance id. (optional)</param>
        /// <param name="processInstanceBusinessKey">Filter by process instance business key. (optional)</param>
        /// <param name="processInstanceBusinessKeyIn">Filter by process instances with one of the give business keys. The keys need to be in a comma-separated list. (optional)</param>
        /// <param name="processInstanceBusinessKeyLike">Filter by  process instance business key that has the parameter value as a substring. (optional)</param>
        /// <param name="executionId">Filter by the id of the execution that executed the task. (optional)</param>
        /// <param name="processDefinitionId">Filter by process definition id. (optional)</param>
        /// <param name="processDefinitionKey">Restrict to tasks that belong to a process definition with the given key. (optional)</param>
        /// <param name="processDefinitionName">Restrict to tasks that belong to a process definition with the given name. (optional)</param>
        /// <param name="caseInstanceId">Filter by case instance id. (optional)</param>
        /// <param name="caseExecutionId">Filter by the id of the case execution that executed the task. (optional)</param>
        /// <param name="caseDefinitionId">Filter by case definition id. (optional)</param>
        /// <param name="caseDefinitionKey">Restrict to tasks that belong to a case definition with the given key. (optional)</param>
        /// <param name="caseDefinitionName">Restrict to tasks that belong to a case definition with the given name. (optional)</param>
        /// <param name="activityInstanceIdIn">Only include tasks which belong to one of the passed comma-separated activity instance ids. (optional)</param>
        /// <param name="taskName">Restrict to tasks that have the given name. (optional)</param>
        /// <param name="taskNameLike">Restrict to tasks that have a name with the given parameter value as substring. (optional)</param>
        /// <param name="taskDescription">Restrict to tasks that have the given description. (optional)</param>
        /// <param name="taskDescriptionLike">Restrict to tasks that have a description that has the parameter value as a substring. (optional)</param>
        /// <param name="taskDefinitionKey">Restrict to tasks that have the given key. (optional)</param>
        /// <param name="taskDefinitionKeyIn">Restrict to tasks that have one of the passed comma-separated task definition keys. (optional)</param>
        /// <param name="taskDeleteReason">Restrict to tasks that have the given delete reason. (optional)</param>
        /// <param name="taskDeleteReasonLike">Restrict to tasks that have a delete reason that has the parameter value as a substring. (optional)</param>
        /// <param name="taskAssignee">Restrict to tasks that the given user is assigned to. (optional)</param>
        /// <param name="taskAssigneeLike">Restrict to tasks that are assigned to users with the parameter value as a substring. (optional)</param>
        /// <param name="taskOwner">Restrict to tasks that the given user owns. (optional)</param>
        /// <param name="taskOwnerLike">Restrict to tasks that are owned by users with the parameter value as a substring. (optional)</param>
        /// <param name="taskPriority">Restrict to tasks that have the given priority. (optional)</param>
        /// <param name="assigned">If set to &#x60;true&#x60;, restricts the query to all tasks that are assigned. (optional)</param>
        /// <param name="unassigned">If set to &#x60;true&#x60;, restricts the query to all tasks that are unassigned. (optional)</param>
        /// <param name="finished">Only include finished tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="unfinished">Only include unfinished tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="processFinished">Only include tasks of finished processes. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="processUnfinished">Only include tasks of unfinished processes. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="taskDueDate">Restrict to tasks that are due on the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="taskDueDateBefore">Restrict to tasks that are due before the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="taskDueDateAfter">Restrict to tasks that are due after the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="withoutTaskDueDate">Only include tasks which have no due date. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="taskFollowUpDate">Restrict to tasks that have a followUp date on the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="taskFollowUpDateBefore">Restrict to tasks that have a followUp date before the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="taskFollowUpDateAfter">Restrict to tasks that have a followUp date after the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="startedBefore">Restrict to tasks that were started before the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="startedAfter">Restrict to tasks that were started after the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="finishedBefore">Restrict to tasks that were finished before the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="finishedAfter">Restrict to tasks that were finished after the given date. By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. A task instance must have one of the given tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include historic task instances that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="taskVariables">Only include tasks that have variables with certain values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value. **Note:** Values are always treated as &#x60;String&#x60; objects on server side.   Valid operator values are: * &#x60;eq&#x60; - equal to; * &#x60;neq&#x60; - not equal to; * &#x60;gt&#x60; - greater than; * &#x60;gteq&#x60; - greater than or equal to; * &#x60;lt&#x60; - lower than; * &#x60;lteq&#x60; - lower than or equal to; * &#x60;like&#x60;.  &#x60;key&#x60; and &#x60;value&#x60; may not contain underscore or comma characters. (optional)</param>
        /// <param name="processVariables">Only include tasks that belong to process instances that have variables with certain values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value. **Note:** Values are always treated as &#x60;String&#x60; objects on server side.   Valid operator values are: * &#x60;eq&#x60; - equal to; * &#x60;neq&#x60; - not equal to; * &#x60;gt&#x60; - greater than; * &#x60;gteq&#x60; - greater than or equal to; * &#x60;lt&#x60; - lower than; * &#x60;lteq&#x60; - lower than or equal to; * &#x60;like&#x60;; * &#x60;notLike&#x60;.  &#x60;key&#x60; and &#x60;value&#x60; may not contain underscore or comma characters. (optional)</param>
        /// <param name="variableNamesIgnoreCase">Match the variable name provided in &#x60;taskVariables&#x60; and &#x60;processVariables&#x60; case- insensitively. If set to &#x60;true&#x60; **variableName** and **variablename** are treated as equal. (optional)</param>
        /// <param name="variableValuesIgnoreCase">Match the variable value provided in &#x60;taskVariables&#x60; and &#x60;processVariables&#x60; case- insensitively. If set to &#x60;true&#x60; **variableValue** and **variablevalue** are treated as equal. (optional)</param>
        /// <param name="taskInvolvedUser">Restrict to tasks with a historic identity link to the given user. (optional)</param>
        /// <param name="taskInvolvedGroup">Restrict to tasks with a historic identity link to the given group. (optional)</param>
        /// <param name="taskHadCandidateUser">Restrict to tasks with a historic identity link to the given candidate user. (optional)</param>
        /// <param name="taskHadCandidateGroup">Restrict to tasks with a historic identity link to the given candidate group. (optional)</param>
        /// <param name="withCandidateGroups">Only include tasks which have a candidate group. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="withoutCandidateGroups">Only include tasks which have no candidate group. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CountResultDto)</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<CountResultDto>> GetHistoricTaskInstancesCountWithHttpInfoAsync(string taskId = default(string), string taskParentTaskId = default(string), string processInstanceId = default(string), string processInstanceBusinessKey = default(string), string processInstanceBusinessKeyIn = default(string), string processInstanceBusinessKeyLike = default(string), string executionId = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string processDefinitionName = default(string), string caseInstanceId = default(string), string caseExecutionId = default(string), string caseDefinitionId = default(string), string caseDefinitionKey = default(string), string caseDefinitionName = default(string), string activityInstanceIdIn = default(string), string taskName = default(string), string taskNameLike = default(string), string taskDescription = default(string), string taskDescriptionLike = default(string), string taskDefinitionKey = default(string), string taskDefinitionKeyIn = default(string), string taskDeleteReason = default(string), string taskDeleteReasonLike = default(string), string taskAssignee = default(string), string taskAssigneeLike = default(string), string taskOwner = default(string), string taskOwnerLike = default(string), int? taskPriority = default(int?), bool? assigned = default(bool?), bool? unassigned = default(bool?), bool? finished = default(bool?), bool? unfinished = default(bool?), bool? processFinished = default(bool?), bool? processUnfinished = default(bool?), DateTime? taskDueDate = default(DateTime?), DateTime? taskDueDateBefore = default(DateTime?), DateTime? taskDueDateAfter = default(DateTime?), bool? withoutTaskDueDate = default(bool?), DateTime? taskFollowUpDate = default(DateTime?), DateTime? taskFollowUpDateBefore = default(DateTime?), DateTime? taskFollowUpDateAfter = default(DateTime?), DateTime? startedBefore = default(DateTime?), DateTime? startedAfter = default(DateTime?), DateTime? finishedBefore = default(DateTime?), DateTime? finishedAfter = default(DateTime?), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), string taskVariables = default(string), string processVariables = default(string), bool? variableNamesIgnoreCase = default(bool?), bool? variableValuesIgnoreCase = default(bool?), string taskInvolvedUser = default(string), string taskInvolvedGroup = default(string), string taskHadCandidateUser = default(string), string taskHadCandidateGroup = default(string), bool? withCandidateGroups = default(bool?), bool? withoutCandidateGroups = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (taskId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "taskId", taskId));
            }
            if (taskParentTaskId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "taskParentTaskId", taskParentTaskId));
            }
            if (processInstanceId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processInstanceId", processInstanceId));
            }
            if (processInstanceBusinessKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processInstanceBusinessKey", processInstanceBusinessKey));
            }
            if (processInstanceBusinessKeyIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processInstanceBusinessKeyIn", processInstanceBusinessKeyIn));
            }
            if (processInstanceBusinessKeyLike != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processInstanceBusinessKeyLike", processInstanceBusinessKeyLike));
            }
            if (executionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "executionId", executionId));
            }
            if (processDefinitionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processDefinitionId", processDefinitionId));
            }
            if (processDefinitionKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processDefinitionKey", processDefinitionKey));
            }
            if (processDefinitionName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processDefinitionName", processDefinitionName));
            }
            if (caseInstanceId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "caseInstanceId", caseInstanceId));
            }
            if (caseExecutionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "caseExecutionId", caseExecutionId));
            }
            if (caseDefinitionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "caseDefinitionId", caseDefinitionId));
            }
            if (caseDefinitionKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "caseDefinitionKey", caseDefinitionKey));
            }
            if (caseDefinitionName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "caseDefinitionName", caseDefinitionName));
            }
            if (activityInstanceIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "activityInstanceIdIn", activityInstanceIdIn));
            }
            if (taskName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "taskName", taskName));
            }
            if (taskNameLike != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "taskNameLike", taskNameLike));
            }
            if (taskDescription != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "taskDescription", taskDescription));
            }
            if (taskDescriptionLike != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "taskDescriptionLike", taskDescriptionLike));
            }
            if (taskDefinitionKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "taskDefinitionKey", taskDefinitionKey));
            }
            if (taskDefinitionKeyIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "taskDefinitionKeyIn", taskDefinitionKeyIn));
            }
            if (taskDeleteReason != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "taskDeleteReason", taskDeleteReason));
            }
            if (taskDeleteReasonLike != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "taskDeleteReasonLike", taskDeleteReasonLike));
            }
            if (taskAssignee != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "taskAssignee", taskAssignee));
            }
            if (taskAssigneeLike != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "taskAssigneeLike", taskAssigneeLike));
            }
            if (taskOwner != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "taskOwner", taskOwner));
            }
            if (taskOwnerLike != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "taskOwnerLike", taskOwnerLike));
            }
            if (taskPriority != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "taskPriority", taskPriority));
            }
            if (assigned != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "assigned", assigned));
            }
            if (unassigned != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "unassigned", unassigned));
            }
            if (finished != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "finished", finished));
            }
            if (unfinished != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "unfinished", unfinished));
            }
            if (processFinished != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processFinished", processFinished));
            }
            if (processUnfinished != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processUnfinished", processUnfinished));
            }
            if (taskDueDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "taskDueDate", taskDueDate));
            }
            if (taskDueDateBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "taskDueDateBefore", taskDueDateBefore));
            }
            if (taskDueDateAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "taskDueDateAfter", taskDueDateAfter));
            }
            if (withoutTaskDueDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "withoutTaskDueDate", withoutTaskDueDate));
            }
            if (taskFollowUpDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "taskFollowUpDate", taskFollowUpDate));
            }
            if (taskFollowUpDateBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "taskFollowUpDateBefore", taskFollowUpDateBefore));
            }
            if (taskFollowUpDateAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "taskFollowUpDateAfter", taskFollowUpDateAfter));
            }
            if (startedBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "startedBefore", startedBefore));
            }
            if (startedAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "startedAfter", startedAfter));
            }
            if (finishedBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "finishedBefore", finishedBefore));
            }
            if (finishedAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "finishedAfter", finishedAfter));
            }
            if (tenantIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "tenantIdIn", tenantIdIn));
            }
            if (withoutTenantId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "withoutTenantId", withoutTenantId));
            }
            if (taskVariables != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "taskVariables", taskVariables));
            }
            if (processVariables != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processVariables", processVariables));
            }
            if (variableNamesIgnoreCase != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "variableNamesIgnoreCase", variableNamesIgnoreCase));
            }
            if (variableValuesIgnoreCase != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "variableValuesIgnoreCase", variableValuesIgnoreCase));
            }
            if (taskInvolvedUser != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "taskInvolvedUser", taskInvolvedUser));
            }
            if (taskInvolvedGroup != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "taskInvolvedGroup", taskInvolvedGroup));
            }
            if (taskHadCandidateUser != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "taskHadCandidateUser", taskHadCandidateUser));
            }
            if (taskHadCandidateGroup != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "taskHadCandidateGroup", taskHadCandidateGroup));
            }
            if (withCandidateGroups != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "withCandidateGroups", withCandidateGroups));
            }
            if (withoutCandidateGroups != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "withoutCandidateGroups", withoutCandidateGroups));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<CountResultDto>("/history/task/count", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetHistoricTaskInstancesCount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Tasks (Historic) (POST) Queries for historic tasks that fulfill the given parameters. This method is slightly more powerful than the [Get Tasks (Historic)](https://docs.camunda.org/manual/7.16/reference/rest/history/task/get-task-query/) method because it allows filtering by multiple process or task variables of types &#x60;String&#x60;, &#x60;Number&#x60; or &#x60;Boolean&#x60;. The size of the result set can be retrieved by using the [Get Task Count (POST)](https://docs.camunda.org/manual/7.16/reference/rest/history/task/post-task-query-count/) method.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="historicTaskInstanceQueryDto"> (optional)</param>
        /// <returns>List&lt;HistoricTaskInstanceDto&gt;</returns>
        public List<HistoricTaskInstanceDto> QueryHistoricTaskInstances(int? firstResult = default(int?), int? maxResults = default(int?), HistoricTaskInstanceQueryDto historicTaskInstanceQueryDto = default(HistoricTaskInstanceQueryDto))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<List<HistoricTaskInstanceDto>> localVarResponse = QueryHistoricTaskInstancesWithHttpInfo(firstResult, maxResults, historicTaskInstanceQueryDto);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Tasks (Historic) (POST) Queries for historic tasks that fulfill the given parameters. This method is slightly more powerful than the [Get Tasks (Historic)](https://docs.camunda.org/manual/7.16/reference/rest/history/task/get-task-query/) method because it allows filtering by multiple process or task variables of types &#x60;String&#x60;, &#x60;Number&#x60; or &#x60;Boolean&#x60;. The size of the result set can be retrieved by using the [Get Task Count (POST)](https://docs.camunda.org/manual/7.16/reference/rest/history/task/post-task-query-count/) method.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="historicTaskInstanceQueryDto"> (optional)</param>
        /// <returns>ApiResponse of List&lt;HistoricTaskInstanceDto&gt;</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<List<HistoricTaskInstanceDto>> QueryHistoricTaskInstancesWithHttpInfo(int? firstResult = default(int?), int? maxResults = default(int?), HistoricTaskInstanceQueryDto historicTaskInstanceQueryDto = default(HistoricTaskInstanceQueryDto))
        {
            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (firstResult != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "firstResult", firstResult));
            }
            if (maxResults != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "maxResults", maxResults));
            }
            localVarRequestOptions.Data = historicTaskInstanceQueryDto;


            // make the HTTP request
            var localVarResponse = this.Client.Post<List<HistoricTaskInstanceDto>>("/history/task", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QueryHistoricTaskInstances", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Tasks (Historic) (POST) Queries for historic tasks that fulfill the given parameters. This method is slightly more powerful than the [Get Tasks (Historic)](https://docs.camunda.org/manual/7.16/reference/rest/history/task/get-task-query/) method because it allows filtering by multiple process or task variables of types &#x60;String&#x60;, &#x60;Number&#x60; or &#x60;Boolean&#x60;. The size of the result set can be retrieved by using the [Get Task Count (POST)](https://docs.camunda.org/manual/7.16/reference/rest/history/task/post-task-query-count/) method.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="historicTaskInstanceQueryDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;HistoricTaskInstanceDto&gt;</returns>
        public async System.Threading.Tasks.Task<List<HistoricTaskInstanceDto>> QueryHistoricTaskInstancesAsync(int? firstResult = default(int?), int? maxResults = default(int?), HistoricTaskInstanceQueryDto historicTaskInstanceQueryDto = default(HistoricTaskInstanceQueryDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<List<HistoricTaskInstanceDto>> localVarResponse = await QueryHistoricTaskInstancesWithHttpInfoAsync(firstResult, maxResults, historicTaskInstanceQueryDto, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Tasks (Historic) (POST) Queries for historic tasks that fulfill the given parameters. This method is slightly more powerful than the [Get Tasks (Historic)](https://docs.camunda.org/manual/7.16/reference/rest/history/task/get-task-query/) method because it allows filtering by multiple process or task variables of types &#x60;String&#x60;, &#x60;Number&#x60; or &#x60;Boolean&#x60;. The size of the result set can be retrieved by using the [Get Task Count (POST)](https://docs.camunda.org/manual/7.16/reference/rest/history/task/post-task-query-count/) method.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="historicTaskInstanceQueryDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;HistoricTaskInstanceDto&gt;)</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<List<HistoricTaskInstanceDto>>> QueryHistoricTaskInstancesWithHttpInfoAsync(int? firstResult = default(int?), int? maxResults = default(int?), HistoricTaskInstanceQueryDto historicTaskInstanceQueryDto = default(HistoricTaskInstanceQueryDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (firstResult != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "firstResult", firstResult));
            }
            if (maxResults != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "maxResults", maxResults));
            }
            localVarRequestOptions.Data = historicTaskInstanceQueryDto;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<List<HistoricTaskInstanceDto>>("/history/task", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QueryHistoricTaskInstances", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Task Count (POST) Queries for the number of historic tasks that fulfill the given parameters. Takes the same parameters as the [Get Tasks (Historic)](https://docs.camunda.org/manual/7.16/reference/rest/history/task/get-task-query/) method. Corresponds to the size of the result set of the [Get Tasks (Historic) (POST)](https://docs.camunda.org/manual/7.16/reference/rest/history/task/post-task-query/) method and takes the same parameters.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="historicTaskInstanceQueryDto"> (optional)</param>
        /// <returns>CountResultDto</returns>
        public CountResultDto QueryHistoricTaskInstancesCount(HistoricTaskInstanceQueryDto historicTaskInstanceQueryDto = default(HistoricTaskInstanceQueryDto))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<CountResultDto> localVarResponse = QueryHistoricTaskInstancesCountWithHttpInfo(historicTaskInstanceQueryDto);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Task Count (POST) Queries for the number of historic tasks that fulfill the given parameters. Takes the same parameters as the [Get Tasks (Historic)](https://docs.camunda.org/manual/7.16/reference/rest/history/task/get-task-query/) method. Corresponds to the size of the result set of the [Get Tasks (Historic) (POST)](https://docs.camunda.org/manual/7.16/reference/rest/history/task/post-task-query/) method and takes the same parameters.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="historicTaskInstanceQueryDto"> (optional)</param>
        /// <returns>ApiResponse of CountResultDto</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<CountResultDto> QueryHistoricTaskInstancesCountWithHttpInfo(HistoricTaskInstanceQueryDto historicTaskInstanceQueryDto = default(HistoricTaskInstanceQueryDto))
        {
            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = historicTaskInstanceQueryDto;


            // make the HTTP request
            var localVarResponse = this.Client.Post<CountResultDto>("/history/task/count", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QueryHistoricTaskInstancesCount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Task Count (POST) Queries for the number of historic tasks that fulfill the given parameters. Takes the same parameters as the [Get Tasks (Historic)](https://docs.camunda.org/manual/7.16/reference/rest/history/task/get-task-query/) method. Corresponds to the size of the result set of the [Get Tasks (Historic) (POST)](https://docs.camunda.org/manual/7.16/reference/rest/history/task/post-task-query/) method and takes the same parameters.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="historicTaskInstanceQueryDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CountResultDto</returns>
        public async System.Threading.Tasks.Task<CountResultDto> QueryHistoricTaskInstancesCountAsync(HistoricTaskInstanceQueryDto historicTaskInstanceQueryDto = default(HistoricTaskInstanceQueryDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<CountResultDto> localVarResponse = await QueryHistoricTaskInstancesCountWithHttpInfoAsync(historicTaskInstanceQueryDto, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Task Count (POST) Queries for the number of historic tasks that fulfill the given parameters. Takes the same parameters as the [Get Tasks (Historic)](https://docs.camunda.org/manual/7.16/reference/rest/history/task/get-task-query/) method. Corresponds to the size of the result set of the [Get Tasks (Historic) (POST)](https://docs.camunda.org/manual/7.16/reference/rest/history/task/post-task-query/) method and takes the same parameters.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="historicTaskInstanceQueryDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CountResultDto)</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<CountResultDto>> QueryHistoricTaskInstancesCountWithHttpInfoAsync(HistoricTaskInstanceQueryDto historicTaskInstanceQueryDto = default(HistoricTaskInstanceQueryDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = historicTaskInstanceQueryDto;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<CountResultDto>("/history/task/count", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QueryHistoricTaskInstancesCount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
