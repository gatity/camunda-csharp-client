/*
 * Camunda Platform REST API
 *
 * OpenApi Spec for Camunda Platform REST API.
 *
 * The version of the OpenAPI document: 7.16.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Camunda.OpenApi.Client.Client;
using Camunda.OpenApi.Client.Model;

namespace Camunda.OpenApi.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEventSubscriptionApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get List
        /// </summary>
        /// <remarks>
        /// Queries for event subscriptions that fulfill given parameters. The size of the result set can be retrieved by using the [Get Event Subscriptions count](https://docs.camunda.org/manual/7.16/reference/rest/event-subscription/get-query-count/) method.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventSubscriptionId">Only select subscription with the given id. (optional)</param>
        /// <param name="eventName">Only select subscriptions for events with the given name. (optional)</param>
        /// <param name="eventType">Only select subscriptions for events with the given type. Valid values: &#x60;message&#x60;, &#x60;signal&#x60;, &#x60;compensate&#x60; and &#x60;conditional&#x60;. (optional)</param>
        /// <param name="executionId">Only select subscriptions that belong to an execution with the given id. (optional)</param>
        /// <param name="processInstanceId">Only select subscriptions that belong to a process instance with the given id. (optional)</param>
        /// <param name="activityId">Only select subscriptions that belong to an activity with the given id. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. Only select subscriptions that belong to one of the given tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only select subscriptions which have no tenant id. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="includeEventSubscriptionsWithoutTenantId">Select event subscriptions which have no tenant id. Can be used in combination with tenantIdIn parameter. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <returns>List&lt;EventSubscriptionDto&gt;</returns>
        List<EventSubscriptionDto> GetEventSubscriptions(string eventSubscriptionId = default(string), string eventName = default(string), string eventType = default(string), string executionId = default(string), string processInstanceId = default(string), string activityId = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), bool? includeEventSubscriptionsWithoutTenantId = default(bool?), string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?));

        /// <summary>
        /// Get List
        /// </summary>
        /// <remarks>
        /// Queries for event subscriptions that fulfill given parameters. The size of the result set can be retrieved by using the [Get Event Subscriptions count](https://docs.camunda.org/manual/7.16/reference/rest/event-subscription/get-query-count/) method.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventSubscriptionId">Only select subscription with the given id. (optional)</param>
        /// <param name="eventName">Only select subscriptions for events with the given name. (optional)</param>
        /// <param name="eventType">Only select subscriptions for events with the given type. Valid values: &#x60;message&#x60;, &#x60;signal&#x60;, &#x60;compensate&#x60; and &#x60;conditional&#x60;. (optional)</param>
        /// <param name="executionId">Only select subscriptions that belong to an execution with the given id. (optional)</param>
        /// <param name="processInstanceId">Only select subscriptions that belong to a process instance with the given id. (optional)</param>
        /// <param name="activityId">Only select subscriptions that belong to an activity with the given id. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. Only select subscriptions that belong to one of the given tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only select subscriptions which have no tenant id. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="includeEventSubscriptionsWithoutTenantId">Select event subscriptions which have no tenant id. Can be used in combination with tenantIdIn parameter. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <returns>ApiResponse of List&lt;EventSubscriptionDto&gt;</returns>
        ApiResponse<List<EventSubscriptionDto>> GetEventSubscriptionsWithHttpInfo(string eventSubscriptionId = default(string), string eventName = default(string), string eventType = default(string), string executionId = default(string), string processInstanceId = default(string), string activityId = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), bool? includeEventSubscriptionsWithoutTenantId = default(bool?), string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?));
        /// <summary>
        /// Get List Count
        /// </summary>
        /// <remarks>
        /// Queries for the number of event subscriptions that fulfill given parameters. Takes the same parameters as the [Get Event Subscriptions](https://docs.camunda.org/manual/7.16/reference/rest/event-subscription/get-query/) method.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventSubscriptionId">Only select subscription with the given id. (optional)</param>
        /// <param name="eventName">Only select subscriptions for events with the given name. (optional)</param>
        /// <param name="eventType">Only select subscriptions for events with the given type. Valid values: &#x60;message&#x60;, &#x60;signal&#x60;, &#x60;compensate&#x60; and &#x60;conditional&#x60;. (optional)</param>
        /// <param name="executionId">Only select subscriptions that belong to an execution with the given id. (optional)</param>
        /// <param name="processInstanceId">Only select subscriptions that belong to a process instance with the given id. (optional)</param>
        /// <param name="activityId">Only select subscriptions that belong to an activity with the given id. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. Only select subscriptions that belong to one of the given tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only select subscriptions which have no tenant id. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="includeEventSubscriptionsWithoutTenantId">Select event subscriptions which have no tenant id. Can be used in combination with tenantIdIn parameter. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <returns>CountResultDto</returns>
        CountResultDto GetEventSubscriptionsCount(string eventSubscriptionId = default(string), string eventName = default(string), string eventType = default(string), string executionId = default(string), string processInstanceId = default(string), string activityId = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), bool? includeEventSubscriptionsWithoutTenantId = default(bool?));

        /// <summary>
        /// Get List Count
        /// </summary>
        /// <remarks>
        /// Queries for the number of event subscriptions that fulfill given parameters. Takes the same parameters as the [Get Event Subscriptions](https://docs.camunda.org/manual/7.16/reference/rest/event-subscription/get-query/) method.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventSubscriptionId">Only select subscription with the given id. (optional)</param>
        /// <param name="eventName">Only select subscriptions for events with the given name. (optional)</param>
        /// <param name="eventType">Only select subscriptions for events with the given type. Valid values: &#x60;message&#x60;, &#x60;signal&#x60;, &#x60;compensate&#x60; and &#x60;conditional&#x60;. (optional)</param>
        /// <param name="executionId">Only select subscriptions that belong to an execution with the given id. (optional)</param>
        /// <param name="processInstanceId">Only select subscriptions that belong to a process instance with the given id. (optional)</param>
        /// <param name="activityId">Only select subscriptions that belong to an activity with the given id. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. Only select subscriptions that belong to one of the given tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only select subscriptions which have no tenant id. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="includeEventSubscriptionsWithoutTenantId">Select event subscriptions which have no tenant id. Can be used in combination with tenantIdIn parameter. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <returns>ApiResponse of CountResultDto</returns>
        ApiResponse<CountResultDto> GetEventSubscriptionsCountWithHttpInfo(string eventSubscriptionId = default(string), string eventName = default(string), string eventType = default(string), string executionId = default(string), string processInstanceId = default(string), string activityId = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), bool? includeEventSubscriptionsWithoutTenantId = default(bool?));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEventSubscriptionApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get List
        /// </summary>
        /// <remarks>
        /// Queries for event subscriptions that fulfill given parameters. The size of the result set can be retrieved by using the [Get Event Subscriptions count](https://docs.camunda.org/manual/7.16/reference/rest/event-subscription/get-query-count/) method.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventSubscriptionId">Only select subscription with the given id. (optional)</param>
        /// <param name="eventName">Only select subscriptions for events with the given name. (optional)</param>
        /// <param name="eventType">Only select subscriptions for events with the given type. Valid values: &#x60;message&#x60;, &#x60;signal&#x60;, &#x60;compensate&#x60; and &#x60;conditional&#x60;. (optional)</param>
        /// <param name="executionId">Only select subscriptions that belong to an execution with the given id. (optional)</param>
        /// <param name="processInstanceId">Only select subscriptions that belong to a process instance with the given id. (optional)</param>
        /// <param name="activityId">Only select subscriptions that belong to an activity with the given id. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. Only select subscriptions that belong to one of the given tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only select subscriptions which have no tenant id. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="includeEventSubscriptionsWithoutTenantId">Select event subscriptions which have no tenant id. Can be used in combination with tenantIdIn parameter. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;EventSubscriptionDto&gt;</returns>
        System.Threading.Tasks.Task<List<EventSubscriptionDto>> GetEventSubscriptionsAsync(string eventSubscriptionId = default(string), string eventName = default(string), string eventType = default(string), string executionId = default(string), string processInstanceId = default(string), string activityId = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), bool? includeEventSubscriptionsWithoutTenantId = default(bool?), string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get List
        /// </summary>
        /// <remarks>
        /// Queries for event subscriptions that fulfill given parameters. The size of the result set can be retrieved by using the [Get Event Subscriptions count](https://docs.camunda.org/manual/7.16/reference/rest/event-subscription/get-query-count/) method.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventSubscriptionId">Only select subscription with the given id. (optional)</param>
        /// <param name="eventName">Only select subscriptions for events with the given name. (optional)</param>
        /// <param name="eventType">Only select subscriptions for events with the given type. Valid values: &#x60;message&#x60;, &#x60;signal&#x60;, &#x60;compensate&#x60; and &#x60;conditional&#x60;. (optional)</param>
        /// <param name="executionId">Only select subscriptions that belong to an execution with the given id. (optional)</param>
        /// <param name="processInstanceId">Only select subscriptions that belong to a process instance with the given id. (optional)</param>
        /// <param name="activityId">Only select subscriptions that belong to an activity with the given id. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. Only select subscriptions that belong to one of the given tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only select subscriptions which have no tenant id. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="includeEventSubscriptionsWithoutTenantId">Select event subscriptions which have no tenant id. Can be used in combination with tenantIdIn parameter. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;EventSubscriptionDto&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<EventSubscriptionDto>>> GetEventSubscriptionsWithHttpInfoAsync(string eventSubscriptionId = default(string), string eventName = default(string), string eventType = default(string), string executionId = default(string), string processInstanceId = default(string), string activityId = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), bool? includeEventSubscriptionsWithoutTenantId = default(bool?), string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get List Count
        /// </summary>
        /// <remarks>
        /// Queries for the number of event subscriptions that fulfill given parameters. Takes the same parameters as the [Get Event Subscriptions](https://docs.camunda.org/manual/7.16/reference/rest/event-subscription/get-query/) method.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventSubscriptionId">Only select subscription with the given id. (optional)</param>
        /// <param name="eventName">Only select subscriptions for events with the given name. (optional)</param>
        /// <param name="eventType">Only select subscriptions for events with the given type. Valid values: &#x60;message&#x60;, &#x60;signal&#x60;, &#x60;compensate&#x60; and &#x60;conditional&#x60;. (optional)</param>
        /// <param name="executionId">Only select subscriptions that belong to an execution with the given id. (optional)</param>
        /// <param name="processInstanceId">Only select subscriptions that belong to a process instance with the given id. (optional)</param>
        /// <param name="activityId">Only select subscriptions that belong to an activity with the given id. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. Only select subscriptions that belong to one of the given tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only select subscriptions which have no tenant id. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="includeEventSubscriptionsWithoutTenantId">Select event subscriptions which have no tenant id. Can be used in combination with tenantIdIn parameter. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CountResultDto</returns>
        System.Threading.Tasks.Task<CountResultDto> GetEventSubscriptionsCountAsync(string eventSubscriptionId = default(string), string eventName = default(string), string eventType = default(string), string executionId = default(string), string processInstanceId = default(string), string activityId = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), bool? includeEventSubscriptionsWithoutTenantId = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get List Count
        /// </summary>
        /// <remarks>
        /// Queries for the number of event subscriptions that fulfill given parameters. Takes the same parameters as the [Get Event Subscriptions](https://docs.camunda.org/manual/7.16/reference/rest/event-subscription/get-query/) method.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventSubscriptionId">Only select subscription with the given id. (optional)</param>
        /// <param name="eventName">Only select subscriptions for events with the given name. (optional)</param>
        /// <param name="eventType">Only select subscriptions for events with the given type. Valid values: &#x60;message&#x60;, &#x60;signal&#x60;, &#x60;compensate&#x60; and &#x60;conditional&#x60;. (optional)</param>
        /// <param name="executionId">Only select subscriptions that belong to an execution with the given id. (optional)</param>
        /// <param name="processInstanceId">Only select subscriptions that belong to a process instance with the given id. (optional)</param>
        /// <param name="activityId">Only select subscriptions that belong to an activity with the given id. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. Only select subscriptions that belong to one of the given tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only select subscriptions which have no tenant id. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="includeEventSubscriptionsWithoutTenantId">Select event subscriptions which have no tenant id. Can be used in combination with tenantIdIn parameter. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CountResultDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<CountResultDto>> GetEventSubscriptionsCountWithHttpInfoAsync(string eventSubscriptionId = default(string), string eventName = default(string), string eventType = default(string), string executionId = default(string), string processInstanceId = default(string), string activityId = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), bool? includeEventSubscriptionsWithoutTenantId = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEventSubscriptionApi : IEventSubscriptionApiSync, IEventSubscriptionApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class EventSubscriptionApi : IEventSubscriptionApi
    {
        private Camunda.OpenApi.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="EventSubscriptionApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EventSubscriptionApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EventSubscriptionApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EventSubscriptionApi(String basePath)
        {
            this.Configuration = Camunda.OpenApi.Client.Client.Configuration.MergeConfigurations(
                Camunda.OpenApi.Client.Client.GlobalConfiguration.Instance,
                new Camunda.OpenApi.Client.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Camunda.OpenApi.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Camunda.OpenApi.Client.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Camunda.OpenApi.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EventSubscriptionApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public EventSubscriptionApi(Camunda.OpenApi.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Camunda.OpenApi.Client.Client.Configuration.MergeConfigurations(
                Camunda.OpenApi.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Camunda.OpenApi.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Camunda.OpenApi.Client.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Camunda.OpenApi.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EventSubscriptionApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public EventSubscriptionApi(Camunda.OpenApi.Client.Client.ISynchronousClient client, Camunda.OpenApi.Client.Client.IAsynchronousClient asyncClient, Camunda.OpenApi.Client.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Camunda.OpenApi.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Camunda.OpenApi.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Camunda.OpenApi.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Camunda.OpenApi.Client.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Camunda.OpenApi.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get List Queries for event subscriptions that fulfill given parameters. The size of the result set can be retrieved by using the [Get Event Subscriptions count](https://docs.camunda.org/manual/7.16/reference/rest/event-subscription/get-query-count/) method.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventSubscriptionId">Only select subscription with the given id. (optional)</param>
        /// <param name="eventName">Only select subscriptions for events with the given name. (optional)</param>
        /// <param name="eventType">Only select subscriptions for events with the given type. Valid values: &#x60;message&#x60;, &#x60;signal&#x60;, &#x60;compensate&#x60; and &#x60;conditional&#x60;. (optional)</param>
        /// <param name="executionId">Only select subscriptions that belong to an execution with the given id. (optional)</param>
        /// <param name="processInstanceId">Only select subscriptions that belong to a process instance with the given id. (optional)</param>
        /// <param name="activityId">Only select subscriptions that belong to an activity with the given id. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. Only select subscriptions that belong to one of the given tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only select subscriptions which have no tenant id. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="includeEventSubscriptionsWithoutTenantId">Select event subscriptions which have no tenant id. Can be used in combination with tenantIdIn parameter. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <returns>List&lt;EventSubscriptionDto&gt;</returns>
        public List<EventSubscriptionDto> GetEventSubscriptions(string eventSubscriptionId = default(string), string eventName = default(string), string eventType = default(string), string executionId = default(string), string processInstanceId = default(string), string activityId = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), bool? includeEventSubscriptionsWithoutTenantId = default(bool?), string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<List<EventSubscriptionDto>> localVarResponse = GetEventSubscriptionsWithHttpInfo(eventSubscriptionId, eventName, eventType, executionId, processInstanceId, activityId, tenantIdIn, withoutTenantId, includeEventSubscriptionsWithoutTenantId, sortBy, sortOrder, firstResult, maxResults);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get List Queries for event subscriptions that fulfill given parameters. The size of the result set can be retrieved by using the [Get Event Subscriptions count](https://docs.camunda.org/manual/7.16/reference/rest/event-subscription/get-query-count/) method.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventSubscriptionId">Only select subscription with the given id. (optional)</param>
        /// <param name="eventName">Only select subscriptions for events with the given name. (optional)</param>
        /// <param name="eventType">Only select subscriptions for events with the given type. Valid values: &#x60;message&#x60;, &#x60;signal&#x60;, &#x60;compensate&#x60; and &#x60;conditional&#x60;. (optional)</param>
        /// <param name="executionId">Only select subscriptions that belong to an execution with the given id. (optional)</param>
        /// <param name="processInstanceId">Only select subscriptions that belong to a process instance with the given id. (optional)</param>
        /// <param name="activityId">Only select subscriptions that belong to an activity with the given id. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. Only select subscriptions that belong to one of the given tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only select subscriptions which have no tenant id. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="includeEventSubscriptionsWithoutTenantId">Select event subscriptions which have no tenant id. Can be used in combination with tenantIdIn parameter. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <returns>ApiResponse of List&lt;EventSubscriptionDto&gt;</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<List<EventSubscriptionDto>> GetEventSubscriptionsWithHttpInfo(string eventSubscriptionId = default(string), string eventName = default(string), string eventType = default(string), string executionId = default(string), string processInstanceId = default(string), string activityId = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), bool? includeEventSubscriptionsWithoutTenantId = default(bool?), string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?))
        {
            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (eventSubscriptionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "eventSubscriptionId", eventSubscriptionId));
            }
            if (eventName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "eventName", eventName));
            }
            if (eventType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "eventType", eventType));
            }
            if (executionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "executionId", executionId));
            }
            if (processInstanceId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processInstanceId", processInstanceId));
            }
            if (activityId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "activityId", activityId));
            }
            if (tenantIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "tenantIdIn", tenantIdIn));
            }
            if (withoutTenantId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "withoutTenantId", withoutTenantId));
            }
            if (includeEventSubscriptionsWithoutTenantId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "includeEventSubscriptionsWithoutTenantId", includeEventSubscriptionsWithoutTenantId));
            }
            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "sortBy", sortBy));
            }
            if (sortOrder != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "sortOrder", sortOrder));
            }
            if (firstResult != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "firstResult", firstResult));
            }
            if (maxResults != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "maxResults", maxResults));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<EventSubscriptionDto>>("/event-subscription", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEventSubscriptions", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get List Queries for event subscriptions that fulfill given parameters. The size of the result set can be retrieved by using the [Get Event Subscriptions count](https://docs.camunda.org/manual/7.16/reference/rest/event-subscription/get-query-count/) method.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventSubscriptionId">Only select subscription with the given id. (optional)</param>
        /// <param name="eventName">Only select subscriptions for events with the given name. (optional)</param>
        /// <param name="eventType">Only select subscriptions for events with the given type. Valid values: &#x60;message&#x60;, &#x60;signal&#x60;, &#x60;compensate&#x60; and &#x60;conditional&#x60;. (optional)</param>
        /// <param name="executionId">Only select subscriptions that belong to an execution with the given id. (optional)</param>
        /// <param name="processInstanceId">Only select subscriptions that belong to a process instance with the given id. (optional)</param>
        /// <param name="activityId">Only select subscriptions that belong to an activity with the given id. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. Only select subscriptions that belong to one of the given tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only select subscriptions which have no tenant id. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="includeEventSubscriptionsWithoutTenantId">Select event subscriptions which have no tenant id. Can be used in combination with tenantIdIn parameter. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;EventSubscriptionDto&gt;</returns>
        public async System.Threading.Tasks.Task<List<EventSubscriptionDto>> GetEventSubscriptionsAsync(string eventSubscriptionId = default(string), string eventName = default(string), string eventType = default(string), string executionId = default(string), string processInstanceId = default(string), string activityId = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), bool? includeEventSubscriptionsWithoutTenantId = default(bool?), string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<List<EventSubscriptionDto>> localVarResponse = await GetEventSubscriptionsWithHttpInfoAsync(eventSubscriptionId, eventName, eventType, executionId, processInstanceId, activityId, tenantIdIn, withoutTenantId, includeEventSubscriptionsWithoutTenantId, sortBy, sortOrder, firstResult, maxResults, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get List Queries for event subscriptions that fulfill given parameters. The size of the result set can be retrieved by using the [Get Event Subscriptions count](https://docs.camunda.org/manual/7.16/reference/rest/event-subscription/get-query-count/) method.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventSubscriptionId">Only select subscription with the given id. (optional)</param>
        /// <param name="eventName">Only select subscriptions for events with the given name. (optional)</param>
        /// <param name="eventType">Only select subscriptions for events with the given type. Valid values: &#x60;message&#x60;, &#x60;signal&#x60;, &#x60;compensate&#x60; and &#x60;conditional&#x60;. (optional)</param>
        /// <param name="executionId">Only select subscriptions that belong to an execution with the given id. (optional)</param>
        /// <param name="processInstanceId">Only select subscriptions that belong to a process instance with the given id. (optional)</param>
        /// <param name="activityId">Only select subscriptions that belong to an activity with the given id. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. Only select subscriptions that belong to one of the given tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only select subscriptions which have no tenant id. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="includeEventSubscriptionsWithoutTenantId">Select event subscriptions which have no tenant id. Can be used in combination with tenantIdIn parameter. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;EventSubscriptionDto&gt;)</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<List<EventSubscriptionDto>>> GetEventSubscriptionsWithHttpInfoAsync(string eventSubscriptionId = default(string), string eventName = default(string), string eventType = default(string), string executionId = default(string), string processInstanceId = default(string), string activityId = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), bool? includeEventSubscriptionsWithoutTenantId = default(bool?), string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (eventSubscriptionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "eventSubscriptionId", eventSubscriptionId));
            }
            if (eventName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "eventName", eventName));
            }
            if (eventType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "eventType", eventType));
            }
            if (executionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "executionId", executionId));
            }
            if (processInstanceId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processInstanceId", processInstanceId));
            }
            if (activityId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "activityId", activityId));
            }
            if (tenantIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "tenantIdIn", tenantIdIn));
            }
            if (withoutTenantId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "withoutTenantId", withoutTenantId));
            }
            if (includeEventSubscriptionsWithoutTenantId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "includeEventSubscriptionsWithoutTenantId", includeEventSubscriptionsWithoutTenantId));
            }
            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "sortBy", sortBy));
            }
            if (sortOrder != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "sortOrder", sortOrder));
            }
            if (firstResult != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "firstResult", firstResult));
            }
            if (maxResults != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "maxResults", maxResults));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<EventSubscriptionDto>>("/event-subscription", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEventSubscriptions", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get List Count Queries for the number of event subscriptions that fulfill given parameters. Takes the same parameters as the [Get Event Subscriptions](https://docs.camunda.org/manual/7.16/reference/rest/event-subscription/get-query/) method.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventSubscriptionId">Only select subscription with the given id. (optional)</param>
        /// <param name="eventName">Only select subscriptions for events with the given name. (optional)</param>
        /// <param name="eventType">Only select subscriptions for events with the given type. Valid values: &#x60;message&#x60;, &#x60;signal&#x60;, &#x60;compensate&#x60; and &#x60;conditional&#x60;. (optional)</param>
        /// <param name="executionId">Only select subscriptions that belong to an execution with the given id. (optional)</param>
        /// <param name="processInstanceId">Only select subscriptions that belong to a process instance with the given id. (optional)</param>
        /// <param name="activityId">Only select subscriptions that belong to an activity with the given id. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. Only select subscriptions that belong to one of the given tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only select subscriptions which have no tenant id. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="includeEventSubscriptionsWithoutTenantId">Select event subscriptions which have no tenant id. Can be used in combination with tenantIdIn parameter. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <returns>CountResultDto</returns>
        public CountResultDto GetEventSubscriptionsCount(string eventSubscriptionId = default(string), string eventName = default(string), string eventType = default(string), string executionId = default(string), string processInstanceId = default(string), string activityId = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), bool? includeEventSubscriptionsWithoutTenantId = default(bool?))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<CountResultDto> localVarResponse = GetEventSubscriptionsCountWithHttpInfo(eventSubscriptionId, eventName, eventType, executionId, processInstanceId, activityId, tenantIdIn, withoutTenantId, includeEventSubscriptionsWithoutTenantId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get List Count Queries for the number of event subscriptions that fulfill given parameters. Takes the same parameters as the [Get Event Subscriptions](https://docs.camunda.org/manual/7.16/reference/rest/event-subscription/get-query/) method.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventSubscriptionId">Only select subscription with the given id. (optional)</param>
        /// <param name="eventName">Only select subscriptions for events with the given name. (optional)</param>
        /// <param name="eventType">Only select subscriptions for events with the given type. Valid values: &#x60;message&#x60;, &#x60;signal&#x60;, &#x60;compensate&#x60; and &#x60;conditional&#x60;. (optional)</param>
        /// <param name="executionId">Only select subscriptions that belong to an execution with the given id. (optional)</param>
        /// <param name="processInstanceId">Only select subscriptions that belong to a process instance with the given id. (optional)</param>
        /// <param name="activityId">Only select subscriptions that belong to an activity with the given id. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. Only select subscriptions that belong to one of the given tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only select subscriptions which have no tenant id. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="includeEventSubscriptionsWithoutTenantId">Select event subscriptions which have no tenant id. Can be used in combination with tenantIdIn parameter. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <returns>ApiResponse of CountResultDto</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<CountResultDto> GetEventSubscriptionsCountWithHttpInfo(string eventSubscriptionId = default(string), string eventName = default(string), string eventType = default(string), string executionId = default(string), string processInstanceId = default(string), string activityId = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), bool? includeEventSubscriptionsWithoutTenantId = default(bool?))
        {
            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (eventSubscriptionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "eventSubscriptionId", eventSubscriptionId));
            }
            if (eventName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "eventName", eventName));
            }
            if (eventType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "eventType", eventType));
            }
            if (executionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "executionId", executionId));
            }
            if (processInstanceId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processInstanceId", processInstanceId));
            }
            if (activityId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "activityId", activityId));
            }
            if (tenantIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "tenantIdIn", tenantIdIn));
            }
            if (withoutTenantId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "withoutTenantId", withoutTenantId));
            }
            if (includeEventSubscriptionsWithoutTenantId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "includeEventSubscriptionsWithoutTenantId", includeEventSubscriptionsWithoutTenantId));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<CountResultDto>("/event-subscription/count", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEventSubscriptionsCount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get List Count Queries for the number of event subscriptions that fulfill given parameters. Takes the same parameters as the [Get Event Subscriptions](https://docs.camunda.org/manual/7.16/reference/rest/event-subscription/get-query/) method.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventSubscriptionId">Only select subscription with the given id. (optional)</param>
        /// <param name="eventName">Only select subscriptions for events with the given name. (optional)</param>
        /// <param name="eventType">Only select subscriptions for events with the given type. Valid values: &#x60;message&#x60;, &#x60;signal&#x60;, &#x60;compensate&#x60; and &#x60;conditional&#x60;. (optional)</param>
        /// <param name="executionId">Only select subscriptions that belong to an execution with the given id. (optional)</param>
        /// <param name="processInstanceId">Only select subscriptions that belong to a process instance with the given id. (optional)</param>
        /// <param name="activityId">Only select subscriptions that belong to an activity with the given id. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. Only select subscriptions that belong to one of the given tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only select subscriptions which have no tenant id. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="includeEventSubscriptionsWithoutTenantId">Select event subscriptions which have no tenant id. Can be used in combination with tenantIdIn parameter. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CountResultDto</returns>
        public async System.Threading.Tasks.Task<CountResultDto> GetEventSubscriptionsCountAsync(string eventSubscriptionId = default(string), string eventName = default(string), string eventType = default(string), string executionId = default(string), string processInstanceId = default(string), string activityId = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), bool? includeEventSubscriptionsWithoutTenantId = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<CountResultDto> localVarResponse = await GetEventSubscriptionsCountWithHttpInfoAsync(eventSubscriptionId, eventName, eventType, executionId, processInstanceId, activityId, tenantIdIn, withoutTenantId, includeEventSubscriptionsWithoutTenantId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get List Count Queries for the number of event subscriptions that fulfill given parameters. Takes the same parameters as the [Get Event Subscriptions](https://docs.camunda.org/manual/7.16/reference/rest/event-subscription/get-query/) method.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventSubscriptionId">Only select subscription with the given id. (optional)</param>
        /// <param name="eventName">Only select subscriptions for events with the given name. (optional)</param>
        /// <param name="eventType">Only select subscriptions for events with the given type. Valid values: &#x60;message&#x60;, &#x60;signal&#x60;, &#x60;compensate&#x60; and &#x60;conditional&#x60;. (optional)</param>
        /// <param name="executionId">Only select subscriptions that belong to an execution with the given id. (optional)</param>
        /// <param name="processInstanceId">Only select subscriptions that belong to a process instance with the given id. (optional)</param>
        /// <param name="activityId">Only select subscriptions that belong to an activity with the given id. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. Only select subscriptions that belong to one of the given tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only select subscriptions which have no tenant id. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="includeEventSubscriptionsWithoutTenantId">Select event subscriptions which have no tenant id. Can be used in combination with tenantIdIn parameter. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CountResultDto)</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<CountResultDto>> GetEventSubscriptionsCountWithHttpInfoAsync(string eventSubscriptionId = default(string), string eventName = default(string), string eventType = default(string), string executionId = default(string), string processInstanceId = default(string), string activityId = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), bool? includeEventSubscriptionsWithoutTenantId = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (eventSubscriptionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "eventSubscriptionId", eventSubscriptionId));
            }
            if (eventName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "eventName", eventName));
            }
            if (eventType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "eventType", eventType));
            }
            if (executionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "executionId", executionId));
            }
            if (processInstanceId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processInstanceId", processInstanceId));
            }
            if (activityId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "activityId", activityId));
            }
            if (tenantIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "tenantIdIn", tenantIdIn));
            }
            if (withoutTenantId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "withoutTenantId", withoutTenantId));
            }
            if (includeEventSubscriptionsWithoutTenantId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "includeEventSubscriptionsWithoutTenantId", includeEventSubscriptionsWithoutTenantId));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<CountResultDto>("/event-subscription/count", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEventSubscriptionsCount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
