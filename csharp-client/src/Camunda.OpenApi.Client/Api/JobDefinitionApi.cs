/*
 * Camunda Platform REST API
 *
 * OpenApi Spec for Camunda Platform REST API.
 *
 * The version of the OpenAPI document: 7.21.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using Camunda.OpenApi.Client.Client;
using Camunda.OpenApi.Client.Model;

namespace Camunda.OpenApi.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IJobDefinitionApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get Job Definition
        /// </summary>
        /// <remarks>
        /// Retrieves a job definition by id, according to the &#x60;JobDefinition&#x60; interface in the engine.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the job definition to be retrieved.</param>
        /// <returns>JobDefinitionDto</returns>
        JobDefinitionDto GetJobDefinition(string id);

        /// <summary>
        /// Get Job Definition
        /// </summary>
        /// <remarks>
        /// Retrieves a job definition by id, according to the &#x60;JobDefinition&#x60; interface in the engine.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the job definition to be retrieved.</param>
        /// <returns>ApiResponse of JobDefinitionDto</returns>
        ApiResponse<JobDefinitionDto> GetJobDefinitionWithHttpInfo(string id);
        /// <summary>
        /// Get Job Definitions
        /// </summary>
        /// <remarks>
        /// Queries for job definitions that fulfill given parameters. The size of the result set can be retrieved by using the [Get Job Definition Count](https://docs.camunda.org/manual/7.21/reference/rest/job-definition/get-query-count/) method.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobDefinitionId">Filter by job definition id. (optional)</param>
        /// <param name="activityIdIn">Only include job definitions which belong to one of the passed and comma-separated activity ids. (optional)</param>
        /// <param name="processDefinitionId">Only include job definitions which exist for the given process definition id. (optional)</param>
        /// <param name="processDefinitionKey">Only include job definitions which exist for the given process definition key. (optional)</param>
        /// <param name="jobType">Only include job definitions which exist for the given job type. See the [User Guide](https://docs.camunda.org/manual/7.21/user-guide/process-engine/the-job-executor/#job-creation) for more information about job types. (optional)</param>
        /// <param name="jobConfiguration">Only include job definitions which exist for the given job configuration. For example: for timer jobs it is the timer configuration. (optional)</param>
        /// <param name="active">Only include active job definitions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="suspended">Only include suspended job definitions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="withOverridingJobPriority">Only include job definitions that have an overriding job priority defined. The only effective value is &#x60;true&#x60;. If set to &#x60;false&#x60;, this filter is not applied. (optional)</param>
        /// <param name="tenantIdIn">Only include job definitions which belong to one of the passed and comma-separated tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include job definitions which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="includeJobDefinitionsWithoutTenantId">Include job definitions which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <returns>List&lt;JobDefinitionDto&gt;</returns>
        List<JobDefinitionDto> GetJobDefinitions(string jobDefinitionId = default(string), string activityIdIn = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string jobType = default(string), string jobConfiguration = default(string), bool? active = default(bool?), bool? suspended = default(bool?), bool? withOverridingJobPriority = default(bool?), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), bool? includeJobDefinitionsWithoutTenantId = default(bool?), string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?));

        /// <summary>
        /// Get Job Definitions
        /// </summary>
        /// <remarks>
        /// Queries for job definitions that fulfill given parameters. The size of the result set can be retrieved by using the [Get Job Definition Count](https://docs.camunda.org/manual/7.21/reference/rest/job-definition/get-query-count/) method.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobDefinitionId">Filter by job definition id. (optional)</param>
        /// <param name="activityIdIn">Only include job definitions which belong to one of the passed and comma-separated activity ids. (optional)</param>
        /// <param name="processDefinitionId">Only include job definitions which exist for the given process definition id. (optional)</param>
        /// <param name="processDefinitionKey">Only include job definitions which exist for the given process definition key. (optional)</param>
        /// <param name="jobType">Only include job definitions which exist for the given job type. See the [User Guide](https://docs.camunda.org/manual/7.21/user-guide/process-engine/the-job-executor/#job-creation) for more information about job types. (optional)</param>
        /// <param name="jobConfiguration">Only include job definitions which exist for the given job configuration. For example: for timer jobs it is the timer configuration. (optional)</param>
        /// <param name="active">Only include active job definitions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="suspended">Only include suspended job definitions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="withOverridingJobPriority">Only include job definitions that have an overriding job priority defined. The only effective value is &#x60;true&#x60;. If set to &#x60;false&#x60;, this filter is not applied. (optional)</param>
        /// <param name="tenantIdIn">Only include job definitions which belong to one of the passed and comma-separated tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include job definitions which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="includeJobDefinitionsWithoutTenantId">Include job definitions which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <returns>ApiResponse of List&lt;JobDefinitionDto&gt;</returns>
        ApiResponse<List<JobDefinitionDto>> GetJobDefinitionsWithHttpInfo(string jobDefinitionId = default(string), string activityIdIn = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string jobType = default(string), string jobConfiguration = default(string), bool? active = default(bool?), bool? suspended = default(bool?), bool? withOverridingJobPriority = default(bool?), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), bool? includeJobDefinitionsWithoutTenantId = default(bool?), string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?));
        /// <summary>
        /// Get Job Definition Count
        /// </summary>
        /// <remarks>
        /// Queries for the number of job definitions that fulfill given parameters. Takes the same parameters as the [Get Job Definitions](https://docs.camunda.org/manual/7.21/reference/rest/job-definition/get-query/) method.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobDefinitionId">Filter by job definition id. (optional)</param>
        /// <param name="activityIdIn">Only include job definitions which belong to one of the passed and comma-separated activity ids. (optional)</param>
        /// <param name="processDefinitionId">Only include job definitions which exist for the given process definition id. (optional)</param>
        /// <param name="processDefinitionKey">Only include job definitions which exist for the given process definition key. (optional)</param>
        /// <param name="jobType">Only include job definitions which exist for the given job type. See the [User Guide](https://docs.camunda.org/manual/7.21/user-guide/process-engine/the-job-executor/#job-creation) for more information about job types. (optional)</param>
        /// <param name="jobConfiguration">Only include job definitions which exist for the given job configuration. For example: for timer jobs it is the timer configuration. (optional)</param>
        /// <param name="active">Only include active job definitions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="suspended">Only include suspended job definitions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="withOverridingJobPriority">Only include job definitions that have an overriding job priority defined. The only effective value is &#x60;true&#x60;. If set to &#x60;false&#x60;, this filter is not applied. (optional)</param>
        /// <param name="tenantIdIn">Only include job definitions which belong to one of the passed and comma-separated tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include job definitions which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="includeJobDefinitionsWithoutTenantId">Include job definitions which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <returns>CountResultDto</returns>
        CountResultDto GetJobDefinitionsCount(string jobDefinitionId = default(string), string activityIdIn = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string jobType = default(string), string jobConfiguration = default(string), bool? active = default(bool?), bool? suspended = default(bool?), bool? withOverridingJobPriority = default(bool?), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), bool? includeJobDefinitionsWithoutTenantId = default(bool?));

        /// <summary>
        /// Get Job Definition Count
        /// </summary>
        /// <remarks>
        /// Queries for the number of job definitions that fulfill given parameters. Takes the same parameters as the [Get Job Definitions](https://docs.camunda.org/manual/7.21/reference/rest/job-definition/get-query/) method.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobDefinitionId">Filter by job definition id. (optional)</param>
        /// <param name="activityIdIn">Only include job definitions which belong to one of the passed and comma-separated activity ids. (optional)</param>
        /// <param name="processDefinitionId">Only include job definitions which exist for the given process definition id. (optional)</param>
        /// <param name="processDefinitionKey">Only include job definitions which exist for the given process definition key. (optional)</param>
        /// <param name="jobType">Only include job definitions which exist for the given job type. See the [User Guide](https://docs.camunda.org/manual/7.21/user-guide/process-engine/the-job-executor/#job-creation) for more information about job types. (optional)</param>
        /// <param name="jobConfiguration">Only include job definitions which exist for the given job configuration. For example: for timer jobs it is the timer configuration. (optional)</param>
        /// <param name="active">Only include active job definitions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="suspended">Only include suspended job definitions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="withOverridingJobPriority">Only include job definitions that have an overriding job priority defined. The only effective value is &#x60;true&#x60;. If set to &#x60;false&#x60;, this filter is not applied. (optional)</param>
        /// <param name="tenantIdIn">Only include job definitions which belong to one of the passed and comma-separated tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include job definitions which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="includeJobDefinitionsWithoutTenantId">Include job definitions which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <returns>ApiResponse of CountResultDto</returns>
        ApiResponse<CountResultDto> GetJobDefinitionsCountWithHttpInfo(string jobDefinitionId = default(string), string activityIdIn = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string jobType = default(string), string jobConfiguration = default(string), bool? active = default(bool?), bool? suspended = default(bool?), bool? withOverridingJobPriority = default(bool?), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), bool? includeJobDefinitionsWithoutTenantId = default(bool?));
        /// <summary>
        /// Get Job Definitions (POST)
        /// </summary>
        /// <remarks>
        /// Queries for job definitions that fulfill given parameters. This method is slightly more powerful than the [Get Job Definitions](https://docs.camunda.org/manual/7.21/reference/rest/job-definition/get-query/) method because it allows filtering by multiple job definitions of types &#x60;String&#x60;, &#x60;Number&#x60; or &#x60;Boolean&#x60;.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="jobDefinitionQueryDto"> (optional)</param>
        /// <returns>List&lt;JobDefinitionDto&gt;</returns>
        List<JobDefinitionDto> QueryJobDefinitions(int? firstResult = default(int?), int? maxResults = default(int?), JobDefinitionQueryDto jobDefinitionQueryDto = default(JobDefinitionQueryDto));

        /// <summary>
        /// Get Job Definitions (POST)
        /// </summary>
        /// <remarks>
        /// Queries for job definitions that fulfill given parameters. This method is slightly more powerful than the [Get Job Definitions](https://docs.camunda.org/manual/7.21/reference/rest/job-definition/get-query/) method because it allows filtering by multiple job definitions of types &#x60;String&#x60;, &#x60;Number&#x60; or &#x60;Boolean&#x60;.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="jobDefinitionQueryDto"> (optional)</param>
        /// <returns>ApiResponse of List&lt;JobDefinitionDto&gt;</returns>
        ApiResponse<List<JobDefinitionDto>> QueryJobDefinitionsWithHttpInfo(int? firstResult = default(int?), int? maxResults = default(int?), JobDefinitionQueryDto jobDefinitionQueryDto = default(JobDefinitionQueryDto));
        /// <summary>
        /// Get Job Definition Count (POST)
        /// </summary>
        /// <remarks>
        /// Queries for the number of job definitions that fulfill given parameters. This method takes the same message body as the [Get Job Definitions (POST)](https://docs.camunda.org/manual/7.21/reference/rest/job-definition/post-query/) method and therefore it is slightly more powerful than the [Get Job Definition Count](https://docs.camunda.org/manual/7.21/reference/rest/job-definition/get-query-count/) method.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobDefinitionQueryDto"> (optional)</param>
        /// <returns>CountResultDto</returns>
        CountResultDto QueryJobDefinitionsCount(JobDefinitionQueryDto jobDefinitionQueryDto = default(JobDefinitionQueryDto));

        /// <summary>
        /// Get Job Definition Count (POST)
        /// </summary>
        /// <remarks>
        /// Queries for the number of job definitions that fulfill given parameters. This method takes the same message body as the [Get Job Definitions (POST)](https://docs.camunda.org/manual/7.21/reference/rest/job-definition/post-query/) method and therefore it is slightly more powerful than the [Get Job Definition Count](https://docs.camunda.org/manual/7.21/reference/rest/job-definition/get-query-count/) method.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobDefinitionQueryDto"> (optional)</param>
        /// <returns>ApiResponse of CountResultDto</returns>
        ApiResponse<CountResultDto> QueryJobDefinitionsCountWithHttpInfo(JobDefinitionQueryDto jobDefinitionQueryDto = default(JobDefinitionQueryDto));
        /// <summary>
        /// Set Job Definition Priority by Id
        /// </summary>
        /// <remarks>
        /// Sets an overriding execution priority for jobs with the given definition id. Optionally, the priorities of all the definitions&#39; existing jobs are updated accordingly. The priority can be reset by setting it to &#x60;null&#x60;, meaning that a new job&#39;s priority will not be determined based on its definition&#39;s priority any longer. See the [user guide on job prioritization](https://docs.camunda.org/manual/7.21/user-guide/process-engine/the-job-executor/#set-job-definition-priorities-via-managementservice-api) for details.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the job definition to be updated.</param>
        /// <param name="jobDefinitionPriorityDto"> (optional)</param>
        /// <returns></returns>
        void SetJobPriorityJobDefinition(string id, JobDefinitionPriorityDto jobDefinitionPriorityDto = default(JobDefinitionPriorityDto));

        /// <summary>
        /// Set Job Definition Priority by Id
        /// </summary>
        /// <remarks>
        /// Sets an overriding execution priority for jobs with the given definition id. Optionally, the priorities of all the definitions&#39; existing jobs are updated accordingly. The priority can be reset by setting it to &#x60;null&#x60;, meaning that a new job&#39;s priority will not be determined based on its definition&#39;s priority any longer. See the [user guide on job prioritization](https://docs.camunda.org/manual/7.21/user-guide/process-engine/the-job-executor/#set-job-definition-priorities-via-managementservice-api) for details.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the job definition to be updated.</param>
        /// <param name="jobDefinitionPriorityDto"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SetJobPriorityJobDefinitionWithHttpInfo(string id, JobDefinitionPriorityDto jobDefinitionPriorityDto = default(JobDefinitionPriorityDto));
        /// <summary>
        /// Set Job Retries By Job Definition Id
        /// </summary>
        /// <remarks>
        /// Sets the number of retries of all **failed** jobs associated with the given job definition id.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the job definition to be updated.</param>
        /// <param name="retriesDto"> (optional)</param>
        /// <returns></returns>
        void SetJobRetriesJobDefinition(string id, RetriesDto retriesDto = default(RetriesDto));

        /// <summary>
        /// Set Job Retries By Job Definition Id
        /// </summary>
        /// <remarks>
        /// Sets the number of retries of all **failed** jobs associated with the given job definition id.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the job definition to be updated.</param>
        /// <param name="retriesDto"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SetJobRetriesJobDefinitionWithHttpInfo(string id, RetriesDto retriesDto = default(RetriesDto));
        /// <summary>
        /// Activate/Suspend Job Definition By Id
        /// </summary>
        /// <remarks>
        /// Activates or suspends a given job definition by id.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the job definition to activate or suspend.</param>
        /// <param name="jobDefinitionSuspensionStateDto"> (optional)</param>
        /// <returns></returns>
        void UpdateSuspensionStateJobDefinition(string id, JobDefinitionSuspensionStateDto jobDefinitionSuspensionStateDto = default(JobDefinitionSuspensionStateDto));

        /// <summary>
        /// Activate/Suspend Job Definition By Id
        /// </summary>
        /// <remarks>
        /// Activates or suspends a given job definition by id.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the job definition to activate or suspend.</param>
        /// <param name="jobDefinitionSuspensionStateDto"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateSuspensionStateJobDefinitionWithHttpInfo(string id, JobDefinitionSuspensionStateDto jobDefinitionSuspensionStateDto = default(JobDefinitionSuspensionStateDto));
        /// <summary>
        /// Activate/Suspend Job Definitions
        /// </summary>
        /// <remarks>
        /// Activates or suspends job definitions with the given process definition id or process definition key.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobDefinitionsSuspensionStateDto"> (optional)</param>
        /// <returns></returns>
        void UpdateSuspensionStateJobDefinitions(JobDefinitionsSuspensionStateDto jobDefinitionsSuspensionStateDto = default(JobDefinitionsSuspensionStateDto));

        /// <summary>
        /// Activate/Suspend Job Definitions
        /// </summary>
        /// <remarks>
        /// Activates or suspends job definitions with the given process definition id or process definition key.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobDefinitionsSuspensionStateDto"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateSuspensionStateJobDefinitionsWithHttpInfo(JobDefinitionsSuspensionStateDto jobDefinitionsSuspensionStateDto = default(JobDefinitionsSuspensionStateDto));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IJobDefinitionApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get Job Definition
        /// </summary>
        /// <remarks>
        /// Retrieves a job definition by id, according to the &#x60;JobDefinition&#x60; interface in the engine.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the job definition to be retrieved.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JobDefinitionDto</returns>
        System.Threading.Tasks.Task<JobDefinitionDto> GetJobDefinitionAsync(string id, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get Job Definition
        /// </summary>
        /// <remarks>
        /// Retrieves a job definition by id, according to the &#x60;JobDefinition&#x60; interface in the engine.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the job definition to be retrieved.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JobDefinitionDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<JobDefinitionDto>> GetJobDefinitionWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get Job Definitions
        /// </summary>
        /// <remarks>
        /// Queries for job definitions that fulfill given parameters. The size of the result set can be retrieved by using the [Get Job Definition Count](https://docs.camunda.org/manual/7.21/reference/rest/job-definition/get-query-count/) method.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobDefinitionId">Filter by job definition id. (optional)</param>
        /// <param name="activityIdIn">Only include job definitions which belong to one of the passed and comma-separated activity ids. (optional)</param>
        /// <param name="processDefinitionId">Only include job definitions which exist for the given process definition id. (optional)</param>
        /// <param name="processDefinitionKey">Only include job definitions which exist for the given process definition key. (optional)</param>
        /// <param name="jobType">Only include job definitions which exist for the given job type. See the [User Guide](https://docs.camunda.org/manual/7.21/user-guide/process-engine/the-job-executor/#job-creation) for more information about job types. (optional)</param>
        /// <param name="jobConfiguration">Only include job definitions which exist for the given job configuration. For example: for timer jobs it is the timer configuration. (optional)</param>
        /// <param name="active">Only include active job definitions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="suspended">Only include suspended job definitions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="withOverridingJobPriority">Only include job definitions that have an overriding job priority defined. The only effective value is &#x60;true&#x60;. If set to &#x60;false&#x60;, this filter is not applied. (optional)</param>
        /// <param name="tenantIdIn">Only include job definitions which belong to one of the passed and comma-separated tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include job definitions which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="includeJobDefinitionsWithoutTenantId">Include job definitions which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;JobDefinitionDto&gt;</returns>
        System.Threading.Tasks.Task<List<JobDefinitionDto>> GetJobDefinitionsAsync(string jobDefinitionId = default(string), string activityIdIn = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string jobType = default(string), string jobConfiguration = default(string), bool? active = default(bool?), bool? suspended = default(bool?), bool? withOverridingJobPriority = default(bool?), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), bool? includeJobDefinitionsWithoutTenantId = default(bool?), string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get Job Definitions
        /// </summary>
        /// <remarks>
        /// Queries for job definitions that fulfill given parameters. The size of the result set can be retrieved by using the [Get Job Definition Count](https://docs.camunda.org/manual/7.21/reference/rest/job-definition/get-query-count/) method.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobDefinitionId">Filter by job definition id. (optional)</param>
        /// <param name="activityIdIn">Only include job definitions which belong to one of the passed and comma-separated activity ids. (optional)</param>
        /// <param name="processDefinitionId">Only include job definitions which exist for the given process definition id. (optional)</param>
        /// <param name="processDefinitionKey">Only include job definitions which exist for the given process definition key. (optional)</param>
        /// <param name="jobType">Only include job definitions which exist for the given job type. See the [User Guide](https://docs.camunda.org/manual/7.21/user-guide/process-engine/the-job-executor/#job-creation) for more information about job types. (optional)</param>
        /// <param name="jobConfiguration">Only include job definitions which exist for the given job configuration. For example: for timer jobs it is the timer configuration. (optional)</param>
        /// <param name="active">Only include active job definitions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="suspended">Only include suspended job definitions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="withOverridingJobPriority">Only include job definitions that have an overriding job priority defined. The only effective value is &#x60;true&#x60;. If set to &#x60;false&#x60;, this filter is not applied. (optional)</param>
        /// <param name="tenantIdIn">Only include job definitions which belong to one of the passed and comma-separated tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include job definitions which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="includeJobDefinitionsWithoutTenantId">Include job definitions which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;JobDefinitionDto&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<JobDefinitionDto>>> GetJobDefinitionsWithHttpInfoAsync(string jobDefinitionId = default(string), string activityIdIn = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string jobType = default(string), string jobConfiguration = default(string), bool? active = default(bool?), bool? suspended = default(bool?), bool? withOverridingJobPriority = default(bool?), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), bool? includeJobDefinitionsWithoutTenantId = default(bool?), string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get Job Definition Count
        /// </summary>
        /// <remarks>
        /// Queries for the number of job definitions that fulfill given parameters. Takes the same parameters as the [Get Job Definitions](https://docs.camunda.org/manual/7.21/reference/rest/job-definition/get-query/) method.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobDefinitionId">Filter by job definition id. (optional)</param>
        /// <param name="activityIdIn">Only include job definitions which belong to one of the passed and comma-separated activity ids. (optional)</param>
        /// <param name="processDefinitionId">Only include job definitions which exist for the given process definition id. (optional)</param>
        /// <param name="processDefinitionKey">Only include job definitions which exist for the given process definition key. (optional)</param>
        /// <param name="jobType">Only include job definitions which exist for the given job type. See the [User Guide](https://docs.camunda.org/manual/7.21/user-guide/process-engine/the-job-executor/#job-creation) for more information about job types. (optional)</param>
        /// <param name="jobConfiguration">Only include job definitions which exist for the given job configuration. For example: for timer jobs it is the timer configuration. (optional)</param>
        /// <param name="active">Only include active job definitions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="suspended">Only include suspended job definitions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="withOverridingJobPriority">Only include job definitions that have an overriding job priority defined. The only effective value is &#x60;true&#x60;. If set to &#x60;false&#x60;, this filter is not applied. (optional)</param>
        /// <param name="tenantIdIn">Only include job definitions which belong to one of the passed and comma-separated tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include job definitions which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="includeJobDefinitionsWithoutTenantId">Include job definitions which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CountResultDto</returns>
        System.Threading.Tasks.Task<CountResultDto> GetJobDefinitionsCountAsync(string jobDefinitionId = default(string), string activityIdIn = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string jobType = default(string), string jobConfiguration = default(string), bool? active = default(bool?), bool? suspended = default(bool?), bool? withOverridingJobPriority = default(bool?), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), bool? includeJobDefinitionsWithoutTenantId = default(bool?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get Job Definition Count
        /// </summary>
        /// <remarks>
        /// Queries for the number of job definitions that fulfill given parameters. Takes the same parameters as the [Get Job Definitions](https://docs.camunda.org/manual/7.21/reference/rest/job-definition/get-query/) method.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobDefinitionId">Filter by job definition id. (optional)</param>
        /// <param name="activityIdIn">Only include job definitions which belong to one of the passed and comma-separated activity ids. (optional)</param>
        /// <param name="processDefinitionId">Only include job definitions which exist for the given process definition id. (optional)</param>
        /// <param name="processDefinitionKey">Only include job definitions which exist for the given process definition key. (optional)</param>
        /// <param name="jobType">Only include job definitions which exist for the given job type. See the [User Guide](https://docs.camunda.org/manual/7.21/user-guide/process-engine/the-job-executor/#job-creation) for more information about job types. (optional)</param>
        /// <param name="jobConfiguration">Only include job definitions which exist for the given job configuration. For example: for timer jobs it is the timer configuration. (optional)</param>
        /// <param name="active">Only include active job definitions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="suspended">Only include suspended job definitions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="withOverridingJobPriority">Only include job definitions that have an overriding job priority defined. The only effective value is &#x60;true&#x60;. If set to &#x60;false&#x60;, this filter is not applied. (optional)</param>
        /// <param name="tenantIdIn">Only include job definitions which belong to one of the passed and comma-separated tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include job definitions which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="includeJobDefinitionsWithoutTenantId">Include job definitions which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CountResultDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<CountResultDto>> GetJobDefinitionsCountWithHttpInfoAsync(string jobDefinitionId = default(string), string activityIdIn = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string jobType = default(string), string jobConfiguration = default(string), bool? active = default(bool?), bool? suspended = default(bool?), bool? withOverridingJobPriority = default(bool?), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), bool? includeJobDefinitionsWithoutTenantId = default(bool?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get Job Definitions (POST)
        /// </summary>
        /// <remarks>
        /// Queries for job definitions that fulfill given parameters. This method is slightly more powerful than the [Get Job Definitions](https://docs.camunda.org/manual/7.21/reference/rest/job-definition/get-query/) method because it allows filtering by multiple job definitions of types &#x60;String&#x60;, &#x60;Number&#x60; or &#x60;Boolean&#x60;.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="jobDefinitionQueryDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;JobDefinitionDto&gt;</returns>
        System.Threading.Tasks.Task<List<JobDefinitionDto>> QueryJobDefinitionsAsync(int? firstResult = default(int?), int? maxResults = default(int?), JobDefinitionQueryDto jobDefinitionQueryDto = default(JobDefinitionQueryDto), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get Job Definitions (POST)
        /// </summary>
        /// <remarks>
        /// Queries for job definitions that fulfill given parameters. This method is slightly more powerful than the [Get Job Definitions](https://docs.camunda.org/manual/7.21/reference/rest/job-definition/get-query/) method because it allows filtering by multiple job definitions of types &#x60;String&#x60;, &#x60;Number&#x60; or &#x60;Boolean&#x60;.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="jobDefinitionQueryDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;JobDefinitionDto&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<JobDefinitionDto>>> QueryJobDefinitionsWithHttpInfoAsync(int? firstResult = default(int?), int? maxResults = default(int?), JobDefinitionQueryDto jobDefinitionQueryDto = default(JobDefinitionQueryDto), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get Job Definition Count (POST)
        /// </summary>
        /// <remarks>
        /// Queries for the number of job definitions that fulfill given parameters. This method takes the same message body as the [Get Job Definitions (POST)](https://docs.camunda.org/manual/7.21/reference/rest/job-definition/post-query/) method and therefore it is slightly more powerful than the [Get Job Definition Count](https://docs.camunda.org/manual/7.21/reference/rest/job-definition/get-query-count/) method.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobDefinitionQueryDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CountResultDto</returns>
        System.Threading.Tasks.Task<CountResultDto> QueryJobDefinitionsCountAsync(JobDefinitionQueryDto jobDefinitionQueryDto = default(JobDefinitionQueryDto), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get Job Definition Count (POST)
        /// </summary>
        /// <remarks>
        /// Queries for the number of job definitions that fulfill given parameters. This method takes the same message body as the [Get Job Definitions (POST)](https://docs.camunda.org/manual/7.21/reference/rest/job-definition/post-query/) method and therefore it is slightly more powerful than the [Get Job Definition Count](https://docs.camunda.org/manual/7.21/reference/rest/job-definition/get-query-count/) method.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobDefinitionQueryDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CountResultDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<CountResultDto>> QueryJobDefinitionsCountWithHttpInfoAsync(JobDefinitionQueryDto jobDefinitionQueryDto = default(JobDefinitionQueryDto), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Set Job Definition Priority by Id
        /// </summary>
        /// <remarks>
        /// Sets an overriding execution priority for jobs with the given definition id. Optionally, the priorities of all the definitions&#39; existing jobs are updated accordingly. The priority can be reset by setting it to &#x60;null&#x60;, meaning that a new job&#39;s priority will not be determined based on its definition&#39;s priority any longer. See the [user guide on job prioritization](https://docs.camunda.org/manual/7.21/user-guide/process-engine/the-job-executor/#set-job-definition-priorities-via-managementservice-api) for details.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the job definition to be updated.</param>
        /// <param name="jobDefinitionPriorityDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SetJobPriorityJobDefinitionAsync(string id, JobDefinitionPriorityDto jobDefinitionPriorityDto = default(JobDefinitionPriorityDto), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Set Job Definition Priority by Id
        /// </summary>
        /// <remarks>
        /// Sets an overriding execution priority for jobs with the given definition id. Optionally, the priorities of all the definitions&#39; existing jobs are updated accordingly. The priority can be reset by setting it to &#x60;null&#x60;, meaning that a new job&#39;s priority will not be determined based on its definition&#39;s priority any longer. See the [user guide on job prioritization](https://docs.camunda.org/manual/7.21/user-guide/process-engine/the-job-executor/#set-job-definition-priorities-via-managementservice-api) for details.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the job definition to be updated.</param>
        /// <param name="jobDefinitionPriorityDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SetJobPriorityJobDefinitionWithHttpInfoAsync(string id, JobDefinitionPriorityDto jobDefinitionPriorityDto = default(JobDefinitionPriorityDto), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Set Job Retries By Job Definition Id
        /// </summary>
        /// <remarks>
        /// Sets the number of retries of all **failed** jobs associated with the given job definition id.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the job definition to be updated.</param>
        /// <param name="retriesDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SetJobRetriesJobDefinitionAsync(string id, RetriesDto retriesDto = default(RetriesDto), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Set Job Retries By Job Definition Id
        /// </summary>
        /// <remarks>
        /// Sets the number of retries of all **failed** jobs associated with the given job definition id.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the job definition to be updated.</param>
        /// <param name="retriesDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SetJobRetriesJobDefinitionWithHttpInfoAsync(string id, RetriesDto retriesDto = default(RetriesDto), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Activate/Suspend Job Definition By Id
        /// </summary>
        /// <remarks>
        /// Activates or suspends a given job definition by id.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the job definition to activate or suspend.</param>
        /// <param name="jobDefinitionSuspensionStateDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateSuspensionStateJobDefinitionAsync(string id, JobDefinitionSuspensionStateDto jobDefinitionSuspensionStateDto = default(JobDefinitionSuspensionStateDto), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Activate/Suspend Job Definition By Id
        /// </summary>
        /// <remarks>
        /// Activates or suspends a given job definition by id.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the job definition to activate or suspend.</param>
        /// <param name="jobDefinitionSuspensionStateDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateSuspensionStateJobDefinitionWithHttpInfoAsync(string id, JobDefinitionSuspensionStateDto jobDefinitionSuspensionStateDto = default(JobDefinitionSuspensionStateDto), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Activate/Suspend Job Definitions
        /// </summary>
        /// <remarks>
        /// Activates or suspends job definitions with the given process definition id or process definition key.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobDefinitionsSuspensionStateDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateSuspensionStateJobDefinitionsAsync(JobDefinitionsSuspensionStateDto jobDefinitionsSuspensionStateDto = default(JobDefinitionsSuspensionStateDto), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Activate/Suspend Job Definitions
        /// </summary>
        /// <remarks>
        /// Activates or suspends job definitions with the given process definition id or process definition key.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobDefinitionsSuspensionStateDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateSuspensionStateJobDefinitionsWithHttpInfoAsync(JobDefinitionsSuspensionStateDto jobDefinitionsSuspensionStateDto = default(JobDefinitionsSuspensionStateDto), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IJobDefinitionApi : IJobDefinitionApiSync, IJobDefinitionApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class JobDefinitionApi : IDisposable, IJobDefinitionApi
    {
        private Camunda.OpenApi.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="JobDefinitionApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public JobDefinitionApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="JobDefinitionApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public JobDefinitionApi(string basePath)
        {
            this.Configuration = Camunda.OpenApi.Client.Client.Configuration.MergeConfigurations(
                Camunda.OpenApi.Client.Client.GlobalConfiguration.Instance,
                new Camunda.OpenApi.Client.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new Camunda.OpenApi.Client.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = Camunda.OpenApi.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="JobDefinitionApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public JobDefinitionApi(Camunda.OpenApi.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Camunda.OpenApi.Client.Client.Configuration.MergeConfigurations(
                Camunda.OpenApi.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new Camunda.OpenApi.Client.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = Camunda.OpenApi.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="JobDefinitionApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public JobDefinitionApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="JobDefinitionApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public JobDefinitionApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = Camunda.OpenApi.Client.Client.Configuration.MergeConfigurations(
                Camunda.OpenApi.Client.Client.GlobalConfiguration.Instance,
                new Camunda.OpenApi.Client.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new Camunda.OpenApi.Client.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = Camunda.OpenApi.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="JobDefinitionApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public JobDefinitionApi(HttpClient client, Camunda.OpenApi.Client.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = Camunda.OpenApi.Client.Client.Configuration.MergeConfigurations(
                Camunda.OpenApi.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new Camunda.OpenApi.Client.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = Camunda.OpenApi.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="JobDefinitionApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public JobDefinitionApi(Camunda.OpenApi.Client.Client.ISynchronousClient client, Camunda.OpenApi.Client.Client.IAsynchronousClient asyncClient, Camunda.OpenApi.Client.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Camunda.OpenApi.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public Camunda.OpenApi.Client.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Camunda.OpenApi.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Camunda.OpenApi.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Camunda.OpenApi.Client.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Camunda.OpenApi.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get Job Definition Retrieves a job definition by id, according to the &#x60;JobDefinition&#x60; interface in the engine.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the job definition to be retrieved.</param>
        /// <returns>JobDefinitionDto</returns>
        public JobDefinitionDto GetJobDefinition(string id)
        {
            Camunda.OpenApi.Client.Client.ApiResponse<JobDefinitionDto> localVarResponse = GetJobDefinitionWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Job Definition Retrieves a job definition by id, according to the &#x60;JobDefinition&#x60; interface in the engine.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the job definition to be retrieved.</param>
        /// <returns>ApiResponse of JobDefinitionDto</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<JobDefinitionDto> GetJobDefinitionWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling JobDefinitionApi->GetJobDefinition");

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Camunda.OpenApi.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<JobDefinitionDto>("/job-definition/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetJobDefinition", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Job Definition Retrieves a job definition by id, according to the &#x60;JobDefinition&#x60; interface in the engine.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the job definition to be retrieved.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JobDefinitionDto</returns>
        public async System.Threading.Tasks.Task<JobDefinitionDto> GetJobDefinitionAsync(string id, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<JobDefinitionDto> localVarResponse = await GetJobDefinitionWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Job Definition Retrieves a job definition by id, according to the &#x60;JobDefinition&#x60; interface in the engine.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the job definition to be retrieved.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JobDefinitionDto)</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<JobDefinitionDto>> GetJobDefinitionWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling JobDefinitionApi->GetJobDefinition");


            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Camunda.OpenApi.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<JobDefinitionDto>("/job-definition/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetJobDefinition", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Job Definitions Queries for job definitions that fulfill given parameters. The size of the result set can be retrieved by using the [Get Job Definition Count](https://docs.camunda.org/manual/7.21/reference/rest/job-definition/get-query-count/) method.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobDefinitionId">Filter by job definition id. (optional)</param>
        /// <param name="activityIdIn">Only include job definitions which belong to one of the passed and comma-separated activity ids. (optional)</param>
        /// <param name="processDefinitionId">Only include job definitions which exist for the given process definition id. (optional)</param>
        /// <param name="processDefinitionKey">Only include job definitions which exist for the given process definition key. (optional)</param>
        /// <param name="jobType">Only include job definitions which exist for the given job type. See the [User Guide](https://docs.camunda.org/manual/7.21/user-guide/process-engine/the-job-executor/#job-creation) for more information about job types. (optional)</param>
        /// <param name="jobConfiguration">Only include job definitions which exist for the given job configuration. For example: for timer jobs it is the timer configuration. (optional)</param>
        /// <param name="active">Only include active job definitions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="suspended">Only include suspended job definitions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="withOverridingJobPriority">Only include job definitions that have an overriding job priority defined. The only effective value is &#x60;true&#x60;. If set to &#x60;false&#x60;, this filter is not applied. (optional)</param>
        /// <param name="tenantIdIn">Only include job definitions which belong to one of the passed and comma-separated tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include job definitions which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="includeJobDefinitionsWithoutTenantId">Include job definitions which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <returns>List&lt;JobDefinitionDto&gt;</returns>
        public List<JobDefinitionDto> GetJobDefinitions(string jobDefinitionId = default(string), string activityIdIn = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string jobType = default(string), string jobConfiguration = default(string), bool? active = default(bool?), bool? suspended = default(bool?), bool? withOverridingJobPriority = default(bool?), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), bool? includeJobDefinitionsWithoutTenantId = default(bool?), string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<List<JobDefinitionDto>> localVarResponse = GetJobDefinitionsWithHttpInfo(jobDefinitionId, activityIdIn, processDefinitionId, processDefinitionKey, jobType, jobConfiguration, active, suspended, withOverridingJobPriority, tenantIdIn, withoutTenantId, includeJobDefinitionsWithoutTenantId, sortBy, sortOrder, firstResult, maxResults);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Job Definitions Queries for job definitions that fulfill given parameters. The size of the result set can be retrieved by using the [Get Job Definition Count](https://docs.camunda.org/manual/7.21/reference/rest/job-definition/get-query-count/) method.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobDefinitionId">Filter by job definition id. (optional)</param>
        /// <param name="activityIdIn">Only include job definitions which belong to one of the passed and comma-separated activity ids. (optional)</param>
        /// <param name="processDefinitionId">Only include job definitions which exist for the given process definition id. (optional)</param>
        /// <param name="processDefinitionKey">Only include job definitions which exist for the given process definition key. (optional)</param>
        /// <param name="jobType">Only include job definitions which exist for the given job type. See the [User Guide](https://docs.camunda.org/manual/7.21/user-guide/process-engine/the-job-executor/#job-creation) for more information about job types. (optional)</param>
        /// <param name="jobConfiguration">Only include job definitions which exist for the given job configuration. For example: for timer jobs it is the timer configuration. (optional)</param>
        /// <param name="active">Only include active job definitions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="suspended">Only include suspended job definitions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="withOverridingJobPriority">Only include job definitions that have an overriding job priority defined. The only effective value is &#x60;true&#x60;. If set to &#x60;false&#x60;, this filter is not applied. (optional)</param>
        /// <param name="tenantIdIn">Only include job definitions which belong to one of the passed and comma-separated tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include job definitions which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="includeJobDefinitionsWithoutTenantId">Include job definitions which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <returns>ApiResponse of List&lt;JobDefinitionDto&gt;</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<List<JobDefinitionDto>> GetJobDefinitionsWithHttpInfo(string jobDefinitionId = default(string), string activityIdIn = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string jobType = default(string), string jobConfiguration = default(string), bool? active = default(bool?), bool? suspended = default(bool?), bool? withOverridingJobPriority = default(bool?), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), bool? includeJobDefinitionsWithoutTenantId = default(bool?), string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?))
        {
            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (jobDefinitionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "jobDefinitionId", jobDefinitionId));
            }
            if (activityIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "activityIdIn", activityIdIn));
            }
            if (processDefinitionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processDefinitionId", processDefinitionId));
            }
            if (processDefinitionKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processDefinitionKey", processDefinitionKey));
            }
            if (jobType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "jobType", jobType));
            }
            if (jobConfiguration != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "jobConfiguration", jobConfiguration));
            }
            if (active != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "active", active));
            }
            if (suspended != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "suspended", suspended));
            }
            if (withOverridingJobPriority != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "withOverridingJobPriority", withOverridingJobPriority));
            }
            if (tenantIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "tenantIdIn", tenantIdIn));
            }
            if (withoutTenantId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "withoutTenantId", withoutTenantId));
            }
            if (includeJobDefinitionsWithoutTenantId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "includeJobDefinitionsWithoutTenantId", includeJobDefinitionsWithoutTenantId));
            }
            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "sortBy", sortBy));
            }
            if (sortOrder != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "sortOrder", sortOrder));
            }
            if (firstResult != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "firstResult", firstResult));
            }
            if (maxResults != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "maxResults", maxResults));
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Camunda.OpenApi.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<JobDefinitionDto>>("/job-definition", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetJobDefinitions", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Job Definitions Queries for job definitions that fulfill given parameters. The size of the result set can be retrieved by using the [Get Job Definition Count](https://docs.camunda.org/manual/7.21/reference/rest/job-definition/get-query-count/) method.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobDefinitionId">Filter by job definition id. (optional)</param>
        /// <param name="activityIdIn">Only include job definitions which belong to one of the passed and comma-separated activity ids. (optional)</param>
        /// <param name="processDefinitionId">Only include job definitions which exist for the given process definition id. (optional)</param>
        /// <param name="processDefinitionKey">Only include job definitions which exist for the given process definition key. (optional)</param>
        /// <param name="jobType">Only include job definitions which exist for the given job type. See the [User Guide](https://docs.camunda.org/manual/7.21/user-guide/process-engine/the-job-executor/#job-creation) for more information about job types. (optional)</param>
        /// <param name="jobConfiguration">Only include job definitions which exist for the given job configuration. For example: for timer jobs it is the timer configuration. (optional)</param>
        /// <param name="active">Only include active job definitions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="suspended">Only include suspended job definitions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="withOverridingJobPriority">Only include job definitions that have an overriding job priority defined. The only effective value is &#x60;true&#x60;. If set to &#x60;false&#x60;, this filter is not applied. (optional)</param>
        /// <param name="tenantIdIn">Only include job definitions which belong to one of the passed and comma-separated tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include job definitions which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="includeJobDefinitionsWithoutTenantId">Include job definitions which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;JobDefinitionDto&gt;</returns>
        public async System.Threading.Tasks.Task<List<JobDefinitionDto>> GetJobDefinitionsAsync(string jobDefinitionId = default(string), string activityIdIn = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string jobType = default(string), string jobConfiguration = default(string), bool? active = default(bool?), bool? suspended = default(bool?), bool? withOverridingJobPriority = default(bool?), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), bool? includeJobDefinitionsWithoutTenantId = default(bool?), string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<List<JobDefinitionDto>> localVarResponse = await GetJobDefinitionsWithHttpInfoAsync(jobDefinitionId, activityIdIn, processDefinitionId, processDefinitionKey, jobType, jobConfiguration, active, suspended, withOverridingJobPriority, tenantIdIn, withoutTenantId, includeJobDefinitionsWithoutTenantId, sortBy, sortOrder, firstResult, maxResults, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Job Definitions Queries for job definitions that fulfill given parameters. The size of the result set can be retrieved by using the [Get Job Definition Count](https://docs.camunda.org/manual/7.21/reference/rest/job-definition/get-query-count/) method.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobDefinitionId">Filter by job definition id. (optional)</param>
        /// <param name="activityIdIn">Only include job definitions which belong to one of the passed and comma-separated activity ids. (optional)</param>
        /// <param name="processDefinitionId">Only include job definitions which exist for the given process definition id. (optional)</param>
        /// <param name="processDefinitionKey">Only include job definitions which exist for the given process definition key. (optional)</param>
        /// <param name="jobType">Only include job definitions which exist for the given job type. See the [User Guide](https://docs.camunda.org/manual/7.21/user-guide/process-engine/the-job-executor/#job-creation) for more information about job types. (optional)</param>
        /// <param name="jobConfiguration">Only include job definitions which exist for the given job configuration. For example: for timer jobs it is the timer configuration. (optional)</param>
        /// <param name="active">Only include active job definitions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="suspended">Only include suspended job definitions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="withOverridingJobPriority">Only include job definitions that have an overriding job priority defined. The only effective value is &#x60;true&#x60;. If set to &#x60;false&#x60;, this filter is not applied. (optional)</param>
        /// <param name="tenantIdIn">Only include job definitions which belong to one of the passed and comma-separated tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include job definitions which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="includeJobDefinitionsWithoutTenantId">Include job definitions which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;JobDefinitionDto&gt;)</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<List<JobDefinitionDto>>> GetJobDefinitionsWithHttpInfoAsync(string jobDefinitionId = default(string), string activityIdIn = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string jobType = default(string), string jobConfiguration = default(string), bool? active = default(bool?), bool? suspended = default(bool?), bool? withOverridingJobPriority = default(bool?), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), bool? includeJobDefinitionsWithoutTenantId = default(bool?), string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (jobDefinitionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "jobDefinitionId", jobDefinitionId));
            }
            if (activityIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "activityIdIn", activityIdIn));
            }
            if (processDefinitionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processDefinitionId", processDefinitionId));
            }
            if (processDefinitionKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processDefinitionKey", processDefinitionKey));
            }
            if (jobType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "jobType", jobType));
            }
            if (jobConfiguration != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "jobConfiguration", jobConfiguration));
            }
            if (active != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "active", active));
            }
            if (suspended != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "suspended", suspended));
            }
            if (withOverridingJobPriority != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "withOverridingJobPriority", withOverridingJobPriority));
            }
            if (tenantIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "tenantIdIn", tenantIdIn));
            }
            if (withoutTenantId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "withoutTenantId", withoutTenantId));
            }
            if (includeJobDefinitionsWithoutTenantId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "includeJobDefinitionsWithoutTenantId", includeJobDefinitionsWithoutTenantId));
            }
            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "sortBy", sortBy));
            }
            if (sortOrder != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "sortOrder", sortOrder));
            }
            if (firstResult != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "firstResult", firstResult));
            }
            if (maxResults != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "maxResults", maxResults));
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Camunda.OpenApi.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<JobDefinitionDto>>("/job-definition", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetJobDefinitions", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Job Definition Count Queries for the number of job definitions that fulfill given parameters. Takes the same parameters as the [Get Job Definitions](https://docs.camunda.org/manual/7.21/reference/rest/job-definition/get-query/) method.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobDefinitionId">Filter by job definition id. (optional)</param>
        /// <param name="activityIdIn">Only include job definitions which belong to one of the passed and comma-separated activity ids. (optional)</param>
        /// <param name="processDefinitionId">Only include job definitions which exist for the given process definition id. (optional)</param>
        /// <param name="processDefinitionKey">Only include job definitions which exist for the given process definition key. (optional)</param>
        /// <param name="jobType">Only include job definitions which exist for the given job type. See the [User Guide](https://docs.camunda.org/manual/7.21/user-guide/process-engine/the-job-executor/#job-creation) for more information about job types. (optional)</param>
        /// <param name="jobConfiguration">Only include job definitions which exist for the given job configuration. For example: for timer jobs it is the timer configuration. (optional)</param>
        /// <param name="active">Only include active job definitions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="suspended">Only include suspended job definitions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="withOverridingJobPriority">Only include job definitions that have an overriding job priority defined. The only effective value is &#x60;true&#x60;. If set to &#x60;false&#x60;, this filter is not applied. (optional)</param>
        /// <param name="tenantIdIn">Only include job definitions which belong to one of the passed and comma-separated tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include job definitions which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="includeJobDefinitionsWithoutTenantId">Include job definitions which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <returns>CountResultDto</returns>
        public CountResultDto GetJobDefinitionsCount(string jobDefinitionId = default(string), string activityIdIn = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string jobType = default(string), string jobConfiguration = default(string), bool? active = default(bool?), bool? suspended = default(bool?), bool? withOverridingJobPriority = default(bool?), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), bool? includeJobDefinitionsWithoutTenantId = default(bool?))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<CountResultDto> localVarResponse = GetJobDefinitionsCountWithHttpInfo(jobDefinitionId, activityIdIn, processDefinitionId, processDefinitionKey, jobType, jobConfiguration, active, suspended, withOverridingJobPriority, tenantIdIn, withoutTenantId, includeJobDefinitionsWithoutTenantId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Job Definition Count Queries for the number of job definitions that fulfill given parameters. Takes the same parameters as the [Get Job Definitions](https://docs.camunda.org/manual/7.21/reference/rest/job-definition/get-query/) method.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobDefinitionId">Filter by job definition id. (optional)</param>
        /// <param name="activityIdIn">Only include job definitions which belong to one of the passed and comma-separated activity ids. (optional)</param>
        /// <param name="processDefinitionId">Only include job definitions which exist for the given process definition id. (optional)</param>
        /// <param name="processDefinitionKey">Only include job definitions which exist for the given process definition key. (optional)</param>
        /// <param name="jobType">Only include job definitions which exist for the given job type. See the [User Guide](https://docs.camunda.org/manual/7.21/user-guide/process-engine/the-job-executor/#job-creation) for more information about job types. (optional)</param>
        /// <param name="jobConfiguration">Only include job definitions which exist for the given job configuration. For example: for timer jobs it is the timer configuration. (optional)</param>
        /// <param name="active">Only include active job definitions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="suspended">Only include suspended job definitions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="withOverridingJobPriority">Only include job definitions that have an overriding job priority defined. The only effective value is &#x60;true&#x60;. If set to &#x60;false&#x60;, this filter is not applied. (optional)</param>
        /// <param name="tenantIdIn">Only include job definitions which belong to one of the passed and comma-separated tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include job definitions which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="includeJobDefinitionsWithoutTenantId">Include job definitions which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <returns>ApiResponse of CountResultDto</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<CountResultDto> GetJobDefinitionsCountWithHttpInfo(string jobDefinitionId = default(string), string activityIdIn = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string jobType = default(string), string jobConfiguration = default(string), bool? active = default(bool?), bool? suspended = default(bool?), bool? withOverridingJobPriority = default(bool?), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), bool? includeJobDefinitionsWithoutTenantId = default(bool?))
        {
            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (jobDefinitionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "jobDefinitionId", jobDefinitionId));
            }
            if (activityIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "activityIdIn", activityIdIn));
            }
            if (processDefinitionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processDefinitionId", processDefinitionId));
            }
            if (processDefinitionKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processDefinitionKey", processDefinitionKey));
            }
            if (jobType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "jobType", jobType));
            }
            if (jobConfiguration != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "jobConfiguration", jobConfiguration));
            }
            if (active != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "active", active));
            }
            if (suspended != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "suspended", suspended));
            }
            if (withOverridingJobPriority != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "withOverridingJobPriority", withOverridingJobPriority));
            }
            if (tenantIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "tenantIdIn", tenantIdIn));
            }
            if (withoutTenantId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "withoutTenantId", withoutTenantId));
            }
            if (includeJobDefinitionsWithoutTenantId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "includeJobDefinitionsWithoutTenantId", includeJobDefinitionsWithoutTenantId));
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Camunda.OpenApi.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<CountResultDto>("/job-definition/count", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetJobDefinitionsCount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Job Definition Count Queries for the number of job definitions that fulfill given parameters. Takes the same parameters as the [Get Job Definitions](https://docs.camunda.org/manual/7.21/reference/rest/job-definition/get-query/) method.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobDefinitionId">Filter by job definition id. (optional)</param>
        /// <param name="activityIdIn">Only include job definitions which belong to one of the passed and comma-separated activity ids. (optional)</param>
        /// <param name="processDefinitionId">Only include job definitions which exist for the given process definition id. (optional)</param>
        /// <param name="processDefinitionKey">Only include job definitions which exist for the given process definition key. (optional)</param>
        /// <param name="jobType">Only include job definitions which exist for the given job type. See the [User Guide](https://docs.camunda.org/manual/7.21/user-guide/process-engine/the-job-executor/#job-creation) for more information about job types. (optional)</param>
        /// <param name="jobConfiguration">Only include job definitions which exist for the given job configuration. For example: for timer jobs it is the timer configuration. (optional)</param>
        /// <param name="active">Only include active job definitions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="suspended">Only include suspended job definitions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="withOverridingJobPriority">Only include job definitions that have an overriding job priority defined. The only effective value is &#x60;true&#x60;. If set to &#x60;false&#x60;, this filter is not applied. (optional)</param>
        /// <param name="tenantIdIn">Only include job definitions which belong to one of the passed and comma-separated tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include job definitions which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="includeJobDefinitionsWithoutTenantId">Include job definitions which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CountResultDto</returns>
        public async System.Threading.Tasks.Task<CountResultDto> GetJobDefinitionsCountAsync(string jobDefinitionId = default(string), string activityIdIn = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string jobType = default(string), string jobConfiguration = default(string), bool? active = default(bool?), bool? suspended = default(bool?), bool? withOverridingJobPriority = default(bool?), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), bool? includeJobDefinitionsWithoutTenantId = default(bool?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<CountResultDto> localVarResponse = await GetJobDefinitionsCountWithHttpInfoAsync(jobDefinitionId, activityIdIn, processDefinitionId, processDefinitionKey, jobType, jobConfiguration, active, suspended, withOverridingJobPriority, tenantIdIn, withoutTenantId, includeJobDefinitionsWithoutTenantId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Job Definition Count Queries for the number of job definitions that fulfill given parameters. Takes the same parameters as the [Get Job Definitions](https://docs.camunda.org/manual/7.21/reference/rest/job-definition/get-query/) method.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobDefinitionId">Filter by job definition id. (optional)</param>
        /// <param name="activityIdIn">Only include job definitions which belong to one of the passed and comma-separated activity ids. (optional)</param>
        /// <param name="processDefinitionId">Only include job definitions which exist for the given process definition id. (optional)</param>
        /// <param name="processDefinitionKey">Only include job definitions which exist for the given process definition key. (optional)</param>
        /// <param name="jobType">Only include job definitions which exist for the given job type. See the [User Guide](https://docs.camunda.org/manual/7.21/user-guide/process-engine/the-job-executor/#job-creation) for more information about job types. (optional)</param>
        /// <param name="jobConfiguration">Only include job definitions which exist for the given job configuration. For example: for timer jobs it is the timer configuration. (optional)</param>
        /// <param name="active">Only include active job definitions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="suspended">Only include suspended job definitions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="withOverridingJobPriority">Only include job definitions that have an overriding job priority defined. The only effective value is &#x60;true&#x60;. If set to &#x60;false&#x60;, this filter is not applied. (optional)</param>
        /// <param name="tenantIdIn">Only include job definitions which belong to one of the passed and comma-separated tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include job definitions which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="includeJobDefinitionsWithoutTenantId">Include job definitions which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CountResultDto)</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<CountResultDto>> GetJobDefinitionsCountWithHttpInfoAsync(string jobDefinitionId = default(string), string activityIdIn = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string jobType = default(string), string jobConfiguration = default(string), bool? active = default(bool?), bool? suspended = default(bool?), bool? withOverridingJobPriority = default(bool?), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), bool? includeJobDefinitionsWithoutTenantId = default(bool?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (jobDefinitionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "jobDefinitionId", jobDefinitionId));
            }
            if (activityIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "activityIdIn", activityIdIn));
            }
            if (processDefinitionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processDefinitionId", processDefinitionId));
            }
            if (processDefinitionKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processDefinitionKey", processDefinitionKey));
            }
            if (jobType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "jobType", jobType));
            }
            if (jobConfiguration != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "jobConfiguration", jobConfiguration));
            }
            if (active != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "active", active));
            }
            if (suspended != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "suspended", suspended));
            }
            if (withOverridingJobPriority != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "withOverridingJobPriority", withOverridingJobPriority));
            }
            if (tenantIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "tenantIdIn", tenantIdIn));
            }
            if (withoutTenantId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "withoutTenantId", withoutTenantId));
            }
            if (includeJobDefinitionsWithoutTenantId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "includeJobDefinitionsWithoutTenantId", includeJobDefinitionsWithoutTenantId));
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Camunda.OpenApi.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<CountResultDto>("/job-definition/count", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetJobDefinitionsCount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Job Definitions (POST) Queries for job definitions that fulfill given parameters. This method is slightly more powerful than the [Get Job Definitions](https://docs.camunda.org/manual/7.21/reference/rest/job-definition/get-query/) method because it allows filtering by multiple job definitions of types &#x60;String&#x60;, &#x60;Number&#x60; or &#x60;Boolean&#x60;.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="jobDefinitionQueryDto"> (optional)</param>
        /// <returns>List&lt;JobDefinitionDto&gt;</returns>
        public List<JobDefinitionDto> QueryJobDefinitions(int? firstResult = default(int?), int? maxResults = default(int?), JobDefinitionQueryDto jobDefinitionQueryDto = default(JobDefinitionQueryDto))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<List<JobDefinitionDto>> localVarResponse = QueryJobDefinitionsWithHttpInfo(firstResult, maxResults, jobDefinitionQueryDto);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Job Definitions (POST) Queries for job definitions that fulfill given parameters. This method is slightly more powerful than the [Get Job Definitions](https://docs.camunda.org/manual/7.21/reference/rest/job-definition/get-query/) method because it allows filtering by multiple job definitions of types &#x60;String&#x60;, &#x60;Number&#x60; or &#x60;Boolean&#x60;.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="jobDefinitionQueryDto"> (optional)</param>
        /// <returns>ApiResponse of List&lt;JobDefinitionDto&gt;</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<List<JobDefinitionDto>> QueryJobDefinitionsWithHttpInfo(int? firstResult = default(int?), int? maxResults = default(int?), JobDefinitionQueryDto jobDefinitionQueryDto = default(JobDefinitionQueryDto))
        {
            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (firstResult != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "firstResult", firstResult));
            }
            if (maxResults != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "maxResults", maxResults));
            }
            localVarRequestOptions.Data = jobDefinitionQueryDto;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Camunda.OpenApi.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<List<JobDefinitionDto>>("/job-definition", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QueryJobDefinitions", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Job Definitions (POST) Queries for job definitions that fulfill given parameters. This method is slightly more powerful than the [Get Job Definitions](https://docs.camunda.org/manual/7.21/reference/rest/job-definition/get-query/) method because it allows filtering by multiple job definitions of types &#x60;String&#x60;, &#x60;Number&#x60; or &#x60;Boolean&#x60;.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="jobDefinitionQueryDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;JobDefinitionDto&gt;</returns>
        public async System.Threading.Tasks.Task<List<JobDefinitionDto>> QueryJobDefinitionsAsync(int? firstResult = default(int?), int? maxResults = default(int?), JobDefinitionQueryDto jobDefinitionQueryDto = default(JobDefinitionQueryDto), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<List<JobDefinitionDto>> localVarResponse = await QueryJobDefinitionsWithHttpInfoAsync(firstResult, maxResults, jobDefinitionQueryDto, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Job Definitions (POST) Queries for job definitions that fulfill given parameters. This method is slightly more powerful than the [Get Job Definitions](https://docs.camunda.org/manual/7.21/reference/rest/job-definition/get-query/) method because it allows filtering by multiple job definitions of types &#x60;String&#x60;, &#x60;Number&#x60; or &#x60;Boolean&#x60;.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="jobDefinitionQueryDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;JobDefinitionDto&gt;)</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<List<JobDefinitionDto>>> QueryJobDefinitionsWithHttpInfoAsync(int? firstResult = default(int?), int? maxResults = default(int?), JobDefinitionQueryDto jobDefinitionQueryDto = default(JobDefinitionQueryDto), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (firstResult != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "firstResult", firstResult));
            }
            if (maxResults != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "maxResults", maxResults));
            }
            localVarRequestOptions.Data = jobDefinitionQueryDto;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Camunda.OpenApi.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<List<JobDefinitionDto>>("/job-definition", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QueryJobDefinitions", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Job Definition Count (POST) Queries for the number of job definitions that fulfill given parameters. This method takes the same message body as the [Get Job Definitions (POST)](https://docs.camunda.org/manual/7.21/reference/rest/job-definition/post-query/) method and therefore it is slightly more powerful than the [Get Job Definition Count](https://docs.camunda.org/manual/7.21/reference/rest/job-definition/get-query-count/) method.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobDefinitionQueryDto"> (optional)</param>
        /// <returns>CountResultDto</returns>
        public CountResultDto QueryJobDefinitionsCount(JobDefinitionQueryDto jobDefinitionQueryDto = default(JobDefinitionQueryDto))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<CountResultDto> localVarResponse = QueryJobDefinitionsCountWithHttpInfo(jobDefinitionQueryDto);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Job Definition Count (POST) Queries for the number of job definitions that fulfill given parameters. This method takes the same message body as the [Get Job Definitions (POST)](https://docs.camunda.org/manual/7.21/reference/rest/job-definition/post-query/) method and therefore it is slightly more powerful than the [Get Job Definition Count](https://docs.camunda.org/manual/7.21/reference/rest/job-definition/get-query-count/) method.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobDefinitionQueryDto"> (optional)</param>
        /// <returns>ApiResponse of CountResultDto</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<CountResultDto> QueryJobDefinitionsCountWithHttpInfo(JobDefinitionQueryDto jobDefinitionQueryDto = default(JobDefinitionQueryDto))
        {
            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = jobDefinitionQueryDto;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Camunda.OpenApi.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CountResultDto>("/job-definition/count", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QueryJobDefinitionsCount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Job Definition Count (POST) Queries for the number of job definitions that fulfill given parameters. This method takes the same message body as the [Get Job Definitions (POST)](https://docs.camunda.org/manual/7.21/reference/rest/job-definition/post-query/) method and therefore it is slightly more powerful than the [Get Job Definition Count](https://docs.camunda.org/manual/7.21/reference/rest/job-definition/get-query-count/) method.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobDefinitionQueryDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CountResultDto</returns>
        public async System.Threading.Tasks.Task<CountResultDto> QueryJobDefinitionsCountAsync(JobDefinitionQueryDto jobDefinitionQueryDto = default(JobDefinitionQueryDto), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<CountResultDto> localVarResponse = await QueryJobDefinitionsCountWithHttpInfoAsync(jobDefinitionQueryDto, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Job Definition Count (POST) Queries for the number of job definitions that fulfill given parameters. This method takes the same message body as the [Get Job Definitions (POST)](https://docs.camunda.org/manual/7.21/reference/rest/job-definition/post-query/) method and therefore it is slightly more powerful than the [Get Job Definition Count](https://docs.camunda.org/manual/7.21/reference/rest/job-definition/get-query-count/) method.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobDefinitionQueryDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CountResultDto)</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<CountResultDto>> QueryJobDefinitionsCountWithHttpInfoAsync(JobDefinitionQueryDto jobDefinitionQueryDto = default(JobDefinitionQueryDto), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = jobDefinitionQueryDto;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Camunda.OpenApi.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<CountResultDto>("/job-definition/count", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QueryJobDefinitionsCount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set Job Definition Priority by Id Sets an overriding execution priority for jobs with the given definition id. Optionally, the priorities of all the definitions&#39; existing jobs are updated accordingly. The priority can be reset by setting it to &#x60;null&#x60;, meaning that a new job&#39;s priority will not be determined based on its definition&#39;s priority any longer. See the [user guide on job prioritization](https://docs.camunda.org/manual/7.21/user-guide/process-engine/the-job-executor/#set-job-definition-priorities-via-managementservice-api) for details.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the job definition to be updated.</param>
        /// <param name="jobDefinitionPriorityDto"> (optional)</param>
        /// <returns></returns>
        public void SetJobPriorityJobDefinition(string id, JobDefinitionPriorityDto jobDefinitionPriorityDto = default(JobDefinitionPriorityDto))
        {
            SetJobPriorityJobDefinitionWithHttpInfo(id, jobDefinitionPriorityDto);
        }

        /// <summary>
        /// Set Job Definition Priority by Id Sets an overriding execution priority for jobs with the given definition id. Optionally, the priorities of all the definitions&#39; existing jobs are updated accordingly. The priority can be reset by setting it to &#x60;null&#x60;, meaning that a new job&#39;s priority will not be determined based on its definition&#39;s priority any longer. See the [user guide on job prioritization](https://docs.camunda.org/manual/7.21/user-guide/process-engine/the-job-executor/#set-job-definition-priorities-via-managementservice-api) for details.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the job definition to be updated.</param>
        /// <param name="jobDefinitionPriorityDto"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<Object> SetJobPriorityJobDefinitionWithHttpInfo(string id, JobDefinitionPriorityDto jobDefinitionPriorityDto = default(JobDefinitionPriorityDto))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling JobDefinitionApi->SetJobPriorityJobDefinition");

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = jobDefinitionPriorityDto;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Camunda.OpenApi.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/job-definition/{id}/jobPriority", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetJobPriorityJobDefinition", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set Job Definition Priority by Id Sets an overriding execution priority for jobs with the given definition id. Optionally, the priorities of all the definitions&#39; existing jobs are updated accordingly. The priority can be reset by setting it to &#x60;null&#x60;, meaning that a new job&#39;s priority will not be determined based on its definition&#39;s priority any longer. See the [user guide on job prioritization](https://docs.camunda.org/manual/7.21/user-guide/process-engine/the-job-executor/#set-job-definition-priorities-via-managementservice-api) for details.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the job definition to be updated.</param>
        /// <param name="jobDefinitionPriorityDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SetJobPriorityJobDefinitionAsync(string id, JobDefinitionPriorityDto jobDefinitionPriorityDto = default(JobDefinitionPriorityDto), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await SetJobPriorityJobDefinitionWithHttpInfoAsync(id, jobDefinitionPriorityDto, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Set Job Definition Priority by Id Sets an overriding execution priority for jobs with the given definition id. Optionally, the priorities of all the definitions&#39; existing jobs are updated accordingly. The priority can be reset by setting it to &#x60;null&#x60;, meaning that a new job&#39;s priority will not be determined based on its definition&#39;s priority any longer. See the [user guide on job prioritization](https://docs.camunda.org/manual/7.21/user-guide/process-engine/the-job-executor/#set-job-definition-priorities-via-managementservice-api) for details.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the job definition to be updated.</param>
        /// <param name="jobDefinitionPriorityDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<Object>> SetJobPriorityJobDefinitionWithHttpInfoAsync(string id, JobDefinitionPriorityDto jobDefinitionPriorityDto = default(JobDefinitionPriorityDto), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling JobDefinitionApi->SetJobPriorityJobDefinition");


            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = jobDefinitionPriorityDto;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Camunda.OpenApi.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/job-definition/{id}/jobPriority", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetJobPriorityJobDefinition", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set Job Retries By Job Definition Id Sets the number of retries of all **failed** jobs associated with the given job definition id.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the job definition to be updated.</param>
        /// <param name="retriesDto"> (optional)</param>
        /// <returns></returns>
        public void SetJobRetriesJobDefinition(string id, RetriesDto retriesDto = default(RetriesDto))
        {
            SetJobRetriesJobDefinitionWithHttpInfo(id, retriesDto);
        }

        /// <summary>
        /// Set Job Retries By Job Definition Id Sets the number of retries of all **failed** jobs associated with the given job definition id.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the job definition to be updated.</param>
        /// <param name="retriesDto"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<Object> SetJobRetriesJobDefinitionWithHttpInfo(string id, RetriesDto retriesDto = default(RetriesDto))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling JobDefinitionApi->SetJobRetriesJobDefinition");

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = retriesDto;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Camunda.OpenApi.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/job-definition/{id}/retries", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetJobRetriesJobDefinition", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set Job Retries By Job Definition Id Sets the number of retries of all **failed** jobs associated with the given job definition id.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the job definition to be updated.</param>
        /// <param name="retriesDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SetJobRetriesJobDefinitionAsync(string id, RetriesDto retriesDto = default(RetriesDto), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await SetJobRetriesJobDefinitionWithHttpInfoAsync(id, retriesDto, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Set Job Retries By Job Definition Id Sets the number of retries of all **failed** jobs associated with the given job definition id.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the job definition to be updated.</param>
        /// <param name="retriesDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<Object>> SetJobRetriesJobDefinitionWithHttpInfoAsync(string id, RetriesDto retriesDto = default(RetriesDto), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling JobDefinitionApi->SetJobRetriesJobDefinition");


            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = retriesDto;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Camunda.OpenApi.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/job-definition/{id}/retries", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetJobRetriesJobDefinition", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Activate/Suspend Job Definition By Id Activates or suspends a given job definition by id.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the job definition to activate or suspend.</param>
        /// <param name="jobDefinitionSuspensionStateDto"> (optional)</param>
        /// <returns></returns>
        public void UpdateSuspensionStateJobDefinition(string id, JobDefinitionSuspensionStateDto jobDefinitionSuspensionStateDto = default(JobDefinitionSuspensionStateDto))
        {
            UpdateSuspensionStateJobDefinitionWithHttpInfo(id, jobDefinitionSuspensionStateDto);
        }

        /// <summary>
        /// Activate/Suspend Job Definition By Id Activates or suspends a given job definition by id.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the job definition to activate or suspend.</param>
        /// <param name="jobDefinitionSuspensionStateDto"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<Object> UpdateSuspensionStateJobDefinitionWithHttpInfo(string id, JobDefinitionSuspensionStateDto jobDefinitionSuspensionStateDto = default(JobDefinitionSuspensionStateDto))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling JobDefinitionApi->UpdateSuspensionStateJobDefinition");

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = jobDefinitionSuspensionStateDto;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Camunda.OpenApi.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/job-definition/{id}/suspended", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateSuspensionStateJobDefinition", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Activate/Suspend Job Definition By Id Activates or suspends a given job definition by id.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the job definition to activate or suspend.</param>
        /// <param name="jobDefinitionSuspensionStateDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateSuspensionStateJobDefinitionAsync(string id, JobDefinitionSuspensionStateDto jobDefinitionSuspensionStateDto = default(JobDefinitionSuspensionStateDto), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await UpdateSuspensionStateJobDefinitionWithHttpInfoAsync(id, jobDefinitionSuspensionStateDto, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Activate/Suspend Job Definition By Id Activates or suspends a given job definition by id.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the job definition to activate or suspend.</param>
        /// <param name="jobDefinitionSuspensionStateDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<Object>> UpdateSuspensionStateJobDefinitionWithHttpInfoAsync(string id, JobDefinitionSuspensionStateDto jobDefinitionSuspensionStateDto = default(JobDefinitionSuspensionStateDto), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling JobDefinitionApi->UpdateSuspensionStateJobDefinition");


            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = jobDefinitionSuspensionStateDto;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Camunda.OpenApi.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/job-definition/{id}/suspended", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateSuspensionStateJobDefinition", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Activate/Suspend Job Definitions Activates or suspends job definitions with the given process definition id or process definition key.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobDefinitionsSuspensionStateDto"> (optional)</param>
        /// <returns></returns>
        public void UpdateSuspensionStateJobDefinitions(JobDefinitionsSuspensionStateDto jobDefinitionsSuspensionStateDto = default(JobDefinitionsSuspensionStateDto))
        {
            UpdateSuspensionStateJobDefinitionsWithHttpInfo(jobDefinitionsSuspensionStateDto);
        }

        /// <summary>
        /// Activate/Suspend Job Definitions Activates or suspends job definitions with the given process definition id or process definition key.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobDefinitionsSuspensionStateDto"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<Object> UpdateSuspensionStateJobDefinitionsWithHttpInfo(JobDefinitionsSuspensionStateDto jobDefinitionsSuspensionStateDto = default(JobDefinitionsSuspensionStateDto))
        {
            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = jobDefinitionsSuspensionStateDto;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Camunda.OpenApi.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/job-definition/suspended", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateSuspensionStateJobDefinitions", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Activate/Suspend Job Definitions Activates or suspends job definitions with the given process definition id or process definition key.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobDefinitionsSuspensionStateDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateSuspensionStateJobDefinitionsAsync(JobDefinitionsSuspensionStateDto jobDefinitionsSuspensionStateDto = default(JobDefinitionsSuspensionStateDto), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await UpdateSuspensionStateJobDefinitionsWithHttpInfoAsync(jobDefinitionsSuspensionStateDto, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Activate/Suspend Job Definitions Activates or suspends job definitions with the given process definition id or process definition key.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobDefinitionsSuspensionStateDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<Object>> UpdateSuspensionStateJobDefinitionsWithHttpInfoAsync(JobDefinitionsSuspensionStateDto jobDefinitionsSuspensionStateDto = default(JobDefinitionsSuspensionStateDto), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = jobDefinitionsSuspensionStateDto;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Camunda.OpenApi.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/job-definition/suspended", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateSuspensionStateJobDefinitions", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
