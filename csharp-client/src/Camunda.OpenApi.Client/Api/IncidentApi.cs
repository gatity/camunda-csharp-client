/*
 * Camunda Platform REST API
 *
 * OpenApi Spec for Camunda Platform REST API.
 *
 * The version of the OpenAPI document: 7.16.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Camunda.OpenApi.Client.Client;
using Camunda.OpenApi.Client.Model;

namespace Camunda.OpenApi.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IIncidentApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Clear Incident Annotation
        /// </summary>
        /// <remarks>
        /// Clears the annotation of an incident with given id.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the incident to clear the annotation at.</param>
        /// <returns></returns>
        void ClearIncidentAnnotation(string id);

        /// <summary>
        /// Clear Incident Annotation
        /// </summary>
        /// <remarks>
        /// Clears the annotation of an incident with given id.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the incident to clear the annotation at.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ClearIncidentAnnotationWithHttpInfo(string id);
        /// <summary>
        /// Get Incident
        /// </summary>
        /// <remarks>
        /// Retrieves an incident by ID.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the incident to be retrieved.</param>
        /// <returns>IncidentDto</returns>
        IncidentDto GetIncident(string id);

        /// <summary>
        /// Get Incident
        /// </summary>
        /// <remarks>
        /// Retrieves an incident by ID.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the incident to be retrieved.</param>
        /// <returns>ApiResponse of IncidentDto</returns>
        ApiResponse<IncidentDto> GetIncidentWithHttpInfo(string id);
        /// <summary>
        /// Get List
        /// </summary>
        /// <remarks>
        /// Queries for incidents that fulfill given parameters. The size of the result set can be retrieved by using the [Get Incident Count](https://docs.camunda.org/manual/7.16/reference/rest/incident/get-query-count/) method.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="incidentId">Restricts to incidents that have the given id. (optional)</param>
        /// <param name="incidentType">Restricts to incidents that belong to the given incident type. See the [User Guide](https://docs.camunda.org/manual/7.16/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)</param>
        /// <param name="incidentMessage">Restricts to incidents that have the given incident message. (optional)</param>
        /// <param name="incidentMessageLike">Restricts to incidents that incidents message is a substring of the given value. The string can include the wildcard character &#39;%&#39; to express like-strategy: starts with (&#x60;string%&#x60;), ends with (&#x60;%string&#x60;) or contains (&#x60;%string%&#x60;). (optional)</param>
        /// <param name="processDefinitionId">Restricts to incidents that belong to a process definition with the given id. (optional)</param>
        /// <param name="processDefinitionKeyIn">Restricts to incidents that belong to a process definition with the given keys. Must be a comma-separated list. (optional)</param>
        /// <param name="processInstanceId">Restricts to incidents that belong to a process instance with the given id. (optional)</param>
        /// <param name="executionId">Restricts to incidents that belong to an execution with the given id. (optional)</param>
        /// <param name="incidentTimestampBefore">Restricts to incidents that have an incidentTimestamp date before the given date.  By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="incidentTimestampAfter">Restricts to incidents that have an incidentTimestamp date after the given date.  By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="activityId">Restricts to incidents that belong to an activity with the given id. (optional)</param>
        /// <param name="failedActivityId">Restricts to incidents that were created due to the failure of an activity with the given id. (optional)</param>
        /// <param name="causeIncidentId">Restricts to incidents that have the given incident id as cause incident. (optional)</param>
        /// <param name="rootCauseIncidentId">Restricts to incidents that have the given incident id as root cause incident. (optional)</param>
        /// <param name="configuration">Restricts to incidents that have the given parameter set as configuration. (optional)</param>
        /// <param name="tenantIdIn">Restricts to incidents that have one of the given comma-separated tenant ids. (optional)</param>
        /// <param name="jobDefinitionIdIn">Restricts to incidents that have one of the given comma-separated job definition ids. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <returns>List&lt;IncidentDto&gt;</returns>
        List<IncidentDto> GetIncidents(string incidentId = default(string), string incidentType = default(string), string incidentMessage = default(string), string incidentMessageLike = default(string), string processDefinitionId = default(string), string processDefinitionKeyIn = default(string), string processInstanceId = default(string), string executionId = default(string), DateTime? incidentTimestampBefore = default(DateTime?), DateTime? incidentTimestampAfter = default(DateTime?), string activityId = default(string), string failedActivityId = default(string), string causeIncidentId = default(string), string rootCauseIncidentId = default(string), string configuration = default(string), string tenantIdIn = default(string), string jobDefinitionIdIn = default(string), string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?));

        /// <summary>
        /// Get List
        /// </summary>
        /// <remarks>
        /// Queries for incidents that fulfill given parameters. The size of the result set can be retrieved by using the [Get Incident Count](https://docs.camunda.org/manual/7.16/reference/rest/incident/get-query-count/) method.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="incidentId">Restricts to incidents that have the given id. (optional)</param>
        /// <param name="incidentType">Restricts to incidents that belong to the given incident type. See the [User Guide](https://docs.camunda.org/manual/7.16/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)</param>
        /// <param name="incidentMessage">Restricts to incidents that have the given incident message. (optional)</param>
        /// <param name="incidentMessageLike">Restricts to incidents that incidents message is a substring of the given value. The string can include the wildcard character &#39;%&#39; to express like-strategy: starts with (&#x60;string%&#x60;), ends with (&#x60;%string&#x60;) or contains (&#x60;%string%&#x60;). (optional)</param>
        /// <param name="processDefinitionId">Restricts to incidents that belong to a process definition with the given id. (optional)</param>
        /// <param name="processDefinitionKeyIn">Restricts to incidents that belong to a process definition with the given keys. Must be a comma-separated list. (optional)</param>
        /// <param name="processInstanceId">Restricts to incidents that belong to a process instance with the given id. (optional)</param>
        /// <param name="executionId">Restricts to incidents that belong to an execution with the given id. (optional)</param>
        /// <param name="incidentTimestampBefore">Restricts to incidents that have an incidentTimestamp date before the given date.  By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="incidentTimestampAfter">Restricts to incidents that have an incidentTimestamp date after the given date.  By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="activityId">Restricts to incidents that belong to an activity with the given id. (optional)</param>
        /// <param name="failedActivityId">Restricts to incidents that were created due to the failure of an activity with the given id. (optional)</param>
        /// <param name="causeIncidentId">Restricts to incidents that have the given incident id as cause incident. (optional)</param>
        /// <param name="rootCauseIncidentId">Restricts to incidents that have the given incident id as root cause incident. (optional)</param>
        /// <param name="configuration">Restricts to incidents that have the given parameter set as configuration. (optional)</param>
        /// <param name="tenantIdIn">Restricts to incidents that have one of the given comma-separated tenant ids. (optional)</param>
        /// <param name="jobDefinitionIdIn">Restricts to incidents that have one of the given comma-separated job definition ids. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <returns>ApiResponse of List&lt;IncidentDto&gt;</returns>
        ApiResponse<List<IncidentDto>> GetIncidentsWithHttpInfo(string incidentId = default(string), string incidentType = default(string), string incidentMessage = default(string), string incidentMessageLike = default(string), string processDefinitionId = default(string), string processDefinitionKeyIn = default(string), string processInstanceId = default(string), string executionId = default(string), DateTime? incidentTimestampBefore = default(DateTime?), DateTime? incidentTimestampAfter = default(DateTime?), string activityId = default(string), string failedActivityId = default(string), string causeIncidentId = default(string), string rootCauseIncidentId = default(string), string configuration = default(string), string tenantIdIn = default(string), string jobDefinitionIdIn = default(string), string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?));
        /// <summary>
        /// Get List Count
        /// </summary>
        /// <remarks>
        /// Queries for the number of incidents that fulfill given parameters. Takes the same parameters as the [Get Incidents](https://docs.camunda.org/manual/7.16/reference/rest/incident/get-query/) method.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="incidentId">Restricts to incidents that have the given id. (optional)</param>
        /// <param name="incidentType">Restricts to incidents that belong to the given incident type. See the [User Guide](https://docs.camunda.org/manual/7.16/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)</param>
        /// <param name="incidentMessage">Restricts to incidents that have the given incident message. (optional)</param>
        /// <param name="incidentMessageLike">Restricts to incidents that incidents message is a substring of the given value. The string can include the wildcard character &#39;%&#39; to express like-strategy: starts with (&#x60;string%&#x60;), ends with (&#x60;%string&#x60;) or contains (&#x60;%string%&#x60;). (optional)</param>
        /// <param name="processDefinitionId">Restricts to incidents that belong to a process definition with the given id. (optional)</param>
        /// <param name="processDefinitionKeyIn">Restricts to incidents that belong to a process definition with the given keys. Must be a comma-separated list. (optional)</param>
        /// <param name="processInstanceId">Restricts to incidents that belong to a process instance with the given id. (optional)</param>
        /// <param name="executionId">Restricts to incidents that belong to an execution with the given id. (optional)</param>
        /// <param name="incidentTimestampBefore">Restricts to incidents that have an incidentTimestamp date before the given date.  By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="incidentTimestampAfter">Restricts to incidents that have an incidentTimestamp date after the given date.  By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="activityId">Restricts to incidents that belong to an activity with the given id. (optional)</param>
        /// <param name="failedActivityId">Restricts to incidents that were created due to the failure of an activity with the given id. (optional)</param>
        /// <param name="causeIncidentId">Restricts to incidents that have the given incident id as cause incident. (optional)</param>
        /// <param name="rootCauseIncidentId">Restricts to incidents that have the given incident id as root cause incident. (optional)</param>
        /// <param name="configuration">Restricts to incidents that have the given parameter set as configuration. (optional)</param>
        /// <param name="tenantIdIn">Restricts to incidents that have one of the given comma-separated tenant ids. (optional)</param>
        /// <param name="jobDefinitionIdIn">Restricts to incidents that have one of the given comma-separated job definition ids. (optional)</param>
        /// <returns>CountResultDto</returns>
        CountResultDto GetIncidentsCount(string incidentId = default(string), string incidentType = default(string), string incidentMessage = default(string), string incidentMessageLike = default(string), string processDefinitionId = default(string), string processDefinitionKeyIn = default(string), string processInstanceId = default(string), string executionId = default(string), DateTime? incidentTimestampBefore = default(DateTime?), DateTime? incidentTimestampAfter = default(DateTime?), string activityId = default(string), string failedActivityId = default(string), string causeIncidentId = default(string), string rootCauseIncidentId = default(string), string configuration = default(string), string tenantIdIn = default(string), string jobDefinitionIdIn = default(string));

        /// <summary>
        /// Get List Count
        /// </summary>
        /// <remarks>
        /// Queries for the number of incidents that fulfill given parameters. Takes the same parameters as the [Get Incidents](https://docs.camunda.org/manual/7.16/reference/rest/incident/get-query/) method.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="incidentId">Restricts to incidents that have the given id. (optional)</param>
        /// <param name="incidentType">Restricts to incidents that belong to the given incident type. See the [User Guide](https://docs.camunda.org/manual/7.16/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)</param>
        /// <param name="incidentMessage">Restricts to incidents that have the given incident message. (optional)</param>
        /// <param name="incidentMessageLike">Restricts to incidents that incidents message is a substring of the given value. The string can include the wildcard character &#39;%&#39; to express like-strategy: starts with (&#x60;string%&#x60;), ends with (&#x60;%string&#x60;) or contains (&#x60;%string%&#x60;). (optional)</param>
        /// <param name="processDefinitionId">Restricts to incidents that belong to a process definition with the given id. (optional)</param>
        /// <param name="processDefinitionKeyIn">Restricts to incidents that belong to a process definition with the given keys. Must be a comma-separated list. (optional)</param>
        /// <param name="processInstanceId">Restricts to incidents that belong to a process instance with the given id. (optional)</param>
        /// <param name="executionId">Restricts to incidents that belong to an execution with the given id. (optional)</param>
        /// <param name="incidentTimestampBefore">Restricts to incidents that have an incidentTimestamp date before the given date.  By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="incidentTimestampAfter">Restricts to incidents that have an incidentTimestamp date after the given date.  By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="activityId">Restricts to incidents that belong to an activity with the given id. (optional)</param>
        /// <param name="failedActivityId">Restricts to incidents that were created due to the failure of an activity with the given id. (optional)</param>
        /// <param name="causeIncidentId">Restricts to incidents that have the given incident id as cause incident. (optional)</param>
        /// <param name="rootCauseIncidentId">Restricts to incidents that have the given incident id as root cause incident. (optional)</param>
        /// <param name="configuration">Restricts to incidents that have the given parameter set as configuration. (optional)</param>
        /// <param name="tenantIdIn">Restricts to incidents that have one of the given comma-separated tenant ids. (optional)</param>
        /// <param name="jobDefinitionIdIn">Restricts to incidents that have one of the given comma-separated job definition ids. (optional)</param>
        /// <returns>ApiResponse of CountResultDto</returns>
        ApiResponse<CountResultDto> GetIncidentsCountWithHttpInfo(string incidentId = default(string), string incidentType = default(string), string incidentMessage = default(string), string incidentMessageLike = default(string), string processDefinitionId = default(string), string processDefinitionKeyIn = default(string), string processInstanceId = default(string), string executionId = default(string), DateTime? incidentTimestampBefore = default(DateTime?), DateTime? incidentTimestampAfter = default(DateTime?), string activityId = default(string), string failedActivityId = default(string), string causeIncidentId = default(string), string rootCauseIncidentId = default(string), string configuration = default(string), string tenantIdIn = default(string), string jobDefinitionIdIn = default(string));
        /// <summary>
        /// Resolve Incident
        /// </summary>
        /// <remarks>
        /// Resolves an incident with given id.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the incident to be resolved.</param>
        /// <returns></returns>
        void ResolveIncident(string id);

        /// <summary>
        /// Resolve Incident
        /// </summary>
        /// <remarks>
        /// Resolves an incident with given id.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the incident to be resolved.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ResolveIncidentWithHttpInfo(string id);
        /// <summary>
        /// Set Incident Annotation
        /// </summary>
        /// <remarks>
        /// Sets the annotation of an incident with given id.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the incident to clear the annotation at.</param>
        /// <param name="annotationDto"> (optional)</param>
        /// <returns></returns>
        void SetIncidentAnnotation(string id, AnnotationDto annotationDto = default(AnnotationDto));

        /// <summary>
        /// Set Incident Annotation
        /// </summary>
        /// <remarks>
        /// Sets the annotation of an incident with given id.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the incident to clear the annotation at.</param>
        /// <param name="annotationDto"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SetIncidentAnnotationWithHttpInfo(string id, AnnotationDto annotationDto = default(AnnotationDto));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IIncidentApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Clear Incident Annotation
        /// </summary>
        /// <remarks>
        /// Clears the annotation of an incident with given id.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the incident to clear the annotation at.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ClearIncidentAnnotationAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Clear Incident Annotation
        /// </summary>
        /// <remarks>
        /// Clears the annotation of an incident with given id.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the incident to clear the annotation at.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ClearIncidentAnnotationWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Incident
        /// </summary>
        /// <remarks>
        /// Retrieves an incident by ID.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the incident to be retrieved.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IncidentDto</returns>
        System.Threading.Tasks.Task<IncidentDto> GetIncidentAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Incident
        /// </summary>
        /// <remarks>
        /// Retrieves an incident by ID.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the incident to be retrieved.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IncidentDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<IncidentDto>> GetIncidentWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get List
        /// </summary>
        /// <remarks>
        /// Queries for incidents that fulfill given parameters. The size of the result set can be retrieved by using the [Get Incident Count](https://docs.camunda.org/manual/7.16/reference/rest/incident/get-query-count/) method.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="incidentId">Restricts to incidents that have the given id. (optional)</param>
        /// <param name="incidentType">Restricts to incidents that belong to the given incident type. See the [User Guide](https://docs.camunda.org/manual/7.16/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)</param>
        /// <param name="incidentMessage">Restricts to incidents that have the given incident message. (optional)</param>
        /// <param name="incidentMessageLike">Restricts to incidents that incidents message is a substring of the given value. The string can include the wildcard character &#39;%&#39; to express like-strategy: starts with (&#x60;string%&#x60;), ends with (&#x60;%string&#x60;) or contains (&#x60;%string%&#x60;). (optional)</param>
        /// <param name="processDefinitionId">Restricts to incidents that belong to a process definition with the given id. (optional)</param>
        /// <param name="processDefinitionKeyIn">Restricts to incidents that belong to a process definition with the given keys. Must be a comma-separated list. (optional)</param>
        /// <param name="processInstanceId">Restricts to incidents that belong to a process instance with the given id. (optional)</param>
        /// <param name="executionId">Restricts to incidents that belong to an execution with the given id. (optional)</param>
        /// <param name="incidentTimestampBefore">Restricts to incidents that have an incidentTimestamp date before the given date.  By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="incidentTimestampAfter">Restricts to incidents that have an incidentTimestamp date after the given date.  By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="activityId">Restricts to incidents that belong to an activity with the given id. (optional)</param>
        /// <param name="failedActivityId">Restricts to incidents that were created due to the failure of an activity with the given id. (optional)</param>
        /// <param name="causeIncidentId">Restricts to incidents that have the given incident id as cause incident. (optional)</param>
        /// <param name="rootCauseIncidentId">Restricts to incidents that have the given incident id as root cause incident. (optional)</param>
        /// <param name="configuration">Restricts to incidents that have the given parameter set as configuration. (optional)</param>
        /// <param name="tenantIdIn">Restricts to incidents that have one of the given comma-separated tenant ids. (optional)</param>
        /// <param name="jobDefinitionIdIn">Restricts to incidents that have one of the given comma-separated job definition ids. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;IncidentDto&gt;</returns>
        System.Threading.Tasks.Task<List<IncidentDto>> GetIncidentsAsync(string incidentId = default(string), string incidentType = default(string), string incidentMessage = default(string), string incidentMessageLike = default(string), string processDefinitionId = default(string), string processDefinitionKeyIn = default(string), string processInstanceId = default(string), string executionId = default(string), DateTime? incidentTimestampBefore = default(DateTime?), DateTime? incidentTimestampAfter = default(DateTime?), string activityId = default(string), string failedActivityId = default(string), string causeIncidentId = default(string), string rootCauseIncidentId = default(string), string configuration = default(string), string tenantIdIn = default(string), string jobDefinitionIdIn = default(string), string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get List
        /// </summary>
        /// <remarks>
        /// Queries for incidents that fulfill given parameters. The size of the result set can be retrieved by using the [Get Incident Count](https://docs.camunda.org/manual/7.16/reference/rest/incident/get-query-count/) method.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="incidentId">Restricts to incidents that have the given id. (optional)</param>
        /// <param name="incidentType">Restricts to incidents that belong to the given incident type. See the [User Guide](https://docs.camunda.org/manual/7.16/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)</param>
        /// <param name="incidentMessage">Restricts to incidents that have the given incident message. (optional)</param>
        /// <param name="incidentMessageLike">Restricts to incidents that incidents message is a substring of the given value. The string can include the wildcard character &#39;%&#39; to express like-strategy: starts with (&#x60;string%&#x60;), ends with (&#x60;%string&#x60;) or contains (&#x60;%string%&#x60;). (optional)</param>
        /// <param name="processDefinitionId">Restricts to incidents that belong to a process definition with the given id. (optional)</param>
        /// <param name="processDefinitionKeyIn">Restricts to incidents that belong to a process definition with the given keys. Must be a comma-separated list. (optional)</param>
        /// <param name="processInstanceId">Restricts to incidents that belong to a process instance with the given id. (optional)</param>
        /// <param name="executionId">Restricts to incidents that belong to an execution with the given id. (optional)</param>
        /// <param name="incidentTimestampBefore">Restricts to incidents that have an incidentTimestamp date before the given date.  By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="incidentTimestampAfter">Restricts to incidents that have an incidentTimestamp date after the given date.  By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="activityId">Restricts to incidents that belong to an activity with the given id. (optional)</param>
        /// <param name="failedActivityId">Restricts to incidents that were created due to the failure of an activity with the given id. (optional)</param>
        /// <param name="causeIncidentId">Restricts to incidents that have the given incident id as cause incident. (optional)</param>
        /// <param name="rootCauseIncidentId">Restricts to incidents that have the given incident id as root cause incident. (optional)</param>
        /// <param name="configuration">Restricts to incidents that have the given parameter set as configuration. (optional)</param>
        /// <param name="tenantIdIn">Restricts to incidents that have one of the given comma-separated tenant ids. (optional)</param>
        /// <param name="jobDefinitionIdIn">Restricts to incidents that have one of the given comma-separated job definition ids. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;IncidentDto&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<IncidentDto>>> GetIncidentsWithHttpInfoAsync(string incidentId = default(string), string incidentType = default(string), string incidentMessage = default(string), string incidentMessageLike = default(string), string processDefinitionId = default(string), string processDefinitionKeyIn = default(string), string processInstanceId = default(string), string executionId = default(string), DateTime? incidentTimestampBefore = default(DateTime?), DateTime? incidentTimestampAfter = default(DateTime?), string activityId = default(string), string failedActivityId = default(string), string causeIncidentId = default(string), string rootCauseIncidentId = default(string), string configuration = default(string), string tenantIdIn = default(string), string jobDefinitionIdIn = default(string), string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get List Count
        /// </summary>
        /// <remarks>
        /// Queries for the number of incidents that fulfill given parameters. Takes the same parameters as the [Get Incidents](https://docs.camunda.org/manual/7.16/reference/rest/incident/get-query/) method.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="incidentId">Restricts to incidents that have the given id. (optional)</param>
        /// <param name="incidentType">Restricts to incidents that belong to the given incident type. See the [User Guide](https://docs.camunda.org/manual/7.16/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)</param>
        /// <param name="incidentMessage">Restricts to incidents that have the given incident message. (optional)</param>
        /// <param name="incidentMessageLike">Restricts to incidents that incidents message is a substring of the given value. The string can include the wildcard character &#39;%&#39; to express like-strategy: starts with (&#x60;string%&#x60;), ends with (&#x60;%string&#x60;) or contains (&#x60;%string%&#x60;). (optional)</param>
        /// <param name="processDefinitionId">Restricts to incidents that belong to a process definition with the given id. (optional)</param>
        /// <param name="processDefinitionKeyIn">Restricts to incidents that belong to a process definition with the given keys. Must be a comma-separated list. (optional)</param>
        /// <param name="processInstanceId">Restricts to incidents that belong to a process instance with the given id. (optional)</param>
        /// <param name="executionId">Restricts to incidents that belong to an execution with the given id. (optional)</param>
        /// <param name="incidentTimestampBefore">Restricts to incidents that have an incidentTimestamp date before the given date.  By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="incidentTimestampAfter">Restricts to incidents that have an incidentTimestamp date after the given date.  By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="activityId">Restricts to incidents that belong to an activity with the given id. (optional)</param>
        /// <param name="failedActivityId">Restricts to incidents that were created due to the failure of an activity with the given id. (optional)</param>
        /// <param name="causeIncidentId">Restricts to incidents that have the given incident id as cause incident. (optional)</param>
        /// <param name="rootCauseIncidentId">Restricts to incidents that have the given incident id as root cause incident. (optional)</param>
        /// <param name="configuration">Restricts to incidents that have the given parameter set as configuration. (optional)</param>
        /// <param name="tenantIdIn">Restricts to incidents that have one of the given comma-separated tenant ids. (optional)</param>
        /// <param name="jobDefinitionIdIn">Restricts to incidents that have one of the given comma-separated job definition ids. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CountResultDto</returns>
        System.Threading.Tasks.Task<CountResultDto> GetIncidentsCountAsync(string incidentId = default(string), string incidentType = default(string), string incidentMessage = default(string), string incidentMessageLike = default(string), string processDefinitionId = default(string), string processDefinitionKeyIn = default(string), string processInstanceId = default(string), string executionId = default(string), DateTime? incidentTimestampBefore = default(DateTime?), DateTime? incidentTimestampAfter = default(DateTime?), string activityId = default(string), string failedActivityId = default(string), string causeIncidentId = default(string), string rootCauseIncidentId = default(string), string configuration = default(string), string tenantIdIn = default(string), string jobDefinitionIdIn = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get List Count
        /// </summary>
        /// <remarks>
        /// Queries for the number of incidents that fulfill given parameters. Takes the same parameters as the [Get Incidents](https://docs.camunda.org/manual/7.16/reference/rest/incident/get-query/) method.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="incidentId">Restricts to incidents that have the given id. (optional)</param>
        /// <param name="incidentType">Restricts to incidents that belong to the given incident type. See the [User Guide](https://docs.camunda.org/manual/7.16/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)</param>
        /// <param name="incidentMessage">Restricts to incidents that have the given incident message. (optional)</param>
        /// <param name="incidentMessageLike">Restricts to incidents that incidents message is a substring of the given value. The string can include the wildcard character &#39;%&#39; to express like-strategy: starts with (&#x60;string%&#x60;), ends with (&#x60;%string&#x60;) or contains (&#x60;%string%&#x60;). (optional)</param>
        /// <param name="processDefinitionId">Restricts to incidents that belong to a process definition with the given id. (optional)</param>
        /// <param name="processDefinitionKeyIn">Restricts to incidents that belong to a process definition with the given keys. Must be a comma-separated list. (optional)</param>
        /// <param name="processInstanceId">Restricts to incidents that belong to a process instance with the given id. (optional)</param>
        /// <param name="executionId">Restricts to incidents that belong to an execution with the given id. (optional)</param>
        /// <param name="incidentTimestampBefore">Restricts to incidents that have an incidentTimestamp date before the given date.  By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="incidentTimestampAfter">Restricts to incidents that have an incidentTimestamp date after the given date.  By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="activityId">Restricts to incidents that belong to an activity with the given id. (optional)</param>
        /// <param name="failedActivityId">Restricts to incidents that were created due to the failure of an activity with the given id. (optional)</param>
        /// <param name="causeIncidentId">Restricts to incidents that have the given incident id as cause incident. (optional)</param>
        /// <param name="rootCauseIncidentId">Restricts to incidents that have the given incident id as root cause incident. (optional)</param>
        /// <param name="configuration">Restricts to incidents that have the given parameter set as configuration. (optional)</param>
        /// <param name="tenantIdIn">Restricts to incidents that have one of the given comma-separated tenant ids. (optional)</param>
        /// <param name="jobDefinitionIdIn">Restricts to incidents that have one of the given comma-separated job definition ids. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CountResultDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<CountResultDto>> GetIncidentsCountWithHttpInfoAsync(string incidentId = default(string), string incidentType = default(string), string incidentMessage = default(string), string incidentMessageLike = default(string), string processDefinitionId = default(string), string processDefinitionKeyIn = default(string), string processInstanceId = default(string), string executionId = default(string), DateTime? incidentTimestampBefore = default(DateTime?), DateTime? incidentTimestampAfter = default(DateTime?), string activityId = default(string), string failedActivityId = default(string), string causeIncidentId = default(string), string rootCauseIncidentId = default(string), string configuration = default(string), string tenantIdIn = default(string), string jobDefinitionIdIn = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Resolve Incident
        /// </summary>
        /// <remarks>
        /// Resolves an incident with given id.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the incident to be resolved.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ResolveIncidentAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Resolve Incident
        /// </summary>
        /// <remarks>
        /// Resolves an incident with given id.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the incident to be resolved.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ResolveIncidentWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Set Incident Annotation
        /// </summary>
        /// <remarks>
        /// Sets the annotation of an incident with given id.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the incident to clear the annotation at.</param>
        /// <param name="annotationDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SetIncidentAnnotationAsync(string id, AnnotationDto annotationDto = default(AnnotationDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Set Incident Annotation
        /// </summary>
        /// <remarks>
        /// Sets the annotation of an incident with given id.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the incident to clear the annotation at.</param>
        /// <param name="annotationDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SetIncidentAnnotationWithHttpInfoAsync(string id, AnnotationDto annotationDto = default(AnnotationDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IIncidentApi : IIncidentApiSync, IIncidentApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class IncidentApi : IIncidentApi
    {
        private Camunda.OpenApi.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="IncidentApi"/> class.
        /// </summary>
        /// <returns></returns>
        public IncidentApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IncidentApi"/> class.
        /// </summary>
        /// <returns></returns>
        public IncidentApi(String basePath)
        {
            this.Configuration = Camunda.OpenApi.Client.Client.Configuration.MergeConfigurations(
                Camunda.OpenApi.Client.Client.GlobalConfiguration.Instance,
                new Camunda.OpenApi.Client.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Camunda.OpenApi.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Camunda.OpenApi.Client.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Camunda.OpenApi.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IncidentApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public IncidentApi(Camunda.OpenApi.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Camunda.OpenApi.Client.Client.Configuration.MergeConfigurations(
                Camunda.OpenApi.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Camunda.OpenApi.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Camunda.OpenApi.Client.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Camunda.OpenApi.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IncidentApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public IncidentApi(Camunda.OpenApi.Client.Client.ISynchronousClient client, Camunda.OpenApi.Client.Client.IAsynchronousClient asyncClient, Camunda.OpenApi.Client.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Camunda.OpenApi.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Camunda.OpenApi.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Camunda.OpenApi.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Camunda.OpenApi.Client.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Camunda.OpenApi.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Clear Incident Annotation Clears the annotation of an incident with given id.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the incident to clear the annotation at.</param>
        /// <returns></returns>
        public void ClearIncidentAnnotation(string id)
        {
            ClearIncidentAnnotationWithHttpInfo(id);
        }

        /// <summary>
        /// Clear Incident Annotation Clears the annotation of an incident with given id.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the incident to clear the annotation at.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<Object> ClearIncidentAnnotationWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling IncidentApi->ClearIncidentAnnotation");

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/incident/{id}/annotation", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ClearIncidentAnnotation", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Clear Incident Annotation Clears the annotation of an incident with given id.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the incident to clear the annotation at.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ClearIncidentAnnotationAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ClearIncidentAnnotationWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Clear Incident Annotation Clears the annotation of an incident with given id.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the incident to clear the annotation at.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<Object>> ClearIncidentAnnotationWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling IncidentApi->ClearIncidentAnnotation");


            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/incident/{id}/annotation", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ClearIncidentAnnotation", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Incident Retrieves an incident by ID.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the incident to be retrieved.</param>
        /// <returns>IncidentDto</returns>
        public IncidentDto GetIncident(string id)
        {
            Camunda.OpenApi.Client.Client.ApiResponse<IncidentDto> localVarResponse = GetIncidentWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Incident Retrieves an incident by ID.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the incident to be retrieved.</param>
        /// <returns>ApiResponse of IncidentDto</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<IncidentDto> GetIncidentWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling IncidentApi->GetIncident");

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<IncidentDto>("/incident/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIncident", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Incident Retrieves an incident by ID.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the incident to be retrieved.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IncidentDto</returns>
        public async System.Threading.Tasks.Task<IncidentDto> GetIncidentAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<IncidentDto> localVarResponse = await GetIncidentWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Incident Retrieves an incident by ID.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the incident to be retrieved.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IncidentDto)</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<IncidentDto>> GetIncidentWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling IncidentApi->GetIncident");


            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<IncidentDto>("/incident/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIncident", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get List Queries for incidents that fulfill given parameters. The size of the result set can be retrieved by using the [Get Incident Count](https://docs.camunda.org/manual/7.16/reference/rest/incident/get-query-count/) method.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="incidentId">Restricts to incidents that have the given id. (optional)</param>
        /// <param name="incidentType">Restricts to incidents that belong to the given incident type. See the [User Guide](https://docs.camunda.org/manual/7.16/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)</param>
        /// <param name="incidentMessage">Restricts to incidents that have the given incident message. (optional)</param>
        /// <param name="incidentMessageLike">Restricts to incidents that incidents message is a substring of the given value. The string can include the wildcard character &#39;%&#39; to express like-strategy: starts with (&#x60;string%&#x60;), ends with (&#x60;%string&#x60;) or contains (&#x60;%string%&#x60;). (optional)</param>
        /// <param name="processDefinitionId">Restricts to incidents that belong to a process definition with the given id. (optional)</param>
        /// <param name="processDefinitionKeyIn">Restricts to incidents that belong to a process definition with the given keys. Must be a comma-separated list. (optional)</param>
        /// <param name="processInstanceId">Restricts to incidents that belong to a process instance with the given id. (optional)</param>
        /// <param name="executionId">Restricts to incidents that belong to an execution with the given id. (optional)</param>
        /// <param name="incidentTimestampBefore">Restricts to incidents that have an incidentTimestamp date before the given date.  By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="incidentTimestampAfter">Restricts to incidents that have an incidentTimestamp date after the given date.  By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="activityId">Restricts to incidents that belong to an activity with the given id. (optional)</param>
        /// <param name="failedActivityId">Restricts to incidents that were created due to the failure of an activity with the given id. (optional)</param>
        /// <param name="causeIncidentId">Restricts to incidents that have the given incident id as cause incident. (optional)</param>
        /// <param name="rootCauseIncidentId">Restricts to incidents that have the given incident id as root cause incident. (optional)</param>
        /// <param name="configuration">Restricts to incidents that have the given parameter set as configuration. (optional)</param>
        /// <param name="tenantIdIn">Restricts to incidents that have one of the given comma-separated tenant ids. (optional)</param>
        /// <param name="jobDefinitionIdIn">Restricts to incidents that have one of the given comma-separated job definition ids. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <returns>List&lt;IncidentDto&gt;</returns>
        public List<IncidentDto> GetIncidents(string incidentId = default(string), string incidentType = default(string), string incidentMessage = default(string), string incidentMessageLike = default(string), string processDefinitionId = default(string), string processDefinitionKeyIn = default(string), string processInstanceId = default(string), string executionId = default(string), DateTime? incidentTimestampBefore = default(DateTime?), DateTime? incidentTimestampAfter = default(DateTime?), string activityId = default(string), string failedActivityId = default(string), string causeIncidentId = default(string), string rootCauseIncidentId = default(string), string configuration = default(string), string tenantIdIn = default(string), string jobDefinitionIdIn = default(string), string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<List<IncidentDto>> localVarResponse = GetIncidentsWithHttpInfo(incidentId, incidentType, incidentMessage, incidentMessageLike, processDefinitionId, processDefinitionKeyIn, processInstanceId, executionId, incidentTimestampBefore, incidentTimestampAfter, activityId, failedActivityId, causeIncidentId, rootCauseIncidentId, configuration, tenantIdIn, jobDefinitionIdIn, sortBy, sortOrder, firstResult, maxResults);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get List Queries for incidents that fulfill given parameters. The size of the result set can be retrieved by using the [Get Incident Count](https://docs.camunda.org/manual/7.16/reference/rest/incident/get-query-count/) method.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="incidentId">Restricts to incidents that have the given id. (optional)</param>
        /// <param name="incidentType">Restricts to incidents that belong to the given incident type. See the [User Guide](https://docs.camunda.org/manual/7.16/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)</param>
        /// <param name="incidentMessage">Restricts to incidents that have the given incident message. (optional)</param>
        /// <param name="incidentMessageLike">Restricts to incidents that incidents message is a substring of the given value. The string can include the wildcard character &#39;%&#39; to express like-strategy: starts with (&#x60;string%&#x60;), ends with (&#x60;%string&#x60;) or contains (&#x60;%string%&#x60;). (optional)</param>
        /// <param name="processDefinitionId">Restricts to incidents that belong to a process definition with the given id. (optional)</param>
        /// <param name="processDefinitionKeyIn">Restricts to incidents that belong to a process definition with the given keys. Must be a comma-separated list. (optional)</param>
        /// <param name="processInstanceId">Restricts to incidents that belong to a process instance with the given id. (optional)</param>
        /// <param name="executionId">Restricts to incidents that belong to an execution with the given id. (optional)</param>
        /// <param name="incidentTimestampBefore">Restricts to incidents that have an incidentTimestamp date before the given date.  By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="incidentTimestampAfter">Restricts to incidents that have an incidentTimestamp date after the given date.  By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="activityId">Restricts to incidents that belong to an activity with the given id. (optional)</param>
        /// <param name="failedActivityId">Restricts to incidents that were created due to the failure of an activity with the given id. (optional)</param>
        /// <param name="causeIncidentId">Restricts to incidents that have the given incident id as cause incident. (optional)</param>
        /// <param name="rootCauseIncidentId">Restricts to incidents that have the given incident id as root cause incident. (optional)</param>
        /// <param name="configuration">Restricts to incidents that have the given parameter set as configuration. (optional)</param>
        /// <param name="tenantIdIn">Restricts to incidents that have one of the given comma-separated tenant ids. (optional)</param>
        /// <param name="jobDefinitionIdIn">Restricts to incidents that have one of the given comma-separated job definition ids. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <returns>ApiResponse of List&lt;IncidentDto&gt;</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<List<IncidentDto>> GetIncidentsWithHttpInfo(string incidentId = default(string), string incidentType = default(string), string incidentMessage = default(string), string incidentMessageLike = default(string), string processDefinitionId = default(string), string processDefinitionKeyIn = default(string), string processInstanceId = default(string), string executionId = default(string), DateTime? incidentTimestampBefore = default(DateTime?), DateTime? incidentTimestampAfter = default(DateTime?), string activityId = default(string), string failedActivityId = default(string), string causeIncidentId = default(string), string rootCauseIncidentId = default(string), string configuration = default(string), string tenantIdIn = default(string), string jobDefinitionIdIn = default(string), string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?))
        {
            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (incidentId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "incidentId", incidentId));
            }
            if (incidentType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "incidentType", incidentType));
            }
            if (incidentMessage != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "incidentMessage", incidentMessage));
            }
            if (incidentMessageLike != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "incidentMessageLike", incidentMessageLike));
            }
            if (processDefinitionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processDefinitionId", processDefinitionId));
            }
            if (processDefinitionKeyIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processDefinitionKeyIn", processDefinitionKeyIn));
            }
            if (processInstanceId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processInstanceId", processInstanceId));
            }
            if (executionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "executionId", executionId));
            }
            if (incidentTimestampBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "incidentTimestampBefore", incidentTimestampBefore));
            }
            if (incidentTimestampAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "incidentTimestampAfter", incidentTimestampAfter));
            }
            if (activityId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "activityId", activityId));
            }
            if (failedActivityId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "failedActivityId", failedActivityId));
            }
            if (causeIncidentId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "causeIncidentId", causeIncidentId));
            }
            if (rootCauseIncidentId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "rootCauseIncidentId", rootCauseIncidentId));
            }
            if (configuration != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "configuration", configuration));
            }
            if (tenantIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "tenantIdIn", tenantIdIn));
            }
            if (jobDefinitionIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "jobDefinitionIdIn", jobDefinitionIdIn));
            }
            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "sortBy", sortBy));
            }
            if (sortOrder != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "sortOrder", sortOrder));
            }
            if (firstResult != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "firstResult", firstResult));
            }
            if (maxResults != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "maxResults", maxResults));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<IncidentDto>>("/incident", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIncidents", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get List Queries for incidents that fulfill given parameters. The size of the result set can be retrieved by using the [Get Incident Count](https://docs.camunda.org/manual/7.16/reference/rest/incident/get-query-count/) method.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="incidentId">Restricts to incidents that have the given id. (optional)</param>
        /// <param name="incidentType">Restricts to incidents that belong to the given incident type. See the [User Guide](https://docs.camunda.org/manual/7.16/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)</param>
        /// <param name="incidentMessage">Restricts to incidents that have the given incident message. (optional)</param>
        /// <param name="incidentMessageLike">Restricts to incidents that incidents message is a substring of the given value. The string can include the wildcard character &#39;%&#39; to express like-strategy: starts with (&#x60;string%&#x60;), ends with (&#x60;%string&#x60;) or contains (&#x60;%string%&#x60;). (optional)</param>
        /// <param name="processDefinitionId">Restricts to incidents that belong to a process definition with the given id. (optional)</param>
        /// <param name="processDefinitionKeyIn">Restricts to incidents that belong to a process definition with the given keys. Must be a comma-separated list. (optional)</param>
        /// <param name="processInstanceId">Restricts to incidents that belong to a process instance with the given id. (optional)</param>
        /// <param name="executionId">Restricts to incidents that belong to an execution with the given id. (optional)</param>
        /// <param name="incidentTimestampBefore">Restricts to incidents that have an incidentTimestamp date before the given date.  By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="incidentTimestampAfter">Restricts to incidents that have an incidentTimestamp date after the given date.  By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="activityId">Restricts to incidents that belong to an activity with the given id. (optional)</param>
        /// <param name="failedActivityId">Restricts to incidents that were created due to the failure of an activity with the given id. (optional)</param>
        /// <param name="causeIncidentId">Restricts to incidents that have the given incident id as cause incident. (optional)</param>
        /// <param name="rootCauseIncidentId">Restricts to incidents that have the given incident id as root cause incident. (optional)</param>
        /// <param name="configuration">Restricts to incidents that have the given parameter set as configuration. (optional)</param>
        /// <param name="tenantIdIn">Restricts to incidents that have one of the given comma-separated tenant ids. (optional)</param>
        /// <param name="jobDefinitionIdIn">Restricts to incidents that have one of the given comma-separated job definition ids. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;IncidentDto&gt;</returns>
        public async System.Threading.Tasks.Task<List<IncidentDto>> GetIncidentsAsync(string incidentId = default(string), string incidentType = default(string), string incidentMessage = default(string), string incidentMessageLike = default(string), string processDefinitionId = default(string), string processDefinitionKeyIn = default(string), string processInstanceId = default(string), string executionId = default(string), DateTime? incidentTimestampBefore = default(DateTime?), DateTime? incidentTimestampAfter = default(DateTime?), string activityId = default(string), string failedActivityId = default(string), string causeIncidentId = default(string), string rootCauseIncidentId = default(string), string configuration = default(string), string tenantIdIn = default(string), string jobDefinitionIdIn = default(string), string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<List<IncidentDto>> localVarResponse = await GetIncidentsWithHttpInfoAsync(incidentId, incidentType, incidentMessage, incidentMessageLike, processDefinitionId, processDefinitionKeyIn, processInstanceId, executionId, incidentTimestampBefore, incidentTimestampAfter, activityId, failedActivityId, causeIncidentId, rootCauseIncidentId, configuration, tenantIdIn, jobDefinitionIdIn, sortBy, sortOrder, firstResult, maxResults, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get List Queries for incidents that fulfill given parameters. The size of the result set can be retrieved by using the [Get Incident Count](https://docs.camunda.org/manual/7.16/reference/rest/incident/get-query-count/) method.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="incidentId">Restricts to incidents that have the given id. (optional)</param>
        /// <param name="incidentType">Restricts to incidents that belong to the given incident type. See the [User Guide](https://docs.camunda.org/manual/7.16/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)</param>
        /// <param name="incidentMessage">Restricts to incidents that have the given incident message. (optional)</param>
        /// <param name="incidentMessageLike">Restricts to incidents that incidents message is a substring of the given value. The string can include the wildcard character &#39;%&#39; to express like-strategy: starts with (&#x60;string%&#x60;), ends with (&#x60;%string&#x60;) or contains (&#x60;%string%&#x60;). (optional)</param>
        /// <param name="processDefinitionId">Restricts to incidents that belong to a process definition with the given id. (optional)</param>
        /// <param name="processDefinitionKeyIn">Restricts to incidents that belong to a process definition with the given keys. Must be a comma-separated list. (optional)</param>
        /// <param name="processInstanceId">Restricts to incidents that belong to a process instance with the given id. (optional)</param>
        /// <param name="executionId">Restricts to incidents that belong to an execution with the given id. (optional)</param>
        /// <param name="incidentTimestampBefore">Restricts to incidents that have an incidentTimestamp date before the given date.  By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="incidentTimestampAfter">Restricts to incidents that have an incidentTimestamp date after the given date.  By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="activityId">Restricts to incidents that belong to an activity with the given id. (optional)</param>
        /// <param name="failedActivityId">Restricts to incidents that were created due to the failure of an activity with the given id. (optional)</param>
        /// <param name="causeIncidentId">Restricts to incidents that have the given incident id as cause incident. (optional)</param>
        /// <param name="rootCauseIncidentId">Restricts to incidents that have the given incident id as root cause incident. (optional)</param>
        /// <param name="configuration">Restricts to incidents that have the given parameter set as configuration. (optional)</param>
        /// <param name="tenantIdIn">Restricts to incidents that have one of the given comma-separated tenant ids. (optional)</param>
        /// <param name="jobDefinitionIdIn">Restricts to incidents that have one of the given comma-separated job definition ids. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;IncidentDto&gt;)</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<List<IncidentDto>>> GetIncidentsWithHttpInfoAsync(string incidentId = default(string), string incidentType = default(string), string incidentMessage = default(string), string incidentMessageLike = default(string), string processDefinitionId = default(string), string processDefinitionKeyIn = default(string), string processInstanceId = default(string), string executionId = default(string), DateTime? incidentTimestampBefore = default(DateTime?), DateTime? incidentTimestampAfter = default(DateTime?), string activityId = default(string), string failedActivityId = default(string), string causeIncidentId = default(string), string rootCauseIncidentId = default(string), string configuration = default(string), string tenantIdIn = default(string), string jobDefinitionIdIn = default(string), string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (incidentId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "incidentId", incidentId));
            }
            if (incidentType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "incidentType", incidentType));
            }
            if (incidentMessage != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "incidentMessage", incidentMessage));
            }
            if (incidentMessageLike != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "incidentMessageLike", incidentMessageLike));
            }
            if (processDefinitionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processDefinitionId", processDefinitionId));
            }
            if (processDefinitionKeyIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processDefinitionKeyIn", processDefinitionKeyIn));
            }
            if (processInstanceId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processInstanceId", processInstanceId));
            }
            if (executionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "executionId", executionId));
            }
            if (incidentTimestampBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "incidentTimestampBefore", incidentTimestampBefore));
            }
            if (incidentTimestampAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "incidentTimestampAfter", incidentTimestampAfter));
            }
            if (activityId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "activityId", activityId));
            }
            if (failedActivityId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "failedActivityId", failedActivityId));
            }
            if (causeIncidentId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "causeIncidentId", causeIncidentId));
            }
            if (rootCauseIncidentId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "rootCauseIncidentId", rootCauseIncidentId));
            }
            if (configuration != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "configuration", configuration));
            }
            if (tenantIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "tenantIdIn", tenantIdIn));
            }
            if (jobDefinitionIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "jobDefinitionIdIn", jobDefinitionIdIn));
            }
            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "sortBy", sortBy));
            }
            if (sortOrder != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "sortOrder", sortOrder));
            }
            if (firstResult != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "firstResult", firstResult));
            }
            if (maxResults != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "maxResults", maxResults));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<IncidentDto>>("/incident", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIncidents", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get List Count Queries for the number of incidents that fulfill given parameters. Takes the same parameters as the [Get Incidents](https://docs.camunda.org/manual/7.16/reference/rest/incident/get-query/) method.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="incidentId">Restricts to incidents that have the given id. (optional)</param>
        /// <param name="incidentType">Restricts to incidents that belong to the given incident type. See the [User Guide](https://docs.camunda.org/manual/7.16/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)</param>
        /// <param name="incidentMessage">Restricts to incidents that have the given incident message. (optional)</param>
        /// <param name="incidentMessageLike">Restricts to incidents that incidents message is a substring of the given value. The string can include the wildcard character &#39;%&#39; to express like-strategy: starts with (&#x60;string%&#x60;), ends with (&#x60;%string&#x60;) or contains (&#x60;%string%&#x60;). (optional)</param>
        /// <param name="processDefinitionId">Restricts to incidents that belong to a process definition with the given id. (optional)</param>
        /// <param name="processDefinitionKeyIn">Restricts to incidents that belong to a process definition with the given keys. Must be a comma-separated list. (optional)</param>
        /// <param name="processInstanceId">Restricts to incidents that belong to a process instance with the given id. (optional)</param>
        /// <param name="executionId">Restricts to incidents that belong to an execution with the given id. (optional)</param>
        /// <param name="incidentTimestampBefore">Restricts to incidents that have an incidentTimestamp date before the given date.  By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="incidentTimestampAfter">Restricts to incidents that have an incidentTimestamp date after the given date.  By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="activityId">Restricts to incidents that belong to an activity with the given id. (optional)</param>
        /// <param name="failedActivityId">Restricts to incidents that were created due to the failure of an activity with the given id. (optional)</param>
        /// <param name="causeIncidentId">Restricts to incidents that have the given incident id as cause incident. (optional)</param>
        /// <param name="rootCauseIncidentId">Restricts to incidents that have the given incident id as root cause incident. (optional)</param>
        /// <param name="configuration">Restricts to incidents that have the given parameter set as configuration. (optional)</param>
        /// <param name="tenantIdIn">Restricts to incidents that have one of the given comma-separated tenant ids. (optional)</param>
        /// <param name="jobDefinitionIdIn">Restricts to incidents that have one of the given comma-separated job definition ids. (optional)</param>
        /// <returns>CountResultDto</returns>
        public CountResultDto GetIncidentsCount(string incidentId = default(string), string incidentType = default(string), string incidentMessage = default(string), string incidentMessageLike = default(string), string processDefinitionId = default(string), string processDefinitionKeyIn = default(string), string processInstanceId = default(string), string executionId = default(string), DateTime? incidentTimestampBefore = default(DateTime?), DateTime? incidentTimestampAfter = default(DateTime?), string activityId = default(string), string failedActivityId = default(string), string causeIncidentId = default(string), string rootCauseIncidentId = default(string), string configuration = default(string), string tenantIdIn = default(string), string jobDefinitionIdIn = default(string))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<CountResultDto> localVarResponse = GetIncidentsCountWithHttpInfo(incidentId, incidentType, incidentMessage, incidentMessageLike, processDefinitionId, processDefinitionKeyIn, processInstanceId, executionId, incidentTimestampBefore, incidentTimestampAfter, activityId, failedActivityId, causeIncidentId, rootCauseIncidentId, configuration, tenantIdIn, jobDefinitionIdIn);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get List Count Queries for the number of incidents that fulfill given parameters. Takes the same parameters as the [Get Incidents](https://docs.camunda.org/manual/7.16/reference/rest/incident/get-query/) method.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="incidentId">Restricts to incidents that have the given id. (optional)</param>
        /// <param name="incidentType">Restricts to incidents that belong to the given incident type. See the [User Guide](https://docs.camunda.org/manual/7.16/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)</param>
        /// <param name="incidentMessage">Restricts to incidents that have the given incident message. (optional)</param>
        /// <param name="incidentMessageLike">Restricts to incidents that incidents message is a substring of the given value. The string can include the wildcard character &#39;%&#39; to express like-strategy: starts with (&#x60;string%&#x60;), ends with (&#x60;%string&#x60;) or contains (&#x60;%string%&#x60;). (optional)</param>
        /// <param name="processDefinitionId">Restricts to incidents that belong to a process definition with the given id. (optional)</param>
        /// <param name="processDefinitionKeyIn">Restricts to incidents that belong to a process definition with the given keys. Must be a comma-separated list. (optional)</param>
        /// <param name="processInstanceId">Restricts to incidents that belong to a process instance with the given id. (optional)</param>
        /// <param name="executionId">Restricts to incidents that belong to an execution with the given id. (optional)</param>
        /// <param name="incidentTimestampBefore">Restricts to incidents that have an incidentTimestamp date before the given date.  By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="incidentTimestampAfter">Restricts to incidents that have an incidentTimestamp date after the given date.  By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="activityId">Restricts to incidents that belong to an activity with the given id. (optional)</param>
        /// <param name="failedActivityId">Restricts to incidents that were created due to the failure of an activity with the given id. (optional)</param>
        /// <param name="causeIncidentId">Restricts to incidents that have the given incident id as cause incident. (optional)</param>
        /// <param name="rootCauseIncidentId">Restricts to incidents that have the given incident id as root cause incident. (optional)</param>
        /// <param name="configuration">Restricts to incidents that have the given parameter set as configuration. (optional)</param>
        /// <param name="tenantIdIn">Restricts to incidents that have one of the given comma-separated tenant ids. (optional)</param>
        /// <param name="jobDefinitionIdIn">Restricts to incidents that have one of the given comma-separated job definition ids. (optional)</param>
        /// <returns>ApiResponse of CountResultDto</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<CountResultDto> GetIncidentsCountWithHttpInfo(string incidentId = default(string), string incidentType = default(string), string incidentMessage = default(string), string incidentMessageLike = default(string), string processDefinitionId = default(string), string processDefinitionKeyIn = default(string), string processInstanceId = default(string), string executionId = default(string), DateTime? incidentTimestampBefore = default(DateTime?), DateTime? incidentTimestampAfter = default(DateTime?), string activityId = default(string), string failedActivityId = default(string), string causeIncidentId = default(string), string rootCauseIncidentId = default(string), string configuration = default(string), string tenantIdIn = default(string), string jobDefinitionIdIn = default(string))
        {
            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (incidentId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "incidentId", incidentId));
            }
            if (incidentType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "incidentType", incidentType));
            }
            if (incidentMessage != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "incidentMessage", incidentMessage));
            }
            if (incidentMessageLike != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "incidentMessageLike", incidentMessageLike));
            }
            if (processDefinitionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processDefinitionId", processDefinitionId));
            }
            if (processDefinitionKeyIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processDefinitionKeyIn", processDefinitionKeyIn));
            }
            if (processInstanceId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processInstanceId", processInstanceId));
            }
            if (executionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "executionId", executionId));
            }
            if (incidentTimestampBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "incidentTimestampBefore", incidentTimestampBefore));
            }
            if (incidentTimestampAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "incidentTimestampAfter", incidentTimestampAfter));
            }
            if (activityId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "activityId", activityId));
            }
            if (failedActivityId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "failedActivityId", failedActivityId));
            }
            if (causeIncidentId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "causeIncidentId", causeIncidentId));
            }
            if (rootCauseIncidentId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "rootCauseIncidentId", rootCauseIncidentId));
            }
            if (configuration != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "configuration", configuration));
            }
            if (tenantIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "tenantIdIn", tenantIdIn));
            }
            if (jobDefinitionIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "jobDefinitionIdIn", jobDefinitionIdIn));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<CountResultDto>("/incident/count", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIncidentsCount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get List Count Queries for the number of incidents that fulfill given parameters. Takes the same parameters as the [Get Incidents](https://docs.camunda.org/manual/7.16/reference/rest/incident/get-query/) method.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="incidentId">Restricts to incidents that have the given id. (optional)</param>
        /// <param name="incidentType">Restricts to incidents that belong to the given incident type. See the [User Guide](https://docs.camunda.org/manual/7.16/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)</param>
        /// <param name="incidentMessage">Restricts to incidents that have the given incident message. (optional)</param>
        /// <param name="incidentMessageLike">Restricts to incidents that incidents message is a substring of the given value. The string can include the wildcard character &#39;%&#39; to express like-strategy: starts with (&#x60;string%&#x60;), ends with (&#x60;%string&#x60;) or contains (&#x60;%string%&#x60;). (optional)</param>
        /// <param name="processDefinitionId">Restricts to incidents that belong to a process definition with the given id. (optional)</param>
        /// <param name="processDefinitionKeyIn">Restricts to incidents that belong to a process definition with the given keys. Must be a comma-separated list. (optional)</param>
        /// <param name="processInstanceId">Restricts to incidents that belong to a process instance with the given id. (optional)</param>
        /// <param name="executionId">Restricts to incidents that belong to an execution with the given id. (optional)</param>
        /// <param name="incidentTimestampBefore">Restricts to incidents that have an incidentTimestamp date before the given date.  By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="incidentTimestampAfter">Restricts to incidents that have an incidentTimestamp date after the given date.  By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="activityId">Restricts to incidents that belong to an activity with the given id. (optional)</param>
        /// <param name="failedActivityId">Restricts to incidents that were created due to the failure of an activity with the given id. (optional)</param>
        /// <param name="causeIncidentId">Restricts to incidents that have the given incident id as cause incident. (optional)</param>
        /// <param name="rootCauseIncidentId">Restricts to incidents that have the given incident id as root cause incident. (optional)</param>
        /// <param name="configuration">Restricts to incidents that have the given parameter set as configuration. (optional)</param>
        /// <param name="tenantIdIn">Restricts to incidents that have one of the given comma-separated tenant ids. (optional)</param>
        /// <param name="jobDefinitionIdIn">Restricts to incidents that have one of the given comma-separated job definition ids. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CountResultDto</returns>
        public async System.Threading.Tasks.Task<CountResultDto> GetIncidentsCountAsync(string incidentId = default(string), string incidentType = default(string), string incidentMessage = default(string), string incidentMessageLike = default(string), string processDefinitionId = default(string), string processDefinitionKeyIn = default(string), string processInstanceId = default(string), string executionId = default(string), DateTime? incidentTimestampBefore = default(DateTime?), DateTime? incidentTimestampAfter = default(DateTime?), string activityId = default(string), string failedActivityId = default(string), string causeIncidentId = default(string), string rootCauseIncidentId = default(string), string configuration = default(string), string tenantIdIn = default(string), string jobDefinitionIdIn = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<CountResultDto> localVarResponse = await GetIncidentsCountWithHttpInfoAsync(incidentId, incidentType, incidentMessage, incidentMessageLike, processDefinitionId, processDefinitionKeyIn, processInstanceId, executionId, incidentTimestampBefore, incidentTimestampAfter, activityId, failedActivityId, causeIncidentId, rootCauseIncidentId, configuration, tenantIdIn, jobDefinitionIdIn, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get List Count Queries for the number of incidents that fulfill given parameters. Takes the same parameters as the [Get Incidents](https://docs.camunda.org/manual/7.16/reference/rest/incident/get-query/) method.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="incidentId">Restricts to incidents that have the given id. (optional)</param>
        /// <param name="incidentType">Restricts to incidents that belong to the given incident type. See the [User Guide](https://docs.camunda.org/manual/7.16/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)</param>
        /// <param name="incidentMessage">Restricts to incidents that have the given incident message. (optional)</param>
        /// <param name="incidentMessageLike">Restricts to incidents that incidents message is a substring of the given value. The string can include the wildcard character &#39;%&#39; to express like-strategy: starts with (&#x60;string%&#x60;), ends with (&#x60;%string&#x60;) or contains (&#x60;%string%&#x60;). (optional)</param>
        /// <param name="processDefinitionId">Restricts to incidents that belong to a process definition with the given id. (optional)</param>
        /// <param name="processDefinitionKeyIn">Restricts to incidents that belong to a process definition with the given keys. Must be a comma-separated list. (optional)</param>
        /// <param name="processInstanceId">Restricts to incidents that belong to a process instance with the given id. (optional)</param>
        /// <param name="executionId">Restricts to incidents that belong to an execution with the given id. (optional)</param>
        /// <param name="incidentTimestampBefore">Restricts to incidents that have an incidentTimestamp date before the given date.  By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="incidentTimestampAfter">Restricts to incidents that have an incidentTimestamp date after the given date.  By [default](https://docs.camunda.org/manual/7.16/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="activityId">Restricts to incidents that belong to an activity with the given id. (optional)</param>
        /// <param name="failedActivityId">Restricts to incidents that were created due to the failure of an activity with the given id. (optional)</param>
        /// <param name="causeIncidentId">Restricts to incidents that have the given incident id as cause incident. (optional)</param>
        /// <param name="rootCauseIncidentId">Restricts to incidents that have the given incident id as root cause incident. (optional)</param>
        /// <param name="configuration">Restricts to incidents that have the given parameter set as configuration. (optional)</param>
        /// <param name="tenantIdIn">Restricts to incidents that have one of the given comma-separated tenant ids. (optional)</param>
        /// <param name="jobDefinitionIdIn">Restricts to incidents that have one of the given comma-separated job definition ids. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CountResultDto)</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<CountResultDto>> GetIncidentsCountWithHttpInfoAsync(string incidentId = default(string), string incidentType = default(string), string incidentMessage = default(string), string incidentMessageLike = default(string), string processDefinitionId = default(string), string processDefinitionKeyIn = default(string), string processInstanceId = default(string), string executionId = default(string), DateTime? incidentTimestampBefore = default(DateTime?), DateTime? incidentTimestampAfter = default(DateTime?), string activityId = default(string), string failedActivityId = default(string), string causeIncidentId = default(string), string rootCauseIncidentId = default(string), string configuration = default(string), string tenantIdIn = default(string), string jobDefinitionIdIn = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (incidentId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "incidentId", incidentId));
            }
            if (incidentType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "incidentType", incidentType));
            }
            if (incidentMessage != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "incidentMessage", incidentMessage));
            }
            if (incidentMessageLike != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "incidentMessageLike", incidentMessageLike));
            }
            if (processDefinitionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processDefinitionId", processDefinitionId));
            }
            if (processDefinitionKeyIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processDefinitionKeyIn", processDefinitionKeyIn));
            }
            if (processInstanceId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processInstanceId", processInstanceId));
            }
            if (executionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "executionId", executionId));
            }
            if (incidentTimestampBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "incidentTimestampBefore", incidentTimestampBefore));
            }
            if (incidentTimestampAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "incidentTimestampAfter", incidentTimestampAfter));
            }
            if (activityId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "activityId", activityId));
            }
            if (failedActivityId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "failedActivityId", failedActivityId));
            }
            if (causeIncidentId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "causeIncidentId", causeIncidentId));
            }
            if (rootCauseIncidentId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "rootCauseIncidentId", rootCauseIncidentId));
            }
            if (configuration != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "configuration", configuration));
            }
            if (tenantIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "tenantIdIn", tenantIdIn));
            }
            if (jobDefinitionIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "jobDefinitionIdIn", jobDefinitionIdIn));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<CountResultDto>("/incident/count", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIncidentsCount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Resolve Incident Resolves an incident with given id.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the incident to be resolved.</param>
        /// <returns></returns>
        public void ResolveIncident(string id)
        {
            ResolveIncidentWithHttpInfo(id);
        }

        /// <summary>
        /// Resolve Incident Resolves an incident with given id.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the incident to be resolved.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<Object> ResolveIncidentWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling IncidentApi->ResolveIncident");

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/incident/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ResolveIncident", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Resolve Incident Resolves an incident with given id.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the incident to be resolved.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ResolveIncidentAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ResolveIncidentWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Resolve Incident Resolves an incident with given id.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the incident to be resolved.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<Object>> ResolveIncidentWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling IncidentApi->ResolveIncident");


            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/incident/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ResolveIncident", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set Incident Annotation Sets the annotation of an incident with given id.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the incident to clear the annotation at.</param>
        /// <param name="annotationDto"> (optional)</param>
        /// <returns></returns>
        public void SetIncidentAnnotation(string id, AnnotationDto annotationDto = default(AnnotationDto))
        {
            SetIncidentAnnotationWithHttpInfo(id, annotationDto);
        }

        /// <summary>
        /// Set Incident Annotation Sets the annotation of an incident with given id.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the incident to clear the annotation at.</param>
        /// <param name="annotationDto"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<Object> SetIncidentAnnotationWithHttpInfo(string id, AnnotationDto annotationDto = default(AnnotationDto))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling IncidentApi->SetIncidentAnnotation");

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = annotationDto;


            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/incident/{id}/annotation", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetIncidentAnnotation", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set Incident Annotation Sets the annotation of an incident with given id.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the incident to clear the annotation at.</param>
        /// <param name="annotationDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SetIncidentAnnotationAsync(string id, AnnotationDto annotationDto = default(AnnotationDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await SetIncidentAnnotationWithHttpInfoAsync(id, annotationDto, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Set Incident Annotation Sets the annotation of an incident with given id.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the incident to clear the annotation at.</param>
        /// <param name="annotationDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<Object>> SetIncidentAnnotationWithHttpInfoAsync(string id, AnnotationDto annotationDto = default(AnnotationDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling IncidentApi->SetIncidentAnnotation");


            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = annotationDto;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/incident/{id}/annotation", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetIncidentAnnotation", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
