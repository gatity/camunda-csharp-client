/*
 * Camunda Platform REST API
 *
 * OpenApi Spec for Camunda Platform REST API.
 *
 * The version of the OpenAPI document: 7.16.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using Camunda.OpenApi.Client.Client;
using Camunda.OpenApi.Client.Model;

namespace Camunda.OpenApi.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDecisionDefinitionApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Evaluate By Id
        /// </summary>
        /// <remarks>
        /// Evaluates a given decision and returns the result. The input values of the decision have to be supplied in the request body.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the decision definition to be evaluated.</param>
        /// <param name="evaluateDecisionDto"> (optional)</param>
        /// <returns>List&lt;Dictionary&lt;string, VariableValueDto&gt;&gt;</returns>
        List<Dictionary<string, VariableValueDto>> EvaluateDecisionById(string id, EvaluateDecisionDto evaluateDecisionDto = default(EvaluateDecisionDto));

        /// <summary>
        /// Evaluate By Id
        /// </summary>
        /// <remarks>
        /// Evaluates a given decision and returns the result. The input values of the decision have to be supplied in the request body.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the decision definition to be evaluated.</param>
        /// <param name="evaluateDecisionDto"> (optional)</param>
        /// <returns>ApiResponse of List&lt;Dictionary&lt;string, VariableValueDto&gt;&gt;</returns>
        ApiResponse<List<Dictionary<string, VariableValueDto>>> EvaluateDecisionByIdWithHttpInfo(string id, EvaluateDecisionDto evaluateDecisionDto = default(EvaluateDecisionDto));
        /// <summary>
        /// Evaluate By Key
        /// </summary>
        /// <remarks>
        /// Evaluates the latest version of the decision definition which belongs to no tenant. The input values of the decision have to be supplied in the request body.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the decision definition (the latest version thereof) to be evaluated.</param>
        /// <param name="evaluateDecisionDto"> (optional)</param>
        /// <returns>List&lt;Dictionary&lt;string, VariableValueDto&gt;&gt;</returns>
        List<Dictionary<string, VariableValueDto>> EvaluateDecisionByKey(string key, EvaluateDecisionDto evaluateDecisionDto = default(EvaluateDecisionDto));

        /// <summary>
        /// Evaluate By Key
        /// </summary>
        /// <remarks>
        /// Evaluates the latest version of the decision definition which belongs to no tenant. The input values of the decision have to be supplied in the request body.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the decision definition (the latest version thereof) to be evaluated.</param>
        /// <param name="evaluateDecisionDto"> (optional)</param>
        /// <returns>ApiResponse of List&lt;Dictionary&lt;string, VariableValueDto&gt;&gt;</returns>
        ApiResponse<List<Dictionary<string, VariableValueDto>>> EvaluateDecisionByKeyWithHttpInfo(string key, EvaluateDecisionDto evaluateDecisionDto = default(EvaluateDecisionDto));
        /// <summary>
        /// Evaluate By Key And Tenant
        /// </summary>
        /// <remarks>
        /// Evaluates the latest version of the decision definition for tenant. The input values of the decision have to be supplied in the request body.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the decision definition (the latest version thereof) to be evaluated.</param>
        /// <param name="tenantId">The id of the tenant the decision definition belongs to.</param>
        /// <param name="evaluateDecisionDto"> (optional)</param>
        /// <returns>List&lt;Dictionary&lt;string, VariableValueDto&gt;&gt;</returns>
        List<Dictionary<string, VariableValueDto>> EvaluateDecisionByKeyAndTenant(string key, string tenantId, EvaluateDecisionDto evaluateDecisionDto = default(EvaluateDecisionDto));

        /// <summary>
        /// Evaluate By Key And Tenant
        /// </summary>
        /// <remarks>
        /// Evaluates the latest version of the decision definition for tenant. The input values of the decision have to be supplied in the request body.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the decision definition (the latest version thereof) to be evaluated.</param>
        /// <param name="tenantId">The id of the tenant the decision definition belongs to.</param>
        /// <param name="evaluateDecisionDto"> (optional)</param>
        /// <returns>ApiResponse of List&lt;Dictionary&lt;string, VariableValueDto&gt;&gt;</returns>
        ApiResponse<List<Dictionary<string, VariableValueDto>>> EvaluateDecisionByKeyAndTenantWithHttpInfo(string key, string tenantId, EvaluateDecisionDto evaluateDecisionDto = default(EvaluateDecisionDto));
        /// <summary>
        /// Get Decision Definition By Id
        /// </summary>
        /// <remarks>
        /// Retrieves a decision definition by id, according to the &#x60;DecisionDefinition&#x60; interface in the engine.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the decision definition to be retrieved.</param>
        /// <returns>DecisionDefinitionDto</returns>
        DecisionDefinitionDto GetDecisionDefinitionById(string id);

        /// <summary>
        /// Get Decision Definition By Id
        /// </summary>
        /// <remarks>
        /// Retrieves a decision definition by id, according to the &#x60;DecisionDefinition&#x60; interface in the engine.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the decision definition to be retrieved.</param>
        /// <returns>ApiResponse of DecisionDefinitionDto</returns>
        ApiResponse<DecisionDefinitionDto> GetDecisionDefinitionByIdWithHttpInfo(string id);
        /// <summary>
        /// Get Decision Definition By Key
        /// </summary>
        /// <remarks>
        /// Retrieves the latest version of the decision definition which belongs to no tenant.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the decision definition (the latest version thereof) to be retrieved.</param>
        /// <returns>DecisionDefinitionDto</returns>
        DecisionDefinitionDto GetDecisionDefinitionByKey(string key);

        /// <summary>
        /// Get Decision Definition By Key
        /// </summary>
        /// <remarks>
        /// Retrieves the latest version of the decision definition which belongs to no tenant.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the decision definition (the latest version thereof) to be retrieved.</param>
        /// <returns>ApiResponse of DecisionDefinitionDto</returns>
        ApiResponse<DecisionDefinitionDto> GetDecisionDefinitionByKeyWithHttpInfo(string key);
        /// <summary>
        /// Get Decision Definition By Key And Tenant Id
        /// </summary>
        /// <remarks>
        /// Retrieves the latest version of the decision definition for tenant
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the decision definition (the latest version thereof) to be retrieved.</param>
        /// <param name="tenantId">The id of the tenant the decision definition belongs to.</param>
        /// <returns>DecisionDefinitionDto</returns>
        DecisionDefinitionDto GetDecisionDefinitionByKeyAndTenantId(string key, string tenantId);

        /// <summary>
        /// Get Decision Definition By Key And Tenant Id
        /// </summary>
        /// <remarks>
        /// Retrieves the latest version of the decision definition for tenant
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the decision definition (the latest version thereof) to be retrieved.</param>
        /// <param name="tenantId">The id of the tenant the decision definition belongs to.</param>
        /// <returns>ApiResponse of DecisionDefinitionDto</returns>
        ApiResponse<DecisionDefinitionDto> GetDecisionDefinitionByKeyAndTenantIdWithHttpInfo(string key, string tenantId);
        /// <summary>
        /// Get Diagram
        /// </summary>
        /// <remarks>
        /// Retrieves the diagram of a decision definition.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition.</param>
        /// <returns>FileParameter</returns>
        FileParameter GetDecisionDefinitionDiagram(string id);

        /// <summary>
        /// Get Diagram
        /// </summary>
        /// <remarks>
        /// Retrieves the diagram of a decision definition.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition.</param>
        /// <returns>ApiResponse of FileParameter</returns>
        ApiResponse<FileParameter> GetDecisionDefinitionDiagramWithHttpInfo(string id);
        /// <summary>
        /// Get Diagram By Key
        /// </summary>
        /// <remarks>
        /// Returns the diagram for the latest version of the decision definition which belongs to no tenant
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the decision definition (the latest version thereof) to be retrieved.</param>
        /// <returns>FileParameter</returns>
        FileParameter GetDecisionDefinitionDiagramByKey(string key);

        /// <summary>
        /// Get Diagram By Key
        /// </summary>
        /// <remarks>
        /// Returns the diagram for the latest version of the decision definition which belongs to no tenant
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the decision definition (the latest version thereof) to be retrieved.</param>
        /// <returns>ApiResponse of FileParameter</returns>
        ApiResponse<FileParameter> GetDecisionDefinitionDiagramByKeyWithHttpInfo(string key);
        /// <summary>
        /// Get Diagram By Key And Tenant
        /// </summary>
        /// <remarks>
        /// Returns the XML of the latest version of the decision definition for tenant.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the decision definition (the latest version thereof) to be retrieved.</param>
        /// <param name="tenantId">The id of the tenant the decision definition belongs to.</param>
        /// <returns>FileParameter</returns>
        FileParameter GetDecisionDefinitionDiagramByKeyAndTenant(string key, string tenantId);

        /// <summary>
        /// Get Diagram By Key And Tenant
        /// </summary>
        /// <remarks>
        /// Returns the XML of the latest version of the decision definition for tenant.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the decision definition (the latest version thereof) to be retrieved.</param>
        /// <param name="tenantId">The id of the tenant the decision definition belongs to.</param>
        /// <returns>ApiResponse of FileParameter</returns>
        ApiResponse<FileParameter> GetDecisionDefinitionDiagramByKeyAndTenantWithHttpInfo(string key, string tenantId);
        /// <summary>
        /// Get XML By Id
        /// </summary>
        /// <remarks>
        /// Retrieves the DMN XML of a decision definition.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the decision definition.</param>
        /// <returns>DecisionDefinitionDiagramDto</returns>
        DecisionDefinitionDiagramDto GetDecisionDefinitionDmnXmlById(string id);

        /// <summary>
        /// Get XML By Id
        /// </summary>
        /// <remarks>
        /// Retrieves the DMN XML of a decision definition.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the decision definition.</param>
        /// <returns>ApiResponse of DecisionDefinitionDiagramDto</returns>
        ApiResponse<DecisionDefinitionDiagramDto> GetDecisionDefinitionDmnXmlByIdWithHttpInfo(string id);
        /// <summary>
        /// Get XML By Key
        /// </summary>
        /// <remarks>
        /// Retrieves the XML for the latest version of the decision definition which belongs to no tenant.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the decision definition (the latest version thereof).</param>
        /// <returns>DecisionDefinitionDiagramDto</returns>
        DecisionDefinitionDiagramDto GetDecisionDefinitionDmnXmlByKey(string key);

        /// <summary>
        /// Get XML By Key
        /// </summary>
        /// <remarks>
        /// Retrieves the XML for the latest version of the decision definition which belongs to no tenant.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the decision definition (the latest version thereof).</param>
        /// <returns>ApiResponse of DecisionDefinitionDiagramDto</returns>
        ApiResponse<DecisionDefinitionDiagramDto> GetDecisionDefinitionDmnXmlByKeyWithHttpInfo(string key);
        /// <summary>
        /// Get XML By Key and Tenant
        /// </summary>
        /// <remarks>
        /// Retrieves the XML of the latest version of the decision definition for tenant
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the decision definition (the latest version thereof).</param>
        /// <param name="tenantId">The id of the tenant the decision definition belongs to.</param>
        /// <returns>DecisionDefinitionDiagramDto</returns>
        DecisionDefinitionDiagramDto GetDecisionDefinitionDmnXmlByKeyAndTenant(string key, string tenantId);

        /// <summary>
        /// Get XML By Key and Tenant
        /// </summary>
        /// <remarks>
        /// Retrieves the XML of the latest version of the decision definition for tenant
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the decision definition (the latest version thereof).</param>
        /// <param name="tenantId">The id of the tenant the decision definition belongs to.</param>
        /// <returns>ApiResponse of DecisionDefinitionDiagramDto</returns>
        ApiResponse<DecisionDefinitionDiagramDto> GetDecisionDefinitionDmnXmlByKeyAndTenantWithHttpInfo(string key, string tenantId);
        /// <summary>
        /// Get List
        /// </summary>
        /// <remarks>
        /// Queries for decision definitions that fulfill given parameters. Parameters may be the properties of decision definitions, such as the name, key or version. The size of the result set can be retrieved by using the [Get Decision Definition Count](https://docs.camunda.org/manual/7.16/reference/rest/decision-definition/get-query-count/) method.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="decisionDefinitionId">Filter by decision definition id. (optional)</param>
        /// <param name="decisionDefinitionIdIn">Filter by decision definition ids. (optional)</param>
        /// <param name="name">Filter by decision definition name. (optional)</param>
        /// <param name="nameLike">Filter by decision definition names that the parameter is a substring of. (optional)</param>
        /// <param name="deploymentId">Filter by the deployment the id belongs to. (optional)</param>
        /// <param name="deployedAfter">Filter by the deploy time of the deployment the decision definition belongs to. Only selects decision definitions that have been deployed after (exclusive) a specific time. (optional)</param>
        /// <param name="deployedAt">Filter by the deploy time of the deployment the decision definition belongs to. Only selects decision definitions that have been deployed at a specific time (exact match). (optional)</param>
        /// <param name="key">Filter by decision definition key, i.e., the id in the DMN 1.0 XML. Exact match. (optional)</param>
        /// <param name="keyLike">Filter by decision definition keys that the parameter is a substring of. (optional)</param>
        /// <param name="category">Filter by decision definition category. Exact match. (optional)</param>
        /// <param name="categoryLike">Filter by decision definition categories that the parameter is a substring of. (optional)</param>
        /// <param name="version">Filter by decision definition version. (optional)</param>
        /// <param name="latestVersion">Only include those decision definitions that are latest versions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="resourceName">Filter by the name of the decision definition resource. Exact match. (optional)</param>
        /// <param name="resourceNameLike">Filter by names of those decision definition resources that the parameter is a substring of. (optional)</param>
        /// <param name="decisionRequirementsDefinitionId">Filter by the id of the decision requirements definition this decision definition belongs to. (optional)</param>
        /// <param name="decisionRequirementsDefinitionKey">Filter by the key of the decision requirements definition this decision definition belongs to. (optional)</param>
        /// <param name="withoutDecisionRequirementsDefinition">Only include decision definitions which does not belongs to any decision requirements definition. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of &#x60;Strings&#x60;. A decision definition must have one of the given tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include decision definitions which belong to no tenant. Value can effectively only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="includeDecisionDefinitionsWithoutTenantId">Include decision definitions which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="versionTag">Filter by the version tag. (optional)</param>
        /// <param name="versionTagLike">Filter by the version tags of those decision definition resources that the parameter is a substring of. (optional)</param>
        /// <returns>List&lt;DecisionDefinitionDto&gt;</returns>
        List<DecisionDefinitionDto> GetDecisionDefinitions(string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?), string decisionDefinitionId = default(string), string decisionDefinitionIdIn = default(string), string name = default(string), string nameLike = default(string), string deploymentId = default(string), DateTime? deployedAfter = default(DateTime?), DateTime? deployedAt = default(DateTime?), string key = default(string), string keyLike = default(string), string category = default(string), string categoryLike = default(string), int? version = default(int?), bool? latestVersion = default(bool?), string resourceName = default(string), string resourceNameLike = default(string), string decisionRequirementsDefinitionId = default(string), string decisionRequirementsDefinitionKey = default(string), bool? withoutDecisionRequirementsDefinition = default(bool?), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), bool? includeDecisionDefinitionsWithoutTenantId = default(bool?), string versionTag = default(string), string versionTagLike = default(string));

        /// <summary>
        /// Get List
        /// </summary>
        /// <remarks>
        /// Queries for decision definitions that fulfill given parameters. Parameters may be the properties of decision definitions, such as the name, key or version. The size of the result set can be retrieved by using the [Get Decision Definition Count](https://docs.camunda.org/manual/7.16/reference/rest/decision-definition/get-query-count/) method.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="decisionDefinitionId">Filter by decision definition id. (optional)</param>
        /// <param name="decisionDefinitionIdIn">Filter by decision definition ids. (optional)</param>
        /// <param name="name">Filter by decision definition name. (optional)</param>
        /// <param name="nameLike">Filter by decision definition names that the parameter is a substring of. (optional)</param>
        /// <param name="deploymentId">Filter by the deployment the id belongs to. (optional)</param>
        /// <param name="deployedAfter">Filter by the deploy time of the deployment the decision definition belongs to. Only selects decision definitions that have been deployed after (exclusive) a specific time. (optional)</param>
        /// <param name="deployedAt">Filter by the deploy time of the deployment the decision definition belongs to. Only selects decision definitions that have been deployed at a specific time (exact match). (optional)</param>
        /// <param name="key">Filter by decision definition key, i.e., the id in the DMN 1.0 XML. Exact match. (optional)</param>
        /// <param name="keyLike">Filter by decision definition keys that the parameter is a substring of. (optional)</param>
        /// <param name="category">Filter by decision definition category. Exact match. (optional)</param>
        /// <param name="categoryLike">Filter by decision definition categories that the parameter is a substring of. (optional)</param>
        /// <param name="version">Filter by decision definition version. (optional)</param>
        /// <param name="latestVersion">Only include those decision definitions that are latest versions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="resourceName">Filter by the name of the decision definition resource. Exact match. (optional)</param>
        /// <param name="resourceNameLike">Filter by names of those decision definition resources that the parameter is a substring of. (optional)</param>
        /// <param name="decisionRequirementsDefinitionId">Filter by the id of the decision requirements definition this decision definition belongs to. (optional)</param>
        /// <param name="decisionRequirementsDefinitionKey">Filter by the key of the decision requirements definition this decision definition belongs to. (optional)</param>
        /// <param name="withoutDecisionRequirementsDefinition">Only include decision definitions which does not belongs to any decision requirements definition. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of &#x60;Strings&#x60;. A decision definition must have one of the given tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include decision definitions which belong to no tenant. Value can effectively only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="includeDecisionDefinitionsWithoutTenantId">Include decision definitions which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="versionTag">Filter by the version tag. (optional)</param>
        /// <param name="versionTagLike">Filter by the version tags of those decision definition resources that the parameter is a substring of. (optional)</param>
        /// <returns>ApiResponse of List&lt;DecisionDefinitionDto&gt;</returns>
        ApiResponse<List<DecisionDefinitionDto>> GetDecisionDefinitionsWithHttpInfo(string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?), string decisionDefinitionId = default(string), string decisionDefinitionIdIn = default(string), string name = default(string), string nameLike = default(string), string deploymentId = default(string), DateTime? deployedAfter = default(DateTime?), DateTime? deployedAt = default(DateTime?), string key = default(string), string keyLike = default(string), string category = default(string), string categoryLike = default(string), int? version = default(int?), bool? latestVersion = default(bool?), string resourceName = default(string), string resourceNameLike = default(string), string decisionRequirementsDefinitionId = default(string), string decisionRequirementsDefinitionKey = default(string), bool? withoutDecisionRequirementsDefinition = default(bool?), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), bool? includeDecisionDefinitionsWithoutTenantId = default(bool?), string versionTag = default(string), string versionTagLike = default(string));
        /// <summary>
        /// Get List Count
        /// </summary>
        /// <remarks>
        /// Requests the number of decision definitions that fulfill the query criteria. Takes the same filtering parameters as the [Get Decision Definition](https://docs.camunda.org/manual/7.16/reference/rest/decision-definition/get-query/) method.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="decisionDefinitionId">Filter by decision definition id. (optional)</param>
        /// <param name="decisionDefinitionIdIn">Filter by decision definition ids. (optional)</param>
        /// <param name="name">Filter by decision definition name. (optional)</param>
        /// <param name="nameLike">Filter by decision definition names that the parameter is a substring of. (optional)</param>
        /// <param name="deploymentId">Filter by the deployment the id belongs to. (optional)</param>
        /// <param name="deployedAfter">Filter by the deploy time of the deployment the decision definition belongs to. Only selects decision definitions that have been deployed after (exclusive) a specific time. (optional)</param>
        /// <param name="deployedAt">Filter by the deploy time of the deployment the decision definition belongs to. Only selects decision definitions that have been deployed at a specific time (exact match). (optional)</param>
        /// <param name="key">Filter by decision definition key, i.e., the id in the DMN 1.0 XML. Exact match. (optional)</param>
        /// <param name="keyLike">Filter by decision definition keys that the parameter is a substring of. (optional)</param>
        /// <param name="category">Filter by decision definition category. Exact match. (optional)</param>
        /// <param name="categoryLike">Filter by decision definition categories that the parameter is a substring of. (optional)</param>
        /// <param name="version">Filter by decision definition version. (optional)</param>
        /// <param name="latestVersion">Only include those decision definitions that are latest versions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="resourceName">Filter by the name of the decision definition resource. Exact match. (optional)</param>
        /// <param name="resourceNameLike">Filter by names of those decision definition resources that the parameter is a substring of. (optional)</param>
        /// <param name="decisionRequirementsDefinitionId">Filter by the id of the decision requirements definition this decision definition belongs to. (optional)</param>
        /// <param name="decisionRequirementsDefinitionKey">Filter by the key of the decision requirements definition this decision definition belongs to. (optional)</param>
        /// <param name="withoutDecisionRequirementsDefinition">Only include decision definitions which does not belongs to any decision requirements definition. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of &#x60;Strings&#x60;. A decision definition must have one of the given tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include decision definitions which belong to no tenant. Value can effectively only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="includeDecisionDefinitionsWithoutTenantId">Include decision definitions which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="versionTag">Filter by the version tag. (optional)</param>
        /// <param name="versionTagLike">Filter by the version tags of those decision definition resources that the parameter is a substring of. (optional)</param>
        /// <returns>CountResultDto</returns>
        CountResultDto GetDecisionDefinitionsCount(string decisionDefinitionId = default(string), string decisionDefinitionIdIn = default(string), string name = default(string), string nameLike = default(string), string deploymentId = default(string), DateTime? deployedAfter = default(DateTime?), DateTime? deployedAt = default(DateTime?), string key = default(string), string keyLike = default(string), string category = default(string), string categoryLike = default(string), int? version = default(int?), bool? latestVersion = default(bool?), string resourceName = default(string), string resourceNameLike = default(string), string decisionRequirementsDefinitionId = default(string), string decisionRequirementsDefinitionKey = default(string), bool? withoutDecisionRequirementsDefinition = default(bool?), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), bool? includeDecisionDefinitionsWithoutTenantId = default(bool?), string versionTag = default(string), string versionTagLike = default(string));

        /// <summary>
        /// Get List Count
        /// </summary>
        /// <remarks>
        /// Requests the number of decision definitions that fulfill the query criteria. Takes the same filtering parameters as the [Get Decision Definition](https://docs.camunda.org/manual/7.16/reference/rest/decision-definition/get-query/) method.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="decisionDefinitionId">Filter by decision definition id. (optional)</param>
        /// <param name="decisionDefinitionIdIn">Filter by decision definition ids. (optional)</param>
        /// <param name="name">Filter by decision definition name. (optional)</param>
        /// <param name="nameLike">Filter by decision definition names that the parameter is a substring of. (optional)</param>
        /// <param name="deploymentId">Filter by the deployment the id belongs to. (optional)</param>
        /// <param name="deployedAfter">Filter by the deploy time of the deployment the decision definition belongs to. Only selects decision definitions that have been deployed after (exclusive) a specific time. (optional)</param>
        /// <param name="deployedAt">Filter by the deploy time of the deployment the decision definition belongs to. Only selects decision definitions that have been deployed at a specific time (exact match). (optional)</param>
        /// <param name="key">Filter by decision definition key, i.e., the id in the DMN 1.0 XML. Exact match. (optional)</param>
        /// <param name="keyLike">Filter by decision definition keys that the parameter is a substring of. (optional)</param>
        /// <param name="category">Filter by decision definition category. Exact match. (optional)</param>
        /// <param name="categoryLike">Filter by decision definition categories that the parameter is a substring of. (optional)</param>
        /// <param name="version">Filter by decision definition version. (optional)</param>
        /// <param name="latestVersion">Only include those decision definitions that are latest versions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="resourceName">Filter by the name of the decision definition resource. Exact match. (optional)</param>
        /// <param name="resourceNameLike">Filter by names of those decision definition resources that the parameter is a substring of. (optional)</param>
        /// <param name="decisionRequirementsDefinitionId">Filter by the id of the decision requirements definition this decision definition belongs to. (optional)</param>
        /// <param name="decisionRequirementsDefinitionKey">Filter by the key of the decision requirements definition this decision definition belongs to. (optional)</param>
        /// <param name="withoutDecisionRequirementsDefinition">Only include decision definitions which does not belongs to any decision requirements definition. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of &#x60;Strings&#x60;. A decision definition must have one of the given tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include decision definitions which belong to no tenant. Value can effectively only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="includeDecisionDefinitionsWithoutTenantId">Include decision definitions which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="versionTag">Filter by the version tag. (optional)</param>
        /// <param name="versionTagLike">Filter by the version tags of those decision definition resources that the parameter is a substring of. (optional)</param>
        /// <returns>ApiResponse of CountResultDto</returns>
        ApiResponse<CountResultDto> GetDecisionDefinitionsCountWithHttpInfo(string decisionDefinitionId = default(string), string decisionDefinitionIdIn = default(string), string name = default(string), string nameLike = default(string), string deploymentId = default(string), DateTime? deployedAfter = default(DateTime?), DateTime? deployedAt = default(DateTime?), string key = default(string), string keyLike = default(string), string category = default(string), string categoryLike = default(string), int? version = default(int?), bool? latestVersion = default(bool?), string resourceName = default(string), string resourceNameLike = default(string), string decisionRequirementsDefinitionId = default(string), string decisionRequirementsDefinitionKey = default(string), bool? withoutDecisionRequirementsDefinition = default(bool?), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), bool? includeDecisionDefinitionsWithoutTenantId = default(bool?), string versionTag = default(string), string versionTagLike = default(string));
        /// <summary>
        /// Update History Time to Live
        /// </summary>
        /// <remarks>
        /// Updates history time to live for decision definition. The field is used within [History cleanup](https://docs.camunda.org/manual/7.16/user-guide/process-engine/history/#history-cleanup).
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the decision definition to change history time to live.</param>
        /// <param name="historyTimeToLiveDto"> (optional)</param>
        /// <returns></returns>
        void UpdateHistoryTimeToLiveByDecisionDefinitionId(string id, HistoryTimeToLiveDto historyTimeToLiveDto = default(HistoryTimeToLiveDto));

        /// <summary>
        /// Update History Time to Live
        /// </summary>
        /// <remarks>
        /// Updates history time to live for decision definition. The field is used within [History cleanup](https://docs.camunda.org/manual/7.16/user-guide/process-engine/history/#history-cleanup).
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the decision definition to change history time to live.</param>
        /// <param name="historyTimeToLiveDto"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateHistoryTimeToLiveByDecisionDefinitionIdWithHttpInfo(string id, HistoryTimeToLiveDto historyTimeToLiveDto = default(HistoryTimeToLiveDto));
        /// <summary>
        /// Update History Time to Live By Key
        /// </summary>
        /// <remarks>
        /// Updates the latest version of the decision definition which belongs to no tenant. The field is used within [History cleanup](https://docs.camunda.org/manual/7.16/user-guide/process-engine/history/#history-cleanup).
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the decision definitions to change history time to live.</param>
        /// <param name="historyTimeToLiveDto"> (optional)</param>
        /// <returns></returns>
        void UpdateHistoryTimeToLiveByDecisionDefinitionKey(string key, HistoryTimeToLiveDto historyTimeToLiveDto = default(HistoryTimeToLiveDto));

        /// <summary>
        /// Update History Time to Live By Key
        /// </summary>
        /// <remarks>
        /// Updates the latest version of the decision definition which belongs to no tenant. The field is used within [History cleanup](https://docs.camunda.org/manual/7.16/user-guide/process-engine/history/#history-cleanup).
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the decision definitions to change history time to live.</param>
        /// <param name="historyTimeToLiveDto"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateHistoryTimeToLiveByDecisionDefinitionKeyWithHttpInfo(string key, HistoryTimeToLiveDto historyTimeToLiveDto = default(HistoryTimeToLiveDto));
        /// <summary>
        /// Update History Time to Live By Key And Tenant
        /// </summary>
        /// <remarks>
        /// Updates the latest version of the decision definition for tenant. The field is used within [History cleanup](https://docs.camunda.org/manual/7.16/user-guide/process-engine/history/#history-cleanup).
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the decision definitions to change history time to live.</param>
        /// <param name="tenantId">The id of the tenant the decision definition belongs to.</param>
        /// <param name="historyTimeToLiveDto"> (optional)</param>
        /// <returns></returns>
        void UpdateHistoryTimeToLiveByDecisionDefinitionKeyAndTenant(string key, string tenantId, HistoryTimeToLiveDto historyTimeToLiveDto = default(HistoryTimeToLiveDto));

        /// <summary>
        /// Update History Time to Live By Key And Tenant
        /// </summary>
        /// <remarks>
        /// Updates the latest version of the decision definition for tenant. The field is used within [History cleanup](https://docs.camunda.org/manual/7.16/user-guide/process-engine/history/#history-cleanup).
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the decision definitions to change history time to live.</param>
        /// <param name="tenantId">The id of the tenant the decision definition belongs to.</param>
        /// <param name="historyTimeToLiveDto"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateHistoryTimeToLiveByDecisionDefinitionKeyAndTenantWithHttpInfo(string key, string tenantId, HistoryTimeToLiveDto historyTimeToLiveDto = default(HistoryTimeToLiveDto));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDecisionDefinitionApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Evaluate By Id
        /// </summary>
        /// <remarks>
        /// Evaluates a given decision and returns the result. The input values of the decision have to be supplied in the request body.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the decision definition to be evaluated.</param>
        /// <param name="evaluateDecisionDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Dictionary&lt;string, VariableValueDto&gt;&gt;</returns>
        System.Threading.Tasks.Task<List<Dictionary<string, VariableValueDto>>> EvaluateDecisionByIdAsync(string id, EvaluateDecisionDto evaluateDecisionDto = default(EvaluateDecisionDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Evaluate By Id
        /// </summary>
        /// <remarks>
        /// Evaluates a given decision and returns the result. The input values of the decision have to be supplied in the request body.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the decision definition to be evaluated.</param>
        /// <param name="evaluateDecisionDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Dictionary&lt;string, VariableValueDto&gt;&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Dictionary<string, VariableValueDto>>>> EvaluateDecisionByIdWithHttpInfoAsync(string id, EvaluateDecisionDto evaluateDecisionDto = default(EvaluateDecisionDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Evaluate By Key
        /// </summary>
        /// <remarks>
        /// Evaluates the latest version of the decision definition which belongs to no tenant. The input values of the decision have to be supplied in the request body.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the decision definition (the latest version thereof) to be evaluated.</param>
        /// <param name="evaluateDecisionDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Dictionary&lt;string, VariableValueDto&gt;&gt;</returns>
        System.Threading.Tasks.Task<List<Dictionary<string, VariableValueDto>>> EvaluateDecisionByKeyAsync(string key, EvaluateDecisionDto evaluateDecisionDto = default(EvaluateDecisionDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Evaluate By Key
        /// </summary>
        /// <remarks>
        /// Evaluates the latest version of the decision definition which belongs to no tenant. The input values of the decision have to be supplied in the request body.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the decision definition (the latest version thereof) to be evaluated.</param>
        /// <param name="evaluateDecisionDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Dictionary&lt;string, VariableValueDto&gt;&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Dictionary<string, VariableValueDto>>>> EvaluateDecisionByKeyWithHttpInfoAsync(string key, EvaluateDecisionDto evaluateDecisionDto = default(EvaluateDecisionDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Evaluate By Key And Tenant
        /// </summary>
        /// <remarks>
        /// Evaluates the latest version of the decision definition for tenant. The input values of the decision have to be supplied in the request body.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the decision definition (the latest version thereof) to be evaluated.</param>
        /// <param name="tenantId">The id of the tenant the decision definition belongs to.</param>
        /// <param name="evaluateDecisionDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Dictionary&lt;string, VariableValueDto&gt;&gt;</returns>
        System.Threading.Tasks.Task<List<Dictionary<string, VariableValueDto>>> EvaluateDecisionByKeyAndTenantAsync(string key, string tenantId, EvaluateDecisionDto evaluateDecisionDto = default(EvaluateDecisionDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Evaluate By Key And Tenant
        /// </summary>
        /// <remarks>
        /// Evaluates the latest version of the decision definition for tenant. The input values of the decision have to be supplied in the request body.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the decision definition (the latest version thereof) to be evaluated.</param>
        /// <param name="tenantId">The id of the tenant the decision definition belongs to.</param>
        /// <param name="evaluateDecisionDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Dictionary&lt;string, VariableValueDto&gt;&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Dictionary<string, VariableValueDto>>>> EvaluateDecisionByKeyAndTenantWithHttpInfoAsync(string key, string tenantId, EvaluateDecisionDto evaluateDecisionDto = default(EvaluateDecisionDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Decision Definition By Id
        /// </summary>
        /// <remarks>
        /// Retrieves a decision definition by id, according to the &#x60;DecisionDefinition&#x60; interface in the engine.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the decision definition to be retrieved.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DecisionDefinitionDto</returns>
        System.Threading.Tasks.Task<DecisionDefinitionDto> GetDecisionDefinitionByIdAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Decision Definition By Id
        /// </summary>
        /// <remarks>
        /// Retrieves a decision definition by id, according to the &#x60;DecisionDefinition&#x60; interface in the engine.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the decision definition to be retrieved.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DecisionDefinitionDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<DecisionDefinitionDto>> GetDecisionDefinitionByIdWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Decision Definition By Key
        /// </summary>
        /// <remarks>
        /// Retrieves the latest version of the decision definition which belongs to no tenant.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the decision definition (the latest version thereof) to be retrieved.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DecisionDefinitionDto</returns>
        System.Threading.Tasks.Task<DecisionDefinitionDto> GetDecisionDefinitionByKeyAsync(string key, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Decision Definition By Key
        /// </summary>
        /// <remarks>
        /// Retrieves the latest version of the decision definition which belongs to no tenant.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the decision definition (the latest version thereof) to be retrieved.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DecisionDefinitionDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<DecisionDefinitionDto>> GetDecisionDefinitionByKeyWithHttpInfoAsync(string key, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Decision Definition By Key And Tenant Id
        /// </summary>
        /// <remarks>
        /// Retrieves the latest version of the decision definition for tenant
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the decision definition (the latest version thereof) to be retrieved.</param>
        /// <param name="tenantId">The id of the tenant the decision definition belongs to.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DecisionDefinitionDto</returns>
        System.Threading.Tasks.Task<DecisionDefinitionDto> GetDecisionDefinitionByKeyAndTenantIdAsync(string key, string tenantId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Decision Definition By Key And Tenant Id
        /// </summary>
        /// <remarks>
        /// Retrieves the latest version of the decision definition for tenant
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the decision definition (the latest version thereof) to be retrieved.</param>
        /// <param name="tenantId">The id of the tenant the decision definition belongs to.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DecisionDefinitionDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<DecisionDefinitionDto>> GetDecisionDefinitionByKeyAndTenantIdWithHttpInfoAsync(string key, string tenantId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Diagram
        /// </summary>
        /// <remarks>
        /// Retrieves the diagram of a decision definition.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FileParameter</returns>
        System.Threading.Tasks.Task<FileParameter> GetDecisionDefinitionDiagramAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Diagram
        /// </summary>
        /// <remarks>
        /// Retrieves the diagram of a decision definition.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FileParameter)</returns>
        System.Threading.Tasks.Task<ApiResponse<FileParameter>> GetDecisionDefinitionDiagramWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Diagram By Key
        /// </summary>
        /// <remarks>
        /// Returns the diagram for the latest version of the decision definition which belongs to no tenant
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the decision definition (the latest version thereof) to be retrieved.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FileParameter</returns>
        System.Threading.Tasks.Task<FileParameter> GetDecisionDefinitionDiagramByKeyAsync(string key, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Diagram By Key
        /// </summary>
        /// <remarks>
        /// Returns the diagram for the latest version of the decision definition which belongs to no tenant
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the decision definition (the latest version thereof) to be retrieved.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FileParameter)</returns>
        System.Threading.Tasks.Task<ApiResponse<FileParameter>> GetDecisionDefinitionDiagramByKeyWithHttpInfoAsync(string key, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Diagram By Key And Tenant
        /// </summary>
        /// <remarks>
        /// Returns the XML of the latest version of the decision definition for tenant.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the decision definition (the latest version thereof) to be retrieved.</param>
        /// <param name="tenantId">The id of the tenant the decision definition belongs to.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FileParameter</returns>
        System.Threading.Tasks.Task<FileParameter> GetDecisionDefinitionDiagramByKeyAndTenantAsync(string key, string tenantId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Diagram By Key And Tenant
        /// </summary>
        /// <remarks>
        /// Returns the XML of the latest version of the decision definition for tenant.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the decision definition (the latest version thereof) to be retrieved.</param>
        /// <param name="tenantId">The id of the tenant the decision definition belongs to.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FileParameter)</returns>
        System.Threading.Tasks.Task<ApiResponse<FileParameter>> GetDecisionDefinitionDiagramByKeyAndTenantWithHttpInfoAsync(string key, string tenantId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get XML By Id
        /// </summary>
        /// <remarks>
        /// Retrieves the DMN XML of a decision definition.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the decision definition.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DecisionDefinitionDiagramDto</returns>
        System.Threading.Tasks.Task<DecisionDefinitionDiagramDto> GetDecisionDefinitionDmnXmlByIdAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get XML By Id
        /// </summary>
        /// <remarks>
        /// Retrieves the DMN XML of a decision definition.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the decision definition.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DecisionDefinitionDiagramDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<DecisionDefinitionDiagramDto>> GetDecisionDefinitionDmnXmlByIdWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get XML By Key
        /// </summary>
        /// <remarks>
        /// Retrieves the XML for the latest version of the decision definition which belongs to no tenant.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the decision definition (the latest version thereof).</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DecisionDefinitionDiagramDto</returns>
        System.Threading.Tasks.Task<DecisionDefinitionDiagramDto> GetDecisionDefinitionDmnXmlByKeyAsync(string key, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get XML By Key
        /// </summary>
        /// <remarks>
        /// Retrieves the XML for the latest version of the decision definition which belongs to no tenant.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the decision definition (the latest version thereof).</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DecisionDefinitionDiagramDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<DecisionDefinitionDiagramDto>> GetDecisionDefinitionDmnXmlByKeyWithHttpInfoAsync(string key, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get XML By Key and Tenant
        /// </summary>
        /// <remarks>
        /// Retrieves the XML of the latest version of the decision definition for tenant
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the decision definition (the latest version thereof).</param>
        /// <param name="tenantId">The id of the tenant the decision definition belongs to.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DecisionDefinitionDiagramDto</returns>
        System.Threading.Tasks.Task<DecisionDefinitionDiagramDto> GetDecisionDefinitionDmnXmlByKeyAndTenantAsync(string key, string tenantId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get XML By Key and Tenant
        /// </summary>
        /// <remarks>
        /// Retrieves the XML of the latest version of the decision definition for tenant
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the decision definition (the latest version thereof).</param>
        /// <param name="tenantId">The id of the tenant the decision definition belongs to.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DecisionDefinitionDiagramDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<DecisionDefinitionDiagramDto>> GetDecisionDefinitionDmnXmlByKeyAndTenantWithHttpInfoAsync(string key, string tenantId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get List
        /// </summary>
        /// <remarks>
        /// Queries for decision definitions that fulfill given parameters. Parameters may be the properties of decision definitions, such as the name, key or version. The size of the result set can be retrieved by using the [Get Decision Definition Count](https://docs.camunda.org/manual/7.16/reference/rest/decision-definition/get-query-count/) method.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="decisionDefinitionId">Filter by decision definition id. (optional)</param>
        /// <param name="decisionDefinitionIdIn">Filter by decision definition ids. (optional)</param>
        /// <param name="name">Filter by decision definition name. (optional)</param>
        /// <param name="nameLike">Filter by decision definition names that the parameter is a substring of. (optional)</param>
        /// <param name="deploymentId">Filter by the deployment the id belongs to. (optional)</param>
        /// <param name="deployedAfter">Filter by the deploy time of the deployment the decision definition belongs to. Only selects decision definitions that have been deployed after (exclusive) a specific time. (optional)</param>
        /// <param name="deployedAt">Filter by the deploy time of the deployment the decision definition belongs to. Only selects decision definitions that have been deployed at a specific time (exact match). (optional)</param>
        /// <param name="key">Filter by decision definition key, i.e., the id in the DMN 1.0 XML. Exact match. (optional)</param>
        /// <param name="keyLike">Filter by decision definition keys that the parameter is a substring of. (optional)</param>
        /// <param name="category">Filter by decision definition category. Exact match. (optional)</param>
        /// <param name="categoryLike">Filter by decision definition categories that the parameter is a substring of. (optional)</param>
        /// <param name="version">Filter by decision definition version. (optional)</param>
        /// <param name="latestVersion">Only include those decision definitions that are latest versions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="resourceName">Filter by the name of the decision definition resource. Exact match. (optional)</param>
        /// <param name="resourceNameLike">Filter by names of those decision definition resources that the parameter is a substring of. (optional)</param>
        /// <param name="decisionRequirementsDefinitionId">Filter by the id of the decision requirements definition this decision definition belongs to. (optional)</param>
        /// <param name="decisionRequirementsDefinitionKey">Filter by the key of the decision requirements definition this decision definition belongs to. (optional)</param>
        /// <param name="withoutDecisionRequirementsDefinition">Only include decision definitions which does not belongs to any decision requirements definition. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of &#x60;Strings&#x60;. A decision definition must have one of the given tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include decision definitions which belong to no tenant. Value can effectively only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="includeDecisionDefinitionsWithoutTenantId">Include decision definitions which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="versionTag">Filter by the version tag. (optional)</param>
        /// <param name="versionTagLike">Filter by the version tags of those decision definition resources that the parameter is a substring of. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;DecisionDefinitionDto&gt;</returns>
        System.Threading.Tasks.Task<List<DecisionDefinitionDto>> GetDecisionDefinitionsAsync(string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?), string decisionDefinitionId = default(string), string decisionDefinitionIdIn = default(string), string name = default(string), string nameLike = default(string), string deploymentId = default(string), DateTime? deployedAfter = default(DateTime?), DateTime? deployedAt = default(DateTime?), string key = default(string), string keyLike = default(string), string category = default(string), string categoryLike = default(string), int? version = default(int?), bool? latestVersion = default(bool?), string resourceName = default(string), string resourceNameLike = default(string), string decisionRequirementsDefinitionId = default(string), string decisionRequirementsDefinitionKey = default(string), bool? withoutDecisionRequirementsDefinition = default(bool?), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), bool? includeDecisionDefinitionsWithoutTenantId = default(bool?), string versionTag = default(string), string versionTagLike = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get List
        /// </summary>
        /// <remarks>
        /// Queries for decision definitions that fulfill given parameters. Parameters may be the properties of decision definitions, such as the name, key or version. The size of the result set can be retrieved by using the [Get Decision Definition Count](https://docs.camunda.org/manual/7.16/reference/rest/decision-definition/get-query-count/) method.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="decisionDefinitionId">Filter by decision definition id. (optional)</param>
        /// <param name="decisionDefinitionIdIn">Filter by decision definition ids. (optional)</param>
        /// <param name="name">Filter by decision definition name. (optional)</param>
        /// <param name="nameLike">Filter by decision definition names that the parameter is a substring of. (optional)</param>
        /// <param name="deploymentId">Filter by the deployment the id belongs to. (optional)</param>
        /// <param name="deployedAfter">Filter by the deploy time of the deployment the decision definition belongs to. Only selects decision definitions that have been deployed after (exclusive) a specific time. (optional)</param>
        /// <param name="deployedAt">Filter by the deploy time of the deployment the decision definition belongs to. Only selects decision definitions that have been deployed at a specific time (exact match). (optional)</param>
        /// <param name="key">Filter by decision definition key, i.e., the id in the DMN 1.0 XML. Exact match. (optional)</param>
        /// <param name="keyLike">Filter by decision definition keys that the parameter is a substring of. (optional)</param>
        /// <param name="category">Filter by decision definition category. Exact match. (optional)</param>
        /// <param name="categoryLike">Filter by decision definition categories that the parameter is a substring of. (optional)</param>
        /// <param name="version">Filter by decision definition version. (optional)</param>
        /// <param name="latestVersion">Only include those decision definitions that are latest versions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="resourceName">Filter by the name of the decision definition resource. Exact match. (optional)</param>
        /// <param name="resourceNameLike">Filter by names of those decision definition resources that the parameter is a substring of. (optional)</param>
        /// <param name="decisionRequirementsDefinitionId">Filter by the id of the decision requirements definition this decision definition belongs to. (optional)</param>
        /// <param name="decisionRequirementsDefinitionKey">Filter by the key of the decision requirements definition this decision definition belongs to. (optional)</param>
        /// <param name="withoutDecisionRequirementsDefinition">Only include decision definitions which does not belongs to any decision requirements definition. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of &#x60;Strings&#x60;. A decision definition must have one of the given tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include decision definitions which belong to no tenant. Value can effectively only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="includeDecisionDefinitionsWithoutTenantId">Include decision definitions which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="versionTag">Filter by the version tag. (optional)</param>
        /// <param name="versionTagLike">Filter by the version tags of those decision definition resources that the parameter is a substring of. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;DecisionDefinitionDto&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DecisionDefinitionDto>>> GetDecisionDefinitionsWithHttpInfoAsync(string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?), string decisionDefinitionId = default(string), string decisionDefinitionIdIn = default(string), string name = default(string), string nameLike = default(string), string deploymentId = default(string), DateTime? deployedAfter = default(DateTime?), DateTime? deployedAt = default(DateTime?), string key = default(string), string keyLike = default(string), string category = default(string), string categoryLike = default(string), int? version = default(int?), bool? latestVersion = default(bool?), string resourceName = default(string), string resourceNameLike = default(string), string decisionRequirementsDefinitionId = default(string), string decisionRequirementsDefinitionKey = default(string), bool? withoutDecisionRequirementsDefinition = default(bool?), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), bool? includeDecisionDefinitionsWithoutTenantId = default(bool?), string versionTag = default(string), string versionTagLike = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get List Count
        /// </summary>
        /// <remarks>
        /// Requests the number of decision definitions that fulfill the query criteria. Takes the same filtering parameters as the [Get Decision Definition](https://docs.camunda.org/manual/7.16/reference/rest/decision-definition/get-query/) method.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="decisionDefinitionId">Filter by decision definition id. (optional)</param>
        /// <param name="decisionDefinitionIdIn">Filter by decision definition ids. (optional)</param>
        /// <param name="name">Filter by decision definition name. (optional)</param>
        /// <param name="nameLike">Filter by decision definition names that the parameter is a substring of. (optional)</param>
        /// <param name="deploymentId">Filter by the deployment the id belongs to. (optional)</param>
        /// <param name="deployedAfter">Filter by the deploy time of the deployment the decision definition belongs to. Only selects decision definitions that have been deployed after (exclusive) a specific time. (optional)</param>
        /// <param name="deployedAt">Filter by the deploy time of the deployment the decision definition belongs to. Only selects decision definitions that have been deployed at a specific time (exact match). (optional)</param>
        /// <param name="key">Filter by decision definition key, i.e., the id in the DMN 1.0 XML. Exact match. (optional)</param>
        /// <param name="keyLike">Filter by decision definition keys that the parameter is a substring of. (optional)</param>
        /// <param name="category">Filter by decision definition category. Exact match. (optional)</param>
        /// <param name="categoryLike">Filter by decision definition categories that the parameter is a substring of. (optional)</param>
        /// <param name="version">Filter by decision definition version. (optional)</param>
        /// <param name="latestVersion">Only include those decision definitions that are latest versions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="resourceName">Filter by the name of the decision definition resource. Exact match. (optional)</param>
        /// <param name="resourceNameLike">Filter by names of those decision definition resources that the parameter is a substring of. (optional)</param>
        /// <param name="decisionRequirementsDefinitionId">Filter by the id of the decision requirements definition this decision definition belongs to. (optional)</param>
        /// <param name="decisionRequirementsDefinitionKey">Filter by the key of the decision requirements definition this decision definition belongs to. (optional)</param>
        /// <param name="withoutDecisionRequirementsDefinition">Only include decision definitions which does not belongs to any decision requirements definition. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of &#x60;Strings&#x60;. A decision definition must have one of the given tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include decision definitions which belong to no tenant. Value can effectively only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="includeDecisionDefinitionsWithoutTenantId">Include decision definitions which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="versionTag">Filter by the version tag. (optional)</param>
        /// <param name="versionTagLike">Filter by the version tags of those decision definition resources that the parameter is a substring of. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CountResultDto</returns>
        System.Threading.Tasks.Task<CountResultDto> GetDecisionDefinitionsCountAsync(string decisionDefinitionId = default(string), string decisionDefinitionIdIn = default(string), string name = default(string), string nameLike = default(string), string deploymentId = default(string), DateTime? deployedAfter = default(DateTime?), DateTime? deployedAt = default(DateTime?), string key = default(string), string keyLike = default(string), string category = default(string), string categoryLike = default(string), int? version = default(int?), bool? latestVersion = default(bool?), string resourceName = default(string), string resourceNameLike = default(string), string decisionRequirementsDefinitionId = default(string), string decisionRequirementsDefinitionKey = default(string), bool? withoutDecisionRequirementsDefinition = default(bool?), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), bool? includeDecisionDefinitionsWithoutTenantId = default(bool?), string versionTag = default(string), string versionTagLike = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get List Count
        /// </summary>
        /// <remarks>
        /// Requests the number of decision definitions that fulfill the query criteria. Takes the same filtering parameters as the [Get Decision Definition](https://docs.camunda.org/manual/7.16/reference/rest/decision-definition/get-query/) method.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="decisionDefinitionId">Filter by decision definition id. (optional)</param>
        /// <param name="decisionDefinitionIdIn">Filter by decision definition ids. (optional)</param>
        /// <param name="name">Filter by decision definition name. (optional)</param>
        /// <param name="nameLike">Filter by decision definition names that the parameter is a substring of. (optional)</param>
        /// <param name="deploymentId">Filter by the deployment the id belongs to. (optional)</param>
        /// <param name="deployedAfter">Filter by the deploy time of the deployment the decision definition belongs to. Only selects decision definitions that have been deployed after (exclusive) a specific time. (optional)</param>
        /// <param name="deployedAt">Filter by the deploy time of the deployment the decision definition belongs to. Only selects decision definitions that have been deployed at a specific time (exact match). (optional)</param>
        /// <param name="key">Filter by decision definition key, i.e., the id in the DMN 1.0 XML. Exact match. (optional)</param>
        /// <param name="keyLike">Filter by decision definition keys that the parameter is a substring of. (optional)</param>
        /// <param name="category">Filter by decision definition category. Exact match. (optional)</param>
        /// <param name="categoryLike">Filter by decision definition categories that the parameter is a substring of. (optional)</param>
        /// <param name="version">Filter by decision definition version. (optional)</param>
        /// <param name="latestVersion">Only include those decision definitions that are latest versions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="resourceName">Filter by the name of the decision definition resource. Exact match. (optional)</param>
        /// <param name="resourceNameLike">Filter by names of those decision definition resources that the parameter is a substring of. (optional)</param>
        /// <param name="decisionRequirementsDefinitionId">Filter by the id of the decision requirements definition this decision definition belongs to. (optional)</param>
        /// <param name="decisionRequirementsDefinitionKey">Filter by the key of the decision requirements definition this decision definition belongs to. (optional)</param>
        /// <param name="withoutDecisionRequirementsDefinition">Only include decision definitions which does not belongs to any decision requirements definition. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of &#x60;Strings&#x60;. A decision definition must have one of the given tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include decision definitions which belong to no tenant. Value can effectively only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="includeDecisionDefinitionsWithoutTenantId">Include decision definitions which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="versionTag">Filter by the version tag. (optional)</param>
        /// <param name="versionTagLike">Filter by the version tags of those decision definition resources that the parameter is a substring of. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CountResultDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<CountResultDto>> GetDecisionDefinitionsCountWithHttpInfoAsync(string decisionDefinitionId = default(string), string decisionDefinitionIdIn = default(string), string name = default(string), string nameLike = default(string), string deploymentId = default(string), DateTime? deployedAfter = default(DateTime?), DateTime? deployedAt = default(DateTime?), string key = default(string), string keyLike = default(string), string category = default(string), string categoryLike = default(string), int? version = default(int?), bool? latestVersion = default(bool?), string resourceName = default(string), string resourceNameLike = default(string), string decisionRequirementsDefinitionId = default(string), string decisionRequirementsDefinitionKey = default(string), bool? withoutDecisionRequirementsDefinition = default(bool?), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), bool? includeDecisionDefinitionsWithoutTenantId = default(bool?), string versionTag = default(string), string versionTagLike = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update History Time to Live
        /// </summary>
        /// <remarks>
        /// Updates history time to live for decision definition. The field is used within [History cleanup](https://docs.camunda.org/manual/7.16/user-guide/process-engine/history/#history-cleanup).
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the decision definition to change history time to live.</param>
        /// <param name="historyTimeToLiveDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateHistoryTimeToLiveByDecisionDefinitionIdAsync(string id, HistoryTimeToLiveDto historyTimeToLiveDto = default(HistoryTimeToLiveDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update History Time to Live
        /// </summary>
        /// <remarks>
        /// Updates history time to live for decision definition. The field is used within [History cleanup](https://docs.camunda.org/manual/7.16/user-guide/process-engine/history/#history-cleanup).
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the decision definition to change history time to live.</param>
        /// <param name="historyTimeToLiveDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateHistoryTimeToLiveByDecisionDefinitionIdWithHttpInfoAsync(string id, HistoryTimeToLiveDto historyTimeToLiveDto = default(HistoryTimeToLiveDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update History Time to Live By Key
        /// </summary>
        /// <remarks>
        /// Updates the latest version of the decision definition which belongs to no tenant. The field is used within [History cleanup](https://docs.camunda.org/manual/7.16/user-guide/process-engine/history/#history-cleanup).
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the decision definitions to change history time to live.</param>
        /// <param name="historyTimeToLiveDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateHistoryTimeToLiveByDecisionDefinitionKeyAsync(string key, HistoryTimeToLiveDto historyTimeToLiveDto = default(HistoryTimeToLiveDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update History Time to Live By Key
        /// </summary>
        /// <remarks>
        /// Updates the latest version of the decision definition which belongs to no tenant. The field is used within [History cleanup](https://docs.camunda.org/manual/7.16/user-guide/process-engine/history/#history-cleanup).
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the decision definitions to change history time to live.</param>
        /// <param name="historyTimeToLiveDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateHistoryTimeToLiveByDecisionDefinitionKeyWithHttpInfoAsync(string key, HistoryTimeToLiveDto historyTimeToLiveDto = default(HistoryTimeToLiveDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update History Time to Live By Key And Tenant
        /// </summary>
        /// <remarks>
        /// Updates the latest version of the decision definition for tenant. The field is used within [History cleanup](https://docs.camunda.org/manual/7.16/user-guide/process-engine/history/#history-cleanup).
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the decision definitions to change history time to live.</param>
        /// <param name="tenantId">The id of the tenant the decision definition belongs to.</param>
        /// <param name="historyTimeToLiveDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateHistoryTimeToLiveByDecisionDefinitionKeyAndTenantAsync(string key, string tenantId, HistoryTimeToLiveDto historyTimeToLiveDto = default(HistoryTimeToLiveDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update History Time to Live By Key And Tenant
        /// </summary>
        /// <remarks>
        /// Updates the latest version of the decision definition for tenant. The field is used within [History cleanup](https://docs.camunda.org/manual/7.16/user-guide/process-engine/history/#history-cleanup).
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the decision definitions to change history time to live.</param>
        /// <param name="tenantId">The id of the tenant the decision definition belongs to.</param>
        /// <param name="historyTimeToLiveDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateHistoryTimeToLiveByDecisionDefinitionKeyAndTenantWithHttpInfoAsync(string key, string tenantId, HistoryTimeToLiveDto historyTimeToLiveDto = default(HistoryTimeToLiveDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDecisionDefinitionApi : IDecisionDefinitionApiSync, IDecisionDefinitionApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DecisionDefinitionApi : IDisposable, IDecisionDefinitionApi
    {
        private Camunda.OpenApi.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DecisionDefinitionApi"/> class.
        /// **IMPORTANT** This will also create an istance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHander</see>.
        /// </summary>
        /// <returns></returns>
        public DecisionDefinitionApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DecisionDefinitionApi"/> class.
        /// **IMPORTANT** This will also create an istance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHander</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public DecisionDefinitionApi(string basePath)
        {
            this.Configuration = Camunda.OpenApi.Client.Client.Configuration.MergeConfigurations(
                Camunda.OpenApi.Client.Client.GlobalConfiguration.Instance,
                new Camunda.OpenApi.Client.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new Camunda.OpenApi.Client.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = Camunda.OpenApi.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DecisionDefinitionApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an istance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHander</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public DecisionDefinitionApi(Camunda.OpenApi.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Camunda.OpenApi.Client.Client.Configuration.MergeConfigurations(
                Camunda.OpenApi.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new Camunda.OpenApi.Client.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = Camunda.OpenApi.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DecisionDefinitionApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public DecisionDefinitionApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DecisionDefinitionApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public DecisionDefinitionApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = Camunda.OpenApi.Client.Client.Configuration.MergeConfigurations(
                Camunda.OpenApi.Client.Client.GlobalConfiguration.Instance,
                new Camunda.OpenApi.Client.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new Camunda.OpenApi.Client.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = Camunda.OpenApi.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DecisionDefinitionApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public DecisionDefinitionApi(HttpClient client, Camunda.OpenApi.Client.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = Camunda.OpenApi.Client.Client.Configuration.MergeConfigurations(
                Camunda.OpenApi.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new Camunda.OpenApi.Client.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = Camunda.OpenApi.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DecisionDefinitionApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public DecisionDefinitionApi(Camunda.OpenApi.Client.Client.ISynchronousClient client, Camunda.OpenApi.Client.Client.IAsynchronousClient asyncClient, Camunda.OpenApi.Client.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Camunda.OpenApi.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public Camunda.OpenApi.Client.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Camunda.OpenApi.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Camunda.OpenApi.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Camunda.OpenApi.Client.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Camunda.OpenApi.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Evaluate By Id Evaluates a given decision and returns the result. The input values of the decision have to be supplied in the request body.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the decision definition to be evaluated.</param>
        /// <param name="evaluateDecisionDto"> (optional)</param>
        /// <returns>List&lt;Dictionary&lt;string, VariableValueDto&gt;&gt;</returns>
        public List<Dictionary<string, VariableValueDto>> EvaluateDecisionById(string id, EvaluateDecisionDto evaluateDecisionDto = default(EvaluateDecisionDto))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<List<Dictionary<string, VariableValueDto>>> localVarResponse = EvaluateDecisionByIdWithHttpInfo(id, evaluateDecisionDto);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Evaluate By Id Evaluates a given decision and returns the result. The input values of the decision have to be supplied in the request body.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the decision definition to be evaluated.</param>
        /// <param name="evaluateDecisionDto"> (optional)</param>
        /// <returns>ApiResponse of List&lt;Dictionary&lt;string, VariableValueDto&gt;&gt;</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<List<Dictionary<string, VariableValueDto>>> EvaluateDecisionByIdWithHttpInfo(string id, EvaluateDecisionDto evaluateDecisionDto = default(EvaluateDecisionDto))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling DecisionDefinitionApi->EvaluateDecisionById");

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = evaluateDecisionDto;


            // make the HTTP request
            var localVarResponse = this.Client.Post<List<Dictionary<string, VariableValueDto>>>("/decision-definition/{id}/evaluate", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EvaluateDecisionById", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Evaluate By Id Evaluates a given decision and returns the result. The input values of the decision have to be supplied in the request body.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the decision definition to be evaluated.</param>
        /// <param name="evaluateDecisionDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Dictionary&lt;string, VariableValueDto&gt;&gt;</returns>
        public async System.Threading.Tasks.Task<List<Dictionary<string, VariableValueDto>>> EvaluateDecisionByIdAsync(string id, EvaluateDecisionDto evaluateDecisionDto = default(EvaluateDecisionDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<List<Dictionary<string, VariableValueDto>>> localVarResponse = await EvaluateDecisionByIdWithHttpInfoAsync(id, evaluateDecisionDto, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Evaluate By Id Evaluates a given decision and returns the result. The input values of the decision have to be supplied in the request body.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the decision definition to be evaluated.</param>
        /// <param name="evaluateDecisionDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Dictionary&lt;string, VariableValueDto&gt;&gt;)</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<List<Dictionary<string, VariableValueDto>>>> EvaluateDecisionByIdWithHttpInfoAsync(string id, EvaluateDecisionDto evaluateDecisionDto = default(EvaluateDecisionDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling DecisionDefinitionApi->EvaluateDecisionById");


            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = evaluateDecisionDto;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<List<Dictionary<string, VariableValueDto>>>("/decision-definition/{id}/evaluate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EvaluateDecisionById", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Evaluate By Key Evaluates the latest version of the decision definition which belongs to no tenant. The input values of the decision have to be supplied in the request body.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the decision definition (the latest version thereof) to be evaluated.</param>
        /// <param name="evaluateDecisionDto"> (optional)</param>
        /// <returns>List&lt;Dictionary&lt;string, VariableValueDto&gt;&gt;</returns>
        public List<Dictionary<string, VariableValueDto>> EvaluateDecisionByKey(string key, EvaluateDecisionDto evaluateDecisionDto = default(EvaluateDecisionDto))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<List<Dictionary<string, VariableValueDto>>> localVarResponse = EvaluateDecisionByKeyWithHttpInfo(key, evaluateDecisionDto);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Evaluate By Key Evaluates the latest version of the decision definition which belongs to no tenant. The input values of the decision have to be supplied in the request body.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the decision definition (the latest version thereof) to be evaluated.</param>
        /// <param name="evaluateDecisionDto"> (optional)</param>
        /// <returns>ApiResponse of List&lt;Dictionary&lt;string, VariableValueDto&gt;&gt;</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<List<Dictionary<string, VariableValueDto>>> EvaluateDecisionByKeyWithHttpInfo(string key, EvaluateDecisionDto evaluateDecisionDto = default(EvaluateDecisionDto))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'key' when calling DecisionDefinitionApi->EvaluateDecisionByKey");

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(key)); // path parameter
            localVarRequestOptions.Data = evaluateDecisionDto;


            // make the HTTP request
            var localVarResponse = this.Client.Post<List<Dictionary<string, VariableValueDto>>>("/decision-definition/key/{key}/evaluate", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EvaluateDecisionByKey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Evaluate By Key Evaluates the latest version of the decision definition which belongs to no tenant. The input values of the decision have to be supplied in the request body.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the decision definition (the latest version thereof) to be evaluated.</param>
        /// <param name="evaluateDecisionDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Dictionary&lt;string, VariableValueDto&gt;&gt;</returns>
        public async System.Threading.Tasks.Task<List<Dictionary<string, VariableValueDto>>> EvaluateDecisionByKeyAsync(string key, EvaluateDecisionDto evaluateDecisionDto = default(EvaluateDecisionDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<List<Dictionary<string, VariableValueDto>>> localVarResponse = await EvaluateDecisionByKeyWithHttpInfoAsync(key, evaluateDecisionDto, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Evaluate By Key Evaluates the latest version of the decision definition which belongs to no tenant. The input values of the decision have to be supplied in the request body.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the decision definition (the latest version thereof) to be evaluated.</param>
        /// <param name="evaluateDecisionDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Dictionary&lt;string, VariableValueDto&gt;&gt;)</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<List<Dictionary<string, VariableValueDto>>>> EvaluateDecisionByKeyWithHttpInfoAsync(string key, EvaluateDecisionDto evaluateDecisionDto = default(EvaluateDecisionDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'key' when calling DecisionDefinitionApi->EvaluateDecisionByKey");


            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(key)); // path parameter
            localVarRequestOptions.Data = evaluateDecisionDto;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<List<Dictionary<string, VariableValueDto>>>("/decision-definition/key/{key}/evaluate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EvaluateDecisionByKey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Evaluate By Key And Tenant Evaluates the latest version of the decision definition for tenant. The input values of the decision have to be supplied in the request body.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the decision definition (the latest version thereof) to be evaluated.</param>
        /// <param name="tenantId">The id of the tenant the decision definition belongs to.</param>
        /// <param name="evaluateDecisionDto"> (optional)</param>
        /// <returns>List&lt;Dictionary&lt;string, VariableValueDto&gt;&gt;</returns>
        public List<Dictionary<string, VariableValueDto>> EvaluateDecisionByKeyAndTenant(string key, string tenantId, EvaluateDecisionDto evaluateDecisionDto = default(EvaluateDecisionDto))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<List<Dictionary<string, VariableValueDto>>> localVarResponse = EvaluateDecisionByKeyAndTenantWithHttpInfo(key, tenantId, evaluateDecisionDto);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Evaluate By Key And Tenant Evaluates the latest version of the decision definition for tenant. The input values of the decision have to be supplied in the request body.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the decision definition (the latest version thereof) to be evaluated.</param>
        /// <param name="tenantId">The id of the tenant the decision definition belongs to.</param>
        /// <param name="evaluateDecisionDto"> (optional)</param>
        /// <returns>ApiResponse of List&lt;Dictionary&lt;string, VariableValueDto&gt;&gt;</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<List<Dictionary<string, VariableValueDto>>> EvaluateDecisionByKeyAndTenantWithHttpInfo(string key, string tenantId, EvaluateDecisionDto evaluateDecisionDto = default(EvaluateDecisionDto))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'key' when calling DecisionDefinitionApi->EvaluateDecisionByKeyAndTenant");

            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'tenantId' when calling DecisionDefinitionApi->EvaluateDecisionByKeyAndTenant");

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(key)); // path parameter
            localVarRequestOptions.PathParameters.Add("tenant-id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.Data = evaluateDecisionDto;


            // make the HTTP request
            var localVarResponse = this.Client.Post<List<Dictionary<string, VariableValueDto>>>("/decision-definition/key/{key}/tenant-id/{tenant-id}/evaluate", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EvaluateDecisionByKeyAndTenant", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Evaluate By Key And Tenant Evaluates the latest version of the decision definition for tenant. The input values of the decision have to be supplied in the request body.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the decision definition (the latest version thereof) to be evaluated.</param>
        /// <param name="tenantId">The id of the tenant the decision definition belongs to.</param>
        /// <param name="evaluateDecisionDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Dictionary&lt;string, VariableValueDto&gt;&gt;</returns>
        public async System.Threading.Tasks.Task<List<Dictionary<string, VariableValueDto>>> EvaluateDecisionByKeyAndTenantAsync(string key, string tenantId, EvaluateDecisionDto evaluateDecisionDto = default(EvaluateDecisionDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<List<Dictionary<string, VariableValueDto>>> localVarResponse = await EvaluateDecisionByKeyAndTenantWithHttpInfoAsync(key, tenantId, evaluateDecisionDto, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Evaluate By Key And Tenant Evaluates the latest version of the decision definition for tenant. The input values of the decision have to be supplied in the request body.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the decision definition (the latest version thereof) to be evaluated.</param>
        /// <param name="tenantId">The id of the tenant the decision definition belongs to.</param>
        /// <param name="evaluateDecisionDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Dictionary&lt;string, VariableValueDto&gt;&gt;)</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<List<Dictionary<string, VariableValueDto>>>> EvaluateDecisionByKeyAndTenantWithHttpInfoAsync(string key, string tenantId, EvaluateDecisionDto evaluateDecisionDto = default(EvaluateDecisionDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'key' when calling DecisionDefinitionApi->EvaluateDecisionByKeyAndTenant");

            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'tenantId' when calling DecisionDefinitionApi->EvaluateDecisionByKeyAndTenant");


            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(key)); // path parameter
            localVarRequestOptions.PathParameters.Add("tenant-id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.Data = evaluateDecisionDto;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<List<Dictionary<string, VariableValueDto>>>("/decision-definition/key/{key}/tenant-id/{tenant-id}/evaluate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EvaluateDecisionByKeyAndTenant", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Decision Definition By Id Retrieves a decision definition by id, according to the &#x60;DecisionDefinition&#x60; interface in the engine.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the decision definition to be retrieved.</param>
        /// <returns>DecisionDefinitionDto</returns>
        public DecisionDefinitionDto GetDecisionDefinitionById(string id)
        {
            Camunda.OpenApi.Client.Client.ApiResponse<DecisionDefinitionDto> localVarResponse = GetDecisionDefinitionByIdWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Decision Definition By Id Retrieves a decision definition by id, according to the &#x60;DecisionDefinition&#x60; interface in the engine.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the decision definition to be retrieved.</param>
        /// <returns>ApiResponse of DecisionDefinitionDto</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<DecisionDefinitionDto> GetDecisionDefinitionByIdWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling DecisionDefinitionApi->GetDecisionDefinitionById");

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<DecisionDefinitionDto>("/decision-definition/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDecisionDefinitionById", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Decision Definition By Id Retrieves a decision definition by id, according to the &#x60;DecisionDefinition&#x60; interface in the engine.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the decision definition to be retrieved.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DecisionDefinitionDto</returns>
        public async System.Threading.Tasks.Task<DecisionDefinitionDto> GetDecisionDefinitionByIdAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<DecisionDefinitionDto> localVarResponse = await GetDecisionDefinitionByIdWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Decision Definition By Id Retrieves a decision definition by id, according to the &#x60;DecisionDefinition&#x60; interface in the engine.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the decision definition to be retrieved.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DecisionDefinitionDto)</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<DecisionDefinitionDto>> GetDecisionDefinitionByIdWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling DecisionDefinitionApi->GetDecisionDefinitionById");


            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<DecisionDefinitionDto>("/decision-definition/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDecisionDefinitionById", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Decision Definition By Key Retrieves the latest version of the decision definition which belongs to no tenant.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the decision definition (the latest version thereof) to be retrieved.</param>
        /// <returns>DecisionDefinitionDto</returns>
        public DecisionDefinitionDto GetDecisionDefinitionByKey(string key)
        {
            Camunda.OpenApi.Client.Client.ApiResponse<DecisionDefinitionDto> localVarResponse = GetDecisionDefinitionByKeyWithHttpInfo(key);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Decision Definition By Key Retrieves the latest version of the decision definition which belongs to no tenant.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the decision definition (the latest version thereof) to be retrieved.</param>
        /// <returns>ApiResponse of DecisionDefinitionDto</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<DecisionDefinitionDto> GetDecisionDefinitionByKeyWithHttpInfo(string key)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'key' when calling DecisionDefinitionApi->GetDecisionDefinitionByKey");

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(key)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<DecisionDefinitionDto>("/decision-definition/key/{key}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDecisionDefinitionByKey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Decision Definition By Key Retrieves the latest version of the decision definition which belongs to no tenant.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the decision definition (the latest version thereof) to be retrieved.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DecisionDefinitionDto</returns>
        public async System.Threading.Tasks.Task<DecisionDefinitionDto> GetDecisionDefinitionByKeyAsync(string key, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<DecisionDefinitionDto> localVarResponse = await GetDecisionDefinitionByKeyWithHttpInfoAsync(key, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Decision Definition By Key Retrieves the latest version of the decision definition which belongs to no tenant.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the decision definition (the latest version thereof) to be retrieved.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DecisionDefinitionDto)</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<DecisionDefinitionDto>> GetDecisionDefinitionByKeyWithHttpInfoAsync(string key, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'key' when calling DecisionDefinitionApi->GetDecisionDefinitionByKey");


            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(key)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<DecisionDefinitionDto>("/decision-definition/key/{key}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDecisionDefinitionByKey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Decision Definition By Key And Tenant Id Retrieves the latest version of the decision definition for tenant
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the decision definition (the latest version thereof) to be retrieved.</param>
        /// <param name="tenantId">The id of the tenant the decision definition belongs to.</param>
        /// <returns>DecisionDefinitionDto</returns>
        public DecisionDefinitionDto GetDecisionDefinitionByKeyAndTenantId(string key, string tenantId)
        {
            Camunda.OpenApi.Client.Client.ApiResponse<DecisionDefinitionDto> localVarResponse = GetDecisionDefinitionByKeyAndTenantIdWithHttpInfo(key, tenantId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Decision Definition By Key And Tenant Id Retrieves the latest version of the decision definition for tenant
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the decision definition (the latest version thereof) to be retrieved.</param>
        /// <param name="tenantId">The id of the tenant the decision definition belongs to.</param>
        /// <returns>ApiResponse of DecisionDefinitionDto</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<DecisionDefinitionDto> GetDecisionDefinitionByKeyAndTenantIdWithHttpInfo(string key, string tenantId)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'key' when calling DecisionDefinitionApi->GetDecisionDefinitionByKeyAndTenantId");

            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'tenantId' when calling DecisionDefinitionApi->GetDecisionDefinitionByKeyAndTenantId");

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(key)); // path parameter
            localVarRequestOptions.PathParameters.Add("tenant-id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(tenantId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<DecisionDefinitionDto>("/decision-definition/key/{key}/tenant-id/{tenant-id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDecisionDefinitionByKeyAndTenantId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Decision Definition By Key And Tenant Id Retrieves the latest version of the decision definition for tenant
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the decision definition (the latest version thereof) to be retrieved.</param>
        /// <param name="tenantId">The id of the tenant the decision definition belongs to.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DecisionDefinitionDto</returns>
        public async System.Threading.Tasks.Task<DecisionDefinitionDto> GetDecisionDefinitionByKeyAndTenantIdAsync(string key, string tenantId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<DecisionDefinitionDto> localVarResponse = await GetDecisionDefinitionByKeyAndTenantIdWithHttpInfoAsync(key, tenantId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Decision Definition By Key And Tenant Id Retrieves the latest version of the decision definition for tenant
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the decision definition (the latest version thereof) to be retrieved.</param>
        /// <param name="tenantId">The id of the tenant the decision definition belongs to.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DecisionDefinitionDto)</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<DecisionDefinitionDto>> GetDecisionDefinitionByKeyAndTenantIdWithHttpInfoAsync(string key, string tenantId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'key' when calling DecisionDefinitionApi->GetDecisionDefinitionByKeyAndTenantId");

            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'tenantId' when calling DecisionDefinitionApi->GetDecisionDefinitionByKeyAndTenantId");


            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(key)); // path parameter
            localVarRequestOptions.PathParameters.Add("tenant-id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(tenantId)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<DecisionDefinitionDto>("/decision-definition/key/{key}/tenant-id/{tenant-id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDecisionDefinitionByKeyAndTenantId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Diagram Retrieves the diagram of a decision definition.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition.</param>
        /// <returns>FileParameter</returns>
        public FileParameter GetDecisionDefinitionDiagram(string id)
        {
            Camunda.OpenApi.Client.Client.ApiResponse<FileParameter> localVarResponse = GetDecisionDefinitionDiagramWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Diagram Retrieves the diagram of a decision definition.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition.</param>
        /// <returns>ApiResponse of FileParameter</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<FileParameter> GetDecisionDefinitionDiagramWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling DecisionDefinitionApi->GetDecisionDefinitionDiagram");

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/octet-stream",
                "*/*",
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<FileParameter>("/decision-definition/{id}/diagram", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDecisionDefinitionDiagram", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Diagram Retrieves the diagram of a decision definition.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FileParameter</returns>
        public async System.Threading.Tasks.Task<FileParameter> GetDecisionDefinitionDiagramAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<FileParameter> localVarResponse = await GetDecisionDefinitionDiagramWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Diagram Retrieves the diagram of a decision definition.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process definition.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FileParameter)</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<FileParameter>> GetDecisionDefinitionDiagramWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling DecisionDefinitionApi->GetDecisionDefinitionDiagram");


            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/octet-stream",
                "*/*",
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<FileParameter>("/decision-definition/{id}/diagram", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDecisionDefinitionDiagram", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Diagram By Key Returns the diagram for the latest version of the decision definition which belongs to no tenant
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the decision definition (the latest version thereof) to be retrieved.</param>
        /// <returns>FileParameter</returns>
        public FileParameter GetDecisionDefinitionDiagramByKey(string key)
        {
            Camunda.OpenApi.Client.Client.ApiResponse<FileParameter> localVarResponse = GetDecisionDefinitionDiagramByKeyWithHttpInfo(key);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Diagram By Key Returns the diagram for the latest version of the decision definition which belongs to no tenant
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the decision definition (the latest version thereof) to be retrieved.</param>
        /// <returns>ApiResponse of FileParameter</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<FileParameter> GetDecisionDefinitionDiagramByKeyWithHttpInfo(string key)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'key' when calling DecisionDefinitionApi->GetDecisionDefinitionDiagramByKey");

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/octet-stream",
                "*/*",
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(key)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<FileParameter>("/decision-definition/key/{key}/diagram", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDecisionDefinitionDiagramByKey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Diagram By Key Returns the diagram for the latest version of the decision definition which belongs to no tenant
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the decision definition (the latest version thereof) to be retrieved.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FileParameter</returns>
        public async System.Threading.Tasks.Task<FileParameter> GetDecisionDefinitionDiagramByKeyAsync(string key, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<FileParameter> localVarResponse = await GetDecisionDefinitionDiagramByKeyWithHttpInfoAsync(key, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Diagram By Key Returns the diagram for the latest version of the decision definition which belongs to no tenant
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the decision definition (the latest version thereof) to be retrieved.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FileParameter)</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<FileParameter>> GetDecisionDefinitionDiagramByKeyWithHttpInfoAsync(string key, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'key' when calling DecisionDefinitionApi->GetDecisionDefinitionDiagramByKey");


            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/octet-stream",
                "*/*",
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(key)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<FileParameter>("/decision-definition/key/{key}/diagram", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDecisionDefinitionDiagramByKey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Diagram By Key And Tenant Returns the XML of the latest version of the decision definition for tenant.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the decision definition (the latest version thereof) to be retrieved.</param>
        /// <param name="tenantId">The id of the tenant the decision definition belongs to.</param>
        /// <returns>FileParameter</returns>
        public FileParameter GetDecisionDefinitionDiagramByKeyAndTenant(string key, string tenantId)
        {
            Camunda.OpenApi.Client.Client.ApiResponse<FileParameter> localVarResponse = GetDecisionDefinitionDiagramByKeyAndTenantWithHttpInfo(key, tenantId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Diagram By Key And Tenant Returns the XML of the latest version of the decision definition for tenant.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the decision definition (the latest version thereof) to be retrieved.</param>
        /// <param name="tenantId">The id of the tenant the decision definition belongs to.</param>
        /// <returns>ApiResponse of FileParameter</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<FileParameter> GetDecisionDefinitionDiagramByKeyAndTenantWithHttpInfo(string key, string tenantId)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'key' when calling DecisionDefinitionApi->GetDecisionDefinitionDiagramByKeyAndTenant");

            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'tenantId' when calling DecisionDefinitionApi->GetDecisionDefinitionDiagramByKeyAndTenant");

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/octet-stream",
                "*/*",
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(key)); // path parameter
            localVarRequestOptions.PathParameters.Add("tenant-id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(tenantId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<FileParameter>("/decision-definition/key/{key}/tenant-id/{tenant-id}/diagram", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDecisionDefinitionDiagramByKeyAndTenant", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Diagram By Key And Tenant Returns the XML of the latest version of the decision definition for tenant.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the decision definition (the latest version thereof) to be retrieved.</param>
        /// <param name="tenantId">The id of the tenant the decision definition belongs to.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FileParameter</returns>
        public async System.Threading.Tasks.Task<FileParameter> GetDecisionDefinitionDiagramByKeyAndTenantAsync(string key, string tenantId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<FileParameter> localVarResponse = await GetDecisionDefinitionDiagramByKeyAndTenantWithHttpInfoAsync(key, tenantId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Diagram By Key And Tenant Returns the XML of the latest version of the decision definition for tenant.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the decision definition (the latest version thereof) to be retrieved.</param>
        /// <param name="tenantId">The id of the tenant the decision definition belongs to.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FileParameter)</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<FileParameter>> GetDecisionDefinitionDiagramByKeyAndTenantWithHttpInfoAsync(string key, string tenantId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'key' when calling DecisionDefinitionApi->GetDecisionDefinitionDiagramByKeyAndTenant");

            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'tenantId' when calling DecisionDefinitionApi->GetDecisionDefinitionDiagramByKeyAndTenant");


            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/octet-stream",
                "*/*",
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(key)); // path parameter
            localVarRequestOptions.PathParameters.Add("tenant-id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(tenantId)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<FileParameter>("/decision-definition/key/{key}/tenant-id/{tenant-id}/diagram", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDecisionDefinitionDiagramByKeyAndTenant", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get XML By Id Retrieves the DMN XML of a decision definition.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the decision definition.</param>
        /// <returns>DecisionDefinitionDiagramDto</returns>
        public DecisionDefinitionDiagramDto GetDecisionDefinitionDmnXmlById(string id)
        {
            Camunda.OpenApi.Client.Client.ApiResponse<DecisionDefinitionDiagramDto> localVarResponse = GetDecisionDefinitionDmnXmlByIdWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get XML By Id Retrieves the DMN XML of a decision definition.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the decision definition.</param>
        /// <returns>ApiResponse of DecisionDefinitionDiagramDto</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<DecisionDefinitionDiagramDto> GetDecisionDefinitionDmnXmlByIdWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling DecisionDefinitionApi->GetDecisionDefinitionDmnXmlById");

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<DecisionDefinitionDiagramDto>("/decision-definition/{id}/xml", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDecisionDefinitionDmnXmlById", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get XML By Id Retrieves the DMN XML of a decision definition.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the decision definition.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DecisionDefinitionDiagramDto</returns>
        public async System.Threading.Tasks.Task<DecisionDefinitionDiagramDto> GetDecisionDefinitionDmnXmlByIdAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<DecisionDefinitionDiagramDto> localVarResponse = await GetDecisionDefinitionDmnXmlByIdWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get XML By Id Retrieves the DMN XML of a decision definition.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the decision definition.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DecisionDefinitionDiagramDto)</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<DecisionDefinitionDiagramDto>> GetDecisionDefinitionDmnXmlByIdWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling DecisionDefinitionApi->GetDecisionDefinitionDmnXmlById");


            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<DecisionDefinitionDiagramDto>("/decision-definition/{id}/xml", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDecisionDefinitionDmnXmlById", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get XML By Key Retrieves the XML for the latest version of the decision definition which belongs to no tenant.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the decision definition (the latest version thereof).</param>
        /// <returns>DecisionDefinitionDiagramDto</returns>
        public DecisionDefinitionDiagramDto GetDecisionDefinitionDmnXmlByKey(string key)
        {
            Camunda.OpenApi.Client.Client.ApiResponse<DecisionDefinitionDiagramDto> localVarResponse = GetDecisionDefinitionDmnXmlByKeyWithHttpInfo(key);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get XML By Key Retrieves the XML for the latest version of the decision definition which belongs to no tenant.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the decision definition (the latest version thereof).</param>
        /// <returns>ApiResponse of DecisionDefinitionDiagramDto</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<DecisionDefinitionDiagramDto> GetDecisionDefinitionDmnXmlByKeyWithHttpInfo(string key)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'key' when calling DecisionDefinitionApi->GetDecisionDefinitionDmnXmlByKey");

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(key)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<DecisionDefinitionDiagramDto>("/decision-definition/key/{key}/xml", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDecisionDefinitionDmnXmlByKey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get XML By Key Retrieves the XML for the latest version of the decision definition which belongs to no tenant.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the decision definition (the latest version thereof).</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DecisionDefinitionDiagramDto</returns>
        public async System.Threading.Tasks.Task<DecisionDefinitionDiagramDto> GetDecisionDefinitionDmnXmlByKeyAsync(string key, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<DecisionDefinitionDiagramDto> localVarResponse = await GetDecisionDefinitionDmnXmlByKeyWithHttpInfoAsync(key, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get XML By Key Retrieves the XML for the latest version of the decision definition which belongs to no tenant.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the decision definition (the latest version thereof).</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DecisionDefinitionDiagramDto)</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<DecisionDefinitionDiagramDto>> GetDecisionDefinitionDmnXmlByKeyWithHttpInfoAsync(string key, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'key' when calling DecisionDefinitionApi->GetDecisionDefinitionDmnXmlByKey");


            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(key)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<DecisionDefinitionDiagramDto>("/decision-definition/key/{key}/xml", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDecisionDefinitionDmnXmlByKey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get XML By Key and Tenant Retrieves the XML of the latest version of the decision definition for tenant
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the decision definition (the latest version thereof).</param>
        /// <param name="tenantId">The id of the tenant the decision definition belongs to.</param>
        /// <returns>DecisionDefinitionDiagramDto</returns>
        public DecisionDefinitionDiagramDto GetDecisionDefinitionDmnXmlByKeyAndTenant(string key, string tenantId)
        {
            Camunda.OpenApi.Client.Client.ApiResponse<DecisionDefinitionDiagramDto> localVarResponse = GetDecisionDefinitionDmnXmlByKeyAndTenantWithHttpInfo(key, tenantId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get XML By Key and Tenant Retrieves the XML of the latest version of the decision definition for tenant
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the decision definition (the latest version thereof).</param>
        /// <param name="tenantId">The id of the tenant the decision definition belongs to.</param>
        /// <returns>ApiResponse of DecisionDefinitionDiagramDto</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<DecisionDefinitionDiagramDto> GetDecisionDefinitionDmnXmlByKeyAndTenantWithHttpInfo(string key, string tenantId)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'key' when calling DecisionDefinitionApi->GetDecisionDefinitionDmnXmlByKeyAndTenant");

            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'tenantId' when calling DecisionDefinitionApi->GetDecisionDefinitionDmnXmlByKeyAndTenant");

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(key)); // path parameter
            localVarRequestOptions.PathParameters.Add("tenant-id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(tenantId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<DecisionDefinitionDiagramDto>("/decision-definition/key/{key}/tenant-id/{tenant-id}/xml", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDecisionDefinitionDmnXmlByKeyAndTenant", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get XML By Key and Tenant Retrieves the XML of the latest version of the decision definition for tenant
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the decision definition (the latest version thereof).</param>
        /// <param name="tenantId">The id of the tenant the decision definition belongs to.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DecisionDefinitionDiagramDto</returns>
        public async System.Threading.Tasks.Task<DecisionDefinitionDiagramDto> GetDecisionDefinitionDmnXmlByKeyAndTenantAsync(string key, string tenantId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<DecisionDefinitionDiagramDto> localVarResponse = await GetDecisionDefinitionDmnXmlByKeyAndTenantWithHttpInfoAsync(key, tenantId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get XML By Key and Tenant Retrieves the XML of the latest version of the decision definition for tenant
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the decision definition (the latest version thereof).</param>
        /// <param name="tenantId">The id of the tenant the decision definition belongs to.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DecisionDefinitionDiagramDto)</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<DecisionDefinitionDiagramDto>> GetDecisionDefinitionDmnXmlByKeyAndTenantWithHttpInfoAsync(string key, string tenantId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'key' when calling DecisionDefinitionApi->GetDecisionDefinitionDmnXmlByKeyAndTenant");

            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'tenantId' when calling DecisionDefinitionApi->GetDecisionDefinitionDmnXmlByKeyAndTenant");


            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(key)); // path parameter
            localVarRequestOptions.PathParameters.Add("tenant-id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(tenantId)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<DecisionDefinitionDiagramDto>("/decision-definition/key/{key}/tenant-id/{tenant-id}/xml", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDecisionDefinitionDmnXmlByKeyAndTenant", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get List Queries for decision definitions that fulfill given parameters. Parameters may be the properties of decision definitions, such as the name, key or version. The size of the result set can be retrieved by using the [Get Decision Definition Count](https://docs.camunda.org/manual/7.16/reference/rest/decision-definition/get-query-count/) method.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="decisionDefinitionId">Filter by decision definition id. (optional)</param>
        /// <param name="decisionDefinitionIdIn">Filter by decision definition ids. (optional)</param>
        /// <param name="name">Filter by decision definition name. (optional)</param>
        /// <param name="nameLike">Filter by decision definition names that the parameter is a substring of. (optional)</param>
        /// <param name="deploymentId">Filter by the deployment the id belongs to. (optional)</param>
        /// <param name="deployedAfter">Filter by the deploy time of the deployment the decision definition belongs to. Only selects decision definitions that have been deployed after (exclusive) a specific time. (optional)</param>
        /// <param name="deployedAt">Filter by the deploy time of the deployment the decision definition belongs to. Only selects decision definitions that have been deployed at a specific time (exact match). (optional)</param>
        /// <param name="key">Filter by decision definition key, i.e., the id in the DMN 1.0 XML. Exact match. (optional)</param>
        /// <param name="keyLike">Filter by decision definition keys that the parameter is a substring of. (optional)</param>
        /// <param name="category">Filter by decision definition category. Exact match. (optional)</param>
        /// <param name="categoryLike">Filter by decision definition categories that the parameter is a substring of. (optional)</param>
        /// <param name="version">Filter by decision definition version. (optional)</param>
        /// <param name="latestVersion">Only include those decision definitions that are latest versions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="resourceName">Filter by the name of the decision definition resource. Exact match. (optional)</param>
        /// <param name="resourceNameLike">Filter by names of those decision definition resources that the parameter is a substring of. (optional)</param>
        /// <param name="decisionRequirementsDefinitionId">Filter by the id of the decision requirements definition this decision definition belongs to. (optional)</param>
        /// <param name="decisionRequirementsDefinitionKey">Filter by the key of the decision requirements definition this decision definition belongs to. (optional)</param>
        /// <param name="withoutDecisionRequirementsDefinition">Only include decision definitions which does not belongs to any decision requirements definition. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of &#x60;Strings&#x60;. A decision definition must have one of the given tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include decision definitions which belong to no tenant. Value can effectively only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="includeDecisionDefinitionsWithoutTenantId">Include decision definitions which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="versionTag">Filter by the version tag. (optional)</param>
        /// <param name="versionTagLike">Filter by the version tags of those decision definition resources that the parameter is a substring of. (optional)</param>
        /// <returns>List&lt;DecisionDefinitionDto&gt;</returns>
        public List<DecisionDefinitionDto> GetDecisionDefinitions(string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?), string decisionDefinitionId = default(string), string decisionDefinitionIdIn = default(string), string name = default(string), string nameLike = default(string), string deploymentId = default(string), DateTime? deployedAfter = default(DateTime?), DateTime? deployedAt = default(DateTime?), string key = default(string), string keyLike = default(string), string category = default(string), string categoryLike = default(string), int? version = default(int?), bool? latestVersion = default(bool?), string resourceName = default(string), string resourceNameLike = default(string), string decisionRequirementsDefinitionId = default(string), string decisionRequirementsDefinitionKey = default(string), bool? withoutDecisionRequirementsDefinition = default(bool?), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), bool? includeDecisionDefinitionsWithoutTenantId = default(bool?), string versionTag = default(string), string versionTagLike = default(string))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<List<DecisionDefinitionDto>> localVarResponse = GetDecisionDefinitionsWithHttpInfo(sortBy, sortOrder, firstResult, maxResults, decisionDefinitionId, decisionDefinitionIdIn, name, nameLike, deploymentId, deployedAfter, deployedAt, key, keyLike, category, categoryLike, version, latestVersion, resourceName, resourceNameLike, decisionRequirementsDefinitionId, decisionRequirementsDefinitionKey, withoutDecisionRequirementsDefinition, tenantIdIn, withoutTenantId, includeDecisionDefinitionsWithoutTenantId, versionTag, versionTagLike);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get List Queries for decision definitions that fulfill given parameters. Parameters may be the properties of decision definitions, such as the name, key or version. The size of the result set can be retrieved by using the [Get Decision Definition Count](https://docs.camunda.org/manual/7.16/reference/rest/decision-definition/get-query-count/) method.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="decisionDefinitionId">Filter by decision definition id. (optional)</param>
        /// <param name="decisionDefinitionIdIn">Filter by decision definition ids. (optional)</param>
        /// <param name="name">Filter by decision definition name. (optional)</param>
        /// <param name="nameLike">Filter by decision definition names that the parameter is a substring of. (optional)</param>
        /// <param name="deploymentId">Filter by the deployment the id belongs to. (optional)</param>
        /// <param name="deployedAfter">Filter by the deploy time of the deployment the decision definition belongs to. Only selects decision definitions that have been deployed after (exclusive) a specific time. (optional)</param>
        /// <param name="deployedAt">Filter by the deploy time of the deployment the decision definition belongs to. Only selects decision definitions that have been deployed at a specific time (exact match). (optional)</param>
        /// <param name="key">Filter by decision definition key, i.e., the id in the DMN 1.0 XML. Exact match. (optional)</param>
        /// <param name="keyLike">Filter by decision definition keys that the parameter is a substring of. (optional)</param>
        /// <param name="category">Filter by decision definition category. Exact match. (optional)</param>
        /// <param name="categoryLike">Filter by decision definition categories that the parameter is a substring of. (optional)</param>
        /// <param name="version">Filter by decision definition version. (optional)</param>
        /// <param name="latestVersion">Only include those decision definitions that are latest versions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="resourceName">Filter by the name of the decision definition resource. Exact match. (optional)</param>
        /// <param name="resourceNameLike">Filter by names of those decision definition resources that the parameter is a substring of. (optional)</param>
        /// <param name="decisionRequirementsDefinitionId">Filter by the id of the decision requirements definition this decision definition belongs to. (optional)</param>
        /// <param name="decisionRequirementsDefinitionKey">Filter by the key of the decision requirements definition this decision definition belongs to. (optional)</param>
        /// <param name="withoutDecisionRequirementsDefinition">Only include decision definitions which does not belongs to any decision requirements definition. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of &#x60;Strings&#x60;. A decision definition must have one of the given tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include decision definitions which belong to no tenant. Value can effectively only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="includeDecisionDefinitionsWithoutTenantId">Include decision definitions which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="versionTag">Filter by the version tag. (optional)</param>
        /// <param name="versionTagLike">Filter by the version tags of those decision definition resources that the parameter is a substring of. (optional)</param>
        /// <returns>ApiResponse of List&lt;DecisionDefinitionDto&gt;</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<List<DecisionDefinitionDto>> GetDecisionDefinitionsWithHttpInfo(string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?), string decisionDefinitionId = default(string), string decisionDefinitionIdIn = default(string), string name = default(string), string nameLike = default(string), string deploymentId = default(string), DateTime? deployedAfter = default(DateTime?), DateTime? deployedAt = default(DateTime?), string key = default(string), string keyLike = default(string), string category = default(string), string categoryLike = default(string), int? version = default(int?), bool? latestVersion = default(bool?), string resourceName = default(string), string resourceNameLike = default(string), string decisionRequirementsDefinitionId = default(string), string decisionRequirementsDefinitionKey = default(string), bool? withoutDecisionRequirementsDefinition = default(bool?), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), bool? includeDecisionDefinitionsWithoutTenantId = default(bool?), string versionTag = default(string), string versionTagLike = default(string))
        {
            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "sortBy", sortBy));
            }
            if (sortOrder != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "sortOrder", sortOrder));
            }
            if (firstResult != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "firstResult", firstResult));
            }
            if (maxResults != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "maxResults", maxResults));
            }
            if (decisionDefinitionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "decisionDefinitionId", decisionDefinitionId));
            }
            if (decisionDefinitionIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "decisionDefinitionIdIn", decisionDefinitionIdIn));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (nameLike != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "nameLike", nameLike));
            }
            if (deploymentId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "deploymentId", deploymentId));
            }
            if (deployedAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "deployedAfter", deployedAfter));
            }
            if (deployedAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "deployedAt", deployedAt));
            }
            if (key != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "key", key));
            }
            if (keyLike != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "keyLike", keyLike));
            }
            if (category != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "category", category));
            }
            if (categoryLike != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "categoryLike", categoryLike));
            }
            if (version != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "version", version));
            }
            if (latestVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "latestVersion", latestVersion));
            }
            if (resourceName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "resourceName", resourceName));
            }
            if (resourceNameLike != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "resourceNameLike", resourceNameLike));
            }
            if (decisionRequirementsDefinitionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "decisionRequirementsDefinitionId", decisionRequirementsDefinitionId));
            }
            if (decisionRequirementsDefinitionKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "decisionRequirementsDefinitionKey", decisionRequirementsDefinitionKey));
            }
            if (withoutDecisionRequirementsDefinition != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "withoutDecisionRequirementsDefinition", withoutDecisionRequirementsDefinition));
            }
            if (tenantIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "tenantIdIn", tenantIdIn));
            }
            if (withoutTenantId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "withoutTenantId", withoutTenantId));
            }
            if (includeDecisionDefinitionsWithoutTenantId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "includeDecisionDefinitionsWithoutTenantId", includeDecisionDefinitionsWithoutTenantId));
            }
            if (versionTag != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "versionTag", versionTag));
            }
            if (versionTagLike != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "versionTagLike", versionTagLike));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<DecisionDefinitionDto>>("/decision-definition", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDecisionDefinitions", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get List Queries for decision definitions that fulfill given parameters. Parameters may be the properties of decision definitions, such as the name, key or version. The size of the result set can be retrieved by using the [Get Decision Definition Count](https://docs.camunda.org/manual/7.16/reference/rest/decision-definition/get-query-count/) method.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="decisionDefinitionId">Filter by decision definition id. (optional)</param>
        /// <param name="decisionDefinitionIdIn">Filter by decision definition ids. (optional)</param>
        /// <param name="name">Filter by decision definition name. (optional)</param>
        /// <param name="nameLike">Filter by decision definition names that the parameter is a substring of. (optional)</param>
        /// <param name="deploymentId">Filter by the deployment the id belongs to. (optional)</param>
        /// <param name="deployedAfter">Filter by the deploy time of the deployment the decision definition belongs to. Only selects decision definitions that have been deployed after (exclusive) a specific time. (optional)</param>
        /// <param name="deployedAt">Filter by the deploy time of the deployment the decision definition belongs to. Only selects decision definitions that have been deployed at a specific time (exact match). (optional)</param>
        /// <param name="key">Filter by decision definition key, i.e., the id in the DMN 1.0 XML. Exact match. (optional)</param>
        /// <param name="keyLike">Filter by decision definition keys that the parameter is a substring of. (optional)</param>
        /// <param name="category">Filter by decision definition category. Exact match. (optional)</param>
        /// <param name="categoryLike">Filter by decision definition categories that the parameter is a substring of. (optional)</param>
        /// <param name="version">Filter by decision definition version. (optional)</param>
        /// <param name="latestVersion">Only include those decision definitions that are latest versions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="resourceName">Filter by the name of the decision definition resource. Exact match. (optional)</param>
        /// <param name="resourceNameLike">Filter by names of those decision definition resources that the parameter is a substring of. (optional)</param>
        /// <param name="decisionRequirementsDefinitionId">Filter by the id of the decision requirements definition this decision definition belongs to. (optional)</param>
        /// <param name="decisionRequirementsDefinitionKey">Filter by the key of the decision requirements definition this decision definition belongs to. (optional)</param>
        /// <param name="withoutDecisionRequirementsDefinition">Only include decision definitions which does not belongs to any decision requirements definition. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of &#x60;Strings&#x60;. A decision definition must have one of the given tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include decision definitions which belong to no tenant. Value can effectively only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="includeDecisionDefinitionsWithoutTenantId">Include decision definitions which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="versionTag">Filter by the version tag. (optional)</param>
        /// <param name="versionTagLike">Filter by the version tags of those decision definition resources that the parameter is a substring of. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;DecisionDefinitionDto&gt;</returns>
        public async System.Threading.Tasks.Task<List<DecisionDefinitionDto>> GetDecisionDefinitionsAsync(string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?), string decisionDefinitionId = default(string), string decisionDefinitionIdIn = default(string), string name = default(string), string nameLike = default(string), string deploymentId = default(string), DateTime? deployedAfter = default(DateTime?), DateTime? deployedAt = default(DateTime?), string key = default(string), string keyLike = default(string), string category = default(string), string categoryLike = default(string), int? version = default(int?), bool? latestVersion = default(bool?), string resourceName = default(string), string resourceNameLike = default(string), string decisionRequirementsDefinitionId = default(string), string decisionRequirementsDefinitionKey = default(string), bool? withoutDecisionRequirementsDefinition = default(bool?), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), bool? includeDecisionDefinitionsWithoutTenantId = default(bool?), string versionTag = default(string), string versionTagLike = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<List<DecisionDefinitionDto>> localVarResponse = await GetDecisionDefinitionsWithHttpInfoAsync(sortBy, sortOrder, firstResult, maxResults, decisionDefinitionId, decisionDefinitionIdIn, name, nameLike, deploymentId, deployedAfter, deployedAt, key, keyLike, category, categoryLike, version, latestVersion, resourceName, resourceNameLike, decisionRequirementsDefinitionId, decisionRequirementsDefinitionKey, withoutDecisionRequirementsDefinition, tenantIdIn, withoutTenantId, includeDecisionDefinitionsWithoutTenantId, versionTag, versionTagLike, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get List Queries for decision definitions that fulfill given parameters. Parameters may be the properties of decision definitions, such as the name, key or version. The size of the result set can be retrieved by using the [Get Decision Definition Count](https://docs.camunda.org/manual/7.16/reference/rest/decision-definition/get-query-count/) method.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="decisionDefinitionId">Filter by decision definition id. (optional)</param>
        /// <param name="decisionDefinitionIdIn">Filter by decision definition ids. (optional)</param>
        /// <param name="name">Filter by decision definition name. (optional)</param>
        /// <param name="nameLike">Filter by decision definition names that the parameter is a substring of. (optional)</param>
        /// <param name="deploymentId">Filter by the deployment the id belongs to. (optional)</param>
        /// <param name="deployedAfter">Filter by the deploy time of the deployment the decision definition belongs to. Only selects decision definitions that have been deployed after (exclusive) a specific time. (optional)</param>
        /// <param name="deployedAt">Filter by the deploy time of the deployment the decision definition belongs to. Only selects decision definitions that have been deployed at a specific time (exact match). (optional)</param>
        /// <param name="key">Filter by decision definition key, i.e., the id in the DMN 1.0 XML. Exact match. (optional)</param>
        /// <param name="keyLike">Filter by decision definition keys that the parameter is a substring of. (optional)</param>
        /// <param name="category">Filter by decision definition category. Exact match. (optional)</param>
        /// <param name="categoryLike">Filter by decision definition categories that the parameter is a substring of. (optional)</param>
        /// <param name="version">Filter by decision definition version. (optional)</param>
        /// <param name="latestVersion">Only include those decision definitions that are latest versions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="resourceName">Filter by the name of the decision definition resource. Exact match. (optional)</param>
        /// <param name="resourceNameLike">Filter by names of those decision definition resources that the parameter is a substring of. (optional)</param>
        /// <param name="decisionRequirementsDefinitionId">Filter by the id of the decision requirements definition this decision definition belongs to. (optional)</param>
        /// <param name="decisionRequirementsDefinitionKey">Filter by the key of the decision requirements definition this decision definition belongs to. (optional)</param>
        /// <param name="withoutDecisionRequirementsDefinition">Only include decision definitions which does not belongs to any decision requirements definition. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of &#x60;Strings&#x60;. A decision definition must have one of the given tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include decision definitions which belong to no tenant. Value can effectively only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="includeDecisionDefinitionsWithoutTenantId">Include decision definitions which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="versionTag">Filter by the version tag. (optional)</param>
        /// <param name="versionTagLike">Filter by the version tags of those decision definition resources that the parameter is a substring of. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;DecisionDefinitionDto&gt;)</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<List<DecisionDefinitionDto>>> GetDecisionDefinitionsWithHttpInfoAsync(string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?), string decisionDefinitionId = default(string), string decisionDefinitionIdIn = default(string), string name = default(string), string nameLike = default(string), string deploymentId = default(string), DateTime? deployedAfter = default(DateTime?), DateTime? deployedAt = default(DateTime?), string key = default(string), string keyLike = default(string), string category = default(string), string categoryLike = default(string), int? version = default(int?), bool? latestVersion = default(bool?), string resourceName = default(string), string resourceNameLike = default(string), string decisionRequirementsDefinitionId = default(string), string decisionRequirementsDefinitionKey = default(string), bool? withoutDecisionRequirementsDefinition = default(bool?), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), bool? includeDecisionDefinitionsWithoutTenantId = default(bool?), string versionTag = default(string), string versionTagLike = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "sortBy", sortBy));
            }
            if (sortOrder != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "sortOrder", sortOrder));
            }
            if (firstResult != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "firstResult", firstResult));
            }
            if (maxResults != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "maxResults", maxResults));
            }
            if (decisionDefinitionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "decisionDefinitionId", decisionDefinitionId));
            }
            if (decisionDefinitionIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "decisionDefinitionIdIn", decisionDefinitionIdIn));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (nameLike != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "nameLike", nameLike));
            }
            if (deploymentId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "deploymentId", deploymentId));
            }
            if (deployedAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "deployedAfter", deployedAfter));
            }
            if (deployedAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "deployedAt", deployedAt));
            }
            if (key != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "key", key));
            }
            if (keyLike != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "keyLike", keyLike));
            }
            if (category != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "category", category));
            }
            if (categoryLike != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "categoryLike", categoryLike));
            }
            if (version != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "version", version));
            }
            if (latestVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "latestVersion", latestVersion));
            }
            if (resourceName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "resourceName", resourceName));
            }
            if (resourceNameLike != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "resourceNameLike", resourceNameLike));
            }
            if (decisionRequirementsDefinitionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "decisionRequirementsDefinitionId", decisionRequirementsDefinitionId));
            }
            if (decisionRequirementsDefinitionKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "decisionRequirementsDefinitionKey", decisionRequirementsDefinitionKey));
            }
            if (withoutDecisionRequirementsDefinition != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "withoutDecisionRequirementsDefinition", withoutDecisionRequirementsDefinition));
            }
            if (tenantIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "tenantIdIn", tenantIdIn));
            }
            if (withoutTenantId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "withoutTenantId", withoutTenantId));
            }
            if (includeDecisionDefinitionsWithoutTenantId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "includeDecisionDefinitionsWithoutTenantId", includeDecisionDefinitionsWithoutTenantId));
            }
            if (versionTag != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "versionTag", versionTag));
            }
            if (versionTagLike != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "versionTagLike", versionTagLike));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<DecisionDefinitionDto>>("/decision-definition", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDecisionDefinitions", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get List Count Requests the number of decision definitions that fulfill the query criteria. Takes the same filtering parameters as the [Get Decision Definition](https://docs.camunda.org/manual/7.16/reference/rest/decision-definition/get-query/) method.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="decisionDefinitionId">Filter by decision definition id. (optional)</param>
        /// <param name="decisionDefinitionIdIn">Filter by decision definition ids. (optional)</param>
        /// <param name="name">Filter by decision definition name. (optional)</param>
        /// <param name="nameLike">Filter by decision definition names that the parameter is a substring of. (optional)</param>
        /// <param name="deploymentId">Filter by the deployment the id belongs to. (optional)</param>
        /// <param name="deployedAfter">Filter by the deploy time of the deployment the decision definition belongs to. Only selects decision definitions that have been deployed after (exclusive) a specific time. (optional)</param>
        /// <param name="deployedAt">Filter by the deploy time of the deployment the decision definition belongs to. Only selects decision definitions that have been deployed at a specific time (exact match). (optional)</param>
        /// <param name="key">Filter by decision definition key, i.e., the id in the DMN 1.0 XML. Exact match. (optional)</param>
        /// <param name="keyLike">Filter by decision definition keys that the parameter is a substring of. (optional)</param>
        /// <param name="category">Filter by decision definition category. Exact match. (optional)</param>
        /// <param name="categoryLike">Filter by decision definition categories that the parameter is a substring of. (optional)</param>
        /// <param name="version">Filter by decision definition version. (optional)</param>
        /// <param name="latestVersion">Only include those decision definitions that are latest versions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="resourceName">Filter by the name of the decision definition resource. Exact match. (optional)</param>
        /// <param name="resourceNameLike">Filter by names of those decision definition resources that the parameter is a substring of. (optional)</param>
        /// <param name="decisionRequirementsDefinitionId">Filter by the id of the decision requirements definition this decision definition belongs to. (optional)</param>
        /// <param name="decisionRequirementsDefinitionKey">Filter by the key of the decision requirements definition this decision definition belongs to. (optional)</param>
        /// <param name="withoutDecisionRequirementsDefinition">Only include decision definitions which does not belongs to any decision requirements definition. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of &#x60;Strings&#x60;. A decision definition must have one of the given tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include decision definitions which belong to no tenant. Value can effectively only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="includeDecisionDefinitionsWithoutTenantId">Include decision definitions which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="versionTag">Filter by the version tag. (optional)</param>
        /// <param name="versionTagLike">Filter by the version tags of those decision definition resources that the parameter is a substring of. (optional)</param>
        /// <returns>CountResultDto</returns>
        public CountResultDto GetDecisionDefinitionsCount(string decisionDefinitionId = default(string), string decisionDefinitionIdIn = default(string), string name = default(string), string nameLike = default(string), string deploymentId = default(string), DateTime? deployedAfter = default(DateTime?), DateTime? deployedAt = default(DateTime?), string key = default(string), string keyLike = default(string), string category = default(string), string categoryLike = default(string), int? version = default(int?), bool? latestVersion = default(bool?), string resourceName = default(string), string resourceNameLike = default(string), string decisionRequirementsDefinitionId = default(string), string decisionRequirementsDefinitionKey = default(string), bool? withoutDecisionRequirementsDefinition = default(bool?), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), bool? includeDecisionDefinitionsWithoutTenantId = default(bool?), string versionTag = default(string), string versionTagLike = default(string))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<CountResultDto> localVarResponse = GetDecisionDefinitionsCountWithHttpInfo(decisionDefinitionId, decisionDefinitionIdIn, name, nameLike, deploymentId, deployedAfter, deployedAt, key, keyLike, category, categoryLike, version, latestVersion, resourceName, resourceNameLike, decisionRequirementsDefinitionId, decisionRequirementsDefinitionKey, withoutDecisionRequirementsDefinition, tenantIdIn, withoutTenantId, includeDecisionDefinitionsWithoutTenantId, versionTag, versionTagLike);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get List Count Requests the number of decision definitions that fulfill the query criteria. Takes the same filtering parameters as the [Get Decision Definition](https://docs.camunda.org/manual/7.16/reference/rest/decision-definition/get-query/) method.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="decisionDefinitionId">Filter by decision definition id. (optional)</param>
        /// <param name="decisionDefinitionIdIn">Filter by decision definition ids. (optional)</param>
        /// <param name="name">Filter by decision definition name. (optional)</param>
        /// <param name="nameLike">Filter by decision definition names that the parameter is a substring of. (optional)</param>
        /// <param name="deploymentId">Filter by the deployment the id belongs to. (optional)</param>
        /// <param name="deployedAfter">Filter by the deploy time of the deployment the decision definition belongs to. Only selects decision definitions that have been deployed after (exclusive) a specific time. (optional)</param>
        /// <param name="deployedAt">Filter by the deploy time of the deployment the decision definition belongs to. Only selects decision definitions that have been deployed at a specific time (exact match). (optional)</param>
        /// <param name="key">Filter by decision definition key, i.e., the id in the DMN 1.0 XML. Exact match. (optional)</param>
        /// <param name="keyLike">Filter by decision definition keys that the parameter is a substring of. (optional)</param>
        /// <param name="category">Filter by decision definition category. Exact match. (optional)</param>
        /// <param name="categoryLike">Filter by decision definition categories that the parameter is a substring of. (optional)</param>
        /// <param name="version">Filter by decision definition version. (optional)</param>
        /// <param name="latestVersion">Only include those decision definitions that are latest versions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="resourceName">Filter by the name of the decision definition resource. Exact match. (optional)</param>
        /// <param name="resourceNameLike">Filter by names of those decision definition resources that the parameter is a substring of. (optional)</param>
        /// <param name="decisionRequirementsDefinitionId">Filter by the id of the decision requirements definition this decision definition belongs to. (optional)</param>
        /// <param name="decisionRequirementsDefinitionKey">Filter by the key of the decision requirements definition this decision definition belongs to. (optional)</param>
        /// <param name="withoutDecisionRequirementsDefinition">Only include decision definitions which does not belongs to any decision requirements definition. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of &#x60;Strings&#x60;. A decision definition must have one of the given tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include decision definitions which belong to no tenant. Value can effectively only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="includeDecisionDefinitionsWithoutTenantId">Include decision definitions which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="versionTag">Filter by the version tag. (optional)</param>
        /// <param name="versionTagLike">Filter by the version tags of those decision definition resources that the parameter is a substring of. (optional)</param>
        /// <returns>ApiResponse of CountResultDto</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<CountResultDto> GetDecisionDefinitionsCountWithHttpInfo(string decisionDefinitionId = default(string), string decisionDefinitionIdIn = default(string), string name = default(string), string nameLike = default(string), string deploymentId = default(string), DateTime? deployedAfter = default(DateTime?), DateTime? deployedAt = default(DateTime?), string key = default(string), string keyLike = default(string), string category = default(string), string categoryLike = default(string), int? version = default(int?), bool? latestVersion = default(bool?), string resourceName = default(string), string resourceNameLike = default(string), string decisionRequirementsDefinitionId = default(string), string decisionRequirementsDefinitionKey = default(string), bool? withoutDecisionRequirementsDefinition = default(bool?), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), bool? includeDecisionDefinitionsWithoutTenantId = default(bool?), string versionTag = default(string), string versionTagLike = default(string))
        {
            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (decisionDefinitionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "decisionDefinitionId", decisionDefinitionId));
            }
            if (decisionDefinitionIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "decisionDefinitionIdIn", decisionDefinitionIdIn));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (nameLike != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "nameLike", nameLike));
            }
            if (deploymentId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "deploymentId", deploymentId));
            }
            if (deployedAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "deployedAfter", deployedAfter));
            }
            if (deployedAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "deployedAt", deployedAt));
            }
            if (key != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "key", key));
            }
            if (keyLike != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "keyLike", keyLike));
            }
            if (category != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "category", category));
            }
            if (categoryLike != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "categoryLike", categoryLike));
            }
            if (version != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "version", version));
            }
            if (latestVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "latestVersion", latestVersion));
            }
            if (resourceName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "resourceName", resourceName));
            }
            if (resourceNameLike != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "resourceNameLike", resourceNameLike));
            }
            if (decisionRequirementsDefinitionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "decisionRequirementsDefinitionId", decisionRequirementsDefinitionId));
            }
            if (decisionRequirementsDefinitionKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "decisionRequirementsDefinitionKey", decisionRequirementsDefinitionKey));
            }
            if (withoutDecisionRequirementsDefinition != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "withoutDecisionRequirementsDefinition", withoutDecisionRequirementsDefinition));
            }
            if (tenantIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "tenantIdIn", tenantIdIn));
            }
            if (withoutTenantId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "withoutTenantId", withoutTenantId));
            }
            if (includeDecisionDefinitionsWithoutTenantId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "includeDecisionDefinitionsWithoutTenantId", includeDecisionDefinitionsWithoutTenantId));
            }
            if (versionTag != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "versionTag", versionTag));
            }
            if (versionTagLike != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "versionTagLike", versionTagLike));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<CountResultDto>("/decision-definition/count", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDecisionDefinitionsCount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get List Count Requests the number of decision definitions that fulfill the query criteria. Takes the same filtering parameters as the [Get Decision Definition](https://docs.camunda.org/manual/7.16/reference/rest/decision-definition/get-query/) method.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="decisionDefinitionId">Filter by decision definition id. (optional)</param>
        /// <param name="decisionDefinitionIdIn">Filter by decision definition ids. (optional)</param>
        /// <param name="name">Filter by decision definition name. (optional)</param>
        /// <param name="nameLike">Filter by decision definition names that the parameter is a substring of. (optional)</param>
        /// <param name="deploymentId">Filter by the deployment the id belongs to. (optional)</param>
        /// <param name="deployedAfter">Filter by the deploy time of the deployment the decision definition belongs to. Only selects decision definitions that have been deployed after (exclusive) a specific time. (optional)</param>
        /// <param name="deployedAt">Filter by the deploy time of the deployment the decision definition belongs to. Only selects decision definitions that have been deployed at a specific time (exact match). (optional)</param>
        /// <param name="key">Filter by decision definition key, i.e., the id in the DMN 1.0 XML. Exact match. (optional)</param>
        /// <param name="keyLike">Filter by decision definition keys that the parameter is a substring of. (optional)</param>
        /// <param name="category">Filter by decision definition category. Exact match. (optional)</param>
        /// <param name="categoryLike">Filter by decision definition categories that the parameter is a substring of. (optional)</param>
        /// <param name="version">Filter by decision definition version. (optional)</param>
        /// <param name="latestVersion">Only include those decision definitions that are latest versions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="resourceName">Filter by the name of the decision definition resource. Exact match. (optional)</param>
        /// <param name="resourceNameLike">Filter by names of those decision definition resources that the parameter is a substring of. (optional)</param>
        /// <param name="decisionRequirementsDefinitionId">Filter by the id of the decision requirements definition this decision definition belongs to. (optional)</param>
        /// <param name="decisionRequirementsDefinitionKey">Filter by the key of the decision requirements definition this decision definition belongs to. (optional)</param>
        /// <param name="withoutDecisionRequirementsDefinition">Only include decision definitions which does not belongs to any decision requirements definition. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of &#x60;Strings&#x60;. A decision definition must have one of the given tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include decision definitions which belong to no tenant. Value can effectively only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="includeDecisionDefinitionsWithoutTenantId">Include decision definitions which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="versionTag">Filter by the version tag. (optional)</param>
        /// <param name="versionTagLike">Filter by the version tags of those decision definition resources that the parameter is a substring of. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CountResultDto</returns>
        public async System.Threading.Tasks.Task<CountResultDto> GetDecisionDefinitionsCountAsync(string decisionDefinitionId = default(string), string decisionDefinitionIdIn = default(string), string name = default(string), string nameLike = default(string), string deploymentId = default(string), DateTime? deployedAfter = default(DateTime?), DateTime? deployedAt = default(DateTime?), string key = default(string), string keyLike = default(string), string category = default(string), string categoryLike = default(string), int? version = default(int?), bool? latestVersion = default(bool?), string resourceName = default(string), string resourceNameLike = default(string), string decisionRequirementsDefinitionId = default(string), string decisionRequirementsDefinitionKey = default(string), bool? withoutDecisionRequirementsDefinition = default(bool?), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), bool? includeDecisionDefinitionsWithoutTenantId = default(bool?), string versionTag = default(string), string versionTagLike = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<CountResultDto> localVarResponse = await GetDecisionDefinitionsCountWithHttpInfoAsync(decisionDefinitionId, decisionDefinitionIdIn, name, nameLike, deploymentId, deployedAfter, deployedAt, key, keyLike, category, categoryLike, version, latestVersion, resourceName, resourceNameLike, decisionRequirementsDefinitionId, decisionRequirementsDefinitionKey, withoutDecisionRequirementsDefinition, tenantIdIn, withoutTenantId, includeDecisionDefinitionsWithoutTenantId, versionTag, versionTagLike, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get List Count Requests the number of decision definitions that fulfill the query criteria. Takes the same filtering parameters as the [Get Decision Definition](https://docs.camunda.org/manual/7.16/reference/rest/decision-definition/get-query/) method.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="decisionDefinitionId">Filter by decision definition id. (optional)</param>
        /// <param name="decisionDefinitionIdIn">Filter by decision definition ids. (optional)</param>
        /// <param name="name">Filter by decision definition name. (optional)</param>
        /// <param name="nameLike">Filter by decision definition names that the parameter is a substring of. (optional)</param>
        /// <param name="deploymentId">Filter by the deployment the id belongs to. (optional)</param>
        /// <param name="deployedAfter">Filter by the deploy time of the deployment the decision definition belongs to. Only selects decision definitions that have been deployed after (exclusive) a specific time. (optional)</param>
        /// <param name="deployedAt">Filter by the deploy time of the deployment the decision definition belongs to. Only selects decision definitions that have been deployed at a specific time (exact match). (optional)</param>
        /// <param name="key">Filter by decision definition key, i.e., the id in the DMN 1.0 XML. Exact match. (optional)</param>
        /// <param name="keyLike">Filter by decision definition keys that the parameter is a substring of. (optional)</param>
        /// <param name="category">Filter by decision definition category. Exact match. (optional)</param>
        /// <param name="categoryLike">Filter by decision definition categories that the parameter is a substring of. (optional)</param>
        /// <param name="version">Filter by decision definition version. (optional)</param>
        /// <param name="latestVersion">Only include those decision definitions that are latest versions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="resourceName">Filter by the name of the decision definition resource. Exact match. (optional)</param>
        /// <param name="resourceNameLike">Filter by names of those decision definition resources that the parameter is a substring of. (optional)</param>
        /// <param name="decisionRequirementsDefinitionId">Filter by the id of the decision requirements definition this decision definition belongs to. (optional)</param>
        /// <param name="decisionRequirementsDefinitionKey">Filter by the key of the decision requirements definition this decision definition belongs to. (optional)</param>
        /// <param name="withoutDecisionRequirementsDefinition">Only include decision definitions which does not belongs to any decision requirements definition. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of &#x60;Strings&#x60;. A decision definition must have one of the given tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include decision definitions which belong to no tenant. Value can effectively only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="includeDecisionDefinitionsWithoutTenantId">Include decision definitions which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="versionTag">Filter by the version tag. (optional)</param>
        /// <param name="versionTagLike">Filter by the version tags of those decision definition resources that the parameter is a substring of. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CountResultDto)</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<CountResultDto>> GetDecisionDefinitionsCountWithHttpInfoAsync(string decisionDefinitionId = default(string), string decisionDefinitionIdIn = default(string), string name = default(string), string nameLike = default(string), string deploymentId = default(string), DateTime? deployedAfter = default(DateTime?), DateTime? deployedAt = default(DateTime?), string key = default(string), string keyLike = default(string), string category = default(string), string categoryLike = default(string), int? version = default(int?), bool? latestVersion = default(bool?), string resourceName = default(string), string resourceNameLike = default(string), string decisionRequirementsDefinitionId = default(string), string decisionRequirementsDefinitionKey = default(string), bool? withoutDecisionRequirementsDefinition = default(bool?), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), bool? includeDecisionDefinitionsWithoutTenantId = default(bool?), string versionTag = default(string), string versionTagLike = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (decisionDefinitionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "decisionDefinitionId", decisionDefinitionId));
            }
            if (decisionDefinitionIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "decisionDefinitionIdIn", decisionDefinitionIdIn));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (nameLike != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "nameLike", nameLike));
            }
            if (deploymentId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "deploymentId", deploymentId));
            }
            if (deployedAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "deployedAfter", deployedAfter));
            }
            if (deployedAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "deployedAt", deployedAt));
            }
            if (key != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "key", key));
            }
            if (keyLike != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "keyLike", keyLike));
            }
            if (category != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "category", category));
            }
            if (categoryLike != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "categoryLike", categoryLike));
            }
            if (version != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "version", version));
            }
            if (latestVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "latestVersion", latestVersion));
            }
            if (resourceName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "resourceName", resourceName));
            }
            if (resourceNameLike != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "resourceNameLike", resourceNameLike));
            }
            if (decisionRequirementsDefinitionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "decisionRequirementsDefinitionId", decisionRequirementsDefinitionId));
            }
            if (decisionRequirementsDefinitionKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "decisionRequirementsDefinitionKey", decisionRequirementsDefinitionKey));
            }
            if (withoutDecisionRequirementsDefinition != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "withoutDecisionRequirementsDefinition", withoutDecisionRequirementsDefinition));
            }
            if (tenantIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "tenantIdIn", tenantIdIn));
            }
            if (withoutTenantId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "withoutTenantId", withoutTenantId));
            }
            if (includeDecisionDefinitionsWithoutTenantId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "includeDecisionDefinitionsWithoutTenantId", includeDecisionDefinitionsWithoutTenantId));
            }
            if (versionTag != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "versionTag", versionTag));
            }
            if (versionTagLike != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "versionTagLike", versionTagLike));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<CountResultDto>("/decision-definition/count", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDecisionDefinitionsCount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update History Time to Live Updates history time to live for decision definition. The field is used within [History cleanup](https://docs.camunda.org/manual/7.16/user-guide/process-engine/history/#history-cleanup).
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the decision definition to change history time to live.</param>
        /// <param name="historyTimeToLiveDto"> (optional)</param>
        /// <returns></returns>
        public void UpdateHistoryTimeToLiveByDecisionDefinitionId(string id, HistoryTimeToLiveDto historyTimeToLiveDto = default(HistoryTimeToLiveDto))
        {
            UpdateHistoryTimeToLiveByDecisionDefinitionIdWithHttpInfo(id, historyTimeToLiveDto);
        }

        /// <summary>
        /// Update History Time to Live Updates history time to live for decision definition. The field is used within [History cleanup](https://docs.camunda.org/manual/7.16/user-guide/process-engine/history/#history-cleanup).
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the decision definition to change history time to live.</param>
        /// <param name="historyTimeToLiveDto"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<Object> UpdateHistoryTimeToLiveByDecisionDefinitionIdWithHttpInfo(string id, HistoryTimeToLiveDto historyTimeToLiveDto = default(HistoryTimeToLiveDto))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling DecisionDefinitionApi->UpdateHistoryTimeToLiveByDecisionDefinitionId");

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = historyTimeToLiveDto;


            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/decision-definition/{id}/history-time-to-live", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateHistoryTimeToLiveByDecisionDefinitionId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update History Time to Live Updates history time to live for decision definition. The field is used within [History cleanup](https://docs.camunda.org/manual/7.16/user-guide/process-engine/history/#history-cleanup).
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the decision definition to change history time to live.</param>
        /// <param name="historyTimeToLiveDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateHistoryTimeToLiveByDecisionDefinitionIdAsync(string id, HistoryTimeToLiveDto historyTimeToLiveDto = default(HistoryTimeToLiveDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await UpdateHistoryTimeToLiveByDecisionDefinitionIdWithHttpInfoAsync(id, historyTimeToLiveDto, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Update History Time to Live Updates history time to live for decision definition. The field is used within [History cleanup](https://docs.camunda.org/manual/7.16/user-guide/process-engine/history/#history-cleanup).
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the decision definition to change history time to live.</param>
        /// <param name="historyTimeToLiveDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<Object>> UpdateHistoryTimeToLiveByDecisionDefinitionIdWithHttpInfoAsync(string id, HistoryTimeToLiveDto historyTimeToLiveDto = default(HistoryTimeToLiveDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'id' when calling DecisionDefinitionApi->UpdateHistoryTimeToLiveByDecisionDefinitionId");


            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = historyTimeToLiveDto;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/decision-definition/{id}/history-time-to-live", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateHistoryTimeToLiveByDecisionDefinitionId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update History Time to Live By Key Updates the latest version of the decision definition which belongs to no tenant. The field is used within [History cleanup](https://docs.camunda.org/manual/7.16/user-guide/process-engine/history/#history-cleanup).
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the decision definitions to change history time to live.</param>
        /// <param name="historyTimeToLiveDto"> (optional)</param>
        /// <returns></returns>
        public void UpdateHistoryTimeToLiveByDecisionDefinitionKey(string key, HistoryTimeToLiveDto historyTimeToLiveDto = default(HistoryTimeToLiveDto))
        {
            UpdateHistoryTimeToLiveByDecisionDefinitionKeyWithHttpInfo(key, historyTimeToLiveDto);
        }

        /// <summary>
        /// Update History Time to Live By Key Updates the latest version of the decision definition which belongs to no tenant. The field is used within [History cleanup](https://docs.camunda.org/manual/7.16/user-guide/process-engine/history/#history-cleanup).
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the decision definitions to change history time to live.</param>
        /// <param name="historyTimeToLiveDto"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<Object> UpdateHistoryTimeToLiveByDecisionDefinitionKeyWithHttpInfo(string key, HistoryTimeToLiveDto historyTimeToLiveDto = default(HistoryTimeToLiveDto))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'key' when calling DecisionDefinitionApi->UpdateHistoryTimeToLiveByDecisionDefinitionKey");

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(key)); // path parameter
            localVarRequestOptions.Data = historyTimeToLiveDto;


            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/decision-definition/key/{key}/history-time-to-live", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateHistoryTimeToLiveByDecisionDefinitionKey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update History Time to Live By Key Updates the latest version of the decision definition which belongs to no tenant. The field is used within [History cleanup](https://docs.camunda.org/manual/7.16/user-guide/process-engine/history/#history-cleanup).
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the decision definitions to change history time to live.</param>
        /// <param name="historyTimeToLiveDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateHistoryTimeToLiveByDecisionDefinitionKeyAsync(string key, HistoryTimeToLiveDto historyTimeToLiveDto = default(HistoryTimeToLiveDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await UpdateHistoryTimeToLiveByDecisionDefinitionKeyWithHttpInfoAsync(key, historyTimeToLiveDto, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Update History Time to Live By Key Updates the latest version of the decision definition which belongs to no tenant. The field is used within [History cleanup](https://docs.camunda.org/manual/7.16/user-guide/process-engine/history/#history-cleanup).
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the decision definitions to change history time to live.</param>
        /// <param name="historyTimeToLiveDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<Object>> UpdateHistoryTimeToLiveByDecisionDefinitionKeyWithHttpInfoAsync(string key, HistoryTimeToLiveDto historyTimeToLiveDto = default(HistoryTimeToLiveDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'key' when calling DecisionDefinitionApi->UpdateHistoryTimeToLiveByDecisionDefinitionKey");


            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(key)); // path parameter
            localVarRequestOptions.Data = historyTimeToLiveDto;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/decision-definition/key/{key}/history-time-to-live", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateHistoryTimeToLiveByDecisionDefinitionKey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update History Time to Live By Key And Tenant Updates the latest version of the decision definition for tenant. The field is used within [History cleanup](https://docs.camunda.org/manual/7.16/user-guide/process-engine/history/#history-cleanup).
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the decision definitions to change history time to live.</param>
        /// <param name="tenantId">The id of the tenant the decision definition belongs to.</param>
        /// <param name="historyTimeToLiveDto"> (optional)</param>
        /// <returns></returns>
        public void UpdateHistoryTimeToLiveByDecisionDefinitionKeyAndTenant(string key, string tenantId, HistoryTimeToLiveDto historyTimeToLiveDto = default(HistoryTimeToLiveDto))
        {
            UpdateHistoryTimeToLiveByDecisionDefinitionKeyAndTenantWithHttpInfo(key, tenantId, historyTimeToLiveDto);
        }

        /// <summary>
        /// Update History Time to Live By Key And Tenant Updates the latest version of the decision definition for tenant. The field is used within [History cleanup](https://docs.camunda.org/manual/7.16/user-guide/process-engine/history/#history-cleanup).
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the decision definitions to change history time to live.</param>
        /// <param name="tenantId">The id of the tenant the decision definition belongs to.</param>
        /// <param name="historyTimeToLiveDto"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<Object> UpdateHistoryTimeToLiveByDecisionDefinitionKeyAndTenantWithHttpInfo(string key, string tenantId, HistoryTimeToLiveDto historyTimeToLiveDto = default(HistoryTimeToLiveDto))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'key' when calling DecisionDefinitionApi->UpdateHistoryTimeToLiveByDecisionDefinitionKeyAndTenant");

            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'tenantId' when calling DecisionDefinitionApi->UpdateHistoryTimeToLiveByDecisionDefinitionKeyAndTenant");

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(key)); // path parameter
            localVarRequestOptions.PathParameters.Add("tenant-id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.Data = historyTimeToLiveDto;


            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/decision-definition/key/{key}/tenant-id/{tenant-id}/history-time-to-live", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateHistoryTimeToLiveByDecisionDefinitionKeyAndTenant", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update History Time to Live By Key And Tenant Updates the latest version of the decision definition for tenant. The field is used within [History cleanup](https://docs.camunda.org/manual/7.16/user-guide/process-engine/history/#history-cleanup).
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the decision definitions to change history time to live.</param>
        /// <param name="tenantId">The id of the tenant the decision definition belongs to.</param>
        /// <param name="historyTimeToLiveDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateHistoryTimeToLiveByDecisionDefinitionKeyAndTenantAsync(string key, string tenantId, HistoryTimeToLiveDto historyTimeToLiveDto = default(HistoryTimeToLiveDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await UpdateHistoryTimeToLiveByDecisionDefinitionKeyAndTenantWithHttpInfoAsync(key, tenantId, historyTimeToLiveDto, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Update History Time to Live By Key And Tenant Updates the latest version of the decision definition for tenant. The field is used within [History cleanup](https://docs.camunda.org/manual/7.16/user-guide/process-engine/history/#history-cleanup).
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the decision definitions to change history time to live.</param>
        /// <param name="tenantId">The id of the tenant the decision definition belongs to.</param>
        /// <param name="historyTimeToLiveDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<Object>> UpdateHistoryTimeToLiveByDecisionDefinitionKeyAndTenantWithHttpInfoAsync(string key, string tenantId, HistoryTimeToLiveDto historyTimeToLiveDto = default(HistoryTimeToLiveDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'key' when calling DecisionDefinitionApi->UpdateHistoryTimeToLiveByDecisionDefinitionKeyAndTenant");

            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
                throw new Camunda.OpenApi.Client.Client.ApiException(400, "Missing required parameter 'tenantId' when calling DecisionDefinitionApi->UpdateHistoryTimeToLiveByDecisionDefinitionKeyAndTenant");


            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(key)); // path parameter
            localVarRequestOptions.PathParameters.Add("tenant-id", Camunda.OpenApi.Client.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.Data = historyTimeToLiveDto;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/decision-definition/key/{key}/tenant-id/{tenant-id}/history-time-to-live", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateHistoryTimeToLiveByDecisionDefinitionKeyAndTenant", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
