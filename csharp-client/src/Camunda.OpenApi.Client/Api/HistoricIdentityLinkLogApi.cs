/*
 * Camunda Platform REST API
 *
 * OpenApi Spec for Camunda Platform REST API.
 *
 * The version of the OpenAPI document: 7.16.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using Camunda.OpenApi.Client.Client;
using Camunda.OpenApi.Client.Model;

namespace Camunda.OpenApi.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IHistoricIdentityLinkLogApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get Identity Link Logs
        /// </summary>
        /// <remarks>
        /// Queries for historic identity link logs that fulfill given parameters. The size of the result set can be retrieved by using the [Get Identity-Link-Log Count](https://docs.camunda.org/manual/7.16/reference/rest/history/identity-links/get-identity-link-query-count/) method.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Restricts to identity links that have the given type (candidate/assignee/owner). (optional)</param>
        /// <param name="userId">Restricts to identity links that have the given user id. (optional)</param>
        /// <param name="groupId">Restricts to identity links that have the given group id. (optional)</param>
        /// <param name="dateBefore">Restricts to identity links that have the time before the given time. (optional)</param>
        /// <param name="dateAfter">Restricts to identity links that have the time after the given time. (optional)</param>
        /// <param name="taskId">Restricts to identity links that have the given task id. (optional)</param>
        /// <param name="processDefinitionId">Restricts to identity links that have the given process definition id. (optional)</param>
        /// <param name="processDefinitionKey">Restricts to identity links that have the given process definition key. (optional)</param>
        /// <param name="operationType">Restricts to identity links that have the given operationType (add/delete). (optional)</param>
        /// <param name="assignerId">Restricts to identity links that have the given assigner id. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include historic identity links that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <returns>List&lt;HistoricIdentityLinkLogDto&gt;</returns>
        List<HistoricIdentityLinkLogDto> GetHistoricIdentityLinks(string type = default(string), string userId = default(string), string groupId = default(string), DateTime? dateBefore = default(DateTime?), DateTime? dateAfter = default(DateTime?), string taskId = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string operationType = default(string), string assignerId = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?));

        /// <summary>
        /// Get Identity Link Logs
        /// </summary>
        /// <remarks>
        /// Queries for historic identity link logs that fulfill given parameters. The size of the result set can be retrieved by using the [Get Identity-Link-Log Count](https://docs.camunda.org/manual/7.16/reference/rest/history/identity-links/get-identity-link-query-count/) method.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Restricts to identity links that have the given type (candidate/assignee/owner). (optional)</param>
        /// <param name="userId">Restricts to identity links that have the given user id. (optional)</param>
        /// <param name="groupId">Restricts to identity links that have the given group id. (optional)</param>
        /// <param name="dateBefore">Restricts to identity links that have the time before the given time. (optional)</param>
        /// <param name="dateAfter">Restricts to identity links that have the time after the given time. (optional)</param>
        /// <param name="taskId">Restricts to identity links that have the given task id. (optional)</param>
        /// <param name="processDefinitionId">Restricts to identity links that have the given process definition id. (optional)</param>
        /// <param name="processDefinitionKey">Restricts to identity links that have the given process definition key. (optional)</param>
        /// <param name="operationType">Restricts to identity links that have the given operationType (add/delete). (optional)</param>
        /// <param name="assignerId">Restricts to identity links that have the given assigner id. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include historic identity links that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <returns>ApiResponse of List&lt;HistoricIdentityLinkLogDto&gt;</returns>
        ApiResponse<List<HistoricIdentityLinkLogDto>> GetHistoricIdentityLinksWithHttpInfo(string type = default(string), string userId = default(string), string groupId = default(string), DateTime? dateBefore = default(DateTime?), DateTime? dateAfter = default(DateTime?), string taskId = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string operationType = default(string), string assignerId = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?));
        /// <summary>
        /// Get Identity Link Log Count
        /// </summary>
        /// <remarks>
        /// Queries for the number of historic identity link logs that fulfill the given parameters. Takes the same parameters as the [Get Identity-Link-Logs](https://docs.camunda.org/manual/7.16/reference/rest/history/identity-links/get-identity-link-query/) method.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Restricts to identity links that have the given type (candidate/assignee/owner). (optional)</param>
        /// <param name="userId">Restricts to identity links that have the given user id. (optional)</param>
        /// <param name="groupId">Restricts to identity links that have the given group id. (optional)</param>
        /// <param name="dateBefore">Restricts to identity links that have the time before the given time. (optional)</param>
        /// <param name="dateAfter">Restricts to identity links that have the time after the given time. (optional)</param>
        /// <param name="taskId">Restricts to identity links that have the given task id. (optional)</param>
        /// <param name="processDefinitionId">Restricts to identity links that have the given process definition id. (optional)</param>
        /// <param name="processDefinitionKey">Restricts to identity links that have the given process definition key. (optional)</param>
        /// <param name="operationType">Restricts to identity links that have the given operationType (add/delete). (optional)</param>
        /// <param name="assignerId">Restricts to identity links that have the given assigner id. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include historic identity links that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <returns>CountResultDto</returns>
        CountResultDto GetHistoricIdentityLinksCount(string type = default(string), string userId = default(string), string groupId = default(string), DateTime? dateBefore = default(DateTime?), DateTime? dateAfter = default(DateTime?), string taskId = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string operationType = default(string), string assignerId = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?));

        /// <summary>
        /// Get Identity Link Log Count
        /// </summary>
        /// <remarks>
        /// Queries for the number of historic identity link logs that fulfill the given parameters. Takes the same parameters as the [Get Identity-Link-Logs](https://docs.camunda.org/manual/7.16/reference/rest/history/identity-links/get-identity-link-query/) method.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Restricts to identity links that have the given type (candidate/assignee/owner). (optional)</param>
        /// <param name="userId">Restricts to identity links that have the given user id. (optional)</param>
        /// <param name="groupId">Restricts to identity links that have the given group id. (optional)</param>
        /// <param name="dateBefore">Restricts to identity links that have the time before the given time. (optional)</param>
        /// <param name="dateAfter">Restricts to identity links that have the time after the given time. (optional)</param>
        /// <param name="taskId">Restricts to identity links that have the given task id. (optional)</param>
        /// <param name="processDefinitionId">Restricts to identity links that have the given process definition id. (optional)</param>
        /// <param name="processDefinitionKey">Restricts to identity links that have the given process definition key. (optional)</param>
        /// <param name="operationType">Restricts to identity links that have the given operationType (add/delete). (optional)</param>
        /// <param name="assignerId">Restricts to identity links that have the given assigner id. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include historic identity links that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <returns>ApiResponse of CountResultDto</returns>
        ApiResponse<CountResultDto> GetHistoricIdentityLinksCountWithHttpInfo(string type = default(string), string userId = default(string), string groupId = default(string), DateTime? dateBefore = default(DateTime?), DateTime? dateAfter = default(DateTime?), string taskId = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string operationType = default(string), string assignerId = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IHistoricIdentityLinkLogApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get Identity Link Logs
        /// </summary>
        /// <remarks>
        /// Queries for historic identity link logs that fulfill given parameters. The size of the result set can be retrieved by using the [Get Identity-Link-Log Count](https://docs.camunda.org/manual/7.16/reference/rest/history/identity-links/get-identity-link-query-count/) method.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Restricts to identity links that have the given type (candidate/assignee/owner). (optional)</param>
        /// <param name="userId">Restricts to identity links that have the given user id. (optional)</param>
        /// <param name="groupId">Restricts to identity links that have the given group id. (optional)</param>
        /// <param name="dateBefore">Restricts to identity links that have the time before the given time. (optional)</param>
        /// <param name="dateAfter">Restricts to identity links that have the time after the given time. (optional)</param>
        /// <param name="taskId">Restricts to identity links that have the given task id. (optional)</param>
        /// <param name="processDefinitionId">Restricts to identity links that have the given process definition id. (optional)</param>
        /// <param name="processDefinitionKey">Restricts to identity links that have the given process definition key. (optional)</param>
        /// <param name="operationType">Restricts to identity links that have the given operationType (add/delete). (optional)</param>
        /// <param name="assignerId">Restricts to identity links that have the given assigner id. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include historic identity links that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;HistoricIdentityLinkLogDto&gt;</returns>
        System.Threading.Tasks.Task<List<HistoricIdentityLinkLogDto>> GetHistoricIdentityLinksAsync(string type = default(string), string userId = default(string), string groupId = default(string), DateTime? dateBefore = default(DateTime?), DateTime? dateAfter = default(DateTime?), string taskId = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string operationType = default(string), string assignerId = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Identity Link Logs
        /// </summary>
        /// <remarks>
        /// Queries for historic identity link logs that fulfill given parameters. The size of the result set can be retrieved by using the [Get Identity-Link-Log Count](https://docs.camunda.org/manual/7.16/reference/rest/history/identity-links/get-identity-link-query-count/) method.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Restricts to identity links that have the given type (candidate/assignee/owner). (optional)</param>
        /// <param name="userId">Restricts to identity links that have the given user id. (optional)</param>
        /// <param name="groupId">Restricts to identity links that have the given group id. (optional)</param>
        /// <param name="dateBefore">Restricts to identity links that have the time before the given time. (optional)</param>
        /// <param name="dateAfter">Restricts to identity links that have the time after the given time. (optional)</param>
        /// <param name="taskId">Restricts to identity links that have the given task id. (optional)</param>
        /// <param name="processDefinitionId">Restricts to identity links that have the given process definition id. (optional)</param>
        /// <param name="processDefinitionKey">Restricts to identity links that have the given process definition key. (optional)</param>
        /// <param name="operationType">Restricts to identity links that have the given operationType (add/delete). (optional)</param>
        /// <param name="assignerId">Restricts to identity links that have the given assigner id. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include historic identity links that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;HistoricIdentityLinkLogDto&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<HistoricIdentityLinkLogDto>>> GetHistoricIdentityLinksWithHttpInfoAsync(string type = default(string), string userId = default(string), string groupId = default(string), DateTime? dateBefore = default(DateTime?), DateTime? dateAfter = default(DateTime?), string taskId = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string operationType = default(string), string assignerId = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Identity Link Log Count
        /// </summary>
        /// <remarks>
        /// Queries for the number of historic identity link logs that fulfill the given parameters. Takes the same parameters as the [Get Identity-Link-Logs](https://docs.camunda.org/manual/7.16/reference/rest/history/identity-links/get-identity-link-query/) method.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Restricts to identity links that have the given type (candidate/assignee/owner). (optional)</param>
        /// <param name="userId">Restricts to identity links that have the given user id. (optional)</param>
        /// <param name="groupId">Restricts to identity links that have the given group id. (optional)</param>
        /// <param name="dateBefore">Restricts to identity links that have the time before the given time. (optional)</param>
        /// <param name="dateAfter">Restricts to identity links that have the time after the given time. (optional)</param>
        /// <param name="taskId">Restricts to identity links that have the given task id. (optional)</param>
        /// <param name="processDefinitionId">Restricts to identity links that have the given process definition id. (optional)</param>
        /// <param name="processDefinitionKey">Restricts to identity links that have the given process definition key. (optional)</param>
        /// <param name="operationType">Restricts to identity links that have the given operationType (add/delete). (optional)</param>
        /// <param name="assignerId">Restricts to identity links that have the given assigner id. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include historic identity links that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CountResultDto</returns>
        System.Threading.Tasks.Task<CountResultDto> GetHistoricIdentityLinksCountAsync(string type = default(string), string userId = default(string), string groupId = default(string), DateTime? dateBefore = default(DateTime?), DateTime? dateAfter = default(DateTime?), string taskId = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string operationType = default(string), string assignerId = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Identity Link Log Count
        /// </summary>
        /// <remarks>
        /// Queries for the number of historic identity link logs that fulfill the given parameters. Takes the same parameters as the [Get Identity-Link-Logs](https://docs.camunda.org/manual/7.16/reference/rest/history/identity-links/get-identity-link-query/) method.
        /// </remarks>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Restricts to identity links that have the given type (candidate/assignee/owner). (optional)</param>
        /// <param name="userId">Restricts to identity links that have the given user id. (optional)</param>
        /// <param name="groupId">Restricts to identity links that have the given group id. (optional)</param>
        /// <param name="dateBefore">Restricts to identity links that have the time before the given time. (optional)</param>
        /// <param name="dateAfter">Restricts to identity links that have the time after the given time. (optional)</param>
        /// <param name="taskId">Restricts to identity links that have the given task id. (optional)</param>
        /// <param name="processDefinitionId">Restricts to identity links that have the given process definition id. (optional)</param>
        /// <param name="processDefinitionKey">Restricts to identity links that have the given process definition key. (optional)</param>
        /// <param name="operationType">Restricts to identity links that have the given operationType (add/delete). (optional)</param>
        /// <param name="assignerId">Restricts to identity links that have the given assigner id. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include historic identity links that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CountResultDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<CountResultDto>> GetHistoricIdentityLinksCountWithHttpInfoAsync(string type = default(string), string userId = default(string), string groupId = default(string), DateTime? dateBefore = default(DateTime?), DateTime? dateAfter = default(DateTime?), string taskId = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string operationType = default(string), string assignerId = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IHistoricIdentityLinkLogApi : IHistoricIdentityLinkLogApiSync, IHistoricIdentityLinkLogApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class HistoricIdentityLinkLogApi : IDisposable, IHistoricIdentityLinkLogApi
    {
        private Camunda.OpenApi.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="HistoricIdentityLinkLogApi"/> class.
        /// **IMPORTANT** This will also create an istance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHander</see>.
        /// </summary>
        /// <returns></returns>
        public HistoricIdentityLinkLogApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="HistoricIdentityLinkLogApi"/> class.
        /// **IMPORTANT** This will also create an istance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHander</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public HistoricIdentityLinkLogApi(string basePath)
        {
            this.Configuration = Camunda.OpenApi.Client.Client.Configuration.MergeConfigurations(
                Camunda.OpenApi.Client.Client.GlobalConfiguration.Instance,
                new Camunda.OpenApi.Client.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new Camunda.OpenApi.Client.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = Camunda.OpenApi.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="HistoricIdentityLinkLogApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an istance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHander</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public HistoricIdentityLinkLogApi(Camunda.OpenApi.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Camunda.OpenApi.Client.Client.Configuration.MergeConfigurations(
                Camunda.OpenApi.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new Camunda.OpenApi.Client.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = Camunda.OpenApi.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="HistoricIdentityLinkLogApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public HistoricIdentityLinkLogApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="HistoricIdentityLinkLogApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public HistoricIdentityLinkLogApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = Camunda.OpenApi.Client.Client.Configuration.MergeConfigurations(
                Camunda.OpenApi.Client.Client.GlobalConfiguration.Instance,
                new Camunda.OpenApi.Client.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new Camunda.OpenApi.Client.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = Camunda.OpenApi.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="HistoricIdentityLinkLogApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public HistoricIdentityLinkLogApi(HttpClient client, Camunda.OpenApi.Client.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = Camunda.OpenApi.Client.Client.Configuration.MergeConfigurations(
                Camunda.OpenApi.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new Camunda.OpenApi.Client.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = Camunda.OpenApi.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="HistoricIdentityLinkLogApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public HistoricIdentityLinkLogApi(Camunda.OpenApi.Client.Client.ISynchronousClient client, Camunda.OpenApi.Client.Client.IAsynchronousClient asyncClient, Camunda.OpenApi.Client.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Camunda.OpenApi.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public Camunda.OpenApi.Client.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Camunda.OpenApi.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Camunda.OpenApi.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Camunda.OpenApi.Client.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Camunda.OpenApi.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get Identity Link Logs Queries for historic identity link logs that fulfill given parameters. The size of the result set can be retrieved by using the [Get Identity-Link-Log Count](https://docs.camunda.org/manual/7.16/reference/rest/history/identity-links/get-identity-link-query-count/) method.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Restricts to identity links that have the given type (candidate/assignee/owner). (optional)</param>
        /// <param name="userId">Restricts to identity links that have the given user id. (optional)</param>
        /// <param name="groupId">Restricts to identity links that have the given group id. (optional)</param>
        /// <param name="dateBefore">Restricts to identity links that have the time before the given time. (optional)</param>
        /// <param name="dateAfter">Restricts to identity links that have the time after the given time. (optional)</param>
        /// <param name="taskId">Restricts to identity links that have the given task id. (optional)</param>
        /// <param name="processDefinitionId">Restricts to identity links that have the given process definition id. (optional)</param>
        /// <param name="processDefinitionKey">Restricts to identity links that have the given process definition key. (optional)</param>
        /// <param name="operationType">Restricts to identity links that have the given operationType (add/delete). (optional)</param>
        /// <param name="assignerId">Restricts to identity links that have the given assigner id. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include historic identity links that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <returns>List&lt;HistoricIdentityLinkLogDto&gt;</returns>
        public List<HistoricIdentityLinkLogDto> GetHistoricIdentityLinks(string type = default(string), string userId = default(string), string groupId = default(string), DateTime? dateBefore = default(DateTime?), DateTime? dateAfter = default(DateTime?), string taskId = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string operationType = default(string), string assignerId = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<List<HistoricIdentityLinkLogDto>> localVarResponse = GetHistoricIdentityLinksWithHttpInfo(type, userId, groupId, dateBefore, dateAfter, taskId, processDefinitionId, processDefinitionKey, operationType, assignerId, tenantIdIn, withoutTenantId, sortBy, sortOrder, firstResult, maxResults);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Identity Link Logs Queries for historic identity link logs that fulfill given parameters. The size of the result set can be retrieved by using the [Get Identity-Link-Log Count](https://docs.camunda.org/manual/7.16/reference/rest/history/identity-links/get-identity-link-query-count/) method.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Restricts to identity links that have the given type (candidate/assignee/owner). (optional)</param>
        /// <param name="userId">Restricts to identity links that have the given user id. (optional)</param>
        /// <param name="groupId">Restricts to identity links that have the given group id. (optional)</param>
        /// <param name="dateBefore">Restricts to identity links that have the time before the given time. (optional)</param>
        /// <param name="dateAfter">Restricts to identity links that have the time after the given time. (optional)</param>
        /// <param name="taskId">Restricts to identity links that have the given task id. (optional)</param>
        /// <param name="processDefinitionId">Restricts to identity links that have the given process definition id. (optional)</param>
        /// <param name="processDefinitionKey">Restricts to identity links that have the given process definition key. (optional)</param>
        /// <param name="operationType">Restricts to identity links that have the given operationType (add/delete). (optional)</param>
        /// <param name="assignerId">Restricts to identity links that have the given assigner id. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include historic identity links that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <returns>ApiResponse of List&lt;HistoricIdentityLinkLogDto&gt;</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<List<HistoricIdentityLinkLogDto>> GetHistoricIdentityLinksWithHttpInfo(string type = default(string), string userId = default(string), string groupId = default(string), DateTime? dateBefore = default(DateTime?), DateTime? dateAfter = default(DateTime?), string taskId = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string operationType = default(string), string assignerId = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?))
        {
            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (userId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "userId", userId));
            }
            if (groupId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "groupId", groupId));
            }
            if (dateBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "dateBefore", dateBefore));
            }
            if (dateAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "dateAfter", dateAfter));
            }
            if (taskId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "taskId", taskId));
            }
            if (processDefinitionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processDefinitionId", processDefinitionId));
            }
            if (processDefinitionKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processDefinitionKey", processDefinitionKey));
            }
            if (operationType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "operationType", operationType));
            }
            if (assignerId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "assignerId", assignerId));
            }
            if (tenantIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "tenantIdIn", tenantIdIn));
            }
            if (withoutTenantId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "withoutTenantId", withoutTenantId));
            }
            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "sortBy", sortBy));
            }
            if (sortOrder != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "sortOrder", sortOrder));
            }
            if (firstResult != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "firstResult", firstResult));
            }
            if (maxResults != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "maxResults", maxResults));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<HistoricIdentityLinkLogDto>>("/history/identity-link-log", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetHistoricIdentityLinks", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Identity Link Logs Queries for historic identity link logs that fulfill given parameters. The size of the result set can be retrieved by using the [Get Identity-Link-Log Count](https://docs.camunda.org/manual/7.16/reference/rest/history/identity-links/get-identity-link-query-count/) method.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Restricts to identity links that have the given type (candidate/assignee/owner). (optional)</param>
        /// <param name="userId">Restricts to identity links that have the given user id. (optional)</param>
        /// <param name="groupId">Restricts to identity links that have the given group id. (optional)</param>
        /// <param name="dateBefore">Restricts to identity links that have the time before the given time. (optional)</param>
        /// <param name="dateAfter">Restricts to identity links that have the time after the given time. (optional)</param>
        /// <param name="taskId">Restricts to identity links that have the given task id. (optional)</param>
        /// <param name="processDefinitionId">Restricts to identity links that have the given process definition id. (optional)</param>
        /// <param name="processDefinitionKey">Restricts to identity links that have the given process definition key. (optional)</param>
        /// <param name="operationType">Restricts to identity links that have the given operationType (add/delete). (optional)</param>
        /// <param name="assignerId">Restricts to identity links that have the given assigner id. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include historic identity links that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;HistoricIdentityLinkLogDto&gt;</returns>
        public async System.Threading.Tasks.Task<List<HistoricIdentityLinkLogDto>> GetHistoricIdentityLinksAsync(string type = default(string), string userId = default(string), string groupId = default(string), DateTime? dateBefore = default(DateTime?), DateTime? dateAfter = default(DateTime?), string taskId = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string operationType = default(string), string assignerId = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<List<HistoricIdentityLinkLogDto>> localVarResponse = await GetHistoricIdentityLinksWithHttpInfoAsync(type, userId, groupId, dateBefore, dateAfter, taskId, processDefinitionId, processDefinitionKey, operationType, assignerId, tenantIdIn, withoutTenantId, sortBy, sortOrder, firstResult, maxResults, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Identity Link Logs Queries for historic identity link logs that fulfill given parameters. The size of the result set can be retrieved by using the [Get Identity-Link-Log Count](https://docs.camunda.org/manual/7.16/reference/rest/history/identity-links/get-identity-link-query-count/) method.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Restricts to identity links that have the given type (candidate/assignee/owner). (optional)</param>
        /// <param name="userId">Restricts to identity links that have the given user id. (optional)</param>
        /// <param name="groupId">Restricts to identity links that have the given group id. (optional)</param>
        /// <param name="dateBefore">Restricts to identity links that have the time before the given time. (optional)</param>
        /// <param name="dateAfter">Restricts to identity links that have the time after the given time. (optional)</param>
        /// <param name="taskId">Restricts to identity links that have the given task id. (optional)</param>
        /// <param name="processDefinitionId">Restricts to identity links that have the given process definition id. (optional)</param>
        /// <param name="processDefinitionKey">Restricts to identity links that have the given process definition key. (optional)</param>
        /// <param name="operationType">Restricts to identity links that have the given operationType (add/delete). (optional)</param>
        /// <param name="assignerId">Restricts to identity links that have the given assigner id. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include historic identity links that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;HistoricIdentityLinkLogDto&gt;)</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<List<HistoricIdentityLinkLogDto>>> GetHistoricIdentityLinksWithHttpInfoAsync(string type = default(string), string userId = default(string), string groupId = default(string), DateTime? dateBefore = default(DateTime?), DateTime? dateAfter = default(DateTime?), string taskId = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string operationType = default(string), string assignerId = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (userId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "userId", userId));
            }
            if (groupId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "groupId", groupId));
            }
            if (dateBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "dateBefore", dateBefore));
            }
            if (dateAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "dateAfter", dateAfter));
            }
            if (taskId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "taskId", taskId));
            }
            if (processDefinitionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processDefinitionId", processDefinitionId));
            }
            if (processDefinitionKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processDefinitionKey", processDefinitionKey));
            }
            if (operationType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "operationType", operationType));
            }
            if (assignerId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "assignerId", assignerId));
            }
            if (tenantIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "tenantIdIn", tenantIdIn));
            }
            if (withoutTenantId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "withoutTenantId", withoutTenantId));
            }
            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "sortBy", sortBy));
            }
            if (sortOrder != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "sortOrder", sortOrder));
            }
            if (firstResult != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "firstResult", firstResult));
            }
            if (maxResults != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "maxResults", maxResults));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<HistoricIdentityLinkLogDto>>("/history/identity-link-log", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetHistoricIdentityLinks", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Identity Link Log Count Queries for the number of historic identity link logs that fulfill the given parameters. Takes the same parameters as the [Get Identity-Link-Logs](https://docs.camunda.org/manual/7.16/reference/rest/history/identity-links/get-identity-link-query/) method.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Restricts to identity links that have the given type (candidate/assignee/owner). (optional)</param>
        /// <param name="userId">Restricts to identity links that have the given user id. (optional)</param>
        /// <param name="groupId">Restricts to identity links that have the given group id. (optional)</param>
        /// <param name="dateBefore">Restricts to identity links that have the time before the given time. (optional)</param>
        /// <param name="dateAfter">Restricts to identity links that have the time after the given time. (optional)</param>
        /// <param name="taskId">Restricts to identity links that have the given task id. (optional)</param>
        /// <param name="processDefinitionId">Restricts to identity links that have the given process definition id. (optional)</param>
        /// <param name="processDefinitionKey">Restricts to identity links that have the given process definition key. (optional)</param>
        /// <param name="operationType">Restricts to identity links that have the given operationType (add/delete). (optional)</param>
        /// <param name="assignerId">Restricts to identity links that have the given assigner id. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include historic identity links that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <returns>CountResultDto</returns>
        public CountResultDto GetHistoricIdentityLinksCount(string type = default(string), string userId = default(string), string groupId = default(string), DateTime? dateBefore = default(DateTime?), DateTime? dateAfter = default(DateTime?), string taskId = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string operationType = default(string), string assignerId = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<CountResultDto> localVarResponse = GetHistoricIdentityLinksCountWithHttpInfo(type, userId, groupId, dateBefore, dateAfter, taskId, processDefinitionId, processDefinitionKey, operationType, assignerId, tenantIdIn, withoutTenantId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Identity Link Log Count Queries for the number of historic identity link logs that fulfill the given parameters. Takes the same parameters as the [Get Identity-Link-Logs](https://docs.camunda.org/manual/7.16/reference/rest/history/identity-links/get-identity-link-query/) method.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Restricts to identity links that have the given type (candidate/assignee/owner). (optional)</param>
        /// <param name="userId">Restricts to identity links that have the given user id. (optional)</param>
        /// <param name="groupId">Restricts to identity links that have the given group id. (optional)</param>
        /// <param name="dateBefore">Restricts to identity links that have the time before the given time. (optional)</param>
        /// <param name="dateAfter">Restricts to identity links that have the time after the given time. (optional)</param>
        /// <param name="taskId">Restricts to identity links that have the given task id. (optional)</param>
        /// <param name="processDefinitionId">Restricts to identity links that have the given process definition id. (optional)</param>
        /// <param name="processDefinitionKey">Restricts to identity links that have the given process definition key. (optional)</param>
        /// <param name="operationType">Restricts to identity links that have the given operationType (add/delete). (optional)</param>
        /// <param name="assignerId">Restricts to identity links that have the given assigner id. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include historic identity links that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <returns>ApiResponse of CountResultDto</returns>
        public Camunda.OpenApi.Client.Client.ApiResponse<CountResultDto> GetHistoricIdentityLinksCountWithHttpInfo(string type = default(string), string userId = default(string), string groupId = default(string), DateTime? dateBefore = default(DateTime?), DateTime? dateAfter = default(DateTime?), string taskId = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string operationType = default(string), string assignerId = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?))
        {
            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (userId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "userId", userId));
            }
            if (groupId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "groupId", groupId));
            }
            if (dateBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "dateBefore", dateBefore));
            }
            if (dateAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "dateAfter", dateAfter));
            }
            if (taskId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "taskId", taskId));
            }
            if (processDefinitionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processDefinitionId", processDefinitionId));
            }
            if (processDefinitionKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processDefinitionKey", processDefinitionKey));
            }
            if (operationType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "operationType", operationType));
            }
            if (assignerId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "assignerId", assignerId));
            }
            if (tenantIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "tenantIdIn", tenantIdIn));
            }
            if (withoutTenantId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "withoutTenantId", withoutTenantId));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<CountResultDto>("/history/identity-link-log/count", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetHistoricIdentityLinksCount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Identity Link Log Count Queries for the number of historic identity link logs that fulfill the given parameters. Takes the same parameters as the [Get Identity-Link-Logs](https://docs.camunda.org/manual/7.16/reference/rest/history/identity-links/get-identity-link-query/) method.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Restricts to identity links that have the given type (candidate/assignee/owner). (optional)</param>
        /// <param name="userId">Restricts to identity links that have the given user id. (optional)</param>
        /// <param name="groupId">Restricts to identity links that have the given group id. (optional)</param>
        /// <param name="dateBefore">Restricts to identity links that have the time before the given time. (optional)</param>
        /// <param name="dateAfter">Restricts to identity links that have the time after the given time. (optional)</param>
        /// <param name="taskId">Restricts to identity links that have the given task id. (optional)</param>
        /// <param name="processDefinitionId">Restricts to identity links that have the given process definition id. (optional)</param>
        /// <param name="processDefinitionKey">Restricts to identity links that have the given process definition key. (optional)</param>
        /// <param name="operationType">Restricts to identity links that have the given operationType (add/delete). (optional)</param>
        /// <param name="assignerId">Restricts to identity links that have the given assigner id. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include historic identity links that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CountResultDto</returns>
        public async System.Threading.Tasks.Task<CountResultDto> GetHistoricIdentityLinksCountAsync(string type = default(string), string userId = default(string), string groupId = default(string), DateTime? dateBefore = default(DateTime?), DateTime? dateAfter = default(DateTime?), string taskId = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string operationType = default(string), string assignerId = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Camunda.OpenApi.Client.Client.ApiResponse<CountResultDto> localVarResponse = await GetHistoricIdentityLinksCountWithHttpInfoAsync(type, userId, groupId, dateBefore, dateAfter, taskId, processDefinitionId, processDefinitionKey, operationType, assignerId, tenantIdIn, withoutTenantId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Identity Link Log Count Queries for the number of historic identity link logs that fulfill the given parameters. Takes the same parameters as the [Get Identity-Link-Logs](https://docs.camunda.org/manual/7.16/reference/rest/history/identity-links/get-identity-link-query/) method.
        /// </summary>
        /// <exception cref="Camunda.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Restricts to identity links that have the given type (candidate/assignee/owner). (optional)</param>
        /// <param name="userId">Restricts to identity links that have the given user id. (optional)</param>
        /// <param name="groupId">Restricts to identity links that have the given group id. (optional)</param>
        /// <param name="dateBefore">Restricts to identity links that have the time before the given time. (optional)</param>
        /// <param name="dateAfter">Restricts to identity links that have the time after the given time. (optional)</param>
        /// <param name="taskId">Restricts to identity links that have the given task id. (optional)</param>
        /// <param name="processDefinitionId">Restricts to identity links that have the given process definition id. (optional)</param>
        /// <param name="processDefinitionKey">Restricts to identity links that have the given process definition key. (optional)</param>
        /// <param name="operationType">Restricts to identity links that have the given operationType (add/delete). (optional)</param>
        /// <param name="assignerId">Restricts to identity links that have the given assigner id. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include historic identity links that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CountResultDto)</returns>
        public async System.Threading.Tasks.Task<Camunda.OpenApi.Client.Client.ApiResponse<CountResultDto>> GetHistoricIdentityLinksCountWithHttpInfoAsync(string type = default(string), string userId = default(string), string groupId = default(string), DateTime? dateBefore = default(DateTime?), DateTime? dateAfter = default(DateTime?), string taskId = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string operationType = default(string), string assignerId = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Camunda.OpenApi.Client.Client.RequestOptions localVarRequestOptions = new Camunda.OpenApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.OpenApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (userId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "userId", userId));
            }
            if (groupId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "groupId", groupId));
            }
            if (dateBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "dateBefore", dateBefore));
            }
            if (dateAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "dateAfter", dateAfter));
            }
            if (taskId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "taskId", taskId));
            }
            if (processDefinitionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processDefinitionId", processDefinitionId));
            }
            if (processDefinitionKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "processDefinitionKey", processDefinitionKey));
            }
            if (operationType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "operationType", operationType));
            }
            if (assignerId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "assignerId", assignerId));
            }
            if (tenantIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "tenantIdIn", tenantIdIn));
            }
            if (withoutTenantId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.OpenApi.Client.Client.ClientUtils.ParameterToMultiMap("", "withoutTenantId", withoutTenantId));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<CountResultDto>("/history/identity-link-log/count", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetHistoricIdentityLinksCount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
