/*
 * Camunda BPM REST API
 *
 * OpenApi Spec for Camunda BPM REST API.
 *
 * The version of the OpenAPI document: 7.14.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Camunda.OpenApi.Client.Client;
using Camunda.OpenApi.Client.Api;
// uncomment below to import models
//using Camunda.OpenApi.Client.Model;

namespace Camunda.OpenApi.Client.Test.Api
{
    /// <summary>
    ///  Class for testing UserApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class UserApiTests : IDisposable
    {
        private UserApi instance;

        public UserApiTests()
        {
            instance = new UserApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of UserApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' UserApi
            //Assert.IsType<UserApi>(instance);
        }

        /// <summary>
        /// Test AvailableOperations
        /// </summary>
        [Fact]
        public void AvailableOperationsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.AvailableOperations();
            //Assert.IsType<ResourceOptionsDto>(response);
        }

        /// <summary>
        /// Test AvailableUserOperations
        /// </summary>
        [Fact]
        public void AvailableUserOperationsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.AvailableUserOperations(id);
            //Assert.IsType<ResourceOptionsDto>(response);
        }

        /// <summary>
        /// Test CreateUser
        /// </summary>
        [Fact]
        public void CreateUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UserDto userDto = null;
            //instance.CreateUser(userDto);
        }

        /// <summary>
        /// Test DeleteUser
        /// </summary>
        [Fact]
        public void DeleteUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.DeleteUser(id);
        }

        /// <summary>
        /// Test GetUserCount
        /// </summary>
        [Fact]
        public void GetUserCountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string idIn = null;
            //string firstName = null;
            //string firstNameLike = null;
            //string lastName = null;
            //string lastNameLike = null;
            //string email = null;
            //string emailLike = null;
            //string memberOfGroup = null;
            //string memberOfTenant = null;
            //string potentialStarter = null;
            //var response = instance.GetUserCount(id, idIn, firstName, firstNameLike, lastName, lastNameLike, email, emailLike, memberOfGroup, memberOfTenant, potentialStarter);
            //Assert.IsType<CountResultDto>(response);
        }

        /// <summary>
        /// Test GetUserProfile
        /// </summary>
        [Fact]
        public void GetUserProfileTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetUserProfile(id);
            //Assert.IsType<List<UserProfileDto>>(response);
        }

        /// <summary>
        /// Test GetUsers
        /// </summary>
        [Fact]
        public void GetUsersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string idIn = null;
            //string firstName = null;
            //string firstNameLike = null;
            //string lastName = null;
            //string lastNameLike = null;
            //string email = null;
            //string emailLike = null;
            //string memberOfGroup = null;
            //string memberOfTenant = null;
            //string potentialStarter = null;
            //string sortBy = null;
            //string sortOrder = null;
            //int? firstResult = null;
            //int? maxResults = null;
            //var response = instance.GetUsers(id, idIn, firstName, firstNameLike, lastName, lastNameLike, email, emailLike, memberOfGroup, memberOfTenant, potentialStarter, sortBy, sortOrder, firstResult, maxResults);
            //Assert.IsType<List<UserProfileDto>>(response);
        }

        /// <summary>
        /// Test UnlockUser
        /// </summary>
        [Fact]
        public void UnlockUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.UnlockUser(id);
        }

        /// <summary>
        /// Test UpdateCredentials
        /// </summary>
        [Fact]
        public void UpdateCredentialsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string password = null;
            //string authenticatedUserPassword = null;
            //UserCredentialsDto userCredentialsDto = null;
            //var response = instance.UpdateCredentials(id, password, authenticatedUserPassword, userCredentialsDto);
            //Assert.IsType<Object>(response);
        }
    }
}
