/*
 * Camunda BPM REST API
 *
 * OpenApi Spec for Camunda BPM REST API.
 *
 * The version of the OpenAPI document: 7.14.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = CamundaClient.Client.OpenAPIDateConverter;

namespace CamundaClient.Model
{
    /// <summary>
    /// DeleteHistoricProcessInstancesDto
    /// </summary>
    [DataContract(Name = "DeleteHistoricProcessInstancesDto")]
    public partial class DeleteHistoricProcessInstancesDto : IEquatable<DeleteHistoricProcessInstancesDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DeleteHistoricProcessInstancesDto" /> class.
        /// </summary>
        /// <param name="historicProcessInstanceIds">A list historic process instance ids to delete..</param>
        /// <param name="historicProcessInstanceQuery">historicProcessInstanceQuery.</param>
        /// <param name="deleteReason">A string with delete reason..</param>
        /// <param name="failIfNotExists">If set to &#x60;false&#x60;, the request will still be successful if one ore more of the process ids are not found..</param>
        public DeleteHistoricProcessInstancesDto(List<string> historicProcessInstanceIds = default(List<string>), HistoricProcessInstanceQueryDto historicProcessInstanceQuery = default(HistoricProcessInstanceQueryDto), string deleteReason = default(string), bool? failIfNotExists = default(bool?))
        {
            this.HistoricProcessInstanceIds = historicProcessInstanceIds;
            this.HistoricProcessInstanceQuery = historicProcessInstanceQuery;
            this.DeleteReason = deleteReason;
            this.FailIfNotExists = failIfNotExists;
        }

        /// <summary>
        /// A list historic process instance ids to delete.
        /// </summary>
        /// <value>A list historic process instance ids to delete.</value>
        [DataMember(Name = "historicProcessInstanceIds", EmitDefaultValue = false)]
        public List<string> HistoricProcessInstanceIds { get; set; }

        /// <summary>
        /// Gets or Sets HistoricProcessInstanceQuery
        /// </summary>
        [DataMember(Name = "historicProcessInstanceQuery", EmitDefaultValue = false)]
        public HistoricProcessInstanceQueryDto HistoricProcessInstanceQuery { get; set; }

        /// <summary>
        /// A string with delete reason.
        /// </summary>
        /// <value>A string with delete reason.</value>
        [DataMember(Name = "deleteReason", EmitDefaultValue = false)]
        public string DeleteReason { get; set; }

        /// <summary>
        /// If set to &#x60;false&#x60;, the request will still be successful if one ore more of the process ids are not found.
        /// </summary>
        /// <value>If set to &#x60;false&#x60;, the request will still be successful if one ore more of the process ids are not found.</value>
        [DataMember(Name = "failIfNotExists", EmitDefaultValue = true)]
        public bool? FailIfNotExists { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DeleteHistoricProcessInstancesDto {\n");
            sb.Append("  HistoricProcessInstanceIds: ").Append(HistoricProcessInstanceIds).Append("\n");
            sb.Append("  HistoricProcessInstanceQuery: ").Append(HistoricProcessInstanceQuery).Append("\n");
            sb.Append("  DeleteReason: ").Append(DeleteReason).Append("\n");
            sb.Append("  FailIfNotExists: ").Append(FailIfNotExists).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DeleteHistoricProcessInstancesDto);
        }

        /// <summary>
        /// Returns true if DeleteHistoricProcessInstancesDto instances are equal
        /// </summary>
        /// <param name="input">Instance of DeleteHistoricProcessInstancesDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DeleteHistoricProcessInstancesDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.HistoricProcessInstanceIds == input.HistoricProcessInstanceIds ||
                    this.HistoricProcessInstanceIds != null &&
                    input.HistoricProcessInstanceIds != null &&
                    this.HistoricProcessInstanceIds.SequenceEqual(input.HistoricProcessInstanceIds)
                ) && 
                (
                    this.HistoricProcessInstanceQuery == input.HistoricProcessInstanceQuery ||
                    (this.HistoricProcessInstanceQuery != null &&
                    this.HistoricProcessInstanceQuery.Equals(input.HistoricProcessInstanceQuery))
                ) && 
                (
                    this.DeleteReason == input.DeleteReason ||
                    (this.DeleteReason != null &&
                    this.DeleteReason.Equals(input.DeleteReason))
                ) && 
                (
                    this.FailIfNotExists == input.FailIfNotExists ||
                    (this.FailIfNotExists != null &&
                    this.FailIfNotExists.Equals(input.FailIfNotExists))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.HistoricProcessInstanceIds != null)
                    hashCode = hashCode * 59 + this.HistoricProcessInstanceIds.GetHashCode();
                if (this.HistoricProcessInstanceQuery != null)
                    hashCode = hashCode * 59 + this.HistoricProcessInstanceQuery.GetHashCode();
                if (this.DeleteReason != null)
                    hashCode = hashCode * 59 + this.DeleteReason.GetHashCode();
                if (this.FailIfNotExists != null)
                    hashCode = hashCode * 59 + this.FailIfNotExists.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
