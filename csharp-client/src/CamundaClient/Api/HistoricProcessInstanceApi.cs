/*
 * Camunda BPM REST API
 *
 * OpenApi Spec for Camunda BPM REST API.
 *
 * The version of the OpenAPI document: 7.14.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using CamundaClient.Client;
using CamundaClient.Model;

namespace CamundaClient.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IHistoricProcessInstanceApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete
        /// </summary>
        /// <remarks>
        /// Deletes a process instance from the history by id.
        /// </remarks>
        /// <exception cref="CamundaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the historic process instance to be deleted.</param>
        /// <param name="failIfNotExists">If set to &#x60;false&#x60;, the request will still be successful if the process id is not found. (optional)</param>
        /// <returns></returns>
        void DeleteHistoricProcessInstance(string id, bool? failIfNotExists = default(bool?));

        /// <summary>
        /// Delete
        /// </summary>
        /// <remarks>
        /// Deletes a process instance from the history by id.
        /// </remarks>
        /// <exception cref="CamundaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the historic process instance to be deleted.</param>
        /// <param name="failIfNotExists">If set to &#x60;false&#x60;, the request will still be successful if the process id is not found. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteHistoricProcessInstanceWithHttpInfo(string id, bool? failIfNotExists = default(bool?));
        /// <summary>
        /// Delete Async (POST)
        /// </summary>
        /// <remarks>
        /// Delete multiple historic process instances asynchronously (batch). At least &#x60;historicProcessInstanceIds&#x60; or &#x60;historicProcessInstanceQuery&#x60; has to be provided. If both are provided then all instances matching query criterion and instances from the list will be deleted.
        /// </remarks>
        /// <exception cref="CamundaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteHistoricProcessInstancesDto"> (optional)</param>
        /// <returns>BatchDto</returns>
        BatchDto DeleteHistoricProcessInstancesAsync(DeleteHistoricProcessInstancesDto deleteHistoricProcessInstancesDto = default(DeleteHistoricProcessInstancesDto));

        /// <summary>
        /// Delete Async (POST)
        /// </summary>
        /// <remarks>
        /// Delete multiple historic process instances asynchronously (batch). At least &#x60;historicProcessInstanceIds&#x60; or &#x60;historicProcessInstanceQuery&#x60; has to be provided. If both are provided then all instances matching query criterion and instances from the list will be deleted.
        /// </remarks>
        /// <exception cref="CamundaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteHistoricProcessInstancesDto"> (optional)</param>
        /// <returns>ApiResponse of BatchDto</returns>
        ApiResponse<BatchDto> DeleteHistoricProcessInstancesAsyncWithHttpInfo(DeleteHistoricProcessInstancesDto deleteHistoricProcessInstancesDto = default(DeleteHistoricProcessInstancesDto));
        /// <summary>
        /// Delete Variable Instances
        /// </summary>
        /// <remarks>
        /// Deletes all variables of a process instance from the history by id.
        /// </remarks>
        /// <exception cref="CamundaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process instance for which all historic variables are to be deleted.</param>
        /// <returns></returns>
        void DeleteHistoricVariableInstancesOfHistoricProcessInstance(string id);

        /// <summary>
        /// Delete Variable Instances
        /// </summary>
        /// <remarks>
        /// Deletes all variables of a process instance from the history by id.
        /// </remarks>
        /// <exception cref="CamundaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process instance for which all historic variables are to be deleted.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteHistoricVariableInstancesOfHistoricProcessInstanceWithHttpInfo(string id);
        /// <summary>
        /// Get
        /// </summary>
        /// <remarks>
        /// Retrieves a historic process instance by id, according to the &#x60;HistoricProcessInstance&#x60; interface in the engine.
        /// </remarks>
        /// <exception cref="CamundaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the historic process instance to be retrieved.</param>
        /// <returns>HistoricProcessInstanceDto</returns>
        HistoricProcessInstanceDto GetHistoricProcessInstance(string id);

        /// <summary>
        /// Get
        /// </summary>
        /// <remarks>
        /// Retrieves a historic process instance by id, according to the &#x60;HistoricProcessInstance&#x60; interface in the engine.
        /// </remarks>
        /// <exception cref="CamundaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the historic process instance to be retrieved.</param>
        /// <returns>ApiResponse of HistoricProcessInstanceDto</returns>
        ApiResponse<HistoricProcessInstanceDto> GetHistoricProcessInstanceWithHttpInfo(string id);
        /// <summary>
        /// Get Duration Report
        /// </summary>
        /// <remarks>
        /// Retrieves a report about the duration of completed process instances, grouped by a period. These reports include the maximum, minimum and average duration of all completed process instances which were started in a given period.  **Note:** This only includes historic data.
        /// </remarks>
        /// <exception cref="CamundaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportType">**Mandatory.** Specifies the type of the report to retrieve. To retrieve a report about the duration of process instances, the value must be set to &#x60;duration&#x60;.</param>
        /// <param name="periodUnit">**Mandatory.** Specifies the granularity of the report. Valid values are &#x60;month&#x60; and &#x60;quarter&#x60;.</param>
        /// <param name="processDefinitionIdIn">Filter by process definition ids. Must be a comma-separated list of process definition ids. (optional)</param>
        /// <param name="processDefinitionKeyIn">Filter by process definition keys. Must be a comma-separated list of process definition keys. (optional)</param>
        /// <param name="startedBefore">Restrict to instances that were started before the given date. By [default](), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2016-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="startedAfter">Restrict to instances that were started after the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2016-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <returns>Object</returns>
        Object GetHistoricProcessInstanceDurationReport(string reportType, string periodUnit, string processDefinitionIdIn = default(string), string processDefinitionKeyIn = default(string), DateTime? startedBefore = default(DateTime?), DateTime? startedAfter = default(DateTime?));

        /// <summary>
        /// Get Duration Report
        /// </summary>
        /// <remarks>
        /// Retrieves a report about the duration of completed process instances, grouped by a period. These reports include the maximum, minimum and average duration of all completed process instances which were started in a given period.  **Note:** This only includes historic data.
        /// </remarks>
        /// <exception cref="CamundaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportType">**Mandatory.** Specifies the type of the report to retrieve. To retrieve a report about the duration of process instances, the value must be set to &#x60;duration&#x60;.</param>
        /// <param name="periodUnit">**Mandatory.** Specifies the granularity of the report. Valid values are &#x60;month&#x60; and &#x60;quarter&#x60;.</param>
        /// <param name="processDefinitionIdIn">Filter by process definition ids. Must be a comma-separated list of process definition ids. (optional)</param>
        /// <param name="processDefinitionKeyIn">Filter by process definition keys. Must be a comma-separated list of process definition keys. (optional)</param>
        /// <param name="startedBefore">Restrict to instances that were started before the given date. By [default](), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2016-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="startedAfter">Restrict to instances that were started after the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2016-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GetHistoricProcessInstanceDurationReportWithHttpInfo(string reportType, string periodUnit, string processDefinitionIdIn = default(string), string processDefinitionKeyIn = default(string), DateTime? startedBefore = default(DateTime?), DateTime? startedAfter = default(DateTime?));
        /// <summary>
        /// Get List
        /// </summary>
        /// <remarks>
        /// Queries for historic process instances that fulfill the given parameters. The size of the result set can be retrieved by using the [Get Process Instance Count](https://docs.camunda.org/manual/7.14/reference/rest/history/process-instance/get-process-instance-query-count/) method.
        /// </remarks>
        /// <exception cref="CamundaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="processInstanceId">Filter by process instance id. (optional)</param>
        /// <param name="processInstanceIds">Filter by process instance ids. Filter by a comma-separated list of &#x60;Strings&#x60;. (optional)</param>
        /// <param name="processDefinitionId">Filter by the process definition the instances run on. (optional)</param>
        /// <param name="processDefinitionKey">Filter by the key of the process definition the instances run on. (optional)</param>
        /// <param name="processDefinitionKeyIn">Filter by a list of process definition keys. A process instance must have one of the given process definition keys. Filter by a comma-separated list of &#x60;Strings&#x60;. (optional)</param>
        /// <param name="processDefinitionName">Filter by the name of the process definition the instances run on. (optional)</param>
        /// <param name="processDefinitionNameLike">Filter by process definition names that the parameter is a substring of. (optional)</param>
        /// <param name="processDefinitionKeyNotIn">Exclude instances that belong to a set of process definitions. Filter by a comma-separated list of &#x60;Strings&#x60;. (optional)</param>
        /// <param name="processInstanceBusinessKey">Filter by process instance business key. (optional)</param>
        /// <param name="processInstanceBusinessKeyLike">Filter by process instance business key that the parameter is a substring of. (optional)</param>
        /// <param name="rootProcessInstances">Restrict the query to all process instances that are top level process instances. (optional)</param>
        /// <param name="finished">Only include finished process instances. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="unfinished">Only include unfinished process instances. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="withIncidents">Only include process instances which have an incident. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="withRootIncidents">Only include process instances which have a root incident. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="incidentType">Filter by the incident type. See the [User Guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)</param>
        /// <param name="incidentStatus">Only include process instances which have an incident in status either open or resolved. To get all process instances, use the query parameter withIncidents. (optional)</param>
        /// <param name="incidentMessage">Filter by the incident message. Exact match. (optional)</param>
        /// <param name="incidentMessageLike">Filter by the incident message that the parameter is a substring of. (optional)</param>
        /// <param name="startedBefore">Restrict to instances that were started before the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="startedAfter">Restrict to instances that were started after the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="finishedBefore">Restrict to instances that were finished before the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="finishedAfter">Restrict to instances that were finished after the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="executedActivityAfter">Restrict to instances that executed an activity after the given date (inclusive). By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="executedActivityBefore">Restrict to instances that executed an activity before the given date (inclusive). By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="executedJobAfter">Restrict to instances that executed an job after the given date (inclusive). By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="executedJobBefore">Restrict to instances that executed an job before the given date (inclusive). By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="startedBy">Only include process instances that were started by the given user. (optional)</param>
        /// <param name="superProcessInstanceId">Restrict query to all process instances that are sub process instances of the given process instance. Takes a process instance id. (optional)</param>
        /// <param name="subProcessInstanceId">Restrict query to one process instance that has a sub process instance with the given id. (optional)</param>
        /// <param name="superCaseInstanceId">Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id. (optional)</param>
        /// <param name="subCaseInstanceId">Restrict query to one process instance that has a sub case instance with the given id. (optional)</param>
        /// <param name="caseInstanceId">Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id. (optional)</param>
        /// <param name="tenantIdIn">Filter by a list of tenant ids. A process instance must have one of the given tenant ids. Filter by a comma-separated list of &#x60;Strings&#x60; (optional)</param>
        /// <param name="withoutTenantId">Only include historic process instances which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="executedActivityIdIn">Restrict to instances that executed an activity with one of given ids. Filter by a comma-separated list of &#x60;Strings&#x60; (optional)</param>
        /// <param name="activeActivityIdIn">Restrict to instances that have an active activity with one of given ids. Filter by a comma-separated list of &#x60;Strings&#x60; (optional)</param>
        /// <param name="active">Restrict to instances that are active. (optional)</param>
        /// <param name="suspended">Restrict to instances that are suspended. (optional)</param>
        /// <param name="completed">Restrict to instances that are completed. (optional)</param>
        /// <param name="externallyTerminated">Restrict to instances that are externallyTerminated. (optional)</param>
        /// <param name="internallyTerminated">Restrict to instances that are internallyTerminated. (optional)</param>
        /// <param name="variables">Only include process instances that have/had variables with certain values. Variable filtering expressions are comma-separated and are structured as follows: A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value.  **Note:** Values are always treated as String objects on server side.  Valid operator values are: &#x60;eq&#x60; - equal to; &#x60;neq&#x60; - not equal to; &#x60;gt&#x60; - greater than; &#x60;gteq&#x60; - greater than or equal to; &#x60;lt&#x60; - lower than; &#x60;lteq&#x60; - lower than or equal to; &#x60;like&#x60;.  Key and value may not contain underscore or comma characters.  (optional)</param>
        /// <param name="variableNamesIgnoreCase">Match all variable names provided in variables case-insensitively. If set to &#x60;true&#x60; variableName and variablename are treated as equal. (optional)</param>
        /// <param name="variableValuesIgnoreCase">Match all variable values provided in variables case-insensitively. If set to &#x60;true&#x60; variableValue and variablevalue are treated as equal. (optional)</param>
        /// <returns>List&lt;HistoricProcessInstanceDto&gt;</returns>
        List<HistoricProcessInstanceDto> GetHistoricProcessInstances(string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?), string processInstanceId = default(string), string processInstanceIds = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string processDefinitionKeyIn = default(string), string processDefinitionName = default(string), string processDefinitionNameLike = default(string), string processDefinitionKeyNotIn = default(string), string processInstanceBusinessKey = default(string), string processInstanceBusinessKeyLike = default(string), bool? rootProcessInstances = default(bool?), bool? finished = default(bool?), bool? unfinished = default(bool?), bool? withIncidents = default(bool?), bool? withRootIncidents = default(bool?), string incidentType = default(string), string incidentStatus = default(string), string incidentMessage = default(string), string incidentMessageLike = default(string), DateTime? startedBefore = default(DateTime?), DateTime? startedAfter = default(DateTime?), DateTime? finishedBefore = default(DateTime?), DateTime? finishedAfter = default(DateTime?), DateTime? executedActivityAfter = default(DateTime?), DateTime? executedActivityBefore = default(DateTime?), DateTime? executedJobAfter = default(DateTime?), DateTime? executedJobBefore = default(DateTime?), string startedBy = default(string), string superProcessInstanceId = default(string), string subProcessInstanceId = default(string), string superCaseInstanceId = default(string), string subCaseInstanceId = default(string), string caseInstanceId = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), string executedActivityIdIn = default(string), string activeActivityIdIn = default(string), bool? active = default(bool?), bool? suspended = default(bool?), bool? completed = default(bool?), bool? externallyTerminated = default(bool?), bool? internallyTerminated = default(bool?), string variables = default(string), bool? variableNamesIgnoreCase = default(bool?), bool? variableValuesIgnoreCase = default(bool?));

        /// <summary>
        /// Get List
        /// </summary>
        /// <remarks>
        /// Queries for historic process instances that fulfill the given parameters. The size of the result set can be retrieved by using the [Get Process Instance Count](https://docs.camunda.org/manual/7.14/reference/rest/history/process-instance/get-process-instance-query-count/) method.
        /// </remarks>
        /// <exception cref="CamundaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="processInstanceId">Filter by process instance id. (optional)</param>
        /// <param name="processInstanceIds">Filter by process instance ids. Filter by a comma-separated list of &#x60;Strings&#x60;. (optional)</param>
        /// <param name="processDefinitionId">Filter by the process definition the instances run on. (optional)</param>
        /// <param name="processDefinitionKey">Filter by the key of the process definition the instances run on. (optional)</param>
        /// <param name="processDefinitionKeyIn">Filter by a list of process definition keys. A process instance must have one of the given process definition keys. Filter by a comma-separated list of &#x60;Strings&#x60;. (optional)</param>
        /// <param name="processDefinitionName">Filter by the name of the process definition the instances run on. (optional)</param>
        /// <param name="processDefinitionNameLike">Filter by process definition names that the parameter is a substring of. (optional)</param>
        /// <param name="processDefinitionKeyNotIn">Exclude instances that belong to a set of process definitions. Filter by a comma-separated list of &#x60;Strings&#x60;. (optional)</param>
        /// <param name="processInstanceBusinessKey">Filter by process instance business key. (optional)</param>
        /// <param name="processInstanceBusinessKeyLike">Filter by process instance business key that the parameter is a substring of. (optional)</param>
        /// <param name="rootProcessInstances">Restrict the query to all process instances that are top level process instances. (optional)</param>
        /// <param name="finished">Only include finished process instances. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="unfinished">Only include unfinished process instances. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="withIncidents">Only include process instances which have an incident. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="withRootIncidents">Only include process instances which have a root incident. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="incidentType">Filter by the incident type. See the [User Guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)</param>
        /// <param name="incidentStatus">Only include process instances which have an incident in status either open or resolved. To get all process instances, use the query parameter withIncidents. (optional)</param>
        /// <param name="incidentMessage">Filter by the incident message. Exact match. (optional)</param>
        /// <param name="incidentMessageLike">Filter by the incident message that the parameter is a substring of. (optional)</param>
        /// <param name="startedBefore">Restrict to instances that were started before the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="startedAfter">Restrict to instances that were started after the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="finishedBefore">Restrict to instances that were finished before the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="finishedAfter">Restrict to instances that were finished after the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="executedActivityAfter">Restrict to instances that executed an activity after the given date (inclusive). By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="executedActivityBefore">Restrict to instances that executed an activity before the given date (inclusive). By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="executedJobAfter">Restrict to instances that executed an job after the given date (inclusive). By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="executedJobBefore">Restrict to instances that executed an job before the given date (inclusive). By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="startedBy">Only include process instances that were started by the given user. (optional)</param>
        /// <param name="superProcessInstanceId">Restrict query to all process instances that are sub process instances of the given process instance. Takes a process instance id. (optional)</param>
        /// <param name="subProcessInstanceId">Restrict query to one process instance that has a sub process instance with the given id. (optional)</param>
        /// <param name="superCaseInstanceId">Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id. (optional)</param>
        /// <param name="subCaseInstanceId">Restrict query to one process instance that has a sub case instance with the given id. (optional)</param>
        /// <param name="caseInstanceId">Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id. (optional)</param>
        /// <param name="tenantIdIn">Filter by a list of tenant ids. A process instance must have one of the given tenant ids. Filter by a comma-separated list of &#x60;Strings&#x60; (optional)</param>
        /// <param name="withoutTenantId">Only include historic process instances which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="executedActivityIdIn">Restrict to instances that executed an activity with one of given ids. Filter by a comma-separated list of &#x60;Strings&#x60; (optional)</param>
        /// <param name="activeActivityIdIn">Restrict to instances that have an active activity with one of given ids. Filter by a comma-separated list of &#x60;Strings&#x60; (optional)</param>
        /// <param name="active">Restrict to instances that are active. (optional)</param>
        /// <param name="suspended">Restrict to instances that are suspended. (optional)</param>
        /// <param name="completed">Restrict to instances that are completed. (optional)</param>
        /// <param name="externallyTerminated">Restrict to instances that are externallyTerminated. (optional)</param>
        /// <param name="internallyTerminated">Restrict to instances that are internallyTerminated. (optional)</param>
        /// <param name="variables">Only include process instances that have/had variables with certain values. Variable filtering expressions are comma-separated and are structured as follows: A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value.  **Note:** Values are always treated as String objects on server side.  Valid operator values are: &#x60;eq&#x60; - equal to; &#x60;neq&#x60; - not equal to; &#x60;gt&#x60; - greater than; &#x60;gteq&#x60; - greater than or equal to; &#x60;lt&#x60; - lower than; &#x60;lteq&#x60; - lower than or equal to; &#x60;like&#x60;.  Key and value may not contain underscore or comma characters.  (optional)</param>
        /// <param name="variableNamesIgnoreCase">Match all variable names provided in variables case-insensitively. If set to &#x60;true&#x60; variableName and variablename are treated as equal. (optional)</param>
        /// <param name="variableValuesIgnoreCase">Match all variable values provided in variables case-insensitively. If set to &#x60;true&#x60; variableValue and variablevalue are treated as equal. (optional)</param>
        /// <returns>ApiResponse of List&lt;HistoricProcessInstanceDto&gt;</returns>
        ApiResponse<List<HistoricProcessInstanceDto>> GetHistoricProcessInstancesWithHttpInfo(string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?), string processInstanceId = default(string), string processInstanceIds = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string processDefinitionKeyIn = default(string), string processDefinitionName = default(string), string processDefinitionNameLike = default(string), string processDefinitionKeyNotIn = default(string), string processInstanceBusinessKey = default(string), string processInstanceBusinessKeyLike = default(string), bool? rootProcessInstances = default(bool?), bool? finished = default(bool?), bool? unfinished = default(bool?), bool? withIncidents = default(bool?), bool? withRootIncidents = default(bool?), string incidentType = default(string), string incidentStatus = default(string), string incidentMessage = default(string), string incidentMessageLike = default(string), DateTime? startedBefore = default(DateTime?), DateTime? startedAfter = default(DateTime?), DateTime? finishedBefore = default(DateTime?), DateTime? finishedAfter = default(DateTime?), DateTime? executedActivityAfter = default(DateTime?), DateTime? executedActivityBefore = default(DateTime?), DateTime? executedJobAfter = default(DateTime?), DateTime? executedJobBefore = default(DateTime?), string startedBy = default(string), string superProcessInstanceId = default(string), string subProcessInstanceId = default(string), string superCaseInstanceId = default(string), string subCaseInstanceId = default(string), string caseInstanceId = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), string executedActivityIdIn = default(string), string activeActivityIdIn = default(string), bool? active = default(bool?), bool? suspended = default(bool?), bool? completed = default(bool?), bool? externallyTerminated = default(bool?), bool? internallyTerminated = default(bool?), string variables = default(string), bool? variableNamesIgnoreCase = default(bool?), bool? variableValuesIgnoreCase = default(bool?));
        /// <summary>
        /// Get List Count
        /// </summary>
        /// <remarks>
        /// Queries for the number of historic process instances that fulfill the given parameters. Takes the same parameters as the [Get Process Instances](https://docs.camunda.org/manual/7.14/reference/rest/history/process-instance/get-process-instance-query/) method.
        /// </remarks>
        /// <exception cref="CamundaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processInstanceId">Filter by process instance id. (optional)</param>
        /// <param name="processInstanceIds">Filter by process instance ids. Filter by a comma-separated list of &#x60;Strings&#x60;. (optional)</param>
        /// <param name="processDefinitionId">Filter by the process definition the instances run on. (optional)</param>
        /// <param name="processDefinitionKey">Filter by the key of the process definition the instances run on. (optional)</param>
        /// <param name="processDefinitionKeyIn">Filter by a list of process definition keys. A process instance must have one of the given process definition keys. Filter by a comma-separated list of &#x60;Strings&#x60;. (optional)</param>
        /// <param name="processDefinitionName">Filter by the name of the process definition the instances run on. (optional)</param>
        /// <param name="processDefinitionNameLike">Filter by process definition names that the parameter is a substring of. (optional)</param>
        /// <param name="processDefinitionKeyNotIn">Exclude instances that belong to a set of process definitions. Filter by a comma-separated list of &#x60;Strings&#x60;. (optional)</param>
        /// <param name="processInstanceBusinessKey">Filter by process instance business key. (optional)</param>
        /// <param name="processInstanceBusinessKeyLike">Filter by process instance business key that the parameter is a substring of. (optional)</param>
        /// <param name="rootProcessInstances">Restrict the query to all process instances that are top level process instances. (optional)</param>
        /// <param name="finished">Only include finished process instances. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="unfinished">Only include unfinished process instances. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="withIncidents">Only include process instances which have an incident. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="withRootIncidents">Only include process instances which have a root incident. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="incidentType">Filter by the incident type. See the [User Guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)</param>
        /// <param name="incidentStatus">Only include process instances which have an incident in status either open or resolved. To get all process instances, use the query parameter withIncidents. (optional)</param>
        /// <param name="incidentMessage">Filter by the incident message. Exact match. (optional)</param>
        /// <param name="incidentMessageLike">Filter by the incident message that the parameter is a substring of. (optional)</param>
        /// <param name="startedBefore">Restrict to instances that were started before the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="startedAfter">Restrict to instances that were started after the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="finishedBefore">Restrict to instances that were finished before the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="finishedAfter">Restrict to instances that were finished after the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="executedActivityAfter">Restrict to instances that executed an activity after the given date (inclusive). By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="executedActivityBefore">Restrict to instances that executed an activity before the given date (inclusive). By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="executedJobAfter">Restrict to instances that executed an job after the given date (inclusive). By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="executedJobBefore">Restrict to instances that executed an job before the given date (inclusive). By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="startedBy">Only include process instances that were started by the given user. (optional)</param>
        /// <param name="superProcessInstanceId">Restrict query to all process instances that are sub process instances of the given process instance. Takes a process instance id. (optional)</param>
        /// <param name="subProcessInstanceId">Restrict query to one process instance that has a sub process instance with the given id. (optional)</param>
        /// <param name="superCaseInstanceId">Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id. (optional)</param>
        /// <param name="subCaseInstanceId">Restrict query to one process instance that has a sub case instance with the given id. (optional)</param>
        /// <param name="caseInstanceId">Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id. (optional)</param>
        /// <param name="tenantIdIn">Filter by a list of tenant ids. A process instance must have one of the given tenant ids. Filter by a comma-separated list of &#x60;Strings&#x60; (optional)</param>
        /// <param name="withoutTenantId">Only include historic process instances which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="executedActivityIdIn">Restrict to instances that executed an activity with one of given ids. Filter by a comma-separated list of &#x60;Strings&#x60; (optional)</param>
        /// <param name="activeActivityIdIn">Restrict to instances that have an active activity with one of given ids. Filter by a comma-separated list of &#x60;Strings&#x60; (optional)</param>
        /// <param name="active">Restrict to instances that are active. (optional)</param>
        /// <param name="suspended">Restrict to instances that are suspended. (optional)</param>
        /// <param name="completed">Restrict to instances that are completed. (optional)</param>
        /// <param name="externallyTerminated">Restrict to instances that are externallyTerminated. (optional)</param>
        /// <param name="internallyTerminated">Restrict to instances that are internallyTerminated. (optional)</param>
        /// <param name="variables">Only include process instances that have/had variables with certain values. Variable filtering expressions are comma-separated and are structured as follows: A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value.  **Note:** Values are always treated as String objects on server side.  Valid operator values are: &#x60;eq&#x60; - equal to; &#x60;neq&#x60; - not equal to; &#x60;gt&#x60; - greater than; &#x60;gteq&#x60; - greater than or equal to; &#x60;lt&#x60; - lower than; &#x60;lteq&#x60; - lower than or equal to; &#x60;like&#x60;.  Key and value may not contain underscore or comma characters.  (optional)</param>
        /// <param name="variableNamesIgnoreCase">Match all variable names provided in variables case-insensitively. If set to &#x60;true&#x60; variableName and variablename are treated as equal. (optional)</param>
        /// <param name="variableValuesIgnoreCase">Match all variable values provided in variables case-insensitively. If set to &#x60;true&#x60; variableValue and variablevalue are treated as equal. (optional)</param>
        /// <returns>CountResultDto</returns>
        CountResultDto GetHistoricProcessInstancesCount(string processInstanceId = default(string), string processInstanceIds = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string processDefinitionKeyIn = default(string), string processDefinitionName = default(string), string processDefinitionNameLike = default(string), string processDefinitionKeyNotIn = default(string), string processInstanceBusinessKey = default(string), string processInstanceBusinessKeyLike = default(string), bool? rootProcessInstances = default(bool?), bool? finished = default(bool?), bool? unfinished = default(bool?), bool? withIncidents = default(bool?), bool? withRootIncidents = default(bool?), string incidentType = default(string), string incidentStatus = default(string), string incidentMessage = default(string), string incidentMessageLike = default(string), DateTime? startedBefore = default(DateTime?), DateTime? startedAfter = default(DateTime?), DateTime? finishedBefore = default(DateTime?), DateTime? finishedAfter = default(DateTime?), DateTime? executedActivityAfter = default(DateTime?), DateTime? executedActivityBefore = default(DateTime?), DateTime? executedJobAfter = default(DateTime?), DateTime? executedJobBefore = default(DateTime?), string startedBy = default(string), string superProcessInstanceId = default(string), string subProcessInstanceId = default(string), string superCaseInstanceId = default(string), string subCaseInstanceId = default(string), string caseInstanceId = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), string executedActivityIdIn = default(string), string activeActivityIdIn = default(string), bool? active = default(bool?), bool? suspended = default(bool?), bool? completed = default(bool?), bool? externallyTerminated = default(bool?), bool? internallyTerminated = default(bool?), string variables = default(string), bool? variableNamesIgnoreCase = default(bool?), bool? variableValuesIgnoreCase = default(bool?));

        /// <summary>
        /// Get List Count
        /// </summary>
        /// <remarks>
        /// Queries for the number of historic process instances that fulfill the given parameters. Takes the same parameters as the [Get Process Instances](https://docs.camunda.org/manual/7.14/reference/rest/history/process-instance/get-process-instance-query/) method.
        /// </remarks>
        /// <exception cref="CamundaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processInstanceId">Filter by process instance id. (optional)</param>
        /// <param name="processInstanceIds">Filter by process instance ids. Filter by a comma-separated list of &#x60;Strings&#x60;. (optional)</param>
        /// <param name="processDefinitionId">Filter by the process definition the instances run on. (optional)</param>
        /// <param name="processDefinitionKey">Filter by the key of the process definition the instances run on. (optional)</param>
        /// <param name="processDefinitionKeyIn">Filter by a list of process definition keys. A process instance must have one of the given process definition keys. Filter by a comma-separated list of &#x60;Strings&#x60;. (optional)</param>
        /// <param name="processDefinitionName">Filter by the name of the process definition the instances run on. (optional)</param>
        /// <param name="processDefinitionNameLike">Filter by process definition names that the parameter is a substring of. (optional)</param>
        /// <param name="processDefinitionKeyNotIn">Exclude instances that belong to a set of process definitions. Filter by a comma-separated list of &#x60;Strings&#x60;. (optional)</param>
        /// <param name="processInstanceBusinessKey">Filter by process instance business key. (optional)</param>
        /// <param name="processInstanceBusinessKeyLike">Filter by process instance business key that the parameter is a substring of. (optional)</param>
        /// <param name="rootProcessInstances">Restrict the query to all process instances that are top level process instances. (optional)</param>
        /// <param name="finished">Only include finished process instances. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="unfinished">Only include unfinished process instances. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="withIncidents">Only include process instances which have an incident. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="withRootIncidents">Only include process instances which have a root incident. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="incidentType">Filter by the incident type. See the [User Guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)</param>
        /// <param name="incidentStatus">Only include process instances which have an incident in status either open or resolved. To get all process instances, use the query parameter withIncidents. (optional)</param>
        /// <param name="incidentMessage">Filter by the incident message. Exact match. (optional)</param>
        /// <param name="incidentMessageLike">Filter by the incident message that the parameter is a substring of. (optional)</param>
        /// <param name="startedBefore">Restrict to instances that were started before the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="startedAfter">Restrict to instances that were started after the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="finishedBefore">Restrict to instances that were finished before the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="finishedAfter">Restrict to instances that were finished after the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="executedActivityAfter">Restrict to instances that executed an activity after the given date (inclusive). By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="executedActivityBefore">Restrict to instances that executed an activity before the given date (inclusive). By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="executedJobAfter">Restrict to instances that executed an job after the given date (inclusive). By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="executedJobBefore">Restrict to instances that executed an job before the given date (inclusive). By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="startedBy">Only include process instances that were started by the given user. (optional)</param>
        /// <param name="superProcessInstanceId">Restrict query to all process instances that are sub process instances of the given process instance. Takes a process instance id. (optional)</param>
        /// <param name="subProcessInstanceId">Restrict query to one process instance that has a sub process instance with the given id. (optional)</param>
        /// <param name="superCaseInstanceId">Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id. (optional)</param>
        /// <param name="subCaseInstanceId">Restrict query to one process instance that has a sub case instance with the given id. (optional)</param>
        /// <param name="caseInstanceId">Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id. (optional)</param>
        /// <param name="tenantIdIn">Filter by a list of tenant ids. A process instance must have one of the given tenant ids. Filter by a comma-separated list of &#x60;Strings&#x60; (optional)</param>
        /// <param name="withoutTenantId">Only include historic process instances which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="executedActivityIdIn">Restrict to instances that executed an activity with one of given ids. Filter by a comma-separated list of &#x60;Strings&#x60; (optional)</param>
        /// <param name="activeActivityIdIn">Restrict to instances that have an active activity with one of given ids. Filter by a comma-separated list of &#x60;Strings&#x60; (optional)</param>
        /// <param name="active">Restrict to instances that are active. (optional)</param>
        /// <param name="suspended">Restrict to instances that are suspended. (optional)</param>
        /// <param name="completed">Restrict to instances that are completed. (optional)</param>
        /// <param name="externallyTerminated">Restrict to instances that are externallyTerminated. (optional)</param>
        /// <param name="internallyTerminated">Restrict to instances that are internallyTerminated. (optional)</param>
        /// <param name="variables">Only include process instances that have/had variables with certain values. Variable filtering expressions are comma-separated and are structured as follows: A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value.  **Note:** Values are always treated as String objects on server side.  Valid operator values are: &#x60;eq&#x60; - equal to; &#x60;neq&#x60; - not equal to; &#x60;gt&#x60; - greater than; &#x60;gteq&#x60; - greater than or equal to; &#x60;lt&#x60; - lower than; &#x60;lteq&#x60; - lower than or equal to; &#x60;like&#x60;.  Key and value may not contain underscore or comma characters.  (optional)</param>
        /// <param name="variableNamesIgnoreCase">Match all variable names provided in variables case-insensitively. If set to &#x60;true&#x60; variableName and variablename are treated as equal. (optional)</param>
        /// <param name="variableValuesIgnoreCase">Match all variable values provided in variables case-insensitively. If set to &#x60;true&#x60; variableValue and variablevalue are treated as equal. (optional)</param>
        /// <returns>ApiResponse of CountResultDto</returns>
        ApiResponse<CountResultDto> GetHistoricProcessInstancesCountWithHttpInfo(string processInstanceId = default(string), string processInstanceIds = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string processDefinitionKeyIn = default(string), string processDefinitionName = default(string), string processDefinitionNameLike = default(string), string processDefinitionKeyNotIn = default(string), string processInstanceBusinessKey = default(string), string processInstanceBusinessKeyLike = default(string), bool? rootProcessInstances = default(bool?), bool? finished = default(bool?), bool? unfinished = default(bool?), bool? withIncidents = default(bool?), bool? withRootIncidents = default(bool?), string incidentType = default(string), string incidentStatus = default(string), string incidentMessage = default(string), string incidentMessageLike = default(string), DateTime? startedBefore = default(DateTime?), DateTime? startedAfter = default(DateTime?), DateTime? finishedBefore = default(DateTime?), DateTime? finishedAfter = default(DateTime?), DateTime? executedActivityAfter = default(DateTime?), DateTime? executedActivityBefore = default(DateTime?), DateTime? executedJobAfter = default(DateTime?), DateTime? executedJobBefore = default(DateTime?), string startedBy = default(string), string superProcessInstanceId = default(string), string subProcessInstanceId = default(string), string superCaseInstanceId = default(string), string subCaseInstanceId = default(string), string caseInstanceId = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), string executedActivityIdIn = default(string), string activeActivityIdIn = default(string), bool? active = default(bool?), bool? suspended = default(bool?), bool? completed = default(bool?), bool? externallyTerminated = default(bool?), bool? internallyTerminated = default(bool?), string variables = default(string), bool? variableNamesIgnoreCase = default(bool?), bool? variableValuesIgnoreCase = default(bool?));
        /// <summary>
        /// Get List (POST)
        /// </summary>
        /// <remarks>
        /// Queries for historic process instances that fulfill the given parameters. This method is slightly more powerful than the [Get Process Instance](https://docs.camunda.org/manual/7.14/reference/rest/history/process-instance/get-process-instance-query/) because it allows filtering by multiple process variables of types &#x60;String&#x60;, &#x60;Number&#x60; or &#x60;Boolean&#x60;.
        /// </remarks>
        /// <exception cref="CamundaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="historicProcessInstanceQueryDto"> (optional)</param>
        /// <returns>List&lt;HistoricProcessInstanceDto&gt;</returns>
        List<HistoricProcessInstanceDto> QueryHistoricProcessInstances(int? firstResult = default(int?), int? maxResults = default(int?), HistoricProcessInstanceQueryDto historicProcessInstanceQueryDto = default(HistoricProcessInstanceQueryDto));

        /// <summary>
        /// Get List (POST)
        /// </summary>
        /// <remarks>
        /// Queries for historic process instances that fulfill the given parameters. This method is slightly more powerful than the [Get Process Instance](https://docs.camunda.org/manual/7.14/reference/rest/history/process-instance/get-process-instance-query/) because it allows filtering by multiple process variables of types &#x60;String&#x60;, &#x60;Number&#x60; or &#x60;Boolean&#x60;.
        /// </remarks>
        /// <exception cref="CamundaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="historicProcessInstanceQueryDto"> (optional)</param>
        /// <returns>ApiResponse of List&lt;HistoricProcessInstanceDto&gt;</returns>
        ApiResponse<List<HistoricProcessInstanceDto>> QueryHistoricProcessInstancesWithHttpInfo(int? firstResult = default(int?), int? maxResults = default(int?), HistoricProcessInstanceQueryDto historicProcessInstanceQueryDto = default(HistoricProcessInstanceQueryDto));
        /// <summary>
        /// Get List Count (POST)
        /// </summary>
        /// <remarks>
        /// Queries for the number of historic process instances that fulfill the given parameters. This method takes the same message body as the [Get Process Instances (POST)](https://docs.camunda.org/manual/7.14/reference/rest/history/process-instance/get-process-instance-query/) method and therefore it is slightly more powerful than the [Get Process Instance Count](https://docs.camunda.org/manual/7.14/reference/rest/history/process-instance/post-process-instance-query-count/) method.
        /// </remarks>
        /// <exception cref="CamundaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="historicProcessInstanceQueryDto"> (optional)</param>
        /// <returns>CountResultDto</returns>
        CountResultDto QueryHistoricProcessInstancesCount(HistoricProcessInstanceQueryDto historicProcessInstanceQueryDto = default(HistoricProcessInstanceQueryDto));

        /// <summary>
        /// Get List Count (POST)
        /// </summary>
        /// <remarks>
        /// Queries for the number of historic process instances that fulfill the given parameters. This method takes the same message body as the [Get Process Instances (POST)](https://docs.camunda.org/manual/7.14/reference/rest/history/process-instance/get-process-instance-query/) method and therefore it is slightly more powerful than the [Get Process Instance Count](https://docs.camunda.org/manual/7.14/reference/rest/history/process-instance/post-process-instance-query-count/) method.
        /// </remarks>
        /// <exception cref="CamundaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="historicProcessInstanceQueryDto"> (optional)</param>
        /// <returns>ApiResponse of CountResultDto</returns>
        ApiResponse<CountResultDto> QueryHistoricProcessInstancesCountWithHttpInfo(HistoricProcessInstanceQueryDto historicProcessInstanceQueryDto = default(HistoricProcessInstanceQueryDto));
        /// <summary>
        /// Set Removal Time Async (POST)
        /// </summary>
        /// <remarks>
        /// Sets the removal time to multiple historic process instances asynchronously (batch).  At least &#x60;historicProcessInstanceIds&#x60; or &#x60;historicProcessInstanceQuery&#x60; has to be provided. If both are provided, all instances matching query criterion and instances from the list will be updated with a removal time.
        /// </remarks>
        /// <exception cref="CamundaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setRemovalTimeToHistoricProcessInstancesDto"> (optional)</param>
        /// <returns>BatchDto</returns>
        BatchDto SetRemovalTimeAsync(SetRemovalTimeToHistoricProcessInstancesDto setRemovalTimeToHistoricProcessInstancesDto = default(SetRemovalTimeToHistoricProcessInstancesDto));

        /// <summary>
        /// Set Removal Time Async (POST)
        /// </summary>
        /// <remarks>
        /// Sets the removal time to multiple historic process instances asynchronously (batch).  At least &#x60;historicProcessInstanceIds&#x60; or &#x60;historicProcessInstanceQuery&#x60; has to be provided. If both are provided, all instances matching query criterion and instances from the list will be updated with a removal time.
        /// </remarks>
        /// <exception cref="CamundaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setRemovalTimeToHistoricProcessInstancesDto"> (optional)</param>
        /// <returns>ApiResponse of BatchDto</returns>
        ApiResponse<BatchDto> SetRemovalTimeAsyncWithHttpInfo(SetRemovalTimeToHistoricProcessInstancesDto setRemovalTimeToHistoricProcessInstancesDto = default(SetRemovalTimeToHistoricProcessInstancesDto));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IHistoricProcessInstanceApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Delete
        /// </summary>
        /// <remarks>
        /// Deletes a process instance from the history by id.
        /// </remarks>
        /// <exception cref="CamundaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the historic process instance to be deleted.</param>
        /// <param name="failIfNotExists">If set to &#x60;false&#x60;, the request will still be successful if the process id is not found. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteHistoricProcessInstanceAsync(string id, bool? failIfNotExists = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete
        /// </summary>
        /// <remarks>
        /// Deletes a process instance from the history by id.
        /// </remarks>
        /// <exception cref="CamundaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the historic process instance to be deleted.</param>
        /// <param name="failIfNotExists">If set to &#x60;false&#x60;, the request will still be successful if the process id is not found. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteHistoricProcessInstanceWithHttpInfoAsync(string id, bool? failIfNotExists = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete Async (POST)
        /// </summary>
        /// <remarks>
        /// Delete multiple historic process instances asynchronously (batch). At least &#x60;historicProcessInstanceIds&#x60; or &#x60;historicProcessInstanceQuery&#x60; has to be provided. If both are provided then all instances matching query criterion and instances from the list will be deleted.
        /// </remarks>
        /// <exception cref="CamundaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteHistoricProcessInstancesDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchDto</returns>
        System.Threading.Tasks.Task<BatchDto> DeleteHistoricProcessInstancesAsyncAsync(DeleteHistoricProcessInstancesDto deleteHistoricProcessInstancesDto = default(DeleteHistoricProcessInstancesDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Async (POST)
        /// </summary>
        /// <remarks>
        /// Delete multiple historic process instances asynchronously (batch). At least &#x60;historicProcessInstanceIds&#x60; or &#x60;historicProcessInstanceQuery&#x60; has to be provided. If both are provided then all instances matching query criterion and instances from the list will be deleted.
        /// </remarks>
        /// <exception cref="CamundaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteHistoricProcessInstancesDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<BatchDto>> DeleteHistoricProcessInstancesAsyncWithHttpInfoAsync(DeleteHistoricProcessInstancesDto deleteHistoricProcessInstancesDto = default(DeleteHistoricProcessInstancesDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete Variable Instances
        /// </summary>
        /// <remarks>
        /// Deletes all variables of a process instance from the history by id.
        /// </remarks>
        /// <exception cref="CamundaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process instance for which all historic variables are to be deleted.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteHistoricVariableInstancesOfHistoricProcessInstanceAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Variable Instances
        /// </summary>
        /// <remarks>
        /// Deletes all variables of a process instance from the history by id.
        /// </remarks>
        /// <exception cref="CamundaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process instance for which all historic variables are to be deleted.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteHistoricVariableInstancesOfHistoricProcessInstanceWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get
        /// </summary>
        /// <remarks>
        /// Retrieves a historic process instance by id, according to the &#x60;HistoricProcessInstance&#x60; interface in the engine.
        /// </remarks>
        /// <exception cref="CamundaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the historic process instance to be retrieved.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HistoricProcessInstanceDto</returns>
        System.Threading.Tasks.Task<HistoricProcessInstanceDto> GetHistoricProcessInstanceAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get
        /// </summary>
        /// <remarks>
        /// Retrieves a historic process instance by id, according to the &#x60;HistoricProcessInstance&#x60; interface in the engine.
        /// </remarks>
        /// <exception cref="CamundaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the historic process instance to be retrieved.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HistoricProcessInstanceDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<HistoricProcessInstanceDto>> GetHistoricProcessInstanceWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Duration Report
        /// </summary>
        /// <remarks>
        /// Retrieves a report about the duration of completed process instances, grouped by a period. These reports include the maximum, minimum and average duration of all completed process instances which were started in a given period.  **Note:** This only includes historic data.
        /// </remarks>
        /// <exception cref="CamundaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportType">**Mandatory.** Specifies the type of the report to retrieve. To retrieve a report about the duration of process instances, the value must be set to &#x60;duration&#x60;.</param>
        /// <param name="periodUnit">**Mandatory.** Specifies the granularity of the report. Valid values are &#x60;month&#x60; and &#x60;quarter&#x60;.</param>
        /// <param name="processDefinitionIdIn">Filter by process definition ids. Must be a comma-separated list of process definition ids. (optional)</param>
        /// <param name="processDefinitionKeyIn">Filter by process definition keys. Must be a comma-separated list of process definition keys. (optional)</param>
        /// <param name="startedBefore">Restrict to instances that were started before the given date. By [default](), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2016-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="startedAfter">Restrict to instances that were started after the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2016-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GetHistoricProcessInstanceDurationReportAsync(string reportType, string periodUnit, string processDefinitionIdIn = default(string), string processDefinitionKeyIn = default(string), DateTime? startedBefore = default(DateTime?), DateTime? startedAfter = default(DateTime?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Duration Report
        /// </summary>
        /// <remarks>
        /// Retrieves a report about the duration of completed process instances, grouped by a period. These reports include the maximum, minimum and average duration of all completed process instances which were started in a given period.  **Note:** This only includes historic data.
        /// </remarks>
        /// <exception cref="CamundaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportType">**Mandatory.** Specifies the type of the report to retrieve. To retrieve a report about the duration of process instances, the value must be set to &#x60;duration&#x60;.</param>
        /// <param name="periodUnit">**Mandatory.** Specifies the granularity of the report. Valid values are &#x60;month&#x60; and &#x60;quarter&#x60;.</param>
        /// <param name="processDefinitionIdIn">Filter by process definition ids. Must be a comma-separated list of process definition ids. (optional)</param>
        /// <param name="processDefinitionKeyIn">Filter by process definition keys. Must be a comma-separated list of process definition keys. (optional)</param>
        /// <param name="startedBefore">Restrict to instances that were started before the given date. By [default](), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2016-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="startedAfter">Restrict to instances that were started after the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2016-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetHistoricProcessInstanceDurationReportWithHttpInfoAsync(string reportType, string periodUnit, string processDefinitionIdIn = default(string), string processDefinitionKeyIn = default(string), DateTime? startedBefore = default(DateTime?), DateTime? startedAfter = default(DateTime?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get List
        /// </summary>
        /// <remarks>
        /// Queries for historic process instances that fulfill the given parameters. The size of the result set can be retrieved by using the [Get Process Instance Count](https://docs.camunda.org/manual/7.14/reference/rest/history/process-instance/get-process-instance-query-count/) method.
        /// </remarks>
        /// <exception cref="CamundaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="processInstanceId">Filter by process instance id. (optional)</param>
        /// <param name="processInstanceIds">Filter by process instance ids. Filter by a comma-separated list of &#x60;Strings&#x60;. (optional)</param>
        /// <param name="processDefinitionId">Filter by the process definition the instances run on. (optional)</param>
        /// <param name="processDefinitionKey">Filter by the key of the process definition the instances run on. (optional)</param>
        /// <param name="processDefinitionKeyIn">Filter by a list of process definition keys. A process instance must have one of the given process definition keys. Filter by a comma-separated list of &#x60;Strings&#x60;. (optional)</param>
        /// <param name="processDefinitionName">Filter by the name of the process definition the instances run on. (optional)</param>
        /// <param name="processDefinitionNameLike">Filter by process definition names that the parameter is a substring of. (optional)</param>
        /// <param name="processDefinitionKeyNotIn">Exclude instances that belong to a set of process definitions. Filter by a comma-separated list of &#x60;Strings&#x60;. (optional)</param>
        /// <param name="processInstanceBusinessKey">Filter by process instance business key. (optional)</param>
        /// <param name="processInstanceBusinessKeyLike">Filter by process instance business key that the parameter is a substring of. (optional)</param>
        /// <param name="rootProcessInstances">Restrict the query to all process instances that are top level process instances. (optional)</param>
        /// <param name="finished">Only include finished process instances. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="unfinished">Only include unfinished process instances. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="withIncidents">Only include process instances which have an incident. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="withRootIncidents">Only include process instances which have a root incident. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="incidentType">Filter by the incident type. See the [User Guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)</param>
        /// <param name="incidentStatus">Only include process instances which have an incident in status either open or resolved. To get all process instances, use the query parameter withIncidents. (optional)</param>
        /// <param name="incidentMessage">Filter by the incident message. Exact match. (optional)</param>
        /// <param name="incidentMessageLike">Filter by the incident message that the parameter is a substring of. (optional)</param>
        /// <param name="startedBefore">Restrict to instances that were started before the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="startedAfter">Restrict to instances that were started after the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="finishedBefore">Restrict to instances that were finished before the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="finishedAfter">Restrict to instances that were finished after the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="executedActivityAfter">Restrict to instances that executed an activity after the given date (inclusive). By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="executedActivityBefore">Restrict to instances that executed an activity before the given date (inclusive). By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="executedJobAfter">Restrict to instances that executed an job after the given date (inclusive). By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="executedJobBefore">Restrict to instances that executed an job before the given date (inclusive). By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="startedBy">Only include process instances that were started by the given user. (optional)</param>
        /// <param name="superProcessInstanceId">Restrict query to all process instances that are sub process instances of the given process instance. Takes a process instance id. (optional)</param>
        /// <param name="subProcessInstanceId">Restrict query to one process instance that has a sub process instance with the given id. (optional)</param>
        /// <param name="superCaseInstanceId">Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id. (optional)</param>
        /// <param name="subCaseInstanceId">Restrict query to one process instance that has a sub case instance with the given id. (optional)</param>
        /// <param name="caseInstanceId">Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id. (optional)</param>
        /// <param name="tenantIdIn">Filter by a list of tenant ids. A process instance must have one of the given tenant ids. Filter by a comma-separated list of &#x60;Strings&#x60; (optional)</param>
        /// <param name="withoutTenantId">Only include historic process instances which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="executedActivityIdIn">Restrict to instances that executed an activity with one of given ids. Filter by a comma-separated list of &#x60;Strings&#x60; (optional)</param>
        /// <param name="activeActivityIdIn">Restrict to instances that have an active activity with one of given ids. Filter by a comma-separated list of &#x60;Strings&#x60; (optional)</param>
        /// <param name="active">Restrict to instances that are active. (optional)</param>
        /// <param name="suspended">Restrict to instances that are suspended. (optional)</param>
        /// <param name="completed">Restrict to instances that are completed. (optional)</param>
        /// <param name="externallyTerminated">Restrict to instances that are externallyTerminated. (optional)</param>
        /// <param name="internallyTerminated">Restrict to instances that are internallyTerminated. (optional)</param>
        /// <param name="variables">Only include process instances that have/had variables with certain values. Variable filtering expressions are comma-separated and are structured as follows: A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value.  **Note:** Values are always treated as String objects on server side.  Valid operator values are: &#x60;eq&#x60; - equal to; &#x60;neq&#x60; - not equal to; &#x60;gt&#x60; - greater than; &#x60;gteq&#x60; - greater than or equal to; &#x60;lt&#x60; - lower than; &#x60;lteq&#x60; - lower than or equal to; &#x60;like&#x60;.  Key and value may not contain underscore or comma characters.  (optional)</param>
        /// <param name="variableNamesIgnoreCase">Match all variable names provided in variables case-insensitively. If set to &#x60;true&#x60; variableName and variablename are treated as equal. (optional)</param>
        /// <param name="variableValuesIgnoreCase">Match all variable values provided in variables case-insensitively. If set to &#x60;true&#x60; variableValue and variablevalue are treated as equal. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;HistoricProcessInstanceDto&gt;</returns>
        System.Threading.Tasks.Task<List<HistoricProcessInstanceDto>> GetHistoricProcessInstancesAsync(string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?), string processInstanceId = default(string), string processInstanceIds = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string processDefinitionKeyIn = default(string), string processDefinitionName = default(string), string processDefinitionNameLike = default(string), string processDefinitionKeyNotIn = default(string), string processInstanceBusinessKey = default(string), string processInstanceBusinessKeyLike = default(string), bool? rootProcessInstances = default(bool?), bool? finished = default(bool?), bool? unfinished = default(bool?), bool? withIncidents = default(bool?), bool? withRootIncidents = default(bool?), string incidentType = default(string), string incidentStatus = default(string), string incidentMessage = default(string), string incidentMessageLike = default(string), DateTime? startedBefore = default(DateTime?), DateTime? startedAfter = default(DateTime?), DateTime? finishedBefore = default(DateTime?), DateTime? finishedAfter = default(DateTime?), DateTime? executedActivityAfter = default(DateTime?), DateTime? executedActivityBefore = default(DateTime?), DateTime? executedJobAfter = default(DateTime?), DateTime? executedJobBefore = default(DateTime?), string startedBy = default(string), string superProcessInstanceId = default(string), string subProcessInstanceId = default(string), string superCaseInstanceId = default(string), string subCaseInstanceId = default(string), string caseInstanceId = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), string executedActivityIdIn = default(string), string activeActivityIdIn = default(string), bool? active = default(bool?), bool? suspended = default(bool?), bool? completed = default(bool?), bool? externallyTerminated = default(bool?), bool? internallyTerminated = default(bool?), string variables = default(string), bool? variableNamesIgnoreCase = default(bool?), bool? variableValuesIgnoreCase = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get List
        /// </summary>
        /// <remarks>
        /// Queries for historic process instances that fulfill the given parameters. The size of the result set can be retrieved by using the [Get Process Instance Count](https://docs.camunda.org/manual/7.14/reference/rest/history/process-instance/get-process-instance-query-count/) method.
        /// </remarks>
        /// <exception cref="CamundaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="processInstanceId">Filter by process instance id. (optional)</param>
        /// <param name="processInstanceIds">Filter by process instance ids. Filter by a comma-separated list of &#x60;Strings&#x60;. (optional)</param>
        /// <param name="processDefinitionId">Filter by the process definition the instances run on. (optional)</param>
        /// <param name="processDefinitionKey">Filter by the key of the process definition the instances run on. (optional)</param>
        /// <param name="processDefinitionKeyIn">Filter by a list of process definition keys. A process instance must have one of the given process definition keys. Filter by a comma-separated list of &#x60;Strings&#x60;. (optional)</param>
        /// <param name="processDefinitionName">Filter by the name of the process definition the instances run on. (optional)</param>
        /// <param name="processDefinitionNameLike">Filter by process definition names that the parameter is a substring of. (optional)</param>
        /// <param name="processDefinitionKeyNotIn">Exclude instances that belong to a set of process definitions. Filter by a comma-separated list of &#x60;Strings&#x60;. (optional)</param>
        /// <param name="processInstanceBusinessKey">Filter by process instance business key. (optional)</param>
        /// <param name="processInstanceBusinessKeyLike">Filter by process instance business key that the parameter is a substring of. (optional)</param>
        /// <param name="rootProcessInstances">Restrict the query to all process instances that are top level process instances. (optional)</param>
        /// <param name="finished">Only include finished process instances. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="unfinished">Only include unfinished process instances. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="withIncidents">Only include process instances which have an incident. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="withRootIncidents">Only include process instances which have a root incident. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="incidentType">Filter by the incident type. See the [User Guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)</param>
        /// <param name="incidentStatus">Only include process instances which have an incident in status either open or resolved. To get all process instances, use the query parameter withIncidents. (optional)</param>
        /// <param name="incidentMessage">Filter by the incident message. Exact match. (optional)</param>
        /// <param name="incidentMessageLike">Filter by the incident message that the parameter is a substring of. (optional)</param>
        /// <param name="startedBefore">Restrict to instances that were started before the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="startedAfter">Restrict to instances that were started after the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="finishedBefore">Restrict to instances that were finished before the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="finishedAfter">Restrict to instances that were finished after the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="executedActivityAfter">Restrict to instances that executed an activity after the given date (inclusive). By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="executedActivityBefore">Restrict to instances that executed an activity before the given date (inclusive). By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="executedJobAfter">Restrict to instances that executed an job after the given date (inclusive). By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="executedJobBefore">Restrict to instances that executed an job before the given date (inclusive). By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="startedBy">Only include process instances that were started by the given user. (optional)</param>
        /// <param name="superProcessInstanceId">Restrict query to all process instances that are sub process instances of the given process instance. Takes a process instance id. (optional)</param>
        /// <param name="subProcessInstanceId">Restrict query to one process instance that has a sub process instance with the given id. (optional)</param>
        /// <param name="superCaseInstanceId">Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id. (optional)</param>
        /// <param name="subCaseInstanceId">Restrict query to one process instance that has a sub case instance with the given id. (optional)</param>
        /// <param name="caseInstanceId">Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id. (optional)</param>
        /// <param name="tenantIdIn">Filter by a list of tenant ids. A process instance must have one of the given tenant ids. Filter by a comma-separated list of &#x60;Strings&#x60; (optional)</param>
        /// <param name="withoutTenantId">Only include historic process instances which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="executedActivityIdIn">Restrict to instances that executed an activity with one of given ids. Filter by a comma-separated list of &#x60;Strings&#x60; (optional)</param>
        /// <param name="activeActivityIdIn">Restrict to instances that have an active activity with one of given ids. Filter by a comma-separated list of &#x60;Strings&#x60; (optional)</param>
        /// <param name="active">Restrict to instances that are active. (optional)</param>
        /// <param name="suspended">Restrict to instances that are suspended. (optional)</param>
        /// <param name="completed">Restrict to instances that are completed. (optional)</param>
        /// <param name="externallyTerminated">Restrict to instances that are externallyTerminated. (optional)</param>
        /// <param name="internallyTerminated">Restrict to instances that are internallyTerminated. (optional)</param>
        /// <param name="variables">Only include process instances that have/had variables with certain values. Variable filtering expressions are comma-separated and are structured as follows: A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value.  **Note:** Values are always treated as String objects on server side.  Valid operator values are: &#x60;eq&#x60; - equal to; &#x60;neq&#x60; - not equal to; &#x60;gt&#x60; - greater than; &#x60;gteq&#x60; - greater than or equal to; &#x60;lt&#x60; - lower than; &#x60;lteq&#x60; - lower than or equal to; &#x60;like&#x60;.  Key and value may not contain underscore or comma characters.  (optional)</param>
        /// <param name="variableNamesIgnoreCase">Match all variable names provided in variables case-insensitively. If set to &#x60;true&#x60; variableName and variablename are treated as equal. (optional)</param>
        /// <param name="variableValuesIgnoreCase">Match all variable values provided in variables case-insensitively. If set to &#x60;true&#x60; variableValue and variablevalue are treated as equal. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;HistoricProcessInstanceDto&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<HistoricProcessInstanceDto>>> GetHistoricProcessInstancesWithHttpInfoAsync(string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?), string processInstanceId = default(string), string processInstanceIds = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string processDefinitionKeyIn = default(string), string processDefinitionName = default(string), string processDefinitionNameLike = default(string), string processDefinitionKeyNotIn = default(string), string processInstanceBusinessKey = default(string), string processInstanceBusinessKeyLike = default(string), bool? rootProcessInstances = default(bool?), bool? finished = default(bool?), bool? unfinished = default(bool?), bool? withIncidents = default(bool?), bool? withRootIncidents = default(bool?), string incidentType = default(string), string incidentStatus = default(string), string incidentMessage = default(string), string incidentMessageLike = default(string), DateTime? startedBefore = default(DateTime?), DateTime? startedAfter = default(DateTime?), DateTime? finishedBefore = default(DateTime?), DateTime? finishedAfter = default(DateTime?), DateTime? executedActivityAfter = default(DateTime?), DateTime? executedActivityBefore = default(DateTime?), DateTime? executedJobAfter = default(DateTime?), DateTime? executedJobBefore = default(DateTime?), string startedBy = default(string), string superProcessInstanceId = default(string), string subProcessInstanceId = default(string), string superCaseInstanceId = default(string), string subCaseInstanceId = default(string), string caseInstanceId = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), string executedActivityIdIn = default(string), string activeActivityIdIn = default(string), bool? active = default(bool?), bool? suspended = default(bool?), bool? completed = default(bool?), bool? externallyTerminated = default(bool?), bool? internallyTerminated = default(bool?), string variables = default(string), bool? variableNamesIgnoreCase = default(bool?), bool? variableValuesIgnoreCase = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get List Count
        /// </summary>
        /// <remarks>
        /// Queries for the number of historic process instances that fulfill the given parameters. Takes the same parameters as the [Get Process Instances](https://docs.camunda.org/manual/7.14/reference/rest/history/process-instance/get-process-instance-query/) method.
        /// </remarks>
        /// <exception cref="CamundaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processInstanceId">Filter by process instance id. (optional)</param>
        /// <param name="processInstanceIds">Filter by process instance ids. Filter by a comma-separated list of &#x60;Strings&#x60;. (optional)</param>
        /// <param name="processDefinitionId">Filter by the process definition the instances run on. (optional)</param>
        /// <param name="processDefinitionKey">Filter by the key of the process definition the instances run on. (optional)</param>
        /// <param name="processDefinitionKeyIn">Filter by a list of process definition keys. A process instance must have one of the given process definition keys. Filter by a comma-separated list of &#x60;Strings&#x60;. (optional)</param>
        /// <param name="processDefinitionName">Filter by the name of the process definition the instances run on. (optional)</param>
        /// <param name="processDefinitionNameLike">Filter by process definition names that the parameter is a substring of. (optional)</param>
        /// <param name="processDefinitionKeyNotIn">Exclude instances that belong to a set of process definitions. Filter by a comma-separated list of &#x60;Strings&#x60;. (optional)</param>
        /// <param name="processInstanceBusinessKey">Filter by process instance business key. (optional)</param>
        /// <param name="processInstanceBusinessKeyLike">Filter by process instance business key that the parameter is a substring of. (optional)</param>
        /// <param name="rootProcessInstances">Restrict the query to all process instances that are top level process instances. (optional)</param>
        /// <param name="finished">Only include finished process instances. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="unfinished">Only include unfinished process instances. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="withIncidents">Only include process instances which have an incident. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="withRootIncidents">Only include process instances which have a root incident. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="incidentType">Filter by the incident type. See the [User Guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)</param>
        /// <param name="incidentStatus">Only include process instances which have an incident in status either open or resolved. To get all process instances, use the query parameter withIncidents. (optional)</param>
        /// <param name="incidentMessage">Filter by the incident message. Exact match. (optional)</param>
        /// <param name="incidentMessageLike">Filter by the incident message that the parameter is a substring of. (optional)</param>
        /// <param name="startedBefore">Restrict to instances that were started before the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="startedAfter">Restrict to instances that were started after the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="finishedBefore">Restrict to instances that were finished before the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="finishedAfter">Restrict to instances that were finished after the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="executedActivityAfter">Restrict to instances that executed an activity after the given date (inclusive). By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="executedActivityBefore">Restrict to instances that executed an activity before the given date (inclusive). By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="executedJobAfter">Restrict to instances that executed an job after the given date (inclusive). By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="executedJobBefore">Restrict to instances that executed an job before the given date (inclusive). By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="startedBy">Only include process instances that were started by the given user. (optional)</param>
        /// <param name="superProcessInstanceId">Restrict query to all process instances that are sub process instances of the given process instance. Takes a process instance id. (optional)</param>
        /// <param name="subProcessInstanceId">Restrict query to one process instance that has a sub process instance with the given id. (optional)</param>
        /// <param name="superCaseInstanceId">Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id. (optional)</param>
        /// <param name="subCaseInstanceId">Restrict query to one process instance that has a sub case instance with the given id. (optional)</param>
        /// <param name="caseInstanceId">Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id. (optional)</param>
        /// <param name="tenantIdIn">Filter by a list of tenant ids. A process instance must have one of the given tenant ids. Filter by a comma-separated list of &#x60;Strings&#x60; (optional)</param>
        /// <param name="withoutTenantId">Only include historic process instances which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="executedActivityIdIn">Restrict to instances that executed an activity with one of given ids. Filter by a comma-separated list of &#x60;Strings&#x60; (optional)</param>
        /// <param name="activeActivityIdIn">Restrict to instances that have an active activity with one of given ids. Filter by a comma-separated list of &#x60;Strings&#x60; (optional)</param>
        /// <param name="active">Restrict to instances that are active. (optional)</param>
        /// <param name="suspended">Restrict to instances that are suspended. (optional)</param>
        /// <param name="completed">Restrict to instances that are completed. (optional)</param>
        /// <param name="externallyTerminated">Restrict to instances that are externallyTerminated. (optional)</param>
        /// <param name="internallyTerminated">Restrict to instances that are internallyTerminated. (optional)</param>
        /// <param name="variables">Only include process instances that have/had variables with certain values. Variable filtering expressions are comma-separated and are structured as follows: A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value.  **Note:** Values are always treated as String objects on server side.  Valid operator values are: &#x60;eq&#x60; - equal to; &#x60;neq&#x60; - not equal to; &#x60;gt&#x60; - greater than; &#x60;gteq&#x60; - greater than or equal to; &#x60;lt&#x60; - lower than; &#x60;lteq&#x60; - lower than or equal to; &#x60;like&#x60;.  Key and value may not contain underscore or comma characters.  (optional)</param>
        /// <param name="variableNamesIgnoreCase">Match all variable names provided in variables case-insensitively. If set to &#x60;true&#x60; variableName and variablename are treated as equal. (optional)</param>
        /// <param name="variableValuesIgnoreCase">Match all variable values provided in variables case-insensitively. If set to &#x60;true&#x60; variableValue and variablevalue are treated as equal. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CountResultDto</returns>
        System.Threading.Tasks.Task<CountResultDto> GetHistoricProcessInstancesCountAsync(string processInstanceId = default(string), string processInstanceIds = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string processDefinitionKeyIn = default(string), string processDefinitionName = default(string), string processDefinitionNameLike = default(string), string processDefinitionKeyNotIn = default(string), string processInstanceBusinessKey = default(string), string processInstanceBusinessKeyLike = default(string), bool? rootProcessInstances = default(bool?), bool? finished = default(bool?), bool? unfinished = default(bool?), bool? withIncidents = default(bool?), bool? withRootIncidents = default(bool?), string incidentType = default(string), string incidentStatus = default(string), string incidentMessage = default(string), string incidentMessageLike = default(string), DateTime? startedBefore = default(DateTime?), DateTime? startedAfter = default(DateTime?), DateTime? finishedBefore = default(DateTime?), DateTime? finishedAfter = default(DateTime?), DateTime? executedActivityAfter = default(DateTime?), DateTime? executedActivityBefore = default(DateTime?), DateTime? executedJobAfter = default(DateTime?), DateTime? executedJobBefore = default(DateTime?), string startedBy = default(string), string superProcessInstanceId = default(string), string subProcessInstanceId = default(string), string superCaseInstanceId = default(string), string subCaseInstanceId = default(string), string caseInstanceId = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), string executedActivityIdIn = default(string), string activeActivityIdIn = default(string), bool? active = default(bool?), bool? suspended = default(bool?), bool? completed = default(bool?), bool? externallyTerminated = default(bool?), bool? internallyTerminated = default(bool?), string variables = default(string), bool? variableNamesIgnoreCase = default(bool?), bool? variableValuesIgnoreCase = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get List Count
        /// </summary>
        /// <remarks>
        /// Queries for the number of historic process instances that fulfill the given parameters. Takes the same parameters as the [Get Process Instances](https://docs.camunda.org/manual/7.14/reference/rest/history/process-instance/get-process-instance-query/) method.
        /// </remarks>
        /// <exception cref="CamundaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processInstanceId">Filter by process instance id. (optional)</param>
        /// <param name="processInstanceIds">Filter by process instance ids. Filter by a comma-separated list of &#x60;Strings&#x60;. (optional)</param>
        /// <param name="processDefinitionId">Filter by the process definition the instances run on. (optional)</param>
        /// <param name="processDefinitionKey">Filter by the key of the process definition the instances run on. (optional)</param>
        /// <param name="processDefinitionKeyIn">Filter by a list of process definition keys. A process instance must have one of the given process definition keys. Filter by a comma-separated list of &#x60;Strings&#x60;. (optional)</param>
        /// <param name="processDefinitionName">Filter by the name of the process definition the instances run on. (optional)</param>
        /// <param name="processDefinitionNameLike">Filter by process definition names that the parameter is a substring of. (optional)</param>
        /// <param name="processDefinitionKeyNotIn">Exclude instances that belong to a set of process definitions. Filter by a comma-separated list of &#x60;Strings&#x60;. (optional)</param>
        /// <param name="processInstanceBusinessKey">Filter by process instance business key. (optional)</param>
        /// <param name="processInstanceBusinessKeyLike">Filter by process instance business key that the parameter is a substring of. (optional)</param>
        /// <param name="rootProcessInstances">Restrict the query to all process instances that are top level process instances. (optional)</param>
        /// <param name="finished">Only include finished process instances. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="unfinished">Only include unfinished process instances. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="withIncidents">Only include process instances which have an incident. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="withRootIncidents">Only include process instances which have a root incident. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="incidentType">Filter by the incident type. See the [User Guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)</param>
        /// <param name="incidentStatus">Only include process instances which have an incident in status either open or resolved. To get all process instances, use the query parameter withIncidents. (optional)</param>
        /// <param name="incidentMessage">Filter by the incident message. Exact match. (optional)</param>
        /// <param name="incidentMessageLike">Filter by the incident message that the parameter is a substring of. (optional)</param>
        /// <param name="startedBefore">Restrict to instances that were started before the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="startedAfter">Restrict to instances that were started after the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="finishedBefore">Restrict to instances that were finished before the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="finishedAfter">Restrict to instances that were finished after the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="executedActivityAfter">Restrict to instances that executed an activity after the given date (inclusive). By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="executedActivityBefore">Restrict to instances that executed an activity before the given date (inclusive). By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="executedJobAfter">Restrict to instances that executed an job after the given date (inclusive). By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="executedJobBefore">Restrict to instances that executed an job before the given date (inclusive). By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="startedBy">Only include process instances that were started by the given user. (optional)</param>
        /// <param name="superProcessInstanceId">Restrict query to all process instances that are sub process instances of the given process instance. Takes a process instance id. (optional)</param>
        /// <param name="subProcessInstanceId">Restrict query to one process instance that has a sub process instance with the given id. (optional)</param>
        /// <param name="superCaseInstanceId">Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id. (optional)</param>
        /// <param name="subCaseInstanceId">Restrict query to one process instance that has a sub case instance with the given id. (optional)</param>
        /// <param name="caseInstanceId">Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id. (optional)</param>
        /// <param name="tenantIdIn">Filter by a list of tenant ids. A process instance must have one of the given tenant ids. Filter by a comma-separated list of &#x60;Strings&#x60; (optional)</param>
        /// <param name="withoutTenantId">Only include historic process instances which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="executedActivityIdIn">Restrict to instances that executed an activity with one of given ids. Filter by a comma-separated list of &#x60;Strings&#x60; (optional)</param>
        /// <param name="activeActivityIdIn">Restrict to instances that have an active activity with one of given ids. Filter by a comma-separated list of &#x60;Strings&#x60; (optional)</param>
        /// <param name="active">Restrict to instances that are active. (optional)</param>
        /// <param name="suspended">Restrict to instances that are suspended. (optional)</param>
        /// <param name="completed">Restrict to instances that are completed. (optional)</param>
        /// <param name="externallyTerminated">Restrict to instances that are externallyTerminated. (optional)</param>
        /// <param name="internallyTerminated">Restrict to instances that are internallyTerminated. (optional)</param>
        /// <param name="variables">Only include process instances that have/had variables with certain values. Variable filtering expressions are comma-separated and are structured as follows: A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value.  **Note:** Values are always treated as String objects on server side.  Valid operator values are: &#x60;eq&#x60; - equal to; &#x60;neq&#x60; - not equal to; &#x60;gt&#x60; - greater than; &#x60;gteq&#x60; - greater than or equal to; &#x60;lt&#x60; - lower than; &#x60;lteq&#x60; - lower than or equal to; &#x60;like&#x60;.  Key and value may not contain underscore or comma characters.  (optional)</param>
        /// <param name="variableNamesIgnoreCase">Match all variable names provided in variables case-insensitively. If set to &#x60;true&#x60; variableName and variablename are treated as equal. (optional)</param>
        /// <param name="variableValuesIgnoreCase">Match all variable values provided in variables case-insensitively. If set to &#x60;true&#x60; variableValue and variablevalue are treated as equal. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CountResultDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<CountResultDto>> GetHistoricProcessInstancesCountWithHttpInfoAsync(string processInstanceId = default(string), string processInstanceIds = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string processDefinitionKeyIn = default(string), string processDefinitionName = default(string), string processDefinitionNameLike = default(string), string processDefinitionKeyNotIn = default(string), string processInstanceBusinessKey = default(string), string processInstanceBusinessKeyLike = default(string), bool? rootProcessInstances = default(bool?), bool? finished = default(bool?), bool? unfinished = default(bool?), bool? withIncidents = default(bool?), bool? withRootIncidents = default(bool?), string incidentType = default(string), string incidentStatus = default(string), string incidentMessage = default(string), string incidentMessageLike = default(string), DateTime? startedBefore = default(DateTime?), DateTime? startedAfter = default(DateTime?), DateTime? finishedBefore = default(DateTime?), DateTime? finishedAfter = default(DateTime?), DateTime? executedActivityAfter = default(DateTime?), DateTime? executedActivityBefore = default(DateTime?), DateTime? executedJobAfter = default(DateTime?), DateTime? executedJobBefore = default(DateTime?), string startedBy = default(string), string superProcessInstanceId = default(string), string subProcessInstanceId = default(string), string superCaseInstanceId = default(string), string subCaseInstanceId = default(string), string caseInstanceId = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), string executedActivityIdIn = default(string), string activeActivityIdIn = default(string), bool? active = default(bool?), bool? suspended = default(bool?), bool? completed = default(bool?), bool? externallyTerminated = default(bool?), bool? internallyTerminated = default(bool?), string variables = default(string), bool? variableNamesIgnoreCase = default(bool?), bool? variableValuesIgnoreCase = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get List (POST)
        /// </summary>
        /// <remarks>
        /// Queries for historic process instances that fulfill the given parameters. This method is slightly more powerful than the [Get Process Instance](https://docs.camunda.org/manual/7.14/reference/rest/history/process-instance/get-process-instance-query/) because it allows filtering by multiple process variables of types &#x60;String&#x60;, &#x60;Number&#x60; or &#x60;Boolean&#x60;.
        /// </remarks>
        /// <exception cref="CamundaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="historicProcessInstanceQueryDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;HistoricProcessInstanceDto&gt;</returns>
        System.Threading.Tasks.Task<List<HistoricProcessInstanceDto>> QueryHistoricProcessInstancesAsync(int? firstResult = default(int?), int? maxResults = default(int?), HistoricProcessInstanceQueryDto historicProcessInstanceQueryDto = default(HistoricProcessInstanceQueryDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get List (POST)
        /// </summary>
        /// <remarks>
        /// Queries for historic process instances that fulfill the given parameters. This method is slightly more powerful than the [Get Process Instance](https://docs.camunda.org/manual/7.14/reference/rest/history/process-instance/get-process-instance-query/) because it allows filtering by multiple process variables of types &#x60;String&#x60;, &#x60;Number&#x60; or &#x60;Boolean&#x60;.
        /// </remarks>
        /// <exception cref="CamundaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="historicProcessInstanceQueryDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;HistoricProcessInstanceDto&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<HistoricProcessInstanceDto>>> QueryHistoricProcessInstancesWithHttpInfoAsync(int? firstResult = default(int?), int? maxResults = default(int?), HistoricProcessInstanceQueryDto historicProcessInstanceQueryDto = default(HistoricProcessInstanceQueryDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get List Count (POST)
        /// </summary>
        /// <remarks>
        /// Queries for the number of historic process instances that fulfill the given parameters. This method takes the same message body as the [Get Process Instances (POST)](https://docs.camunda.org/manual/7.14/reference/rest/history/process-instance/get-process-instance-query/) method and therefore it is slightly more powerful than the [Get Process Instance Count](https://docs.camunda.org/manual/7.14/reference/rest/history/process-instance/post-process-instance-query-count/) method.
        /// </remarks>
        /// <exception cref="CamundaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="historicProcessInstanceQueryDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CountResultDto</returns>
        System.Threading.Tasks.Task<CountResultDto> QueryHistoricProcessInstancesCountAsync(HistoricProcessInstanceQueryDto historicProcessInstanceQueryDto = default(HistoricProcessInstanceQueryDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get List Count (POST)
        /// </summary>
        /// <remarks>
        /// Queries for the number of historic process instances that fulfill the given parameters. This method takes the same message body as the [Get Process Instances (POST)](https://docs.camunda.org/manual/7.14/reference/rest/history/process-instance/get-process-instance-query/) method and therefore it is slightly more powerful than the [Get Process Instance Count](https://docs.camunda.org/manual/7.14/reference/rest/history/process-instance/post-process-instance-query-count/) method.
        /// </remarks>
        /// <exception cref="CamundaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="historicProcessInstanceQueryDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CountResultDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<CountResultDto>> QueryHistoricProcessInstancesCountWithHttpInfoAsync(HistoricProcessInstanceQueryDto historicProcessInstanceQueryDto = default(HistoricProcessInstanceQueryDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Set Removal Time Async (POST)
        /// </summary>
        /// <remarks>
        /// Sets the removal time to multiple historic process instances asynchronously (batch).  At least &#x60;historicProcessInstanceIds&#x60; or &#x60;historicProcessInstanceQuery&#x60; has to be provided. If both are provided, all instances matching query criterion and instances from the list will be updated with a removal time.
        /// </remarks>
        /// <exception cref="CamundaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setRemovalTimeToHistoricProcessInstancesDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchDto</returns>
        System.Threading.Tasks.Task<BatchDto> SetRemovalTimeAsyncAsync(SetRemovalTimeToHistoricProcessInstancesDto setRemovalTimeToHistoricProcessInstancesDto = default(SetRemovalTimeToHistoricProcessInstancesDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Set Removal Time Async (POST)
        /// </summary>
        /// <remarks>
        /// Sets the removal time to multiple historic process instances asynchronously (batch).  At least &#x60;historicProcessInstanceIds&#x60; or &#x60;historicProcessInstanceQuery&#x60; has to be provided. If both are provided, all instances matching query criterion and instances from the list will be updated with a removal time.
        /// </remarks>
        /// <exception cref="CamundaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setRemovalTimeToHistoricProcessInstancesDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<BatchDto>> SetRemovalTimeAsyncWithHttpInfoAsync(SetRemovalTimeToHistoricProcessInstancesDto setRemovalTimeToHistoricProcessInstancesDto = default(SetRemovalTimeToHistoricProcessInstancesDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IHistoricProcessInstanceApi : IHistoricProcessInstanceApiSync, IHistoricProcessInstanceApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class HistoricProcessInstanceApi : IHistoricProcessInstanceApi
    {
        private CamundaClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="HistoricProcessInstanceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public HistoricProcessInstanceApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="HistoricProcessInstanceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public HistoricProcessInstanceApi(String basePath)
        {
            this.Configuration = CamundaClient.Client.Configuration.MergeConfigurations(
                CamundaClient.Client.GlobalConfiguration.Instance,
                new CamundaClient.Client.Configuration { BasePath = basePath }
            );
            this.Client = new CamundaClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new CamundaClient.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = CamundaClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="HistoricProcessInstanceApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public HistoricProcessInstanceApi(CamundaClient.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = CamundaClient.Client.Configuration.MergeConfigurations(
                CamundaClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new CamundaClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new CamundaClient.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = CamundaClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="HistoricProcessInstanceApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public HistoricProcessInstanceApi(CamundaClient.Client.ISynchronousClient client, CamundaClient.Client.IAsynchronousClient asyncClient, CamundaClient.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = CamundaClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public CamundaClient.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public CamundaClient.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public CamundaClient.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public CamundaClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Delete Deletes a process instance from the history by id.
        /// </summary>
        /// <exception cref="CamundaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the historic process instance to be deleted.</param>
        /// <param name="failIfNotExists">If set to &#x60;false&#x60;, the request will still be successful if the process id is not found. (optional)</param>
        /// <returns></returns>
        public void DeleteHistoricProcessInstance(string id, bool? failIfNotExists = default(bool?))
        {
            DeleteHistoricProcessInstanceWithHttpInfo(id, failIfNotExists);
        }

        /// <summary>
        /// Delete Deletes a process instance from the history by id.
        /// </summary>
        /// <exception cref="CamundaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the historic process instance to be deleted.</param>
        /// <param name="failIfNotExists">If set to &#x60;false&#x60;, the request will still be successful if the process id is not found. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public CamundaClient.Client.ApiResponse<Object> DeleteHistoricProcessInstanceWithHttpInfo(string id, bool? failIfNotExists = default(bool?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new CamundaClient.Client.ApiException(400, "Missing required parameter 'id' when calling HistoricProcessInstanceApi->DeleteHistoricProcessInstance");

            CamundaClient.Client.RequestOptions localVarRequestOptions = new CamundaClient.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = CamundaClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = CamundaClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", CamundaClient.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (failIfNotExists != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "failIfNotExists", failIfNotExists));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/history/process-instance/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteHistoricProcessInstance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Deletes a process instance from the history by id.
        /// </summary>
        /// <exception cref="CamundaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the historic process instance to be deleted.</param>
        /// <param name="failIfNotExists">If set to &#x60;false&#x60;, the request will still be successful if the process id is not found. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteHistoricProcessInstanceAsync(string id, bool? failIfNotExists = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteHistoricProcessInstanceWithHttpInfoAsync(id, failIfNotExists, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete Deletes a process instance from the history by id.
        /// </summary>
        /// <exception cref="CamundaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the historic process instance to be deleted.</param>
        /// <param name="failIfNotExists">If set to &#x60;false&#x60;, the request will still be successful if the process id is not found. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<CamundaClient.Client.ApiResponse<Object>> DeleteHistoricProcessInstanceWithHttpInfoAsync(string id, bool? failIfNotExists = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new CamundaClient.Client.ApiException(400, "Missing required parameter 'id' when calling HistoricProcessInstanceApi->DeleteHistoricProcessInstance");


            CamundaClient.Client.RequestOptions localVarRequestOptions = new CamundaClient.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = CamundaClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = CamundaClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", CamundaClient.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (failIfNotExists != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "failIfNotExists", failIfNotExists));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/history/process-instance/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteHistoricProcessInstance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Async (POST) Delete multiple historic process instances asynchronously (batch). At least &#x60;historicProcessInstanceIds&#x60; or &#x60;historicProcessInstanceQuery&#x60; has to be provided. If both are provided then all instances matching query criterion and instances from the list will be deleted.
        /// </summary>
        /// <exception cref="CamundaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteHistoricProcessInstancesDto"> (optional)</param>
        /// <returns>BatchDto</returns>
        public BatchDto DeleteHistoricProcessInstancesAsync(DeleteHistoricProcessInstancesDto deleteHistoricProcessInstancesDto = default(DeleteHistoricProcessInstancesDto))
        {
            CamundaClient.Client.ApiResponse<BatchDto> localVarResponse = DeleteHistoricProcessInstancesAsyncWithHttpInfo(deleteHistoricProcessInstancesDto);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Async (POST) Delete multiple historic process instances asynchronously (batch). At least &#x60;historicProcessInstanceIds&#x60; or &#x60;historicProcessInstanceQuery&#x60; has to be provided. If both are provided then all instances matching query criterion and instances from the list will be deleted.
        /// </summary>
        /// <exception cref="CamundaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteHistoricProcessInstancesDto"> (optional)</param>
        /// <returns>ApiResponse of BatchDto</returns>
        public CamundaClient.Client.ApiResponse<BatchDto> DeleteHistoricProcessInstancesAsyncWithHttpInfo(DeleteHistoricProcessInstancesDto deleteHistoricProcessInstancesDto = default(DeleteHistoricProcessInstancesDto))
        {
            CamundaClient.Client.RequestOptions localVarRequestOptions = new CamundaClient.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = CamundaClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = CamundaClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = deleteHistoricProcessInstancesDto;


            // make the HTTP request
            var localVarResponse = this.Client.Post<BatchDto>("/history/process-instance/delete", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteHistoricProcessInstancesAsync", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Async (POST) Delete multiple historic process instances asynchronously (batch). At least &#x60;historicProcessInstanceIds&#x60; or &#x60;historicProcessInstanceQuery&#x60; has to be provided. If both are provided then all instances matching query criterion and instances from the list will be deleted.
        /// </summary>
        /// <exception cref="CamundaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteHistoricProcessInstancesDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchDto</returns>
        public async System.Threading.Tasks.Task<BatchDto> DeleteHistoricProcessInstancesAsyncAsync(DeleteHistoricProcessInstancesDto deleteHistoricProcessInstancesDto = default(DeleteHistoricProcessInstancesDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            CamundaClient.Client.ApiResponse<BatchDto> localVarResponse = await DeleteHistoricProcessInstancesAsyncWithHttpInfoAsync(deleteHistoricProcessInstancesDto, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Async (POST) Delete multiple historic process instances asynchronously (batch). At least &#x60;historicProcessInstanceIds&#x60; or &#x60;historicProcessInstanceQuery&#x60; has to be provided. If both are provided then all instances matching query criterion and instances from the list will be deleted.
        /// </summary>
        /// <exception cref="CamundaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteHistoricProcessInstancesDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchDto)</returns>
        public async System.Threading.Tasks.Task<CamundaClient.Client.ApiResponse<BatchDto>> DeleteHistoricProcessInstancesAsyncWithHttpInfoAsync(DeleteHistoricProcessInstancesDto deleteHistoricProcessInstancesDto = default(DeleteHistoricProcessInstancesDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            CamundaClient.Client.RequestOptions localVarRequestOptions = new CamundaClient.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = CamundaClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = CamundaClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = deleteHistoricProcessInstancesDto;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<BatchDto>("/history/process-instance/delete", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteHistoricProcessInstancesAsync", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Variable Instances Deletes all variables of a process instance from the history by id.
        /// </summary>
        /// <exception cref="CamundaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process instance for which all historic variables are to be deleted.</param>
        /// <returns></returns>
        public void DeleteHistoricVariableInstancesOfHistoricProcessInstance(string id)
        {
            DeleteHistoricVariableInstancesOfHistoricProcessInstanceWithHttpInfo(id);
        }

        /// <summary>
        /// Delete Variable Instances Deletes all variables of a process instance from the history by id.
        /// </summary>
        /// <exception cref="CamundaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process instance for which all historic variables are to be deleted.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public CamundaClient.Client.ApiResponse<Object> DeleteHistoricVariableInstancesOfHistoricProcessInstanceWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new CamundaClient.Client.ApiException(400, "Missing required parameter 'id' when calling HistoricProcessInstanceApi->DeleteHistoricVariableInstancesOfHistoricProcessInstance");

            CamundaClient.Client.RequestOptions localVarRequestOptions = new CamundaClient.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = CamundaClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = CamundaClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", CamundaClient.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/history/process-instance/{id}/variable-instances", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteHistoricVariableInstancesOfHistoricProcessInstance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Variable Instances Deletes all variables of a process instance from the history by id.
        /// </summary>
        /// <exception cref="CamundaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process instance for which all historic variables are to be deleted.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteHistoricVariableInstancesOfHistoricProcessInstanceAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteHistoricVariableInstancesOfHistoricProcessInstanceWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete Variable Instances Deletes all variables of a process instance from the history by id.
        /// </summary>
        /// <exception cref="CamundaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the process instance for which all historic variables are to be deleted.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<CamundaClient.Client.ApiResponse<Object>> DeleteHistoricVariableInstancesOfHistoricProcessInstanceWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new CamundaClient.Client.ApiException(400, "Missing required parameter 'id' when calling HistoricProcessInstanceApi->DeleteHistoricVariableInstancesOfHistoricProcessInstance");


            CamundaClient.Client.RequestOptions localVarRequestOptions = new CamundaClient.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = CamundaClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = CamundaClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", CamundaClient.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/history/process-instance/{id}/variable-instances", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteHistoricVariableInstancesOfHistoricProcessInstance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Retrieves a historic process instance by id, according to the &#x60;HistoricProcessInstance&#x60; interface in the engine.
        /// </summary>
        /// <exception cref="CamundaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the historic process instance to be retrieved.</param>
        /// <returns>HistoricProcessInstanceDto</returns>
        public HistoricProcessInstanceDto GetHistoricProcessInstance(string id)
        {
            CamundaClient.Client.ApiResponse<HistoricProcessInstanceDto> localVarResponse = GetHistoricProcessInstanceWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Retrieves a historic process instance by id, according to the &#x60;HistoricProcessInstance&#x60; interface in the engine.
        /// </summary>
        /// <exception cref="CamundaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the historic process instance to be retrieved.</param>
        /// <returns>ApiResponse of HistoricProcessInstanceDto</returns>
        public CamundaClient.Client.ApiResponse<HistoricProcessInstanceDto> GetHistoricProcessInstanceWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new CamundaClient.Client.ApiException(400, "Missing required parameter 'id' when calling HistoricProcessInstanceApi->GetHistoricProcessInstance");

            CamundaClient.Client.RequestOptions localVarRequestOptions = new CamundaClient.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = CamundaClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = CamundaClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", CamundaClient.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<HistoricProcessInstanceDto>("/history/process-instance/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetHistoricProcessInstance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Retrieves a historic process instance by id, according to the &#x60;HistoricProcessInstance&#x60; interface in the engine.
        /// </summary>
        /// <exception cref="CamundaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the historic process instance to be retrieved.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HistoricProcessInstanceDto</returns>
        public async System.Threading.Tasks.Task<HistoricProcessInstanceDto> GetHistoricProcessInstanceAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            CamundaClient.Client.ApiResponse<HistoricProcessInstanceDto> localVarResponse = await GetHistoricProcessInstanceWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Retrieves a historic process instance by id, according to the &#x60;HistoricProcessInstance&#x60; interface in the engine.
        /// </summary>
        /// <exception cref="CamundaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the historic process instance to be retrieved.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HistoricProcessInstanceDto)</returns>
        public async System.Threading.Tasks.Task<CamundaClient.Client.ApiResponse<HistoricProcessInstanceDto>> GetHistoricProcessInstanceWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new CamundaClient.Client.ApiException(400, "Missing required parameter 'id' when calling HistoricProcessInstanceApi->GetHistoricProcessInstance");


            CamundaClient.Client.RequestOptions localVarRequestOptions = new CamundaClient.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = CamundaClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = CamundaClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", CamundaClient.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<HistoricProcessInstanceDto>("/history/process-instance/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetHistoricProcessInstance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Duration Report Retrieves a report about the duration of completed process instances, grouped by a period. These reports include the maximum, minimum and average duration of all completed process instances which were started in a given period.  **Note:** This only includes historic data.
        /// </summary>
        /// <exception cref="CamundaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportType">**Mandatory.** Specifies the type of the report to retrieve. To retrieve a report about the duration of process instances, the value must be set to &#x60;duration&#x60;.</param>
        /// <param name="periodUnit">**Mandatory.** Specifies the granularity of the report. Valid values are &#x60;month&#x60; and &#x60;quarter&#x60;.</param>
        /// <param name="processDefinitionIdIn">Filter by process definition ids. Must be a comma-separated list of process definition ids. (optional)</param>
        /// <param name="processDefinitionKeyIn">Filter by process definition keys. Must be a comma-separated list of process definition keys. (optional)</param>
        /// <param name="startedBefore">Restrict to instances that were started before the given date. By [default](), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2016-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="startedAfter">Restrict to instances that were started after the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2016-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <returns>Object</returns>
        public Object GetHistoricProcessInstanceDurationReport(string reportType, string periodUnit, string processDefinitionIdIn = default(string), string processDefinitionKeyIn = default(string), DateTime? startedBefore = default(DateTime?), DateTime? startedAfter = default(DateTime?))
        {
            CamundaClient.Client.ApiResponse<Object> localVarResponse = GetHistoricProcessInstanceDurationReportWithHttpInfo(reportType, periodUnit, processDefinitionIdIn, processDefinitionKeyIn, startedBefore, startedAfter);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Duration Report Retrieves a report about the duration of completed process instances, grouped by a period. These reports include the maximum, minimum and average duration of all completed process instances which were started in a given period.  **Note:** This only includes historic data.
        /// </summary>
        /// <exception cref="CamundaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportType">**Mandatory.** Specifies the type of the report to retrieve. To retrieve a report about the duration of process instances, the value must be set to &#x60;duration&#x60;.</param>
        /// <param name="periodUnit">**Mandatory.** Specifies the granularity of the report. Valid values are &#x60;month&#x60; and &#x60;quarter&#x60;.</param>
        /// <param name="processDefinitionIdIn">Filter by process definition ids. Must be a comma-separated list of process definition ids. (optional)</param>
        /// <param name="processDefinitionKeyIn">Filter by process definition keys. Must be a comma-separated list of process definition keys. (optional)</param>
        /// <param name="startedBefore">Restrict to instances that were started before the given date. By [default](), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2016-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="startedAfter">Restrict to instances that were started after the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2016-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public CamundaClient.Client.ApiResponse<Object> GetHistoricProcessInstanceDurationReportWithHttpInfo(string reportType, string periodUnit, string processDefinitionIdIn = default(string), string processDefinitionKeyIn = default(string), DateTime? startedBefore = default(DateTime?), DateTime? startedAfter = default(DateTime?))
        {
            // verify the required parameter 'reportType' is set
            if (reportType == null)
                throw new CamundaClient.Client.ApiException(400, "Missing required parameter 'reportType' when calling HistoricProcessInstanceApi->GetHistoricProcessInstanceDurationReport");

            // verify the required parameter 'periodUnit' is set
            if (periodUnit == null)
                throw new CamundaClient.Client.ApiException(400, "Missing required parameter 'periodUnit' when calling HistoricProcessInstanceApi->GetHistoricProcessInstanceDurationReport");

            CamundaClient.Client.RequestOptions localVarRequestOptions = new CamundaClient.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/csv",
                "application/json"
            };

            var localVarContentType = CamundaClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = CamundaClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "reportType", reportType));
            localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "periodUnit", periodUnit));
            if (processDefinitionIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "processDefinitionIdIn", processDefinitionIdIn));
            }
            if (processDefinitionKeyIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "processDefinitionKeyIn", processDefinitionKeyIn));
            }
            if (startedBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "startedBefore", startedBefore));
            }
            if (startedAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "startedAfter", startedAfter));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/history/process-instance/report", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetHistoricProcessInstanceDurationReport", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Duration Report Retrieves a report about the duration of completed process instances, grouped by a period. These reports include the maximum, minimum and average duration of all completed process instances which were started in a given period.  **Note:** This only includes historic data.
        /// </summary>
        /// <exception cref="CamundaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportType">**Mandatory.** Specifies the type of the report to retrieve. To retrieve a report about the duration of process instances, the value must be set to &#x60;duration&#x60;.</param>
        /// <param name="periodUnit">**Mandatory.** Specifies the granularity of the report. Valid values are &#x60;month&#x60; and &#x60;quarter&#x60;.</param>
        /// <param name="processDefinitionIdIn">Filter by process definition ids. Must be a comma-separated list of process definition ids. (optional)</param>
        /// <param name="processDefinitionKeyIn">Filter by process definition keys. Must be a comma-separated list of process definition keys. (optional)</param>
        /// <param name="startedBefore">Restrict to instances that were started before the given date. By [default](), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2016-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="startedAfter">Restrict to instances that were started after the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2016-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetHistoricProcessInstanceDurationReportAsync(string reportType, string periodUnit, string processDefinitionIdIn = default(string), string processDefinitionKeyIn = default(string), DateTime? startedBefore = default(DateTime?), DateTime? startedAfter = default(DateTime?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            CamundaClient.Client.ApiResponse<Object> localVarResponse = await GetHistoricProcessInstanceDurationReportWithHttpInfoAsync(reportType, periodUnit, processDefinitionIdIn, processDefinitionKeyIn, startedBefore, startedAfter, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Duration Report Retrieves a report about the duration of completed process instances, grouped by a period. These reports include the maximum, minimum and average duration of all completed process instances which were started in a given period.  **Note:** This only includes historic data.
        /// </summary>
        /// <exception cref="CamundaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportType">**Mandatory.** Specifies the type of the report to retrieve. To retrieve a report about the duration of process instances, the value must be set to &#x60;duration&#x60;.</param>
        /// <param name="periodUnit">**Mandatory.** Specifies the granularity of the report. Valid values are &#x60;month&#x60; and &#x60;quarter&#x60;.</param>
        /// <param name="processDefinitionIdIn">Filter by process definition ids. Must be a comma-separated list of process definition ids. (optional)</param>
        /// <param name="processDefinitionKeyIn">Filter by process definition keys. Must be a comma-separated list of process definition keys. (optional)</param>
        /// <param name="startedBefore">Restrict to instances that were started before the given date. By [default](), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2016-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="startedAfter">Restrict to instances that were started after the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2016-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<CamundaClient.Client.ApiResponse<Object>> GetHistoricProcessInstanceDurationReportWithHttpInfoAsync(string reportType, string periodUnit, string processDefinitionIdIn = default(string), string processDefinitionKeyIn = default(string), DateTime? startedBefore = default(DateTime?), DateTime? startedAfter = default(DateTime?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'reportType' is set
            if (reportType == null)
                throw new CamundaClient.Client.ApiException(400, "Missing required parameter 'reportType' when calling HistoricProcessInstanceApi->GetHistoricProcessInstanceDurationReport");

            // verify the required parameter 'periodUnit' is set
            if (periodUnit == null)
                throw new CamundaClient.Client.ApiException(400, "Missing required parameter 'periodUnit' when calling HistoricProcessInstanceApi->GetHistoricProcessInstanceDurationReport");


            CamundaClient.Client.RequestOptions localVarRequestOptions = new CamundaClient.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/csv",
                "application/json"
            };


            var localVarContentType = CamundaClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = CamundaClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "reportType", reportType));
            localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "periodUnit", periodUnit));
            if (processDefinitionIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "processDefinitionIdIn", processDefinitionIdIn));
            }
            if (processDefinitionKeyIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "processDefinitionKeyIn", processDefinitionKeyIn));
            }
            if (startedBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "startedBefore", startedBefore));
            }
            if (startedAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "startedAfter", startedAfter));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/history/process-instance/report", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetHistoricProcessInstanceDurationReport", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get List Queries for historic process instances that fulfill the given parameters. The size of the result set can be retrieved by using the [Get Process Instance Count](https://docs.camunda.org/manual/7.14/reference/rest/history/process-instance/get-process-instance-query-count/) method.
        /// </summary>
        /// <exception cref="CamundaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="processInstanceId">Filter by process instance id. (optional)</param>
        /// <param name="processInstanceIds">Filter by process instance ids. Filter by a comma-separated list of &#x60;Strings&#x60;. (optional)</param>
        /// <param name="processDefinitionId">Filter by the process definition the instances run on. (optional)</param>
        /// <param name="processDefinitionKey">Filter by the key of the process definition the instances run on. (optional)</param>
        /// <param name="processDefinitionKeyIn">Filter by a list of process definition keys. A process instance must have one of the given process definition keys. Filter by a comma-separated list of &#x60;Strings&#x60;. (optional)</param>
        /// <param name="processDefinitionName">Filter by the name of the process definition the instances run on. (optional)</param>
        /// <param name="processDefinitionNameLike">Filter by process definition names that the parameter is a substring of. (optional)</param>
        /// <param name="processDefinitionKeyNotIn">Exclude instances that belong to a set of process definitions. Filter by a comma-separated list of &#x60;Strings&#x60;. (optional)</param>
        /// <param name="processInstanceBusinessKey">Filter by process instance business key. (optional)</param>
        /// <param name="processInstanceBusinessKeyLike">Filter by process instance business key that the parameter is a substring of. (optional)</param>
        /// <param name="rootProcessInstances">Restrict the query to all process instances that are top level process instances. (optional)</param>
        /// <param name="finished">Only include finished process instances. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="unfinished">Only include unfinished process instances. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="withIncidents">Only include process instances which have an incident. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="withRootIncidents">Only include process instances which have a root incident. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="incidentType">Filter by the incident type. See the [User Guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)</param>
        /// <param name="incidentStatus">Only include process instances which have an incident in status either open or resolved. To get all process instances, use the query parameter withIncidents. (optional)</param>
        /// <param name="incidentMessage">Filter by the incident message. Exact match. (optional)</param>
        /// <param name="incidentMessageLike">Filter by the incident message that the parameter is a substring of. (optional)</param>
        /// <param name="startedBefore">Restrict to instances that were started before the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="startedAfter">Restrict to instances that were started after the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="finishedBefore">Restrict to instances that were finished before the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="finishedAfter">Restrict to instances that were finished after the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="executedActivityAfter">Restrict to instances that executed an activity after the given date (inclusive). By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="executedActivityBefore">Restrict to instances that executed an activity before the given date (inclusive). By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="executedJobAfter">Restrict to instances that executed an job after the given date (inclusive). By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="executedJobBefore">Restrict to instances that executed an job before the given date (inclusive). By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="startedBy">Only include process instances that were started by the given user. (optional)</param>
        /// <param name="superProcessInstanceId">Restrict query to all process instances that are sub process instances of the given process instance. Takes a process instance id. (optional)</param>
        /// <param name="subProcessInstanceId">Restrict query to one process instance that has a sub process instance with the given id. (optional)</param>
        /// <param name="superCaseInstanceId">Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id. (optional)</param>
        /// <param name="subCaseInstanceId">Restrict query to one process instance that has a sub case instance with the given id. (optional)</param>
        /// <param name="caseInstanceId">Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id. (optional)</param>
        /// <param name="tenantIdIn">Filter by a list of tenant ids. A process instance must have one of the given tenant ids. Filter by a comma-separated list of &#x60;Strings&#x60; (optional)</param>
        /// <param name="withoutTenantId">Only include historic process instances which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="executedActivityIdIn">Restrict to instances that executed an activity with one of given ids. Filter by a comma-separated list of &#x60;Strings&#x60; (optional)</param>
        /// <param name="activeActivityIdIn">Restrict to instances that have an active activity with one of given ids. Filter by a comma-separated list of &#x60;Strings&#x60; (optional)</param>
        /// <param name="active">Restrict to instances that are active. (optional)</param>
        /// <param name="suspended">Restrict to instances that are suspended. (optional)</param>
        /// <param name="completed">Restrict to instances that are completed. (optional)</param>
        /// <param name="externallyTerminated">Restrict to instances that are externallyTerminated. (optional)</param>
        /// <param name="internallyTerminated">Restrict to instances that are internallyTerminated. (optional)</param>
        /// <param name="variables">Only include process instances that have/had variables with certain values. Variable filtering expressions are comma-separated and are structured as follows: A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value.  **Note:** Values are always treated as String objects on server side.  Valid operator values are: &#x60;eq&#x60; - equal to; &#x60;neq&#x60; - not equal to; &#x60;gt&#x60; - greater than; &#x60;gteq&#x60; - greater than or equal to; &#x60;lt&#x60; - lower than; &#x60;lteq&#x60; - lower than or equal to; &#x60;like&#x60;.  Key and value may not contain underscore or comma characters.  (optional)</param>
        /// <param name="variableNamesIgnoreCase">Match all variable names provided in variables case-insensitively. If set to &#x60;true&#x60; variableName and variablename are treated as equal. (optional)</param>
        /// <param name="variableValuesIgnoreCase">Match all variable values provided in variables case-insensitively. If set to &#x60;true&#x60; variableValue and variablevalue are treated as equal. (optional)</param>
        /// <returns>List&lt;HistoricProcessInstanceDto&gt;</returns>
        public List<HistoricProcessInstanceDto> GetHistoricProcessInstances(string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?), string processInstanceId = default(string), string processInstanceIds = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string processDefinitionKeyIn = default(string), string processDefinitionName = default(string), string processDefinitionNameLike = default(string), string processDefinitionKeyNotIn = default(string), string processInstanceBusinessKey = default(string), string processInstanceBusinessKeyLike = default(string), bool? rootProcessInstances = default(bool?), bool? finished = default(bool?), bool? unfinished = default(bool?), bool? withIncidents = default(bool?), bool? withRootIncidents = default(bool?), string incidentType = default(string), string incidentStatus = default(string), string incidentMessage = default(string), string incidentMessageLike = default(string), DateTime? startedBefore = default(DateTime?), DateTime? startedAfter = default(DateTime?), DateTime? finishedBefore = default(DateTime?), DateTime? finishedAfter = default(DateTime?), DateTime? executedActivityAfter = default(DateTime?), DateTime? executedActivityBefore = default(DateTime?), DateTime? executedJobAfter = default(DateTime?), DateTime? executedJobBefore = default(DateTime?), string startedBy = default(string), string superProcessInstanceId = default(string), string subProcessInstanceId = default(string), string superCaseInstanceId = default(string), string subCaseInstanceId = default(string), string caseInstanceId = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), string executedActivityIdIn = default(string), string activeActivityIdIn = default(string), bool? active = default(bool?), bool? suspended = default(bool?), bool? completed = default(bool?), bool? externallyTerminated = default(bool?), bool? internallyTerminated = default(bool?), string variables = default(string), bool? variableNamesIgnoreCase = default(bool?), bool? variableValuesIgnoreCase = default(bool?))
        {
            CamundaClient.Client.ApiResponse<List<HistoricProcessInstanceDto>> localVarResponse = GetHistoricProcessInstancesWithHttpInfo(sortBy, sortOrder, firstResult, maxResults, processInstanceId, processInstanceIds, processDefinitionId, processDefinitionKey, processDefinitionKeyIn, processDefinitionName, processDefinitionNameLike, processDefinitionKeyNotIn, processInstanceBusinessKey, processInstanceBusinessKeyLike, rootProcessInstances, finished, unfinished, withIncidents, withRootIncidents, incidentType, incidentStatus, incidentMessage, incidentMessageLike, startedBefore, startedAfter, finishedBefore, finishedAfter, executedActivityAfter, executedActivityBefore, executedJobAfter, executedJobBefore, startedBy, superProcessInstanceId, subProcessInstanceId, superCaseInstanceId, subCaseInstanceId, caseInstanceId, tenantIdIn, withoutTenantId, executedActivityIdIn, activeActivityIdIn, active, suspended, completed, externallyTerminated, internallyTerminated, variables, variableNamesIgnoreCase, variableValuesIgnoreCase);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get List Queries for historic process instances that fulfill the given parameters. The size of the result set can be retrieved by using the [Get Process Instance Count](https://docs.camunda.org/manual/7.14/reference/rest/history/process-instance/get-process-instance-query-count/) method.
        /// </summary>
        /// <exception cref="CamundaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="processInstanceId">Filter by process instance id. (optional)</param>
        /// <param name="processInstanceIds">Filter by process instance ids. Filter by a comma-separated list of &#x60;Strings&#x60;. (optional)</param>
        /// <param name="processDefinitionId">Filter by the process definition the instances run on. (optional)</param>
        /// <param name="processDefinitionKey">Filter by the key of the process definition the instances run on. (optional)</param>
        /// <param name="processDefinitionKeyIn">Filter by a list of process definition keys. A process instance must have one of the given process definition keys. Filter by a comma-separated list of &#x60;Strings&#x60;. (optional)</param>
        /// <param name="processDefinitionName">Filter by the name of the process definition the instances run on. (optional)</param>
        /// <param name="processDefinitionNameLike">Filter by process definition names that the parameter is a substring of. (optional)</param>
        /// <param name="processDefinitionKeyNotIn">Exclude instances that belong to a set of process definitions. Filter by a comma-separated list of &#x60;Strings&#x60;. (optional)</param>
        /// <param name="processInstanceBusinessKey">Filter by process instance business key. (optional)</param>
        /// <param name="processInstanceBusinessKeyLike">Filter by process instance business key that the parameter is a substring of. (optional)</param>
        /// <param name="rootProcessInstances">Restrict the query to all process instances that are top level process instances. (optional)</param>
        /// <param name="finished">Only include finished process instances. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="unfinished">Only include unfinished process instances. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="withIncidents">Only include process instances which have an incident. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="withRootIncidents">Only include process instances which have a root incident. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="incidentType">Filter by the incident type. See the [User Guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)</param>
        /// <param name="incidentStatus">Only include process instances which have an incident in status either open or resolved. To get all process instances, use the query parameter withIncidents. (optional)</param>
        /// <param name="incidentMessage">Filter by the incident message. Exact match. (optional)</param>
        /// <param name="incidentMessageLike">Filter by the incident message that the parameter is a substring of. (optional)</param>
        /// <param name="startedBefore">Restrict to instances that were started before the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="startedAfter">Restrict to instances that were started after the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="finishedBefore">Restrict to instances that were finished before the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="finishedAfter">Restrict to instances that were finished after the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="executedActivityAfter">Restrict to instances that executed an activity after the given date (inclusive). By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="executedActivityBefore">Restrict to instances that executed an activity before the given date (inclusive). By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="executedJobAfter">Restrict to instances that executed an job after the given date (inclusive). By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="executedJobBefore">Restrict to instances that executed an job before the given date (inclusive). By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="startedBy">Only include process instances that were started by the given user. (optional)</param>
        /// <param name="superProcessInstanceId">Restrict query to all process instances that are sub process instances of the given process instance. Takes a process instance id. (optional)</param>
        /// <param name="subProcessInstanceId">Restrict query to one process instance that has a sub process instance with the given id. (optional)</param>
        /// <param name="superCaseInstanceId">Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id. (optional)</param>
        /// <param name="subCaseInstanceId">Restrict query to one process instance that has a sub case instance with the given id. (optional)</param>
        /// <param name="caseInstanceId">Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id. (optional)</param>
        /// <param name="tenantIdIn">Filter by a list of tenant ids. A process instance must have one of the given tenant ids. Filter by a comma-separated list of &#x60;Strings&#x60; (optional)</param>
        /// <param name="withoutTenantId">Only include historic process instances which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="executedActivityIdIn">Restrict to instances that executed an activity with one of given ids. Filter by a comma-separated list of &#x60;Strings&#x60; (optional)</param>
        /// <param name="activeActivityIdIn">Restrict to instances that have an active activity with one of given ids. Filter by a comma-separated list of &#x60;Strings&#x60; (optional)</param>
        /// <param name="active">Restrict to instances that are active. (optional)</param>
        /// <param name="suspended">Restrict to instances that are suspended. (optional)</param>
        /// <param name="completed">Restrict to instances that are completed. (optional)</param>
        /// <param name="externallyTerminated">Restrict to instances that are externallyTerminated. (optional)</param>
        /// <param name="internallyTerminated">Restrict to instances that are internallyTerminated. (optional)</param>
        /// <param name="variables">Only include process instances that have/had variables with certain values. Variable filtering expressions are comma-separated and are structured as follows: A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value.  **Note:** Values are always treated as String objects on server side.  Valid operator values are: &#x60;eq&#x60; - equal to; &#x60;neq&#x60; - not equal to; &#x60;gt&#x60; - greater than; &#x60;gteq&#x60; - greater than or equal to; &#x60;lt&#x60; - lower than; &#x60;lteq&#x60; - lower than or equal to; &#x60;like&#x60;.  Key and value may not contain underscore or comma characters.  (optional)</param>
        /// <param name="variableNamesIgnoreCase">Match all variable names provided in variables case-insensitively. If set to &#x60;true&#x60; variableName and variablename are treated as equal. (optional)</param>
        /// <param name="variableValuesIgnoreCase">Match all variable values provided in variables case-insensitively. If set to &#x60;true&#x60; variableValue and variablevalue are treated as equal. (optional)</param>
        /// <returns>ApiResponse of List&lt;HistoricProcessInstanceDto&gt;</returns>
        public CamundaClient.Client.ApiResponse<List<HistoricProcessInstanceDto>> GetHistoricProcessInstancesWithHttpInfo(string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?), string processInstanceId = default(string), string processInstanceIds = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string processDefinitionKeyIn = default(string), string processDefinitionName = default(string), string processDefinitionNameLike = default(string), string processDefinitionKeyNotIn = default(string), string processInstanceBusinessKey = default(string), string processInstanceBusinessKeyLike = default(string), bool? rootProcessInstances = default(bool?), bool? finished = default(bool?), bool? unfinished = default(bool?), bool? withIncidents = default(bool?), bool? withRootIncidents = default(bool?), string incidentType = default(string), string incidentStatus = default(string), string incidentMessage = default(string), string incidentMessageLike = default(string), DateTime? startedBefore = default(DateTime?), DateTime? startedAfter = default(DateTime?), DateTime? finishedBefore = default(DateTime?), DateTime? finishedAfter = default(DateTime?), DateTime? executedActivityAfter = default(DateTime?), DateTime? executedActivityBefore = default(DateTime?), DateTime? executedJobAfter = default(DateTime?), DateTime? executedJobBefore = default(DateTime?), string startedBy = default(string), string superProcessInstanceId = default(string), string subProcessInstanceId = default(string), string superCaseInstanceId = default(string), string subCaseInstanceId = default(string), string caseInstanceId = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), string executedActivityIdIn = default(string), string activeActivityIdIn = default(string), bool? active = default(bool?), bool? suspended = default(bool?), bool? completed = default(bool?), bool? externallyTerminated = default(bool?), bool? internallyTerminated = default(bool?), string variables = default(string), bool? variableNamesIgnoreCase = default(bool?), bool? variableValuesIgnoreCase = default(bool?))
        {
            CamundaClient.Client.RequestOptions localVarRequestOptions = new CamundaClient.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = CamundaClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = CamundaClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "sortBy", sortBy));
            }
            if (sortOrder != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "sortOrder", sortOrder));
            }
            if (firstResult != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "firstResult", firstResult));
            }
            if (maxResults != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "maxResults", maxResults));
            }
            if (processInstanceId != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "processInstanceId", processInstanceId));
            }
            if (processInstanceIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "processInstanceIds", processInstanceIds));
            }
            if (processDefinitionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "processDefinitionId", processDefinitionId));
            }
            if (processDefinitionKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "processDefinitionKey", processDefinitionKey));
            }
            if (processDefinitionKeyIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "processDefinitionKeyIn", processDefinitionKeyIn));
            }
            if (processDefinitionName != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "processDefinitionName", processDefinitionName));
            }
            if (processDefinitionNameLike != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "processDefinitionNameLike", processDefinitionNameLike));
            }
            if (processDefinitionKeyNotIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "processDefinitionKeyNotIn", processDefinitionKeyNotIn));
            }
            if (processInstanceBusinessKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "processInstanceBusinessKey", processInstanceBusinessKey));
            }
            if (processInstanceBusinessKeyLike != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "processInstanceBusinessKeyLike", processInstanceBusinessKeyLike));
            }
            if (rootProcessInstances != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "rootProcessInstances", rootProcessInstances));
            }
            if (finished != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "finished", finished));
            }
            if (unfinished != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "unfinished", unfinished));
            }
            if (withIncidents != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "withIncidents", withIncidents));
            }
            if (withRootIncidents != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "withRootIncidents", withRootIncidents));
            }
            if (incidentType != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "incidentType", incidentType));
            }
            if (incidentStatus != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "incidentStatus", incidentStatus));
            }
            if (incidentMessage != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "incidentMessage", incidentMessage));
            }
            if (incidentMessageLike != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "incidentMessageLike", incidentMessageLike));
            }
            if (startedBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "startedBefore", startedBefore));
            }
            if (startedAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "startedAfter", startedAfter));
            }
            if (finishedBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "finishedBefore", finishedBefore));
            }
            if (finishedAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "finishedAfter", finishedAfter));
            }
            if (executedActivityAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "executedActivityAfter", executedActivityAfter));
            }
            if (executedActivityBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "executedActivityBefore", executedActivityBefore));
            }
            if (executedJobAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "executedJobAfter", executedJobAfter));
            }
            if (executedJobBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "executedJobBefore", executedJobBefore));
            }
            if (startedBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "startedBy", startedBy));
            }
            if (superProcessInstanceId != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "superProcessInstanceId", superProcessInstanceId));
            }
            if (subProcessInstanceId != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "subProcessInstanceId", subProcessInstanceId));
            }
            if (superCaseInstanceId != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "superCaseInstanceId", superCaseInstanceId));
            }
            if (subCaseInstanceId != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "subCaseInstanceId", subCaseInstanceId));
            }
            if (caseInstanceId != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "caseInstanceId", caseInstanceId));
            }
            if (tenantIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "tenantIdIn", tenantIdIn));
            }
            if (withoutTenantId != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "withoutTenantId", withoutTenantId));
            }
            if (executedActivityIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "executedActivityIdIn", executedActivityIdIn));
            }
            if (activeActivityIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "activeActivityIdIn", activeActivityIdIn));
            }
            if (active != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "active", active));
            }
            if (suspended != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "suspended", suspended));
            }
            if (completed != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "completed", completed));
            }
            if (externallyTerminated != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "externallyTerminated", externallyTerminated));
            }
            if (internallyTerminated != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "internallyTerminated", internallyTerminated));
            }
            if (variables != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "variables", variables));
            }
            if (variableNamesIgnoreCase != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "variableNamesIgnoreCase", variableNamesIgnoreCase));
            }
            if (variableValuesIgnoreCase != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "variableValuesIgnoreCase", variableValuesIgnoreCase));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<HistoricProcessInstanceDto>>("/history/process-instance", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetHistoricProcessInstances", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get List Queries for historic process instances that fulfill the given parameters. The size of the result set can be retrieved by using the [Get Process Instance Count](https://docs.camunda.org/manual/7.14/reference/rest/history/process-instance/get-process-instance-query-count/) method.
        /// </summary>
        /// <exception cref="CamundaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="processInstanceId">Filter by process instance id. (optional)</param>
        /// <param name="processInstanceIds">Filter by process instance ids. Filter by a comma-separated list of &#x60;Strings&#x60;. (optional)</param>
        /// <param name="processDefinitionId">Filter by the process definition the instances run on. (optional)</param>
        /// <param name="processDefinitionKey">Filter by the key of the process definition the instances run on. (optional)</param>
        /// <param name="processDefinitionKeyIn">Filter by a list of process definition keys. A process instance must have one of the given process definition keys. Filter by a comma-separated list of &#x60;Strings&#x60;. (optional)</param>
        /// <param name="processDefinitionName">Filter by the name of the process definition the instances run on. (optional)</param>
        /// <param name="processDefinitionNameLike">Filter by process definition names that the parameter is a substring of. (optional)</param>
        /// <param name="processDefinitionKeyNotIn">Exclude instances that belong to a set of process definitions. Filter by a comma-separated list of &#x60;Strings&#x60;. (optional)</param>
        /// <param name="processInstanceBusinessKey">Filter by process instance business key. (optional)</param>
        /// <param name="processInstanceBusinessKeyLike">Filter by process instance business key that the parameter is a substring of. (optional)</param>
        /// <param name="rootProcessInstances">Restrict the query to all process instances that are top level process instances. (optional)</param>
        /// <param name="finished">Only include finished process instances. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="unfinished">Only include unfinished process instances. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="withIncidents">Only include process instances which have an incident. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="withRootIncidents">Only include process instances which have a root incident. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="incidentType">Filter by the incident type. See the [User Guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)</param>
        /// <param name="incidentStatus">Only include process instances which have an incident in status either open or resolved. To get all process instances, use the query parameter withIncidents. (optional)</param>
        /// <param name="incidentMessage">Filter by the incident message. Exact match. (optional)</param>
        /// <param name="incidentMessageLike">Filter by the incident message that the parameter is a substring of. (optional)</param>
        /// <param name="startedBefore">Restrict to instances that were started before the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="startedAfter">Restrict to instances that were started after the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="finishedBefore">Restrict to instances that were finished before the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="finishedAfter">Restrict to instances that were finished after the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="executedActivityAfter">Restrict to instances that executed an activity after the given date (inclusive). By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="executedActivityBefore">Restrict to instances that executed an activity before the given date (inclusive). By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="executedJobAfter">Restrict to instances that executed an job after the given date (inclusive). By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="executedJobBefore">Restrict to instances that executed an job before the given date (inclusive). By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="startedBy">Only include process instances that were started by the given user. (optional)</param>
        /// <param name="superProcessInstanceId">Restrict query to all process instances that are sub process instances of the given process instance. Takes a process instance id. (optional)</param>
        /// <param name="subProcessInstanceId">Restrict query to one process instance that has a sub process instance with the given id. (optional)</param>
        /// <param name="superCaseInstanceId">Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id. (optional)</param>
        /// <param name="subCaseInstanceId">Restrict query to one process instance that has a sub case instance with the given id. (optional)</param>
        /// <param name="caseInstanceId">Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id. (optional)</param>
        /// <param name="tenantIdIn">Filter by a list of tenant ids. A process instance must have one of the given tenant ids. Filter by a comma-separated list of &#x60;Strings&#x60; (optional)</param>
        /// <param name="withoutTenantId">Only include historic process instances which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="executedActivityIdIn">Restrict to instances that executed an activity with one of given ids. Filter by a comma-separated list of &#x60;Strings&#x60; (optional)</param>
        /// <param name="activeActivityIdIn">Restrict to instances that have an active activity with one of given ids. Filter by a comma-separated list of &#x60;Strings&#x60; (optional)</param>
        /// <param name="active">Restrict to instances that are active. (optional)</param>
        /// <param name="suspended">Restrict to instances that are suspended. (optional)</param>
        /// <param name="completed">Restrict to instances that are completed. (optional)</param>
        /// <param name="externallyTerminated">Restrict to instances that are externallyTerminated. (optional)</param>
        /// <param name="internallyTerminated">Restrict to instances that are internallyTerminated. (optional)</param>
        /// <param name="variables">Only include process instances that have/had variables with certain values. Variable filtering expressions are comma-separated and are structured as follows: A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value.  **Note:** Values are always treated as String objects on server side.  Valid operator values are: &#x60;eq&#x60; - equal to; &#x60;neq&#x60; - not equal to; &#x60;gt&#x60; - greater than; &#x60;gteq&#x60; - greater than or equal to; &#x60;lt&#x60; - lower than; &#x60;lteq&#x60; - lower than or equal to; &#x60;like&#x60;.  Key and value may not contain underscore or comma characters.  (optional)</param>
        /// <param name="variableNamesIgnoreCase">Match all variable names provided in variables case-insensitively. If set to &#x60;true&#x60; variableName and variablename are treated as equal. (optional)</param>
        /// <param name="variableValuesIgnoreCase">Match all variable values provided in variables case-insensitively. If set to &#x60;true&#x60; variableValue and variablevalue are treated as equal. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;HistoricProcessInstanceDto&gt;</returns>
        public async System.Threading.Tasks.Task<List<HistoricProcessInstanceDto>> GetHistoricProcessInstancesAsync(string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?), string processInstanceId = default(string), string processInstanceIds = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string processDefinitionKeyIn = default(string), string processDefinitionName = default(string), string processDefinitionNameLike = default(string), string processDefinitionKeyNotIn = default(string), string processInstanceBusinessKey = default(string), string processInstanceBusinessKeyLike = default(string), bool? rootProcessInstances = default(bool?), bool? finished = default(bool?), bool? unfinished = default(bool?), bool? withIncidents = default(bool?), bool? withRootIncidents = default(bool?), string incidentType = default(string), string incidentStatus = default(string), string incidentMessage = default(string), string incidentMessageLike = default(string), DateTime? startedBefore = default(DateTime?), DateTime? startedAfter = default(DateTime?), DateTime? finishedBefore = default(DateTime?), DateTime? finishedAfter = default(DateTime?), DateTime? executedActivityAfter = default(DateTime?), DateTime? executedActivityBefore = default(DateTime?), DateTime? executedJobAfter = default(DateTime?), DateTime? executedJobBefore = default(DateTime?), string startedBy = default(string), string superProcessInstanceId = default(string), string subProcessInstanceId = default(string), string superCaseInstanceId = default(string), string subCaseInstanceId = default(string), string caseInstanceId = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), string executedActivityIdIn = default(string), string activeActivityIdIn = default(string), bool? active = default(bool?), bool? suspended = default(bool?), bool? completed = default(bool?), bool? externallyTerminated = default(bool?), bool? internallyTerminated = default(bool?), string variables = default(string), bool? variableNamesIgnoreCase = default(bool?), bool? variableValuesIgnoreCase = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            CamundaClient.Client.ApiResponse<List<HistoricProcessInstanceDto>> localVarResponse = await GetHistoricProcessInstancesWithHttpInfoAsync(sortBy, sortOrder, firstResult, maxResults, processInstanceId, processInstanceIds, processDefinitionId, processDefinitionKey, processDefinitionKeyIn, processDefinitionName, processDefinitionNameLike, processDefinitionKeyNotIn, processInstanceBusinessKey, processInstanceBusinessKeyLike, rootProcessInstances, finished, unfinished, withIncidents, withRootIncidents, incidentType, incidentStatus, incidentMessage, incidentMessageLike, startedBefore, startedAfter, finishedBefore, finishedAfter, executedActivityAfter, executedActivityBefore, executedJobAfter, executedJobBefore, startedBy, superProcessInstanceId, subProcessInstanceId, superCaseInstanceId, subCaseInstanceId, caseInstanceId, tenantIdIn, withoutTenantId, executedActivityIdIn, activeActivityIdIn, active, suspended, completed, externallyTerminated, internallyTerminated, variables, variableNamesIgnoreCase, variableValuesIgnoreCase, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get List Queries for historic process instances that fulfill the given parameters. The size of the result set can be retrieved by using the [Get Process Instance Count](https://docs.camunda.org/manual/7.14/reference/rest/history/process-instance/get-process-instance-query-count/) method.
        /// </summary>
        /// <exception cref="CamundaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="processInstanceId">Filter by process instance id. (optional)</param>
        /// <param name="processInstanceIds">Filter by process instance ids. Filter by a comma-separated list of &#x60;Strings&#x60;. (optional)</param>
        /// <param name="processDefinitionId">Filter by the process definition the instances run on. (optional)</param>
        /// <param name="processDefinitionKey">Filter by the key of the process definition the instances run on. (optional)</param>
        /// <param name="processDefinitionKeyIn">Filter by a list of process definition keys. A process instance must have one of the given process definition keys. Filter by a comma-separated list of &#x60;Strings&#x60;. (optional)</param>
        /// <param name="processDefinitionName">Filter by the name of the process definition the instances run on. (optional)</param>
        /// <param name="processDefinitionNameLike">Filter by process definition names that the parameter is a substring of. (optional)</param>
        /// <param name="processDefinitionKeyNotIn">Exclude instances that belong to a set of process definitions. Filter by a comma-separated list of &#x60;Strings&#x60;. (optional)</param>
        /// <param name="processInstanceBusinessKey">Filter by process instance business key. (optional)</param>
        /// <param name="processInstanceBusinessKeyLike">Filter by process instance business key that the parameter is a substring of. (optional)</param>
        /// <param name="rootProcessInstances">Restrict the query to all process instances that are top level process instances. (optional)</param>
        /// <param name="finished">Only include finished process instances. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="unfinished">Only include unfinished process instances. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="withIncidents">Only include process instances which have an incident. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="withRootIncidents">Only include process instances which have a root incident. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="incidentType">Filter by the incident type. See the [User Guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)</param>
        /// <param name="incidentStatus">Only include process instances which have an incident in status either open or resolved. To get all process instances, use the query parameter withIncidents. (optional)</param>
        /// <param name="incidentMessage">Filter by the incident message. Exact match. (optional)</param>
        /// <param name="incidentMessageLike">Filter by the incident message that the parameter is a substring of. (optional)</param>
        /// <param name="startedBefore">Restrict to instances that were started before the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="startedAfter">Restrict to instances that were started after the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="finishedBefore">Restrict to instances that were finished before the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="finishedAfter">Restrict to instances that were finished after the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="executedActivityAfter">Restrict to instances that executed an activity after the given date (inclusive). By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="executedActivityBefore">Restrict to instances that executed an activity before the given date (inclusive). By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="executedJobAfter">Restrict to instances that executed an job after the given date (inclusive). By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="executedJobBefore">Restrict to instances that executed an job before the given date (inclusive). By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="startedBy">Only include process instances that were started by the given user. (optional)</param>
        /// <param name="superProcessInstanceId">Restrict query to all process instances that are sub process instances of the given process instance. Takes a process instance id. (optional)</param>
        /// <param name="subProcessInstanceId">Restrict query to one process instance that has a sub process instance with the given id. (optional)</param>
        /// <param name="superCaseInstanceId">Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id. (optional)</param>
        /// <param name="subCaseInstanceId">Restrict query to one process instance that has a sub case instance with the given id. (optional)</param>
        /// <param name="caseInstanceId">Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id. (optional)</param>
        /// <param name="tenantIdIn">Filter by a list of tenant ids. A process instance must have one of the given tenant ids. Filter by a comma-separated list of &#x60;Strings&#x60; (optional)</param>
        /// <param name="withoutTenantId">Only include historic process instances which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="executedActivityIdIn">Restrict to instances that executed an activity with one of given ids. Filter by a comma-separated list of &#x60;Strings&#x60; (optional)</param>
        /// <param name="activeActivityIdIn">Restrict to instances that have an active activity with one of given ids. Filter by a comma-separated list of &#x60;Strings&#x60; (optional)</param>
        /// <param name="active">Restrict to instances that are active. (optional)</param>
        /// <param name="suspended">Restrict to instances that are suspended. (optional)</param>
        /// <param name="completed">Restrict to instances that are completed. (optional)</param>
        /// <param name="externallyTerminated">Restrict to instances that are externallyTerminated. (optional)</param>
        /// <param name="internallyTerminated">Restrict to instances that are internallyTerminated. (optional)</param>
        /// <param name="variables">Only include process instances that have/had variables with certain values. Variable filtering expressions are comma-separated and are structured as follows: A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value.  **Note:** Values are always treated as String objects on server side.  Valid operator values are: &#x60;eq&#x60; - equal to; &#x60;neq&#x60; - not equal to; &#x60;gt&#x60; - greater than; &#x60;gteq&#x60; - greater than or equal to; &#x60;lt&#x60; - lower than; &#x60;lteq&#x60; - lower than or equal to; &#x60;like&#x60;.  Key and value may not contain underscore or comma characters.  (optional)</param>
        /// <param name="variableNamesIgnoreCase">Match all variable names provided in variables case-insensitively. If set to &#x60;true&#x60; variableName and variablename are treated as equal. (optional)</param>
        /// <param name="variableValuesIgnoreCase">Match all variable values provided in variables case-insensitively. If set to &#x60;true&#x60; variableValue and variablevalue are treated as equal. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;HistoricProcessInstanceDto&gt;)</returns>
        public async System.Threading.Tasks.Task<CamundaClient.Client.ApiResponse<List<HistoricProcessInstanceDto>>> GetHistoricProcessInstancesWithHttpInfoAsync(string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?), string processInstanceId = default(string), string processInstanceIds = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string processDefinitionKeyIn = default(string), string processDefinitionName = default(string), string processDefinitionNameLike = default(string), string processDefinitionKeyNotIn = default(string), string processInstanceBusinessKey = default(string), string processInstanceBusinessKeyLike = default(string), bool? rootProcessInstances = default(bool?), bool? finished = default(bool?), bool? unfinished = default(bool?), bool? withIncidents = default(bool?), bool? withRootIncidents = default(bool?), string incidentType = default(string), string incidentStatus = default(string), string incidentMessage = default(string), string incidentMessageLike = default(string), DateTime? startedBefore = default(DateTime?), DateTime? startedAfter = default(DateTime?), DateTime? finishedBefore = default(DateTime?), DateTime? finishedAfter = default(DateTime?), DateTime? executedActivityAfter = default(DateTime?), DateTime? executedActivityBefore = default(DateTime?), DateTime? executedJobAfter = default(DateTime?), DateTime? executedJobBefore = default(DateTime?), string startedBy = default(string), string superProcessInstanceId = default(string), string subProcessInstanceId = default(string), string superCaseInstanceId = default(string), string subCaseInstanceId = default(string), string caseInstanceId = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), string executedActivityIdIn = default(string), string activeActivityIdIn = default(string), bool? active = default(bool?), bool? suspended = default(bool?), bool? completed = default(bool?), bool? externallyTerminated = default(bool?), bool? internallyTerminated = default(bool?), string variables = default(string), bool? variableNamesIgnoreCase = default(bool?), bool? variableValuesIgnoreCase = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            CamundaClient.Client.RequestOptions localVarRequestOptions = new CamundaClient.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = CamundaClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = CamundaClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "sortBy", sortBy));
            }
            if (sortOrder != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "sortOrder", sortOrder));
            }
            if (firstResult != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "firstResult", firstResult));
            }
            if (maxResults != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "maxResults", maxResults));
            }
            if (processInstanceId != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "processInstanceId", processInstanceId));
            }
            if (processInstanceIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "processInstanceIds", processInstanceIds));
            }
            if (processDefinitionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "processDefinitionId", processDefinitionId));
            }
            if (processDefinitionKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "processDefinitionKey", processDefinitionKey));
            }
            if (processDefinitionKeyIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "processDefinitionKeyIn", processDefinitionKeyIn));
            }
            if (processDefinitionName != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "processDefinitionName", processDefinitionName));
            }
            if (processDefinitionNameLike != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "processDefinitionNameLike", processDefinitionNameLike));
            }
            if (processDefinitionKeyNotIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "processDefinitionKeyNotIn", processDefinitionKeyNotIn));
            }
            if (processInstanceBusinessKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "processInstanceBusinessKey", processInstanceBusinessKey));
            }
            if (processInstanceBusinessKeyLike != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "processInstanceBusinessKeyLike", processInstanceBusinessKeyLike));
            }
            if (rootProcessInstances != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "rootProcessInstances", rootProcessInstances));
            }
            if (finished != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "finished", finished));
            }
            if (unfinished != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "unfinished", unfinished));
            }
            if (withIncidents != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "withIncidents", withIncidents));
            }
            if (withRootIncidents != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "withRootIncidents", withRootIncidents));
            }
            if (incidentType != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "incidentType", incidentType));
            }
            if (incidentStatus != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "incidentStatus", incidentStatus));
            }
            if (incidentMessage != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "incidentMessage", incidentMessage));
            }
            if (incidentMessageLike != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "incidentMessageLike", incidentMessageLike));
            }
            if (startedBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "startedBefore", startedBefore));
            }
            if (startedAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "startedAfter", startedAfter));
            }
            if (finishedBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "finishedBefore", finishedBefore));
            }
            if (finishedAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "finishedAfter", finishedAfter));
            }
            if (executedActivityAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "executedActivityAfter", executedActivityAfter));
            }
            if (executedActivityBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "executedActivityBefore", executedActivityBefore));
            }
            if (executedJobAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "executedJobAfter", executedJobAfter));
            }
            if (executedJobBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "executedJobBefore", executedJobBefore));
            }
            if (startedBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "startedBy", startedBy));
            }
            if (superProcessInstanceId != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "superProcessInstanceId", superProcessInstanceId));
            }
            if (subProcessInstanceId != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "subProcessInstanceId", subProcessInstanceId));
            }
            if (superCaseInstanceId != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "superCaseInstanceId", superCaseInstanceId));
            }
            if (subCaseInstanceId != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "subCaseInstanceId", subCaseInstanceId));
            }
            if (caseInstanceId != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "caseInstanceId", caseInstanceId));
            }
            if (tenantIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "tenantIdIn", tenantIdIn));
            }
            if (withoutTenantId != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "withoutTenantId", withoutTenantId));
            }
            if (executedActivityIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "executedActivityIdIn", executedActivityIdIn));
            }
            if (activeActivityIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "activeActivityIdIn", activeActivityIdIn));
            }
            if (active != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "active", active));
            }
            if (suspended != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "suspended", suspended));
            }
            if (completed != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "completed", completed));
            }
            if (externallyTerminated != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "externallyTerminated", externallyTerminated));
            }
            if (internallyTerminated != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "internallyTerminated", internallyTerminated));
            }
            if (variables != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "variables", variables));
            }
            if (variableNamesIgnoreCase != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "variableNamesIgnoreCase", variableNamesIgnoreCase));
            }
            if (variableValuesIgnoreCase != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "variableValuesIgnoreCase", variableValuesIgnoreCase));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<HistoricProcessInstanceDto>>("/history/process-instance", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetHistoricProcessInstances", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get List Count Queries for the number of historic process instances that fulfill the given parameters. Takes the same parameters as the [Get Process Instances](https://docs.camunda.org/manual/7.14/reference/rest/history/process-instance/get-process-instance-query/) method.
        /// </summary>
        /// <exception cref="CamundaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processInstanceId">Filter by process instance id. (optional)</param>
        /// <param name="processInstanceIds">Filter by process instance ids. Filter by a comma-separated list of &#x60;Strings&#x60;. (optional)</param>
        /// <param name="processDefinitionId">Filter by the process definition the instances run on. (optional)</param>
        /// <param name="processDefinitionKey">Filter by the key of the process definition the instances run on. (optional)</param>
        /// <param name="processDefinitionKeyIn">Filter by a list of process definition keys. A process instance must have one of the given process definition keys. Filter by a comma-separated list of &#x60;Strings&#x60;. (optional)</param>
        /// <param name="processDefinitionName">Filter by the name of the process definition the instances run on. (optional)</param>
        /// <param name="processDefinitionNameLike">Filter by process definition names that the parameter is a substring of. (optional)</param>
        /// <param name="processDefinitionKeyNotIn">Exclude instances that belong to a set of process definitions. Filter by a comma-separated list of &#x60;Strings&#x60;. (optional)</param>
        /// <param name="processInstanceBusinessKey">Filter by process instance business key. (optional)</param>
        /// <param name="processInstanceBusinessKeyLike">Filter by process instance business key that the parameter is a substring of. (optional)</param>
        /// <param name="rootProcessInstances">Restrict the query to all process instances that are top level process instances. (optional)</param>
        /// <param name="finished">Only include finished process instances. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="unfinished">Only include unfinished process instances. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="withIncidents">Only include process instances which have an incident. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="withRootIncidents">Only include process instances which have a root incident. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="incidentType">Filter by the incident type. See the [User Guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)</param>
        /// <param name="incidentStatus">Only include process instances which have an incident in status either open or resolved. To get all process instances, use the query parameter withIncidents. (optional)</param>
        /// <param name="incidentMessage">Filter by the incident message. Exact match. (optional)</param>
        /// <param name="incidentMessageLike">Filter by the incident message that the parameter is a substring of. (optional)</param>
        /// <param name="startedBefore">Restrict to instances that were started before the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="startedAfter">Restrict to instances that were started after the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="finishedBefore">Restrict to instances that were finished before the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="finishedAfter">Restrict to instances that were finished after the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="executedActivityAfter">Restrict to instances that executed an activity after the given date (inclusive). By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="executedActivityBefore">Restrict to instances that executed an activity before the given date (inclusive). By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="executedJobAfter">Restrict to instances that executed an job after the given date (inclusive). By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="executedJobBefore">Restrict to instances that executed an job before the given date (inclusive). By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="startedBy">Only include process instances that were started by the given user. (optional)</param>
        /// <param name="superProcessInstanceId">Restrict query to all process instances that are sub process instances of the given process instance. Takes a process instance id. (optional)</param>
        /// <param name="subProcessInstanceId">Restrict query to one process instance that has a sub process instance with the given id. (optional)</param>
        /// <param name="superCaseInstanceId">Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id. (optional)</param>
        /// <param name="subCaseInstanceId">Restrict query to one process instance that has a sub case instance with the given id. (optional)</param>
        /// <param name="caseInstanceId">Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id. (optional)</param>
        /// <param name="tenantIdIn">Filter by a list of tenant ids. A process instance must have one of the given tenant ids. Filter by a comma-separated list of &#x60;Strings&#x60; (optional)</param>
        /// <param name="withoutTenantId">Only include historic process instances which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="executedActivityIdIn">Restrict to instances that executed an activity with one of given ids. Filter by a comma-separated list of &#x60;Strings&#x60; (optional)</param>
        /// <param name="activeActivityIdIn">Restrict to instances that have an active activity with one of given ids. Filter by a comma-separated list of &#x60;Strings&#x60; (optional)</param>
        /// <param name="active">Restrict to instances that are active. (optional)</param>
        /// <param name="suspended">Restrict to instances that are suspended. (optional)</param>
        /// <param name="completed">Restrict to instances that are completed. (optional)</param>
        /// <param name="externallyTerminated">Restrict to instances that are externallyTerminated. (optional)</param>
        /// <param name="internallyTerminated">Restrict to instances that are internallyTerminated. (optional)</param>
        /// <param name="variables">Only include process instances that have/had variables with certain values. Variable filtering expressions are comma-separated and are structured as follows: A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value.  **Note:** Values are always treated as String objects on server side.  Valid operator values are: &#x60;eq&#x60; - equal to; &#x60;neq&#x60; - not equal to; &#x60;gt&#x60; - greater than; &#x60;gteq&#x60; - greater than or equal to; &#x60;lt&#x60; - lower than; &#x60;lteq&#x60; - lower than or equal to; &#x60;like&#x60;.  Key and value may not contain underscore or comma characters.  (optional)</param>
        /// <param name="variableNamesIgnoreCase">Match all variable names provided in variables case-insensitively. If set to &#x60;true&#x60; variableName and variablename are treated as equal. (optional)</param>
        /// <param name="variableValuesIgnoreCase">Match all variable values provided in variables case-insensitively. If set to &#x60;true&#x60; variableValue and variablevalue are treated as equal. (optional)</param>
        /// <returns>CountResultDto</returns>
        public CountResultDto GetHistoricProcessInstancesCount(string processInstanceId = default(string), string processInstanceIds = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string processDefinitionKeyIn = default(string), string processDefinitionName = default(string), string processDefinitionNameLike = default(string), string processDefinitionKeyNotIn = default(string), string processInstanceBusinessKey = default(string), string processInstanceBusinessKeyLike = default(string), bool? rootProcessInstances = default(bool?), bool? finished = default(bool?), bool? unfinished = default(bool?), bool? withIncidents = default(bool?), bool? withRootIncidents = default(bool?), string incidentType = default(string), string incidentStatus = default(string), string incidentMessage = default(string), string incidentMessageLike = default(string), DateTime? startedBefore = default(DateTime?), DateTime? startedAfter = default(DateTime?), DateTime? finishedBefore = default(DateTime?), DateTime? finishedAfter = default(DateTime?), DateTime? executedActivityAfter = default(DateTime?), DateTime? executedActivityBefore = default(DateTime?), DateTime? executedJobAfter = default(DateTime?), DateTime? executedJobBefore = default(DateTime?), string startedBy = default(string), string superProcessInstanceId = default(string), string subProcessInstanceId = default(string), string superCaseInstanceId = default(string), string subCaseInstanceId = default(string), string caseInstanceId = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), string executedActivityIdIn = default(string), string activeActivityIdIn = default(string), bool? active = default(bool?), bool? suspended = default(bool?), bool? completed = default(bool?), bool? externallyTerminated = default(bool?), bool? internallyTerminated = default(bool?), string variables = default(string), bool? variableNamesIgnoreCase = default(bool?), bool? variableValuesIgnoreCase = default(bool?))
        {
            CamundaClient.Client.ApiResponse<CountResultDto> localVarResponse = GetHistoricProcessInstancesCountWithHttpInfo(processInstanceId, processInstanceIds, processDefinitionId, processDefinitionKey, processDefinitionKeyIn, processDefinitionName, processDefinitionNameLike, processDefinitionKeyNotIn, processInstanceBusinessKey, processInstanceBusinessKeyLike, rootProcessInstances, finished, unfinished, withIncidents, withRootIncidents, incidentType, incidentStatus, incidentMessage, incidentMessageLike, startedBefore, startedAfter, finishedBefore, finishedAfter, executedActivityAfter, executedActivityBefore, executedJobAfter, executedJobBefore, startedBy, superProcessInstanceId, subProcessInstanceId, superCaseInstanceId, subCaseInstanceId, caseInstanceId, tenantIdIn, withoutTenantId, executedActivityIdIn, activeActivityIdIn, active, suspended, completed, externallyTerminated, internallyTerminated, variables, variableNamesIgnoreCase, variableValuesIgnoreCase);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get List Count Queries for the number of historic process instances that fulfill the given parameters. Takes the same parameters as the [Get Process Instances](https://docs.camunda.org/manual/7.14/reference/rest/history/process-instance/get-process-instance-query/) method.
        /// </summary>
        /// <exception cref="CamundaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processInstanceId">Filter by process instance id. (optional)</param>
        /// <param name="processInstanceIds">Filter by process instance ids. Filter by a comma-separated list of &#x60;Strings&#x60;. (optional)</param>
        /// <param name="processDefinitionId">Filter by the process definition the instances run on. (optional)</param>
        /// <param name="processDefinitionKey">Filter by the key of the process definition the instances run on. (optional)</param>
        /// <param name="processDefinitionKeyIn">Filter by a list of process definition keys. A process instance must have one of the given process definition keys. Filter by a comma-separated list of &#x60;Strings&#x60;. (optional)</param>
        /// <param name="processDefinitionName">Filter by the name of the process definition the instances run on. (optional)</param>
        /// <param name="processDefinitionNameLike">Filter by process definition names that the parameter is a substring of. (optional)</param>
        /// <param name="processDefinitionKeyNotIn">Exclude instances that belong to a set of process definitions. Filter by a comma-separated list of &#x60;Strings&#x60;. (optional)</param>
        /// <param name="processInstanceBusinessKey">Filter by process instance business key. (optional)</param>
        /// <param name="processInstanceBusinessKeyLike">Filter by process instance business key that the parameter is a substring of. (optional)</param>
        /// <param name="rootProcessInstances">Restrict the query to all process instances that are top level process instances. (optional)</param>
        /// <param name="finished">Only include finished process instances. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="unfinished">Only include unfinished process instances. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="withIncidents">Only include process instances which have an incident. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="withRootIncidents">Only include process instances which have a root incident. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="incidentType">Filter by the incident type. See the [User Guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)</param>
        /// <param name="incidentStatus">Only include process instances which have an incident in status either open or resolved. To get all process instances, use the query parameter withIncidents. (optional)</param>
        /// <param name="incidentMessage">Filter by the incident message. Exact match. (optional)</param>
        /// <param name="incidentMessageLike">Filter by the incident message that the parameter is a substring of. (optional)</param>
        /// <param name="startedBefore">Restrict to instances that were started before the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="startedAfter">Restrict to instances that were started after the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="finishedBefore">Restrict to instances that were finished before the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="finishedAfter">Restrict to instances that were finished after the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="executedActivityAfter">Restrict to instances that executed an activity after the given date (inclusive). By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="executedActivityBefore">Restrict to instances that executed an activity before the given date (inclusive). By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="executedJobAfter">Restrict to instances that executed an job after the given date (inclusive). By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="executedJobBefore">Restrict to instances that executed an job before the given date (inclusive). By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="startedBy">Only include process instances that were started by the given user. (optional)</param>
        /// <param name="superProcessInstanceId">Restrict query to all process instances that are sub process instances of the given process instance. Takes a process instance id. (optional)</param>
        /// <param name="subProcessInstanceId">Restrict query to one process instance that has a sub process instance with the given id. (optional)</param>
        /// <param name="superCaseInstanceId">Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id. (optional)</param>
        /// <param name="subCaseInstanceId">Restrict query to one process instance that has a sub case instance with the given id. (optional)</param>
        /// <param name="caseInstanceId">Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id. (optional)</param>
        /// <param name="tenantIdIn">Filter by a list of tenant ids. A process instance must have one of the given tenant ids. Filter by a comma-separated list of &#x60;Strings&#x60; (optional)</param>
        /// <param name="withoutTenantId">Only include historic process instances which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="executedActivityIdIn">Restrict to instances that executed an activity with one of given ids. Filter by a comma-separated list of &#x60;Strings&#x60; (optional)</param>
        /// <param name="activeActivityIdIn">Restrict to instances that have an active activity with one of given ids. Filter by a comma-separated list of &#x60;Strings&#x60; (optional)</param>
        /// <param name="active">Restrict to instances that are active. (optional)</param>
        /// <param name="suspended">Restrict to instances that are suspended. (optional)</param>
        /// <param name="completed">Restrict to instances that are completed. (optional)</param>
        /// <param name="externallyTerminated">Restrict to instances that are externallyTerminated. (optional)</param>
        /// <param name="internallyTerminated">Restrict to instances that are internallyTerminated. (optional)</param>
        /// <param name="variables">Only include process instances that have/had variables with certain values. Variable filtering expressions are comma-separated and are structured as follows: A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value.  **Note:** Values are always treated as String objects on server side.  Valid operator values are: &#x60;eq&#x60; - equal to; &#x60;neq&#x60; - not equal to; &#x60;gt&#x60; - greater than; &#x60;gteq&#x60; - greater than or equal to; &#x60;lt&#x60; - lower than; &#x60;lteq&#x60; - lower than or equal to; &#x60;like&#x60;.  Key and value may not contain underscore or comma characters.  (optional)</param>
        /// <param name="variableNamesIgnoreCase">Match all variable names provided in variables case-insensitively. If set to &#x60;true&#x60; variableName and variablename are treated as equal. (optional)</param>
        /// <param name="variableValuesIgnoreCase">Match all variable values provided in variables case-insensitively. If set to &#x60;true&#x60; variableValue and variablevalue are treated as equal. (optional)</param>
        /// <returns>ApiResponse of CountResultDto</returns>
        public CamundaClient.Client.ApiResponse<CountResultDto> GetHistoricProcessInstancesCountWithHttpInfo(string processInstanceId = default(string), string processInstanceIds = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string processDefinitionKeyIn = default(string), string processDefinitionName = default(string), string processDefinitionNameLike = default(string), string processDefinitionKeyNotIn = default(string), string processInstanceBusinessKey = default(string), string processInstanceBusinessKeyLike = default(string), bool? rootProcessInstances = default(bool?), bool? finished = default(bool?), bool? unfinished = default(bool?), bool? withIncidents = default(bool?), bool? withRootIncidents = default(bool?), string incidentType = default(string), string incidentStatus = default(string), string incidentMessage = default(string), string incidentMessageLike = default(string), DateTime? startedBefore = default(DateTime?), DateTime? startedAfter = default(DateTime?), DateTime? finishedBefore = default(DateTime?), DateTime? finishedAfter = default(DateTime?), DateTime? executedActivityAfter = default(DateTime?), DateTime? executedActivityBefore = default(DateTime?), DateTime? executedJobAfter = default(DateTime?), DateTime? executedJobBefore = default(DateTime?), string startedBy = default(string), string superProcessInstanceId = default(string), string subProcessInstanceId = default(string), string superCaseInstanceId = default(string), string subCaseInstanceId = default(string), string caseInstanceId = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), string executedActivityIdIn = default(string), string activeActivityIdIn = default(string), bool? active = default(bool?), bool? suspended = default(bool?), bool? completed = default(bool?), bool? externallyTerminated = default(bool?), bool? internallyTerminated = default(bool?), string variables = default(string), bool? variableNamesIgnoreCase = default(bool?), bool? variableValuesIgnoreCase = default(bool?))
        {
            CamundaClient.Client.RequestOptions localVarRequestOptions = new CamundaClient.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = CamundaClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = CamundaClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (processInstanceId != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "processInstanceId", processInstanceId));
            }
            if (processInstanceIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "processInstanceIds", processInstanceIds));
            }
            if (processDefinitionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "processDefinitionId", processDefinitionId));
            }
            if (processDefinitionKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "processDefinitionKey", processDefinitionKey));
            }
            if (processDefinitionKeyIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "processDefinitionKeyIn", processDefinitionKeyIn));
            }
            if (processDefinitionName != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "processDefinitionName", processDefinitionName));
            }
            if (processDefinitionNameLike != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "processDefinitionNameLike", processDefinitionNameLike));
            }
            if (processDefinitionKeyNotIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "processDefinitionKeyNotIn", processDefinitionKeyNotIn));
            }
            if (processInstanceBusinessKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "processInstanceBusinessKey", processInstanceBusinessKey));
            }
            if (processInstanceBusinessKeyLike != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "processInstanceBusinessKeyLike", processInstanceBusinessKeyLike));
            }
            if (rootProcessInstances != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "rootProcessInstances", rootProcessInstances));
            }
            if (finished != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "finished", finished));
            }
            if (unfinished != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "unfinished", unfinished));
            }
            if (withIncidents != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "withIncidents", withIncidents));
            }
            if (withRootIncidents != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "withRootIncidents", withRootIncidents));
            }
            if (incidentType != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "incidentType", incidentType));
            }
            if (incidentStatus != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "incidentStatus", incidentStatus));
            }
            if (incidentMessage != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "incidentMessage", incidentMessage));
            }
            if (incidentMessageLike != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "incidentMessageLike", incidentMessageLike));
            }
            if (startedBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "startedBefore", startedBefore));
            }
            if (startedAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "startedAfter", startedAfter));
            }
            if (finishedBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "finishedBefore", finishedBefore));
            }
            if (finishedAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "finishedAfter", finishedAfter));
            }
            if (executedActivityAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "executedActivityAfter", executedActivityAfter));
            }
            if (executedActivityBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "executedActivityBefore", executedActivityBefore));
            }
            if (executedJobAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "executedJobAfter", executedJobAfter));
            }
            if (executedJobBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "executedJobBefore", executedJobBefore));
            }
            if (startedBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "startedBy", startedBy));
            }
            if (superProcessInstanceId != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "superProcessInstanceId", superProcessInstanceId));
            }
            if (subProcessInstanceId != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "subProcessInstanceId", subProcessInstanceId));
            }
            if (superCaseInstanceId != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "superCaseInstanceId", superCaseInstanceId));
            }
            if (subCaseInstanceId != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "subCaseInstanceId", subCaseInstanceId));
            }
            if (caseInstanceId != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "caseInstanceId", caseInstanceId));
            }
            if (tenantIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "tenantIdIn", tenantIdIn));
            }
            if (withoutTenantId != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "withoutTenantId", withoutTenantId));
            }
            if (executedActivityIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "executedActivityIdIn", executedActivityIdIn));
            }
            if (activeActivityIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "activeActivityIdIn", activeActivityIdIn));
            }
            if (active != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "active", active));
            }
            if (suspended != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "suspended", suspended));
            }
            if (completed != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "completed", completed));
            }
            if (externallyTerminated != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "externallyTerminated", externallyTerminated));
            }
            if (internallyTerminated != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "internallyTerminated", internallyTerminated));
            }
            if (variables != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "variables", variables));
            }
            if (variableNamesIgnoreCase != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "variableNamesIgnoreCase", variableNamesIgnoreCase));
            }
            if (variableValuesIgnoreCase != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "variableValuesIgnoreCase", variableValuesIgnoreCase));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<CountResultDto>("/history/process-instance/count", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetHistoricProcessInstancesCount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get List Count Queries for the number of historic process instances that fulfill the given parameters. Takes the same parameters as the [Get Process Instances](https://docs.camunda.org/manual/7.14/reference/rest/history/process-instance/get-process-instance-query/) method.
        /// </summary>
        /// <exception cref="CamundaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processInstanceId">Filter by process instance id. (optional)</param>
        /// <param name="processInstanceIds">Filter by process instance ids. Filter by a comma-separated list of &#x60;Strings&#x60;. (optional)</param>
        /// <param name="processDefinitionId">Filter by the process definition the instances run on. (optional)</param>
        /// <param name="processDefinitionKey">Filter by the key of the process definition the instances run on. (optional)</param>
        /// <param name="processDefinitionKeyIn">Filter by a list of process definition keys. A process instance must have one of the given process definition keys. Filter by a comma-separated list of &#x60;Strings&#x60;. (optional)</param>
        /// <param name="processDefinitionName">Filter by the name of the process definition the instances run on. (optional)</param>
        /// <param name="processDefinitionNameLike">Filter by process definition names that the parameter is a substring of. (optional)</param>
        /// <param name="processDefinitionKeyNotIn">Exclude instances that belong to a set of process definitions. Filter by a comma-separated list of &#x60;Strings&#x60;. (optional)</param>
        /// <param name="processInstanceBusinessKey">Filter by process instance business key. (optional)</param>
        /// <param name="processInstanceBusinessKeyLike">Filter by process instance business key that the parameter is a substring of. (optional)</param>
        /// <param name="rootProcessInstances">Restrict the query to all process instances that are top level process instances. (optional)</param>
        /// <param name="finished">Only include finished process instances. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="unfinished">Only include unfinished process instances. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="withIncidents">Only include process instances which have an incident. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="withRootIncidents">Only include process instances which have a root incident. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="incidentType">Filter by the incident type. See the [User Guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)</param>
        /// <param name="incidentStatus">Only include process instances which have an incident in status either open or resolved. To get all process instances, use the query parameter withIncidents. (optional)</param>
        /// <param name="incidentMessage">Filter by the incident message. Exact match. (optional)</param>
        /// <param name="incidentMessageLike">Filter by the incident message that the parameter is a substring of. (optional)</param>
        /// <param name="startedBefore">Restrict to instances that were started before the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="startedAfter">Restrict to instances that were started after the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="finishedBefore">Restrict to instances that were finished before the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="finishedAfter">Restrict to instances that were finished after the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="executedActivityAfter">Restrict to instances that executed an activity after the given date (inclusive). By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="executedActivityBefore">Restrict to instances that executed an activity before the given date (inclusive). By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="executedJobAfter">Restrict to instances that executed an job after the given date (inclusive). By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="executedJobBefore">Restrict to instances that executed an job before the given date (inclusive). By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="startedBy">Only include process instances that were started by the given user. (optional)</param>
        /// <param name="superProcessInstanceId">Restrict query to all process instances that are sub process instances of the given process instance. Takes a process instance id. (optional)</param>
        /// <param name="subProcessInstanceId">Restrict query to one process instance that has a sub process instance with the given id. (optional)</param>
        /// <param name="superCaseInstanceId">Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id. (optional)</param>
        /// <param name="subCaseInstanceId">Restrict query to one process instance that has a sub case instance with the given id. (optional)</param>
        /// <param name="caseInstanceId">Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id. (optional)</param>
        /// <param name="tenantIdIn">Filter by a list of tenant ids. A process instance must have one of the given tenant ids. Filter by a comma-separated list of &#x60;Strings&#x60; (optional)</param>
        /// <param name="withoutTenantId">Only include historic process instances which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="executedActivityIdIn">Restrict to instances that executed an activity with one of given ids. Filter by a comma-separated list of &#x60;Strings&#x60; (optional)</param>
        /// <param name="activeActivityIdIn">Restrict to instances that have an active activity with one of given ids. Filter by a comma-separated list of &#x60;Strings&#x60; (optional)</param>
        /// <param name="active">Restrict to instances that are active. (optional)</param>
        /// <param name="suspended">Restrict to instances that are suspended. (optional)</param>
        /// <param name="completed">Restrict to instances that are completed. (optional)</param>
        /// <param name="externallyTerminated">Restrict to instances that are externallyTerminated. (optional)</param>
        /// <param name="internallyTerminated">Restrict to instances that are internallyTerminated. (optional)</param>
        /// <param name="variables">Only include process instances that have/had variables with certain values. Variable filtering expressions are comma-separated and are structured as follows: A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value.  **Note:** Values are always treated as String objects on server side.  Valid operator values are: &#x60;eq&#x60; - equal to; &#x60;neq&#x60; - not equal to; &#x60;gt&#x60; - greater than; &#x60;gteq&#x60; - greater than or equal to; &#x60;lt&#x60; - lower than; &#x60;lteq&#x60; - lower than or equal to; &#x60;like&#x60;.  Key and value may not contain underscore or comma characters.  (optional)</param>
        /// <param name="variableNamesIgnoreCase">Match all variable names provided in variables case-insensitively. If set to &#x60;true&#x60; variableName and variablename are treated as equal. (optional)</param>
        /// <param name="variableValuesIgnoreCase">Match all variable values provided in variables case-insensitively. If set to &#x60;true&#x60; variableValue and variablevalue are treated as equal. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CountResultDto</returns>
        public async System.Threading.Tasks.Task<CountResultDto> GetHistoricProcessInstancesCountAsync(string processInstanceId = default(string), string processInstanceIds = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string processDefinitionKeyIn = default(string), string processDefinitionName = default(string), string processDefinitionNameLike = default(string), string processDefinitionKeyNotIn = default(string), string processInstanceBusinessKey = default(string), string processInstanceBusinessKeyLike = default(string), bool? rootProcessInstances = default(bool?), bool? finished = default(bool?), bool? unfinished = default(bool?), bool? withIncidents = default(bool?), bool? withRootIncidents = default(bool?), string incidentType = default(string), string incidentStatus = default(string), string incidentMessage = default(string), string incidentMessageLike = default(string), DateTime? startedBefore = default(DateTime?), DateTime? startedAfter = default(DateTime?), DateTime? finishedBefore = default(DateTime?), DateTime? finishedAfter = default(DateTime?), DateTime? executedActivityAfter = default(DateTime?), DateTime? executedActivityBefore = default(DateTime?), DateTime? executedJobAfter = default(DateTime?), DateTime? executedJobBefore = default(DateTime?), string startedBy = default(string), string superProcessInstanceId = default(string), string subProcessInstanceId = default(string), string superCaseInstanceId = default(string), string subCaseInstanceId = default(string), string caseInstanceId = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), string executedActivityIdIn = default(string), string activeActivityIdIn = default(string), bool? active = default(bool?), bool? suspended = default(bool?), bool? completed = default(bool?), bool? externallyTerminated = default(bool?), bool? internallyTerminated = default(bool?), string variables = default(string), bool? variableNamesIgnoreCase = default(bool?), bool? variableValuesIgnoreCase = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            CamundaClient.Client.ApiResponse<CountResultDto> localVarResponse = await GetHistoricProcessInstancesCountWithHttpInfoAsync(processInstanceId, processInstanceIds, processDefinitionId, processDefinitionKey, processDefinitionKeyIn, processDefinitionName, processDefinitionNameLike, processDefinitionKeyNotIn, processInstanceBusinessKey, processInstanceBusinessKeyLike, rootProcessInstances, finished, unfinished, withIncidents, withRootIncidents, incidentType, incidentStatus, incidentMessage, incidentMessageLike, startedBefore, startedAfter, finishedBefore, finishedAfter, executedActivityAfter, executedActivityBefore, executedJobAfter, executedJobBefore, startedBy, superProcessInstanceId, subProcessInstanceId, superCaseInstanceId, subCaseInstanceId, caseInstanceId, tenantIdIn, withoutTenantId, executedActivityIdIn, activeActivityIdIn, active, suspended, completed, externallyTerminated, internallyTerminated, variables, variableNamesIgnoreCase, variableValuesIgnoreCase, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get List Count Queries for the number of historic process instances that fulfill the given parameters. Takes the same parameters as the [Get Process Instances](https://docs.camunda.org/manual/7.14/reference/rest/history/process-instance/get-process-instance-query/) method.
        /// </summary>
        /// <exception cref="CamundaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processInstanceId">Filter by process instance id. (optional)</param>
        /// <param name="processInstanceIds">Filter by process instance ids. Filter by a comma-separated list of &#x60;Strings&#x60;. (optional)</param>
        /// <param name="processDefinitionId">Filter by the process definition the instances run on. (optional)</param>
        /// <param name="processDefinitionKey">Filter by the key of the process definition the instances run on. (optional)</param>
        /// <param name="processDefinitionKeyIn">Filter by a list of process definition keys. A process instance must have one of the given process definition keys. Filter by a comma-separated list of &#x60;Strings&#x60;. (optional)</param>
        /// <param name="processDefinitionName">Filter by the name of the process definition the instances run on. (optional)</param>
        /// <param name="processDefinitionNameLike">Filter by process definition names that the parameter is a substring of. (optional)</param>
        /// <param name="processDefinitionKeyNotIn">Exclude instances that belong to a set of process definitions. Filter by a comma-separated list of &#x60;Strings&#x60;. (optional)</param>
        /// <param name="processInstanceBusinessKey">Filter by process instance business key. (optional)</param>
        /// <param name="processInstanceBusinessKeyLike">Filter by process instance business key that the parameter is a substring of. (optional)</param>
        /// <param name="rootProcessInstances">Restrict the query to all process instances that are top level process instances. (optional)</param>
        /// <param name="finished">Only include finished process instances. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="unfinished">Only include unfinished process instances. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="withIncidents">Only include process instances which have an incident. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="withRootIncidents">Only include process instances which have a root incident. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="incidentType">Filter by the incident type. See the [User Guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)</param>
        /// <param name="incidentStatus">Only include process instances which have an incident in status either open or resolved. To get all process instances, use the query parameter withIncidents. (optional)</param>
        /// <param name="incidentMessage">Filter by the incident message. Exact match. (optional)</param>
        /// <param name="incidentMessageLike">Filter by the incident message that the parameter is a substring of. (optional)</param>
        /// <param name="startedBefore">Restrict to instances that were started before the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="startedAfter">Restrict to instances that were started after the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="finishedBefore">Restrict to instances that were finished before the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="finishedAfter">Restrict to instances that were finished after the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="executedActivityAfter">Restrict to instances that executed an activity after the given date (inclusive). By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="executedActivityBefore">Restrict to instances that executed an activity before the given date (inclusive). By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="executedJobAfter">Restrict to instances that executed an job after the given date (inclusive). By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="executedJobBefore">Restrict to instances that executed an job before the given date (inclusive). By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="startedBy">Only include process instances that were started by the given user. (optional)</param>
        /// <param name="superProcessInstanceId">Restrict query to all process instances that are sub process instances of the given process instance. Takes a process instance id. (optional)</param>
        /// <param name="subProcessInstanceId">Restrict query to one process instance that has a sub process instance with the given id. (optional)</param>
        /// <param name="superCaseInstanceId">Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id. (optional)</param>
        /// <param name="subCaseInstanceId">Restrict query to one process instance that has a sub case instance with the given id. (optional)</param>
        /// <param name="caseInstanceId">Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id. (optional)</param>
        /// <param name="tenantIdIn">Filter by a list of tenant ids. A process instance must have one of the given tenant ids. Filter by a comma-separated list of &#x60;Strings&#x60; (optional)</param>
        /// <param name="withoutTenantId">Only include historic process instances which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="executedActivityIdIn">Restrict to instances that executed an activity with one of given ids. Filter by a comma-separated list of &#x60;Strings&#x60; (optional)</param>
        /// <param name="activeActivityIdIn">Restrict to instances that have an active activity with one of given ids. Filter by a comma-separated list of &#x60;Strings&#x60; (optional)</param>
        /// <param name="active">Restrict to instances that are active. (optional)</param>
        /// <param name="suspended">Restrict to instances that are suspended. (optional)</param>
        /// <param name="completed">Restrict to instances that are completed. (optional)</param>
        /// <param name="externallyTerminated">Restrict to instances that are externallyTerminated. (optional)</param>
        /// <param name="internallyTerminated">Restrict to instances that are internallyTerminated. (optional)</param>
        /// <param name="variables">Only include process instances that have/had variables with certain values. Variable filtering expressions are comma-separated and are structured as follows: A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value.  **Note:** Values are always treated as String objects on server side.  Valid operator values are: &#x60;eq&#x60; - equal to; &#x60;neq&#x60; - not equal to; &#x60;gt&#x60; - greater than; &#x60;gteq&#x60; - greater than or equal to; &#x60;lt&#x60; - lower than; &#x60;lteq&#x60; - lower than or equal to; &#x60;like&#x60;.  Key and value may not contain underscore or comma characters.  (optional)</param>
        /// <param name="variableNamesIgnoreCase">Match all variable names provided in variables case-insensitively. If set to &#x60;true&#x60; variableName and variablename are treated as equal. (optional)</param>
        /// <param name="variableValuesIgnoreCase">Match all variable values provided in variables case-insensitively. If set to &#x60;true&#x60; variableValue and variablevalue are treated as equal. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CountResultDto)</returns>
        public async System.Threading.Tasks.Task<CamundaClient.Client.ApiResponse<CountResultDto>> GetHistoricProcessInstancesCountWithHttpInfoAsync(string processInstanceId = default(string), string processInstanceIds = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string processDefinitionKeyIn = default(string), string processDefinitionName = default(string), string processDefinitionNameLike = default(string), string processDefinitionKeyNotIn = default(string), string processInstanceBusinessKey = default(string), string processInstanceBusinessKeyLike = default(string), bool? rootProcessInstances = default(bool?), bool? finished = default(bool?), bool? unfinished = default(bool?), bool? withIncidents = default(bool?), bool? withRootIncidents = default(bool?), string incidentType = default(string), string incidentStatus = default(string), string incidentMessage = default(string), string incidentMessageLike = default(string), DateTime? startedBefore = default(DateTime?), DateTime? startedAfter = default(DateTime?), DateTime? finishedBefore = default(DateTime?), DateTime? finishedAfter = default(DateTime?), DateTime? executedActivityAfter = default(DateTime?), DateTime? executedActivityBefore = default(DateTime?), DateTime? executedJobAfter = default(DateTime?), DateTime? executedJobBefore = default(DateTime?), string startedBy = default(string), string superProcessInstanceId = default(string), string subProcessInstanceId = default(string), string superCaseInstanceId = default(string), string subCaseInstanceId = default(string), string caseInstanceId = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), string executedActivityIdIn = default(string), string activeActivityIdIn = default(string), bool? active = default(bool?), bool? suspended = default(bool?), bool? completed = default(bool?), bool? externallyTerminated = default(bool?), bool? internallyTerminated = default(bool?), string variables = default(string), bool? variableNamesIgnoreCase = default(bool?), bool? variableValuesIgnoreCase = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            CamundaClient.Client.RequestOptions localVarRequestOptions = new CamundaClient.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = CamundaClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = CamundaClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (processInstanceId != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "processInstanceId", processInstanceId));
            }
            if (processInstanceIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "processInstanceIds", processInstanceIds));
            }
            if (processDefinitionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "processDefinitionId", processDefinitionId));
            }
            if (processDefinitionKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "processDefinitionKey", processDefinitionKey));
            }
            if (processDefinitionKeyIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "processDefinitionKeyIn", processDefinitionKeyIn));
            }
            if (processDefinitionName != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "processDefinitionName", processDefinitionName));
            }
            if (processDefinitionNameLike != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "processDefinitionNameLike", processDefinitionNameLike));
            }
            if (processDefinitionKeyNotIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "processDefinitionKeyNotIn", processDefinitionKeyNotIn));
            }
            if (processInstanceBusinessKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "processInstanceBusinessKey", processInstanceBusinessKey));
            }
            if (processInstanceBusinessKeyLike != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "processInstanceBusinessKeyLike", processInstanceBusinessKeyLike));
            }
            if (rootProcessInstances != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "rootProcessInstances", rootProcessInstances));
            }
            if (finished != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "finished", finished));
            }
            if (unfinished != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "unfinished", unfinished));
            }
            if (withIncidents != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "withIncidents", withIncidents));
            }
            if (withRootIncidents != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "withRootIncidents", withRootIncidents));
            }
            if (incidentType != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "incidentType", incidentType));
            }
            if (incidentStatus != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "incidentStatus", incidentStatus));
            }
            if (incidentMessage != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "incidentMessage", incidentMessage));
            }
            if (incidentMessageLike != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "incidentMessageLike", incidentMessageLike));
            }
            if (startedBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "startedBefore", startedBefore));
            }
            if (startedAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "startedAfter", startedAfter));
            }
            if (finishedBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "finishedBefore", finishedBefore));
            }
            if (finishedAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "finishedAfter", finishedAfter));
            }
            if (executedActivityAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "executedActivityAfter", executedActivityAfter));
            }
            if (executedActivityBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "executedActivityBefore", executedActivityBefore));
            }
            if (executedJobAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "executedJobAfter", executedJobAfter));
            }
            if (executedJobBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "executedJobBefore", executedJobBefore));
            }
            if (startedBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "startedBy", startedBy));
            }
            if (superProcessInstanceId != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "superProcessInstanceId", superProcessInstanceId));
            }
            if (subProcessInstanceId != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "subProcessInstanceId", subProcessInstanceId));
            }
            if (superCaseInstanceId != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "superCaseInstanceId", superCaseInstanceId));
            }
            if (subCaseInstanceId != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "subCaseInstanceId", subCaseInstanceId));
            }
            if (caseInstanceId != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "caseInstanceId", caseInstanceId));
            }
            if (tenantIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "tenantIdIn", tenantIdIn));
            }
            if (withoutTenantId != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "withoutTenantId", withoutTenantId));
            }
            if (executedActivityIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "executedActivityIdIn", executedActivityIdIn));
            }
            if (activeActivityIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "activeActivityIdIn", activeActivityIdIn));
            }
            if (active != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "active", active));
            }
            if (suspended != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "suspended", suspended));
            }
            if (completed != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "completed", completed));
            }
            if (externallyTerminated != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "externallyTerminated", externallyTerminated));
            }
            if (internallyTerminated != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "internallyTerminated", internallyTerminated));
            }
            if (variables != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "variables", variables));
            }
            if (variableNamesIgnoreCase != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "variableNamesIgnoreCase", variableNamesIgnoreCase));
            }
            if (variableValuesIgnoreCase != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "variableValuesIgnoreCase", variableValuesIgnoreCase));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<CountResultDto>("/history/process-instance/count", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetHistoricProcessInstancesCount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get List (POST) Queries for historic process instances that fulfill the given parameters. This method is slightly more powerful than the [Get Process Instance](https://docs.camunda.org/manual/7.14/reference/rest/history/process-instance/get-process-instance-query/) because it allows filtering by multiple process variables of types &#x60;String&#x60;, &#x60;Number&#x60; or &#x60;Boolean&#x60;.
        /// </summary>
        /// <exception cref="CamundaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="historicProcessInstanceQueryDto"> (optional)</param>
        /// <returns>List&lt;HistoricProcessInstanceDto&gt;</returns>
        public List<HistoricProcessInstanceDto> QueryHistoricProcessInstances(int? firstResult = default(int?), int? maxResults = default(int?), HistoricProcessInstanceQueryDto historicProcessInstanceQueryDto = default(HistoricProcessInstanceQueryDto))
        {
            CamundaClient.Client.ApiResponse<List<HistoricProcessInstanceDto>> localVarResponse = QueryHistoricProcessInstancesWithHttpInfo(firstResult, maxResults, historicProcessInstanceQueryDto);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get List (POST) Queries for historic process instances that fulfill the given parameters. This method is slightly more powerful than the [Get Process Instance](https://docs.camunda.org/manual/7.14/reference/rest/history/process-instance/get-process-instance-query/) because it allows filtering by multiple process variables of types &#x60;String&#x60;, &#x60;Number&#x60; or &#x60;Boolean&#x60;.
        /// </summary>
        /// <exception cref="CamundaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="historicProcessInstanceQueryDto"> (optional)</param>
        /// <returns>ApiResponse of List&lt;HistoricProcessInstanceDto&gt;</returns>
        public CamundaClient.Client.ApiResponse<List<HistoricProcessInstanceDto>> QueryHistoricProcessInstancesWithHttpInfo(int? firstResult = default(int?), int? maxResults = default(int?), HistoricProcessInstanceQueryDto historicProcessInstanceQueryDto = default(HistoricProcessInstanceQueryDto))
        {
            CamundaClient.Client.RequestOptions localVarRequestOptions = new CamundaClient.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = CamundaClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = CamundaClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (firstResult != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "firstResult", firstResult));
            }
            if (maxResults != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "maxResults", maxResults));
            }
            localVarRequestOptions.Data = historicProcessInstanceQueryDto;


            // make the HTTP request
            var localVarResponse = this.Client.Post<List<HistoricProcessInstanceDto>>("/history/process-instance", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QueryHistoricProcessInstances", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get List (POST) Queries for historic process instances that fulfill the given parameters. This method is slightly more powerful than the [Get Process Instance](https://docs.camunda.org/manual/7.14/reference/rest/history/process-instance/get-process-instance-query/) because it allows filtering by multiple process variables of types &#x60;String&#x60;, &#x60;Number&#x60; or &#x60;Boolean&#x60;.
        /// </summary>
        /// <exception cref="CamundaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="historicProcessInstanceQueryDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;HistoricProcessInstanceDto&gt;</returns>
        public async System.Threading.Tasks.Task<List<HistoricProcessInstanceDto>> QueryHistoricProcessInstancesAsync(int? firstResult = default(int?), int? maxResults = default(int?), HistoricProcessInstanceQueryDto historicProcessInstanceQueryDto = default(HistoricProcessInstanceQueryDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            CamundaClient.Client.ApiResponse<List<HistoricProcessInstanceDto>> localVarResponse = await QueryHistoricProcessInstancesWithHttpInfoAsync(firstResult, maxResults, historicProcessInstanceQueryDto, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get List (POST) Queries for historic process instances that fulfill the given parameters. This method is slightly more powerful than the [Get Process Instance](https://docs.camunda.org/manual/7.14/reference/rest/history/process-instance/get-process-instance-query/) because it allows filtering by multiple process variables of types &#x60;String&#x60;, &#x60;Number&#x60; or &#x60;Boolean&#x60;.
        /// </summary>
        /// <exception cref="CamundaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="historicProcessInstanceQueryDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;HistoricProcessInstanceDto&gt;)</returns>
        public async System.Threading.Tasks.Task<CamundaClient.Client.ApiResponse<List<HistoricProcessInstanceDto>>> QueryHistoricProcessInstancesWithHttpInfoAsync(int? firstResult = default(int?), int? maxResults = default(int?), HistoricProcessInstanceQueryDto historicProcessInstanceQueryDto = default(HistoricProcessInstanceQueryDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            CamundaClient.Client.RequestOptions localVarRequestOptions = new CamundaClient.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = CamundaClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = CamundaClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (firstResult != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "firstResult", firstResult));
            }
            if (maxResults != null)
            {
                localVarRequestOptions.QueryParameters.Add(CamundaClient.Client.ClientUtils.ParameterToMultiMap("", "maxResults", maxResults));
            }
            localVarRequestOptions.Data = historicProcessInstanceQueryDto;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<List<HistoricProcessInstanceDto>>("/history/process-instance", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QueryHistoricProcessInstances", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get List Count (POST) Queries for the number of historic process instances that fulfill the given parameters. This method takes the same message body as the [Get Process Instances (POST)](https://docs.camunda.org/manual/7.14/reference/rest/history/process-instance/get-process-instance-query/) method and therefore it is slightly more powerful than the [Get Process Instance Count](https://docs.camunda.org/manual/7.14/reference/rest/history/process-instance/post-process-instance-query-count/) method.
        /// </summary>
        /// <exception cref="CamundaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="historicProcessInstanceQueryDto"> (optional)</param>
        /// <returns>CountResultDto</returns>
        public CountResultDto QueryHistoricProcessInstancesCount(HistoricProcessInstanceQueryDto historicProcessInstanceQueryDto = default(HistoricProcessInstanceQueryDto))
        {
            CamundaClient.Client.ApiResponse<CountResultDto> localVarResponse = QueryHistoricProcessInstancesCountWithHttpInfo(historicProcessInstanceQueryDto);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get List Count (POST) Queries for the number of historic process instances that fulfill the given parameters. This method takes the same message body as the [Get Process Instances (POST)](https://docs.camunda.org/manual/7.14/reference/rest/history/process-instance/get-process-instance-query/) method and therefore it is slightly more powerful than the [Get Process Instance Count](https://docs.camunda.org/manual/7.14/reference/rest/history/process-instance/post-process-instance-query-count/) method.
        /// </summary>
        /// <exception cref="CamundaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="historicProcessInstanceQueryDto"> (optional)</param>
        /// <returns>ApiResponse of CountResultDto</returns>
        public CamundaClient.Client.ApiResponse<CountResultDto> QueryHistoricProcessInstancesCountWithHttpInfo(HistoricProcessInstanceQueryDto historicProcessInstanceQueryDto = default(HistoricProcessInstanceQueryDto))
        {
            CamundaClient.Client.RequestOptions localVarRequestOptions = new CamundaClient.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = CamundaClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = CamundaClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = historicProcessInstanceQueryDto;


            // make the HTTP request
            var localVarResponse = this.Client.Post<CountResultDto>("/history/process-instance/count", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QueryHistoricProcessInstancesCount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get List Count (POST) Queries for the number of historic process instances that fulfill the given parameters. This method takes the same message body as the [Get Process Instances (POST)](https://docs.camunda.org/manual/7.14/reference/rest/history/process-instance/get-process-instance-query/) method and therefore it is slightly more powerful than the [Get Process Instance Count](https://docs.camunda.org/manual/7.14/reference/rest/history/process-instance/post-process-instance-query-count/) method.
        /// </summary>
        /// <exception cref="CamundaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="historicProcessInstanceQueryDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CountResultDto</returns>
        public async System.Threading.Tasks.Task<CountResultDto> QueryHistoricProcessInstancesCountAsync(HistoricProcessInstanceQueryDto historicProcessInstanceQueryDto = default(HistoricProcessInstanceQueryDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            CamundaClient.Client.ApiResponse<CountResultDto> localVarResponse = await QueryHistoricProcessInstancesCountWithHttpInfoAsync(historicProcessInstanceQueryDto, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get List Count (POST) Queries for the number of historic process instances that fulfill the given parameters. This method takes the same message body as the [Get Process Instances (POST)](https://docs.camunda.org/manual/7.14/reference/rest/history/process-instance/get-process-instance-query/) method and therefore it is slightly more powerful than the [Get Process Instance Count](https://docs.camunda.org/manual/7.14/reference/rest/history/process-instance/post-process-instance-query-count/) method.
        /// </summary>
        /// <exception cref="CamundaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="historicProcessInstanceQueryDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CountResultDto)</returns>
        public async System.Threading.Tasks.Task<CamundaClient.Client.ApiResponse<CountResultDto>> QueryHistoricProcessInstancesCountWithHttpInfoAsync(HistoricProcessInstanceQueryDto historicProcessInstanceQueryDto = default(HistoricProcessInstanceQueryDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            CamundaClient.Client.RequestOptions localVarRequestOptions = new CamundaClient.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = CamundaClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = CamundaClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = historicProcessInstanceQueryDto;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<CountResultDto>("/history/process-instance/count", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QueryHistoricProcessInstancesCount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set Removal Time Async (POST) Sets the removal time to multiple historic process instances asynchronously (batch).  At least &#x60;historicProcessInstanceIds&#x60; or &#x60;historicProcessInstanceQuery&#x60; has to be provided. If both are provided, all instances matching query criterion and instances from the list will be updated with a removal time.
        /// </summary>
        /// <exception cref="CamundaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setRemovalTimeToHistoricProcessInstancesDto"> (optional)</param>
        /// <returns>BatchDto</returns>
        public BatchDto SetRemovalTimeAsync(SetRemovalTimeToHistoricProcessInstancesDto setRemovalTimeToHistoricProcessInstancesDto = default(SetRemovalTimeToHistoricProcessInstancesDto))
        {
            CamundaClient.Client.ApiResponse<BatchDto> localVarResponse = SetRemovalTimeAsyncWithHttpInfo(setRemovalTimeToHistoricProcessInstancesDto);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Set Removal Time Async (POST) Sets the removal time to multiple historic process instances asynchronously (batch).  At least &#x60;historicProcessInstanceIds&#x60; or &#x60;historicProcessInstanceQuery&#x60; has to be provided. If both are provided, all instances matching query criterion and instances from the list will be updated with a removal time.
        /// </summary>
        /// <exception cref="CamundaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setRemovalTimeToHistoricProcessInstancesDto"> (optional)</param>
        /// <returns>ApiResponse of BatchDto</returns>
        public CamundaClient.Client.ApiResponse<BatchDto> SetRemovalTimeAsyncWithHttpInfo(SetRemovalTimeToHistoricProcessInstancesDto setRemovalTimeToHistoricProcessInstancesDto = default(SetRemovalTimeToHistoricProcessInstancesDto))
        {
            CamundaClient.Client.RequestOptions localVarRequestOptions = new CamundaClient.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = CamundaClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = CamundaClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = setRemovalTimeToHistoricProcessInstancesDto;


            // make the HTTP request
            var localVarResponse = this.Client.Post<BatchDto>("/history/process-instance/set-removal-time", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetRemovalTimeAsync", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set Removal Time Async (POST) Sets the removal time to multiple historic process instances asynchronously (batch).  At least &#x60;historicProcessInstanceIds&#x60; or &#x60;historicProcessInstanceQuery&#x60; has to be provided. If both are provided, all instances matching query criterion and instances from the list will be updated with a removal time.
        /// </summary>
        /// <exception cref="CamundaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setRemovalTimeToHistoricProcessInstancesDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchDto</returns>
        public async System.Threading.Tasks.Task<BatchDto> SetRemovalTimeAsyncAsync(SetRemovalTimeToHistoricProcessInstancesDto setRemovalTimeToHistoricProcessInstancesDto = default(SetRemovalTimeToHistoricProcessInstancesDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            CamundaClient.Client.ApiResponse<BatchDto> localVarResponse = await SetRemovalTimeAsyncWithHttpInfoAsync(setRemovalTimeToHistoricProcessInstancesDto, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Set Removal Time Async (POST) Sets the removal time to multiple historic process instances asynchronously (batch).  At least &#x60;historicProcessInstanceIds&#x60; or &#x60;historicProcessInstanceQuery&#x60; has to be provided. If both are provided, all instances matching query criterion and instances from the list will be updated with a removal time.
        /// </summary>
        /// <exception cref="CamundaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setRemovalTimeToHistoricProcessInstancesDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchDto)</returns>
        public async System.Threading.Tasks.Task<CamundaClient.Client.ApiResponse<BatchDto>> SetRemovalTimeAsyncWithHttpInfoAsync(SetRemovalTimeToHistoricProcessInstancesDto setRemovalTimeToHistoricProcessInstancesDto = default(SetRemovalTimeToHistoricProcessInstancesDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            CamundaClient.Client.RequestOptions localVarRequestOptions = new CamundaClient.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = CamundaClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = CamundaClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = setRemovalTimeToHistoricProcessInstancesDto;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<BatchDto>("/history/process-instance/set-removal-time", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetRemovalTimeAsync", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
